{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Safeguard Core API",
    "version" : "v4"
  },
  "servers" : [ {
    "url" : "/service/core"
  } ],
  "security" : [ {
    "oauth2" : [ ]
  }, {
    "BearerAuth" : [ ]
  } ],
  "paths" : {
    "/v4/A2ARegistrations" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Gets a list of registrations",
        "operationId" : "A2ARegistrations_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Registration"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Registration"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Creates a new registration",
        "operationId" : "A2ARegistrations_CreateEntityAsync",
        "requestBody" : {
          "description" : "Registration to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Registration"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registration"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registration"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/A2ARegistrations/{id}" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Gets a registration",
        "operationId" : "A2ARegistrations_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registration"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registration"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Registration not found"
          }
        }
      },
      "put" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Updates an existing application registration",
        "operationId" : "A2ARegistrations_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Registration",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Registration"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registration"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Registration"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - The entity's key value does not match the resource URI.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Registration not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Remove an application registration",
        "operationId" : "A2ARegistrations_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/A2ARegistrations/{id}/AccessRequestBroker/ApiKey" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Get the API key for the access request broker for the registration",
        "operationId" : "A2ARegistrations_GetRegistrationAccessRequestBrokerApiKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Regenerate the API key for the access request broker for the registration",
        "operationId" : "A2ARegistrations_RegenerateRegistrationAccessRequestBrokerApiKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/A2ARegistrations/{id}/AccessRequestBroker" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Get the access request broker information for the registration",
        "operationId" : "A2ARegistrations_GetRegistrationAccessRequestBrokerAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationAccessRequestBroker"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationAccessRequestBroker"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Update the access request broker information for the registration",
        "operationId" : "A2ARegistrations_UpdateRegistrationAccessRequestBrokerAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Registration access request broker information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistrationAccessRequestBroker"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationAccessRequestBroker"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationAccessRequestBroker"
                }
              }
            }
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "60245 - Missing request body.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Remove the access request broker information for the registration",
        "operationId" : "A2ARegistrations_RemoveRegistrationAccessRequestBrokerAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}/ApiKey" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Get the API key for a retrievable account for the registration",
        "operationId" : "A2ARegistrations_GetRegistrationRetrievableAccountApiKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique identifier of the retrievable account that is associated with the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Regenerate the API key for a retrievable account for the registration",
        "operationId" : "A2ARegistrations_RegenerateRegistrationRetrievableAccountApiKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique identifier of the retrievable account that is associated with the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Get a retrievable account for the registration",
        "operationId" : "A2ARegistrations_GetRegistrationRetrievableAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique identifier of the retrievable account that is associated with the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Update a retrievable account for the registration",
        "operationId" : "A2ARegistrations_PutRegistrationRetrievableAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique identifier of the retrievable account that is associated with the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated retrievable account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - The entity's key value does not match the resource URI.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Remove the access request broker information for the registration",
        "operationId" : "A2ARegistrations_DeleteRegistrationRetrievableAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique identifier of the retrievable account that is associated with the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/A2ARegistrations/{id}/RetrievableAccounts" : {
      "get" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Get the retrievable accounts for the registration",
        "operationId" : "A2ARegistrations_GetRegistrationRetrievableAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "A2ARegistrations" ],
        "summary" : "Add a retrievable account for the registration",
        "operationId" : "A2ARegistrations_PostRegistrationRetrievableAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the registration",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated retrievable account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RegistrationRetrievableAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - The entity's key value does not match the resource URI."
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AccessPolicies" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets a list of access policies",
        "operationId" : "AccessPolicies_GetAccessPoliciesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Creates a new access policy",
        "operationId" : "AccessPolicies_CreateAccessPolicyAsync",
        "requestBody" : {
          "description" : "AccessPolicy to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessPolicy"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets an access policy",
        "operationId" : "AccessPolicies_GetAccessPolicyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Updates an existing application access policy",
        "operationId" : "AccessPolicies_UpdateAccessPolicyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AccessPolicy",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessPolicy"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessPolicy"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccessPolicy does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Removes an access policy",
        "operationId" : "AccessPolicies_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/ApproverSets/{operation}" : {
      "post" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Add/Remove who can approve access requests for this policy",
        "operationId" : "AccessPolicies_ModifyApproverSetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "sets of identities to assign as approvers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ApproverSet"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApproverSet"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApproverSet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save approver sets"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/ApproverSets" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets the sets of identities that may approve access requests using this policy",
        "operationId" : "AccessPolicies_GetApproverSetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApproverSet"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApproverSet"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Sets who can approve access requests for this policy",
        "operationId" : "AccessPolicies_SetApproverSetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "sets of identities to assign as approvers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ApproverSet"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApproverSet"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApproverSet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save approver sets"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/NotificationContacts/{operation}" : {
      "post" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Add/Remove notification contacts associated with request events for this policy",
        "operationId" : "AccessPolicies_ModifyNotificationContactsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Contacts to assign to this policy",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NotificationContact"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationContact"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationContact"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save contacts"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/NotificationContacts" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets all NotificationContacts configured for this policy",
        "operationId" : "AccessPolicies_GetNotificationContactsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationContact"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationContact"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to retrieve contacts"
          }
        }
      },
      "put" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Sets the list of notification contacts associated with request events for this policy",
        "operationId" : "AccessPolicies_SetNotificationContactsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Contacts to assign to this policy",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NotificationContact"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationContact"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NotificationContact"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save contacts"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/ReasonCodes/{operation}" : {
      "post" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Add/Remove reason codes that may be used to make access requests managed by this policy",
        "operationId" : "AccessPolicies_ModifyReasonCodesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "ReasonCodes to assign to this policy",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save reason codes"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/ReasonCodes" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets the reason codes assigned to this policy",
        "operationId" : "AccessPolicies_GetReasonCodesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Sets the list of reason codes that may be used to make access requests managed by this policy",
        "operationId" : "AccessPolicies_SetReasonCodeAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "ReasonCodes to assign to this policy",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save reason codes"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/Reviewers/{operation}" : {
      "post" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Add/Remove who can review access requests for this policy",
        "operationId" : "AccessPolicies_ModifyReviewersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Identities to assign as reviewers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/Reviewers" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets the reviewers assigned to this policy",
        "operationId" : "AccessPolicies_GetReviewersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Sets who can review access requests for this policy",
        "operationId" : "AccessPolicies_SetReviewersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Identities to assign as reviewers",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/ScopeItems/{operation}" : {
      "post" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Add/remove accounts, assets, account groups, and asset groups that are explicitly assigned to this policy",
        "operationId" : "AccessPolicies_ModifyScopeItemsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "PolicyScopeItems to manage with this policy",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyScopeItem"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyScopeItem"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyScopeItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save scope items"
          }
        }
      }
    },
    "/v4/AccessPolicies/{id}/ScopeItems" : {
      "get" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Gets the set of account groups that are explicitly assigned to this policy",
        "operationId" : "AccessPolicies_GetScopeItemsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyScopeItem"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyScopeItem"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to retrieve account groups"
          }
        }
      },
      "put" : {
        "tags" : [ "AccessPolicies" ],
        "summary" : "Sets the list of accounts, assets, account groups, and asset groups that are explicitly assigned to this policy",
        "operationId" : "AccessPolicies_SetScopeItemsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessPolicy",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PolicyScopeItems to manage with this policy",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyScopeItem"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyScopeItem"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyScopeItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save scope items"
          }
        }
      }
    },
    "/v4/AccessRequests" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Gets a list of AccessRequest entities for the currently authenticated user",
        "operationId" : "AccessRequests_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequest"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Adds a new NewAccessRequest to the appliance",
        "operationId" : "AccessRequests_CreateAsync",
        "requestBody" : {
          "description" : "NewAccessRequest to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewAccessRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to make the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Gets a single AccessRequest",
        "operationId" : "AccessRequests_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Must have PolicyAdmin or Auditor permission or be a requester, approver, or reviewer of the\r\nrequest"
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Acknowledge" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Acknowledges requests that have been denied/revoked/expired",
        "operationId" : "AccessRequests_AcknowledgeAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Brief description of why action is justified",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be the requester of this access request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Approve" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Approves the AccessRequest",
        "operationId" : "AccessRequests_ApproveAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Brief description of why action is justified",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to approve the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/ApproverSet" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Gets Approver Set of a single AccessRequest",
        "operationId" : "AccessRequests_GetApproverSetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestApproverSet"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestApproverSet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Must have PolicyAdmin or Auditor permission or be a requester, approver, or reviewer of the\r\nrequest"
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Cancel" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Cancels the AccessRequest",
        "operationId" : "AccessRequests_CancelAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Brief description of why action is justified",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be the requester of this access request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/CheckIn" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Returns control of the session/password and finish AccessRequest",
        "operationId" : "AccessRequests_CheckInAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be the requester of this access request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/CheckOutPassword" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Releases the password for this asset request if the request is approved and active",
        "operationId" : "AccessRequests_CheckOutPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be the requester of this access request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/CheckOutSshKey" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Releases the SSH key information for this asset request if the request is approved and active",
        "operationId" : "AccessRequests_CheckOutSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyData"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be the requester of this access request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Close" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Closes a AccessRequest pending review. Used by an admin when a review cannot be completed.",
        "operationId" : "AccessRequests_CloseAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Brief description of why action is justified",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission and request must be in {PendingReview} state",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Deny" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Denies the AccessRequest",
        "operationId" : "AccessRequests_DenyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Brief description of why action is justified",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to deny the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/InitializeSession" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Initiate the session",
        "operationId" : "AccessRequests_InitializeSessionAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Configuration for initiating session",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InitiateSessionParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionsLaunchData"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionsLaunchData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to initiate the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Review" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Reviews the AccessRequest release",
        "operationId" : "AccessRequests_ReviewAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Brief description of why action is justified",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to review the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Sessions/{sessionId}/Playback" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Retrieve the session playback data required to replay the session recording matching this session id.",
        "operationId" : "AccessRequests_GetSessionPlaybackDataAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "Unique ID of the session to replay",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionPlaybackData"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionPlaybackData"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Sessions/{sessionId}" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Gets a specific session of an AccessRequest",
        "operationId" : "AccessRequests_GetSessionByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "Unique ID of the session",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestSession"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestSession"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Must have PolicyAdmin or Auditor permission or be a requester, approver, or reviewer of the\r\nrequest"
          }
        }
      },
      "delete" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Terminate the session",
        "operationId" : "AccessRequests_TerminateSessionAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "Unique ID of the session to replay",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/{id}/Sessions" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Gets all sessions for a specific AccessRequest",
        "operationId" : "AccessRequests_GetSessionsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSession"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSession"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/ActiveSessions/Terminate" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Terminates the specified sessions",
        "operationId" : "AccessRequests_TerminateSessionsAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/RequestSessionId"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSession"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSession"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/ActiveSessions" : {
      "get" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Gets all active sessions",
        "operationId" : "AccessRequests_GetActiveSessionsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ActiveSession"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ActiveSession"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/BatchApprove" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Processes multiple access request approvals",
        "operationId" : "AccessRequests_ApproveMultipleAsync",
        "requestBody" : {
          "description" : "Approval requests to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ApproveRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestApprovalBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestApprovalBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to approve the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/BatchCreate" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Processes multiple new access requests",
        "operationId" : "AccessRequests_CreateMultipleAsync",
        "requestBody" : {
          "description" : "New access requests to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NewAccessRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to make the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/BatchDeny" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Processes multiple access request denials",
        "operationId" : "AccessRequests_DenyMultipleAsync",
        "requestBody" : {
          "description" : "Denial requests to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DenyRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestDenyBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestDenyBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to deny the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccessRequests/BatchReview" : {
      "post" : {
        "tags" : [ "AccessRequests" ],
        "summary" : "Processes multiple access request reviews",
        "operationId" : "AccessRequests_ReviewMultipleAsync",
        "requestBody" : {
          "description" : "Review requests to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ReviewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestReviewBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestReviewBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have been granted rights by an access policy to review the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccountGroups" : {
      "get" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Gets a list of account group entities",
        "operationId" : "AccountGroups_GetAccountGroupsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Creates an AccountGroup",
        "operationId" : "AccountGroups_CreateAccountGroupAsync",
        "requestBody" : {
          "description" : "AccountGroup to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AccountGroups/{id}" : {
      "get" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Gets a single account group",
        "operationId" : "AccountGroups_GetAccountGroupByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of account group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Updates an AccountGroup",
        "operationId" : "AccountGroups_UpdateAccountGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Removes an AccountGroup",
        "operationId" : "AccountGroups_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccountGroups/{id}/Accounts" : {
      "get" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Gets all PolicyAccounts that belong to an AccountGroup",
        "operationId" : "AccountGroups_GetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account Group does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Sets the accounts assigned to this group",
        "operationId" : "AccountGroups_SetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/AccountGroups/{id}/Accounts/{operation}" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Add/Remove accounts assigned to this group",
        "operationId" : "AccountGroups_ModifyAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/AccountGroups/{id}/Policies" : {
      "get" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Gets information about policies that this account group is assigned to",
        "operationId" : "AccountGroups_GetPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupPolicies"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupPolicies"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account Group does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Sets the policies this group is assigned to",
        "operationId" : "AccountGroups_SetPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Policies to assign the AccountGroup to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/GroupPolicies"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupPolicies"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupPolicies"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'policies' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/AccountGroups/{id}/Policies/{operation}" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Add/Remove policies this group is assigned to",
        "operationId" : "AccountGroups_ModifyPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Policies to assign the AccountGroup to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/GroupPolicies"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupPolicies"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GroupPolicies"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'policies' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/AccountGroups/BatchCreate" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Processes multiple new account groups",
        "operationId" : "AccountGroups_CreateMultipleAsync",
        "requestBody" : {
          "description" : "New account groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroupBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroupBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccountGroups/BatchDelete" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Processes multiple account groups to delete",
        "operationId" : "AccountGroups_DeleteMultipleAsync",
        "parameters" : [ {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "account groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroupBatchResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroupBatchResult"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccountGroups/BatchUpdate" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Processes multiple account groups to update",
        "operationId" : "AccountGroups_UpdateMultipleAsync",
        "requestBody" : {
          "description" : "account groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AccountGroup"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroupBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroupBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccountGroups/CheckUniqueName" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Checks if the current name is unique prior to create/update",
        "operationId" : "AccountGroups_CheckUniqueNameAsync",
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - parameters are missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AccountGroups/TestRule" : {
      "post" : {
        "tags" : [ "AccountGroups" ],
        "summary" : "Tests a dynamic grouping rule",
        "operationId" : "AccountGroups_TestRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Unique ID of the account group",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operationalOnly",
          "in" : "query",
          "description" : "Do not return no-op results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit response to this number of results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Dynamic grouping rule to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaggingGroupingRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicGroupingRuleTestResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicGroupingRuleTestResult"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Tested"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account group does not exist"
          }
        }
      }
    },
    "/v4/ArchiveServers" : {
      "get" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Gets a list of all archive servers",
        "operationId" : "ArchiveServers_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ArchiveServer"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ArchiveServer"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Creates an ArchiveServer configuration",
        "operationId" : "ArchiveServers_CreateEntityAsync",
        "requestBody" : {
          "description" : "ArchiveServer to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveServer"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServer"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServer"
                }
              }
            }
          },
          "400" : {
            "description" : "60245: Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin or OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/ArchiveServers/{id}" : {
      "get" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Gets a single archive server",
        "operationId" : "ArchiveServers_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of account group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServer"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServer"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Updates an existing ArchiveServer configuration",
        "operationId" : "ArchiveServers_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ArchiveServer",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "ArchiveServer to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveServer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServer"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServer"
                }
              }
            }
          },
          "400" : {
            "description" : "60102: Entity ID in request body does not match request URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin or OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Removes an ArchiveServer configuration",
        "operationId" : "ArchiveServers_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ArchiveServer",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin or OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ArchiveServers/{id}/DiscoverSshHostKey" : {
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Gets the SSH host key for the target server",
        "operationId" : "ArchiveServers_DiscoverSshHostKeyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of ArchiveServer to check",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/ArchiveServers/{id}/InstallSshKey" : {
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Installs an SSH key for the service account",
        "operationId" : "ArchiveServers_InstallSshKeyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ArchiveServer",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Database ID of SSH Key to install (optional - will be generated if not specified). Also option to override existing asset connection settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveServerSshKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/ArchiveServers/{id}/SshHostKey" : {
      "get" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Gets the SshHostKey identifying this archive server",
        "operationId" : "ArchiveServers_GetSshHostKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the archive server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Updates the ssh host id of this archive server",
        "operationId" : "ArchiveServers_SetSshHostKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the archive server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "SSH host id to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid SshHostKey provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin or OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Removes the ssh host id of this archive server",
        "operationId" : "ArchiveServers_RemoveSshHostKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the archive server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin or OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ArchiveServers/{id}/TestConnection" : {
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Tests an existing ArchiveServer configuration",
        "operationId" : "ArchiveServers_TestConnectionByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of ArchiveServer to test",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Options for testing the connection",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveTestConnectionParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/ArchiveServers/DiscoverSshHostKey" : {
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Gets the SSH host key for the target server",
        "operationId" : "ArchiveServers_DiscoverSshHostKeyAsync",
        "parameters" : [ {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Configuration of target server",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveDiscoverSshHostKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveServerSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ArchiveServers/InstallSshKey" : {
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Installs an SSH key for the service account",
        "operationId" : "ArchiveServers_InstallSshKeyAsync",
        "parameters" : [ {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Information about which asset to install an SSH key for the service account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveServerCustomInstallSshKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ArchiveServers/TestConnection" : {
      "post" : {
        "tags" : [ "ArchiveServers" ],
        "summary" : "Tests an ArchiveServer configuration",
        "operationId" : "ArchiveServers_TestConnectionAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArchiveCustomTestConnectionParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetAccounts" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets a list of accounts across all partitions",
        "operationId" : "AssetAccounts_GetAllAccountsAsync",
        "parameters" : [ {
          "name" : "tagNames",
          "in" : "query",
          "description" : "List of comma-separated tag IDs by which to filter results. Preferred over using filter.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Adds a new asset account to the appliance",
        "operationId" : "AssetAccounts_CreateAssetAccountAsync",
        "requestBody" : {
          "description" : "AssetAccount to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetAccount"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Asset Account was not entered",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets an asset account",
        "operationId" : "AssetAccounts_GetAssetAccountByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetAccount does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Updates an existing asset account",
        "operationId" : "AssetAccounts_UpdateAssetAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AssetAccount",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetAccount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - AssetAccount was null",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetAccount does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Removes an account",
        "operationId" : "AssetAccounts_DeleteAssetAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "50104 - Specified asset account is referenced by active policy. Use 'X-Force-Delete' header to\r\nforce deletion.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/ChangePassword" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Changes account password on the remote system",
        "operationId" : "AssetAccounts_ChangePasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/ChangeSshKey" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Changes account SSH key on the remote system",
        "operationId" : "AssetAccounts_ChangeSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/CheckPassword" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Checks if account password matches stored password",
        "operationId" : "AssetAccounts_CheckPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/CheckSshKey" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Checks if account SSH key matches stored password",
        "operationId" : "AssetAccounts_CheckSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/DependentSystems" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets systems that are dependent on this directory account",
        "operationId" : "AssetAccounts_GetDependentSystemsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the directory account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Disable" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Disable account from automated platform tasks and requests",
        "operationId" : "AssetAccounts_DisableAssetAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/DiscoveredSshKeys/{fingerprint}/Revoke" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Revokes a discovered SSH authorized key by removing it from the authorized key store on the asset for this account",
        "operationId" : "AssetAccounts_RevokeSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fingerprint",
          "in" : "path",
          "description" : "Fingerprint of the SSH key to be removed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetAccount does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/DiscoveredSshKeys" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets the discovered SSH keys for this account",
        "operationId" : "AssetAccounts_GetDiscoveredSshKeysAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetAccount does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/DiscoverSshKeys" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Discovers authorized keys for the account on the remote system",
        "operationId" : "AssetAccounts_DiscoverSshKeysAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoveryLog"
                }
              }
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/EffectiveManagedBy" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets all effective owners of the specified account",
        "operationId" : "AssetAccounts_GetAssetAccountEffectiveManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EffectiveIdentity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EffectiveIdentity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Enable" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Enable account from automated platform tasks and requests",
        "operationId" : "AssetAccounts_EnableAssetAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/GeneratePassword" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Generate sample password using password rule assigned to this account",
        "operationId" : "AssetAccounts_GeneratePasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/InstallSshKey" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Installs the SSH key assigned to the account on the remote system",
        "operationId" : "AssetAccounts_InstallSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/ManagedBy/{operation}" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Add/Remove assigned owners of this account",
        "operationId" : "AssetAccounts_ModifyManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of owners to assign to this account",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid owners list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/ManagedBy" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets all owners of the specified account",
        "operationId" : "AssetAccounts_GetAssetAccountManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Updates the assigned owners of this account",
        "operationId" : "AssetAccounts_SetAssetAccountManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of owners to assign to this account",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid owners list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Password" : {
      "put" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Sets the account password",
        "operationId" : "AssetAccounts_SetPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to set password for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Password to set for this account. Maximum length is 1 MB.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60027 - Invalid password provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Passwords" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets passwords previously assigned to the account",
        "operationId" : "AssetAccounts_RetrievePastPasswordsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to set password for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get past passwords that were active after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get past passwords that were active before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPassword"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPassword"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid date was entered",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/RestoreAccount" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Restore the account on the remote system",
        "operationId" : "AssetAccounts_RestoreAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/SshKey" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Get the SSH key assigned to this account",
        "operationId" : "AssetAccounts_GetSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH public key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountSshKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountSshKey"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Assign a specific SSH key to this account",
        "operationId" : "AssetAccounts_SetSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH public key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        } ],
        "requestBody" : {
          "description" : "SSH key to assign to account. If no PrivateKey is provided a new key will be generated.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountSshKey"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountSshKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountSshKey"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Unassign the SSH key assigned to this account",
        "operationId" : "AssetAccounts_RemoveSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/SshKeys" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets SSH keys previously assigned to the account",
        "operationId" : "AssetAccounts_GetSshKeyHistoryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to set password for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get past passwords that were active after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get past passwords that were active before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountSshKeyHistory"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountSshKeyHistory"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "An invalid date was entered",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/SuspendAccount" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Suspend the account on the remote system",
        "operationId" : "AssetAccounts_SuspendAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Tags" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets an account's tags",
        "operationId" : "AssetAccounts_GetAccountTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Updates an account's tags",
        "operationId" : "AssetAccounts_UpdateAccountTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of tags to associate with the account",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Tags/{operation}" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Add/Remove tags on this account",
        "operationId" : "AssetAccounts_ModifyAccountTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of tags to assign to this account",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetAccount does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/{id}/Tasks" : {
      "get" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Gets all Tasks that have been executed against this account",
        "operationId" : "AssetAccounts_GetTasksAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to get tasks for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Log time range start. Default 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Log time range end (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordActivityLog"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account does not exist"
          }
        }
      }
    },
    "/v4/AssetAccounts/BatchCreate" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Processes multiple new asset accounts",
        "operationId" : "AssetAccounts_CreateMultipleAccountsAsync",
        "requestBody" : {
          "description" : "New asset accounts to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccountBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccountBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetAccounts/BatchDelete" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Processes multiple asset account deletes",
        "operationId" : "AssetAccounts_DeleteMultipleAsync",
        "parameters" : [ {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "asset accounts to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccountBatchResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccountBatchResult"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetAccounts/BatchUpdate" : {
      "post" : {
        "tags" : [ "AssetAccounts" ],
        "summary" : "Processes multiple asset account updates",
        "operationId" : "AssetAccounts_UpdateMultipleAccountsAsync",
        "requestBody" : {
          "description" : "asset accounts to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccountBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccountBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetGroups" : {
      "get" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Gets a list of asset group entities",
        "operationId" : "AssetGroups_GetAssetGroupsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Creates an AssetGroup",
        "operationId" : "AssetGroups_CreateAssetGroupAsync",
        "requestBody" : {
          "description" : "AssetGroup to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetGroups/{id}" : {
      "get" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Gets a single asset group",
        "operationId" : "AssetGroups_GetAssetGroupByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Updates an AssetGroup",
        "operationId" : "AssetGroups_UpdateAssetGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AssetGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetGroup does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Removes an AssetGroup",
        "operationId" : "AssetGroups_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetGroups/{id}/Assets" : {
      "get" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Gets all PolicyAssets that belong to an AssetGroup",
        "operationId" : "AssetGroups_GetAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset Group does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Sets the assets assigned to this group",
        "operationId" : "AssetGroups_SetAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Assets to assign to the AssetGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyAsset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'assets' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetGroup does not exist"
          }
        }
      }
    },
    "/v4/AssetGroups/{id}/Assets/{operation}" : {
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Add/Remove assets assigned to this group",
        "operationId" : "AssetGroups_ModifyAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Assets to assign to the AssetGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyAsset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'assets' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetGroup does not exist"
          }
        }
      }
    },
    "/v4/AssetGroups/{id}/Policies" : {
      "get" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Gets information about policies that this asset group is assigned to",
        "operationId" : "AssetGroups_GetPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Account Group does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Sets the policies this group is assigned to",
        "operationId" : "AssetGroups_SetPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Policies to assign the AssetGroup to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetGroupPolicy"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupPolicy"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'policies' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetGroup does not exist"
          }
        }
      }
    },
    "/v4/AssetGroups/{id}/Policies/{operation}" : {
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Sets the policies this group is assigned to",
        "operationId" : "AssetGroups_ModifyPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetGroup to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Policies to assign the AssetGroup to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetGroupPolicy"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupPolicy"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'policies' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetGroup does not exist"
          }
        }
      }
    },
    "/v4/AssetGroups/BatchCreate" : {
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Processes multiple new asset groups",
        "operationId" : "AssetGroups_CreateMultipleAsync",
        "requestBody" : {
          "description" : "New asset groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetGroups/BatchDelete" : {
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Processes multiple asset groups to delete",
        "operationId" : "AssetGroups_DeleteMultipleAsync",
        "parameters" : [ {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "asset groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupBatchResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupBatchResult"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetGroups/BatchUpdate" : {
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Processes multiple asset groups to update",
        "operationId" : "AssetGroups_UpdateMultipleAsync",
        "requestBody" : {
          "description" : "asset groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetGroup"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroupBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetGroups/TestAssetRule" : {
      "post" : {
        "tags" : [ "AssetGroups" ],
        "summary" : "Tests a dynamic grouping rule",
        "operationId" : "AssetGroups_TestRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Unique identifier of the asset group",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operationalOnly",
          "in" : "query",
          "description" : "Do not return no-op results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit response to this number of results, default 200",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Dynamic grouping rule to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaggingGroupingRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicGroupingRuleTestResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicGroupingRuleTestResult"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Tested"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset Group does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of asset partitions",
        "operationId" : "AssetPartitions_GetAssetPartitionsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPartition"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPartition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Adds a new AssetPartition",
        "operationId" : "AssetPartitions_CreateAssetPartitionAsync",
        "requestBody" : {
          "description" : "AssetPartition to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetPartition"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetPartition"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetPartition"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - AssetPartition was null",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single AssetPartition entity",
        "operationId" : "AssetPartitions_GetAssetPartitionByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetPartition"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetPartition"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an AssetPartition",
        "operationId" : "AssetPartitions_UpdateAssetPartitionAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AssetPartition",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetPartition"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetPartition"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetPartition"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - AssetPartition was null",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes an AssetPartition",
        "operationId" : "AssetPartitions_DeleteAssetPartitionAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "failoverPartitionId",
          "in" : "query",
          "description" : "Database ID of the partition that assets should be moved to",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : -1
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/{scheduleId}/Assets/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove assets assigned to an existing account discovery schedule",
        "operationId" : "AssetPartitions_ModifyAccountDiscoveryAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the account discovery schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the account discovery schedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated assets not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/{scheduleId}/Assets" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets assets that the specified schedule is assigned to",
        "operationId" : "AssetPartitions_GetAccountDiscoveryAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the assets that are assigned to this account discovery schedule",
        "operationId" : "AssetPartitions_SetAccountDiscoveryAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the account discovery schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the account discovery schedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated assets not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/{scheduleId}/Rules/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove profile schedule's rules",
        "operationId" : "AssetPartitions_ModifyAccountDiscoveryRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "rules to assign to the profile schedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryRule"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryRule"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated rules not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/{scheduleId}/Rules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets account discovery rules from an existing profile schedule",
        "operationId" : "AssetPartitions_GetAccountDiscoveryRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryRule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets an existing profile schedule's rules",
        "operationId" : "AssetPartitions_UpdateAccountDiscoveryRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "rules to assign to the profile schedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryRule"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryRule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated rules not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_GetPartitionAccountDiscoveryScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique ID of PartitionProfileAccountDiscoverySchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an existing PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_UpdateAccountDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfileAccountDiscoverySchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated PartitionProfileAccountDiscoverySchedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountDiscoverySchedule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileAccountDiscoverySchedule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_DeleteAccountDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfileAccountDiscoverySchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/TestDiscovery" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Runs Discovery on the given PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_TestAccountDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Discovery parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomPartitionDiscoverAccountsParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules/TestServiceDiscovery" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Runs Service Discovery on the given PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_TestServiceDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Discovery parameters",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CustomPartitionDiscoverAccountsParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/AccountDiscoverySchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of PartitionProfileAccountDiscoverySchedules",
        "operationId" : "AssetPartitions_GetPartitionAccountDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_CreateAccountDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PartitionProfileAccountDiscoverySchedule to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountDiscoverySchedule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save PartitionProfileAccountDiscoverySchedule"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all accounts belonging to assets assigned to this partition",
        "operationId" : "AssetPartitions_GetAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Assets" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all assets that belong to the specified partition",
        "operationId" : "AssetPartitions_GetAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to get tasks for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/ChangeSchedules/{scheduleId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets accounts that the specified schedule is assigned to",
        "operationId" : "AssetPartitions_GetChangeScheduleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/ChangeSchedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single PartitionProfileChangeSchedule",
        "operationId" : "AssetPartitions_GetPartitionChangeScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique ID of a PartitionProfileChangeSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileChangeSchedule does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates a PartitionProfileChangeSchedule",
        "operationId" : "AssetPartitions_UpdateChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfileChangeSchedule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated PartitionProfileChangeSchedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordChangeSchedule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileChangeSchedule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a PartitionProfileChangeSchedule",
        "operationId" : "AssetPartitions_DeleteChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfileChangeSchedule to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/ChangeSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition change schedules",
        "operationId" : "AssetPartitions_GetPartitionChangeSchedulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordChangeSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordChangeSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Adds a new PartitionProfileChangeSchedule",
        "operationId" : "AssetPartitions_CreateChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordChangeSchedule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/CheckSchedules/{scheduleId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets accounts that the specified schedule is assigned to",
        "operationId" : "AssetPartitions_GetCheckScheduleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/CheckSchedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single PartitionProfileCheckSchedule",
        "operationId" : "AssetPartitions_GetPartitionCheckScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique ID of a PartitionProfileCheckSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileCheckSchedule does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates a PartitionProfileCheckSchedule",
        "operationId" : "AssetPartitions_UpdateCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfileCheckSchedule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated PartitionProfileCheckSchedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordCheckSchedule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileCheckSchedule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a PartitionProfileCheckSchedule",
        "operationId" : "AssetPartitions_DeleteCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfileCheckSchedule to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/CheckSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition password check schedules",
        "operationId" : "AssetPartitions_GetPartitionCheckSchedulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordCheckSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordCheckSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Adds a new PartitionProfileCheckSchedule",
        "operationId" : "AssetPartitions_CreateCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PartitionProfileCheckSchedule to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordCheckSchedule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/CheckUniqueProfileName" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Checks if the current name is unique prior to create/update",
        "operationId" : "AssetPartitions_CheckUniqueProfileNameAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/CheckUniqueSshKeyProfileName" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Checks if the current name is unique prior to create/update",
        "operationId" : "AssetPartitions_CheckUniqueSshKeyProfileNameAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/{assetId}/{accountName}/Ignore" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered account as ignored",
        "operationId" : "AssetPartitions_IgnorePartitionDiscoveredAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountName",
          "in" : "path",
          "description" : "Name of a discovered account. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredAssetAccount does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/{assetId}/{accountName}/Manage" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Brings a discovered account under management",
        "operationId" : "AssetPartitions_ManagePartitionDiscoveredAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountName",
          "in" : "path",
          "description" : "Name of a discovered account. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Additional optional parameters for configuring the new account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredAssetAccount does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/{assetId}/{accountName}/Show" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered account as visible",
        "operationId" : "AssetPartitions_ShowPartitionDiscoveredAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountName",
          "in" : "path",
          "description" : "Name of a discovered account. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredAssetAccount does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/{assetId}/{accountName}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a discovered account",
        "operationId" : "AssetPartitions_GetPartitionDiscoveredAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountName",
          "in" : "path",
          "description" : "Name of a discovered account. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredAssetAccount does not belong to the given AssetPartition"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered account as deleted",
        "operationId" : "AssetPartitions_DeletePartitionDiscoveredAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountName",
          "in" : "path",
          "description" : "Name of a discovered account. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredAssetAccount does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/{assetId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an asset's discovered accounts",
        "operationId" : "AssetPartitions_GetPartitionDiscoveredAccountsByAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks all asset discovered account as deleted",
        "operationId" : "AssetPartitions_DeleteAssetDiscoveredAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist or DiscoveredAssetAccount does not belong to the given asset"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/BatchIgnore" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Processes multiple asset account ignore requests",
        "operationId" : "AssetPartitions_IgnoreMultipleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Discovered asset accounts to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccountBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccountBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/BatchManage" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Processes multiple asset account manage requests",
        "operationId" : "AssetPartitions_ManageMultipleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for managing multiple discovered accounts",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchManageParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ManagedDiscoveredAssetAccountBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ManagedDiscoveredAssetAccountBatchResponse"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts/BatchShow" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Processes multiple asset account show requests",
        "operationId" : "AssetPartitions_ShowMultipleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Discovered asset accounts to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccountBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccountBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredAccounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an asset partition's discovered accounts",
        "operationId" : "AssetPartitions_GetPartitionDiscoveredAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks all partition discovered accounts as deleted",
        "operationId" : "AssetPartitions_DeletePartitionDiscoveredAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredServices/{assetId}/{serviceName}/Ignore" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered service as ignored",
        "operationId" : "AssetPartitions_IgnoreDiscoveredServiceAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Name of a discovered service. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredService"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredService"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredService does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredServices/{assetId}/{serviceName}/Show" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered service as visible",
        "operationId" : "AssetPartitions_ShowDiscoveredServiceAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Name of a discovered service. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredService"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredService"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredService does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredServices/{assetId}/{serviceName}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an asset's discovered services",
        "operationId" : "AssetPartitions_GetDiscoveredServicesByServiceNameAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Name of a discovered service. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered account as deleted",
        "operationId" : "AssetPartitions_DeleteDiscoveredServiceAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Name of a discovered account. For directory accounts you must also specify the domain name e.g., {accountName}@{domainName}",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredService does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredServices/{assetId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an asset's discovered services",
        "operationId" : "AssetPartitions_GetDiscoveredServicesByAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Deletes all services discovered for a specific asset",
        "operationId" : "AssetPartitions_DeleteAssetDiscoveredServicesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredService does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredServices" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an asset partition's discovered services",
        "operationId" : "AssetPartitions_GetDiscoveredServicesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Deletes all services discovered for a specific partition",
        "operationId" : "AssetPartitions_DeletePartitionDiscoveredServicesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredService does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredSshKeys/{assetId}/{accountId}/{fingerprint}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an discovered SSH key",
        "operationId" : "AssetPartitions_GetDiscoveredSshKeyByFingerprintAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique ID of an account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fingerprint",
          "in" : "path",
          "description" : "MD5 fingerprint of SSH Key",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredSshKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredSshKey"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Marks a discovered SSH key as deleted",
        "operationId" : "AssetPartitions_DeleteDiscoveredSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique ID of an account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fingerprint",
          "in" : "path",
          "description" : "MD5 fingerprint of the SSH key",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredSshKey does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredSshKeys/{assetId}/{accountId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets discovered SSH keys for an account",
        "operationId" : "AssetPartitions_GetDiscoveredSshKeysByAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique ID of an account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Deletes all SSH keys discovered for a specific account",
        "operationId" : "AssetPartitions_DeleteAssetAccountDiscoveredSshKeysAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Unique ID of an account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredSshKey does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredSshKeys/{assetId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets discovered SSH keys for an asset",
        "operationId" : "AssetPartitions_GetDiscoveredSshKeysByAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Deletes all SSH keys discovered for a specific asset",
        "operationId" : "AssetPartitions_DeleteAssetDiscoveredSshKeysAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredSshKey does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveredSshKeys" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the discovered SSH keys for an asset partition",
        "operationId" : "AssetPartitions_GetDiscoveredSshKeysAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetPartition does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Deletes all SSH keys discovered for a specific partition",
        "operationId" : "AssetPartitions_DeletePartitionDiscoveredSshKeysAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset partition does not exist or DiscoveredSshKey does not belong to the given AssetPartition"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveryJobs/{jobId}/Rules/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove rules assigned to an asset discovery job",
        "operationId" : "AssetPartitions_ModifyDiscoveryJobRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Unique identifier of the AssetDiscoveryJob",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AssetDiscoveryJob",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryRule"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryRule"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'rules' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveryJobs/{jobId}/Rules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all rules that belong to an asset discovery rule",
        "operationId" : "AssetPartitions_GetDiscoveryJobRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Unique identifier of the AssetDiscoveryJob",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryRule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AssetDiscoveryJob does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the rules assigned to an asset discovery job",
        "operationId" : "AssetPartitions_SetDiscoveryJobRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Unique identifier of the AssetDiscoveryJob",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AssetDiscoveryJob",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryRule"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryRule"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'rules' parameter was missing"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveryJobs/{jobId}/RunDiscovery" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Run asset discovery job now",
        "operationId" : "AssetPartitions_RunDiscoveryJobAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Database ID of asset discovery job",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Whether to include extended logging for the platform operation",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveryJobs/{jobId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific asset discovery job",
        "operationId" : "AssetPartitions_GetPartitionDiscoveryJobAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Unique ID of the asset discovery job",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an asset discovery job",
        "operationId" : "AssetPartitions_UpdateDiscoveryJobAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Unique identifier of the AssetDiscoveryJob",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AssetDiscoveryJob",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetDiscoveryJob"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes an asset discovery job",
        "operationId" : "AssetPartitions_DeleteDiscoveryJobAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "jobId",
          "in" : "path",
          "description" : "Unique identifier of the AssetDiscoveryJob",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveryJobs/TestDiscovery" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Tests the set of specific asset discovery conditions. Assets will only be discovered but not added to the database.",
        "operationId" : "AssetPartitions_TestDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for testing asset discovery conditions",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestAssetDiscoveryParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/DiscoveryJobs" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of asset discovery jobs",
        "operationId" : "AssetPartitions_GetPartitionDiscoveryJobsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryJob"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryJob"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates an asset discovery job",
        "operationId" : "AssetPartitions_CreateDiscoveryJobAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "AssetDiscoveryJob to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetDiscoveryJob"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/ManagedBy/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove assigned owners of this partition",
        "operationId" : "AssetPartitions_ModifyManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of owners to assign to this partition",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid owners list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/ManagedBy" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all owners of the specified partition",
        "operationId" : "AssetPartitions_GetPartitionManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetAccount to get tasks for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates the assigned owners of this partition",
        "operationId" : "AssetPartitions_SetPartitionManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of owners to assign to this partition",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid owners list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/PasswordRules/{ruleId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets accounts that the specified rule is assigned to",
        "operationId" : "AssetPartitions_GetPasswordRuleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique identifier of the password rule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/PasswordRules/{ruleId}/GeneratePassword" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Generates a random password using this rule",
        "operationId" : "AssetPartitions_GeneratePasswordFromRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionAccountPasswordRule to generate password from",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Generated password was not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/PasswordRules/{ruleId}/ValidatePassword" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Validates a proposed password against the given rule",
        "operationId" : "AssetPartitions_ValidateAccountPasswordByRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionAccountPasswordRule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Password to validate against this rule",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Password was not valid"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/PasswordRules/{ruleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific password rule",
        "operationId" : "AssetPartitions_GetPasswordRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique ID of a PasswordRule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountPasswordRule does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an existing password rule",
        "operationId" : "AssetPartitions_UpdatePasswordRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique identifier of the AccountPasswordRule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated AccountPasswordRule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountPasswordRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountPasswordRule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a password rule",
        "operationId" : "AssetPartitions_DeletePasswordRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionAccountPasswordRule to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "50104 - Specified password rule is referenced by active profile. Use 'X-Force-Delete' header to force deletion."
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/PasswordRules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of password rules",
        "operationId" : "AssetPartitions_GetPasswordRulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPasswordRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPasswordRule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new password rule",
        "operationId" : "AssetPartitions_CreatePasswordRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an AssetPartition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "AccountGroup to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountPasswordRule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/Accounts/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove accounts to an existing profile",
        "operationId" : "AssetPartitions_ModifyProfileAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated accounts not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the accounts that are explicitly using this profile",
        "operationId" : "AssetPartitions_GetProfileAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the accounts that are explicitly using this profile",
        "operationId" : "AssetPartitions_SetProfileAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated accounts not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/Assets/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove assets to an existing profile",
        "operationId" : "AssetPartitions_ModifyProfileAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated assets not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/Assets" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the Assets that are explicitly using this profile",
        "operationId" : "AssetPartitions_GetProfileAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the assets that are explicitly using this profile",
        "operationId" : "AssetPartitions_SetProfileAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated assets not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/ChangeSchedule" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the change schedule on the selected partition profile",
        "operationId" : "AssetPartitions_GetProfileChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/CheckSchedule" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the check schedule on the selected partition profile",
        "operationId" : "AssetPartitions_GetProfileCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/PasswordRule" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the account password rule on the selected partition profile",
        "operationId" : "AssetPartitions_GetProfileAccountPasswordRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}/Accounts/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove accounts assigned to this group",
        "operationId" : "AssetPartitions_ModifyAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SyncGroupAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyncGroupAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyncGroupAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all accounts that belong to a profile sync group",
        "operationId" : "AssetPartitions_GetSyncGroupAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyncGroupAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyncGroupAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the accounts assigned to this group",
        "operationId" : "AssetPartitions_SetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SyncGroupAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyncGroupAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyncGroupAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}/Disable" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Disables an existing profile sync group",
        "operationId" : "AssetPartitions_DisableSyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}/Enable" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Enables an existing profile sync group",
        "operationId" : "AssetPartitions_EnableSyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}/Password" : {
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the sync group password",
        "operationId" : "AssetPartitions_SetPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Password to set for this sync group",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60027 - Invalid password provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Sync group does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}/Sync" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sync credentials for all accounts in sync group",
        "operationId" : "AssetPartitions_SyncAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Sync group does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups/{syncGroupId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific profile sync group",
        "operationId" : "AssetPartitions_GetProfileSyncGroupByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an existing profile sync group",
        "operationId" : "AssetPartitions_UpdateSyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated PasswordSyncGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordSyncGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a profile sync group",
        "operationId" : "AssetPartitions_DeleteSyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}/SyncGroups" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of sync groups for a specific profile",
        "operationId" : "AssetPartitions_GetProfileSyncGroupsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordSyncGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordSyncGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new profile sync group",
        "operationId" : "AssetPartitions_CreateSyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PasswordSyncGroup to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordSyncGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save partition profile"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles/{profileId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a profile",
        "operationId" : "AssetPartitions_GetPartitionProfileByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an existing application asset configuration profile",
        "operationId" : "AssetPartitions_UpdateProfileAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated PartitionProfile",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordProfile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes an application asset configuration profile",
        "operationId" : "AssetPartitions_DeleteProfileAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Profiles" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of profiles for a specific partition",
        "operationId" : "AssetPartitions_GetPartitionProfilesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordProfile"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordProfile"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new asset configuration profile",
        "operationId" : "AssetPartitions_CreateProfileAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PartitionProfile to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PasswordProfile"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save partition profile"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyChangeSchedules/{scheduleId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets accounts that the specified schedule is assigned to",
        "operationId" : "AssetPartitions_GetSshKeyChangeScheduleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyChangeSchedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single SshKeyChangeSchedule",
        "operationId" : "AssetPartitions_GetPartitionSshKeyChangeScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique ID of a SshKeyChangeSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyChangeSchedule does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates a SshKeyChangeSchedule",
        "operationId" : "AssetPartitions_UpdateSshKeyChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyChangeSchedule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated SshKeyChangeSchedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyChangeSchedule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyChangeSchedule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a SshKeyChangeSchedule",
        "operationId" : "AssetPartitions_DeleteSshKeyChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyChangeSchedule to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyChangeSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition change schedules",
        "operationId" : "AssetPartitions_GetPartitionSshKeyChangeSchedulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Adds a new SshKeyChangeSchedule",
        "operationId" : "AssetPartitions_CreateSshKeyChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyChangeSchedule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyCheckSchedules/{scheduleId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets accounts that the specified schedule is assigned to",
        "operationId" : "AssetPartitions_GetSshKeyCheckScheduleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyCheckSchedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single SshKeyCheckSchedule",
        "operationId" : "AssetPartitions_GetPartitionSshKeyCheckScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique ID of a SshKeyCheckSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyCheckSchedule does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates a SshKeyCheckSchedule",
        "operationId" : "AssetPartitions_UpdateSshKeyCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyCheckSchedule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated SshKeyCheckSchedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyCheckSchedule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyCheckSchedule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a SshKeyCheckSchedule",
        "operationId" : "AssetPartitions_DeleteSshKeyCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyCheckSchedule to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyCheckSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition SSH key check schedules",
        "operationId" : "AssetPartitions_GetSshKeyCheckSchedulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Adds a new SshKeyCheckSchedule",
        "operationId" : "AssetPartitions_CreateSshKeyCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "SshKeyCheckSchedule to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyCheckSchedule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyDiscoverySchedules/{scheduleId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets accounts that the specified schedule is assigned to",
        "operationId" : "AssetPartitions_GetSshKeyDiscoveryScheduleAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the profile schedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "profile schedule not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyDiscoverySchedules/{scheduleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single SshKeyDiscoverySchedule",
        "operationId" : "AssetPartitions_GetPartitionSshKeyDiscoveryScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique ID of a SshKeyDiscoverySchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyDiscoverySchedule does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates a SshKeyDiscoverySchedule",
        "operationId" : "AssetPartitions_UpdateSshKeyDiscoveryScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyDiscoverySchedule to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated SshKeyDiscoverySchedule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyDiscoverySchedule does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a SshKeyDiscoverySchedule",
        "operationId" : "AssetPartitions_DeleteSshKeyDiscoveryScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "scheduleId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyDiscoverySchedule to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyDiscoverySchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition Discovery schedules",
        "operationId" : "AssetPartitions_GetPartitionSshKeyDiscoverySchedulesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Adds a new SshKeyDiscoverySchedule",
        "operationId" : "AssetPartitions_CreateSshKeyDiscoveryScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "The entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/Accounts/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove accounts to an existing SSH key profile",
        "operationId" : "AssetPartitions_ModifySshKeyProfileAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated accounts not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the accounts that are explicitly using this SSH key profile",
        "operationId" : "AssetPartitions_GetSshKeyProfileAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the accounts that are explicitly using this SSH key profile",
        "operationId" : "AssetPartitions_SetSshKeyProfileAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated accounts not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/Assets/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove accounts to an existing SSH key profile",
        "operationId" : "AssetPartitions_ModifySshKeyProfileAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated assets not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/Assets" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the Assets that are explicitly using this SSH key profile",
        "operationId" : "AssetPartitions_GetSshKeyProfileAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the assets that are explicitly using this SSH key profile",
        "operationId" : "AssetPartitions_SetSshKeyProfileAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the profile",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated assets not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/ChangeSchedule" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the change schedule on the selected partition profile",
        "operationId" : "AssetPartitions_GetSshKeyChangeScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/CheckSchedule" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the check schedule on the selected partition profile",
        "operationId" : "AssetPartitions_GetSshKeyCheckScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/DiscoverySchedule" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the discovery schedule on the selected partition profile",
        "operationId" : "AssetPartitions_GetSshKeyProfileDiscoveryScheduleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}/Accounts/{operation}" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Add/Remove accounts assigned to this group",
        "operationId" : "AssetPartitions_ModifySshKeyAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}/Accounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all accounts that belong to a profile sync group",
        "operationId" : "AssetPartitions_GetSshKeySyncGroupAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the accounts assigned to this group",
        "operationId" : "AssetPartitions_SetSshKeyAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}/Disable" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Disables an existing profile sync group",
        "operationId" : "AssetPartitions_DisableSshKeySyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}/Enable" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Enables an existing profile sync group",
        "operationId" : "AssetPartitions_EnableSshKeySyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}/SshKey" : {
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sets the sync group SSH key",
        "operationId" : "AssetPartitions_SetSshKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        } ],
        "requestBody" : {
          "description" : "SSH keyto set for this sync group",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountSshKey"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "60027 - Invalid password provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Sync group does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}/Sync" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Sync credentials for all accounts in sync group",
        "operationId" : "AssetPartitions_SyncSshKeyAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Sync group does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups/{syncGroupId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific profile sync group",
        "operationId" : "AssetPartitions_GetSshKeySyncGroupByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an existing profile sync group",
        "operationId" : "AssetPartitions_UpdateSshKeySyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated SshKeySyncGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeySyncGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a profile sync group",
        "operationId" : "AssetPartitions_DeleteSshKeySyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "syncGroupId",
          "in" : "path",
          "description" : "Unique ID of sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}/SshKeySyncGroups" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of sync groups for a specific profile",
        "operationId" : "AssetPartitions_GetSshKeySyncGroupsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new profile sync group",
        "operationId" : "AssetPartitions_CreateSshKeySyncGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of profile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "SshKeySyncGroup to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeySyncGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save partition profile"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles/{profileId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an SSH key profile",
        "operationId" : "AssetPartitions_GetSshKeyProfileByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique ID of SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates an existing SSH key profile",
        "operationId" : "AssetPartitions_UpdateSshKeyProfileAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated SshKeyProfile",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyProfile"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes an application asset configuration SSH key profile",
        "operationId" : "AssetPartitions_DeleteSshKeyProfileAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "profileId",
          "in" : "path",
          "description" : "Unique identifier of the SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/SshKeyProfiles" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of SSH key profiles for a specific partition",
        "operationId" : "AssetPartitions_GetSshKeyProfilesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyProfile"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyProfile"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new SSH key profile",
        "operationId" : "AssetPartitions_CreateSshKeyProfileAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "SshKeyProfile to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshKeyProfile"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Failed to save partition profile"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition tags",
        "operationId" : "AssetPartitions_GetPartitionTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PartitionTag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PartitionTag"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Creates a new partition tag",
        "operationId" : "AssetPartitions_CreateTagAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Tag to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PartitionTag"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset Partition not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags/{tagId}/Occurrences" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the tagged objects",
        "operationId" : "AssetPartitions_GetObjectsWithTagAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Unique ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectWithTag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectWithTag"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags/{tagId}/TestAssetAccountRule" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Tests an asset account partition tagging rule change against partition asset accounts",
        "operationId" : "AssetPartitions_TestTagAssetAccountRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Unique ID of the partition tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operationalOnly",
          "in" : "query",
          "description" : "Do not return no-op results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit response to this number of results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Tagging rule to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaggingGroupingRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Tested"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "The partition or partition tag does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags/{tagId}/TestAssetRule" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Tests an asset partition tagging rule change against partition assets",
        "operationId" : "AssetPartitions_TestTagAssetRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Unique ID of the partition tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operationalOnly",
          "in" : "query",
          "description" : "Do not return no-op results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit response to this number of results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Tagging rule to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaggingGroupingRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Tested"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "The partition or partition tag does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags/{tagId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a partition tag",
        "operationId" : "AssetPartitions_GetPartitionTagByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Unique ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Updates a partition tag",
        "operationId" : "AssetPartitions_UpdateTagAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Unique identifier of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Tag",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PartitionTag"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Removes a partition tag",
        "operationId" : "AssetPartitions_DeleteTagAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Unique identifier of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "50104 - Specified tag is referenced by something. Use 'X-Force-Delete' header to\r\nforce deletion."
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags/TestAssetAccountRule" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Tests an asset account partition tagging rule change against partition asset accounts",
        "operationId" : "AssetPartitions_TestAssetAccountRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operationalOnly",
          "in" : "query",
          "description" : "Do not return no-op results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit response to this number of results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Tagging rule to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaggingGroupingRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Tested"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "The partition or partition tag does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/{id}/Tags/TestAssetRule" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Tests an asset partition tagging rule change against partition assets",
        "operationId" : "AssetPartitions_TestAssetRuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the partition",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operationalOnly",
          "in" : "query",
          "description" : "Do not return no-op results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit response to this number of results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Tagging rule to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TaggingGroupingRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DynamicTaggingRuleTestResult"
                  }
                }
              }
            }
          },
          "201" : {
            "description" : "Tested"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "The partition or partition tag does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/AccountDiscoverySchedules/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a PartitionProfileAccountDiscoverySchedule",
        "operationId" : "AssetPartitions_GetAccountDiscoveryScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of PartitionProfileAccountDiscoverySchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/AccountDiscoverySchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of PartitionProfileAccountDiscoverySchedules",
        "operationId" : "AssetPartitions_GetAllAccountDiscoveryAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoverySchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/ChangeSchedules/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single PartitionProfileChangeSchedule",
        "operationId" : "AssetPartitions_GetChangeScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a PartitionProfileChangeSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordChangeSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileChangeSchedule does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/ChangeSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition change schedules across all partitions",
        "operationId" : "AssetPartitions_GetAllChangeSchedulesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordChangeSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordChangeSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/CheckSchedules/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single PartitionProfileCheckSchedule",
        "operationId" : "AssetPartitions_GetCheckScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a PartitionProfileCheckSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordCheckSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfileCheckSchedule does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/CheckSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition password check schedules",
        "operationId" : "AssetPartitions_GetAllCheckSchedulesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordCheckSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordCheckSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/DiscoveredAccounts" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all asset partition's discovered accounts",
        "operationId" : "AssetPartitions_GetAllDiscoveredAccountsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/DiscoveredServices" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets all asset partition's discovered services",
        "operationId" : "AssetPartitions_GetAllDiscoveredServicesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/DiscoveredSshKeys" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets the discovered SSH keys for all asset partitions",
        "operationId" : "AssetPartitions_GetAllDiscoveredSshKeysAsync",
        "parameters" : [ {
          "name" : "keyFormat",
          "in" : "query",
          "description" : "The format of the SSH private key (defaults to OpenSsh)<br /><br />\r\n            - OpenSsh - OpenSSH legacy PEM format<br />\r\n            - Ssh2 - Tectia format for use with tools from SSH.com<br />\r\n            - Putty - Putty format for use with PuTTY tools<br />",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredSshKey"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/DiscoveryJobs/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific asset discovery job",
        "operationId" : "AssetPartitions_GetDiscoveryJobByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the asset discovery job",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryJob"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AssetPartitions/DiscoveryJobs" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of asset discovery jobs",
        "operationId" : "AssetPartitions_GetAllDiscoveryJobsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryJob"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryJob"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/PasswordRules/{ruleId}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific password rule",
        "operationId" : "AssetPartitions_GetPasswordRuleByIdAsync",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "description" : "Unique ID of a PasswordRule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountPasswordRule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountPasswordRule does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/PasswordRules/GeneratePassword" : {
      "post" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Generates a random password using this rule",
        "operationId" : "AssetPartitions_GeneratePasswordFromCustomRuleAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccountPasswordRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Generated password was not found"
          }
        }
      }
    },
    "/v4/AssetPartitions/PasswordRules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of password rules across all partitions",
        "operationId" : "AssetPartitions_GetAllPasswordRulesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPasswordRule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPasswordRule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/Profiles" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of profiles",
        "operationId" : "AssetPartitions_GetAllProfilesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordProfile"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordProfile"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/Profiles/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a profile",
        "operationId" : "AssetPartitions_GetProfileByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of PartitionProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordProfile"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/ScheduleSummaries" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a summary of all profiles schedules across all partitions",
        "operationId" : "AssetPartitions_GetAllScheduleSummariesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AllProfileSchedulesSummary"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AllProfileSchedulesSummary"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyChangeSchedules/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single SshKeyChangeSchedule",
        "operationId" : "AssetPartitions_GetSshKeyChangeScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a SshKeyChangeSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyChangeSchedule does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyChangeSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition change schedules across all partitions",
        "operationId" : "AssetPartitions_GetAllSshKeyChangeSchedulesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyChangeSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyCheckSchedules/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single SshKeyCheckSchedule",
        "operationId" : "AssetPartitions_GetSshKeyCheckScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a SshKeyCheckSchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyCheckSchedule does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyCheckSchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition SSH key check schedules",
        "operationId" : "AssetPartitions_GetAllSshKeyCheckSchedulesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyCheckSchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyDiscoverySchedules/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a single SshKeyDiscoverySchedule",
        "operationId" : "AssetPartitions_GetSshKeyDiscoveryScheduleByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a SshKeyDiscoverySchedule",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyDiscoverySchedule does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyDiscoverySchedules" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition Discovery schedules across all partitions",
        "operationId" : "AssetPartitions_GetAllSshKeyDiscoverySchedulesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyProfiles/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets an SSH key profile",
        "operationId" : "AssetPartitions_GetAllSshKeyProfileByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of SshKeyProfile",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyProfile"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "SshKeyProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeyProfiles" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of SSH key profiles across all partitions",
        "operationId" : "AssetPartitions_GetAllSshKeyProfilesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyProfile"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyProfile"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeySyncGroups/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific SSH key sync group",
        "operationId" : "AssetPartitions_GetAllSshKeySyncGroupsByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the SSH key sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeySyncGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/SshKeySyncGroups" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of all SSH key sync groups",
        "operationId" : "AssetPartitions_GetAllSshKeySyncGroupsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeySyncGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SyncGroups" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of all partition sync groups",
        "operationId" : "AssetPartitions_GetAllSyncGroupsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordSyncGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordSyncGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/SyncGroups/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a specific profile sync group",
        "operationId" : "AssetPartitions_GetSyncGroupsByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the sync group",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordSyncGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "PartitionProfile does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/Tags" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a list of partition tags across partitions",
        "operationId" : "AssetPartitions_GetAllTagsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PartitionTag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PartitionTag"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AssetPartitions/Tags/{id}" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a partition tag",
        "operationId" : "AssetPartitions_GetTagByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PartitionTag"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag does not exist"
          }
        }
      }
    },
    "/v4/AssetPartitions/Tags/{id}/ManagedBy" : {
      "get" : {
        "tags" : [ "AssetPartitions" ],
        "summary" : "Gets a partition tag managed by",
        "operationId" : "AssetPartitions_GetPartitionTagManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the tag",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Tag does not exist"
          }
        }
      }
    },
    "/v4/Assets" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets a list of assets across all accessible partitions",
        "operationId" : "Assets_GetAllAssetsAsync",
        "parameters" : [ {
          "name" : "tagNames",
          "in" : "query",
          "description" : "List of comma-separated tag IDs by which to filter results. Preferred over using filter.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Adds a new Asset",
        "operationId" : "Assets_CreateAssetAsync",
        "requestBody" : {
          "description" : "Asset to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets a single Asset entity",
        "operationId" : "Assets_GetAssetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Assets" ],
        "summary" : "Updates an Asset",
        "operationId" : "Assets_UpdateAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Assets" ],
        "summary" : "Removes an Asset",
        "operationId" : "Assets_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset to remove",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/Accounts" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets list of accounts that belong to this Asset",
        "operationId" : "Assets_GetAssetAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/CheckUniqueAccountName" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Checks if the current account name is unique for this asset prior to create/update",
        "operationId" : "Assets_CheckAccountNameAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Assets/{id}/DependentAccounts/{operation}" : {
      "put" : {
        "tags" : [ "Assets" ],
        "summary" : "Add/Remove directory accounts running services on this asset",
        "description" : "Only applicable to Windows ('win') assets",
        "operationId" : "Assets_ModifyAssetDependentAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of directory accounts to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'accounts' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "AccountGroup does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/DependentAccounts" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets list of directory accounts that this asset is dependent on",
        "operationId" : "Assets_GetAssetDependentAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Assets" ],
        "summary" : "Updates the set of directory accounts running services on this asset",
        "description" : "Only applicable to Windows ('win') assets",
        "operationId" : "Assets_SetAssetDependentAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of directory accounts to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid directory account list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/DirectoryAccounts" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Searches the specified directory for User objects as DirectoryAccounts",
        "operationId" : "Assets_SearchDirectoryAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "includeGroups",
          "in" : "query",
          "description" : "Whether to look up directory group information",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/DirectoryAssets" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Searches the specified directory for Computer objects as Assets",
        "operationId" : "Assets_SearchDirectoryAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/DirectoryServiceEntries" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Searches the specified directory",
        "operationId" : "Assets_GetEntriesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchType",
          "in" : "query",
          "description" : "Either User, Group, or Computer.  Defaults to User.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/DirectorySearchType"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectoryServiceEntry"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectoryServiceEntry"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/Disable" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Disable asset and its accounts from automated platform tasks",
        "operationId" : "Assets_DisableAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/DiscoverAccounts" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Runs Discovery on the given asset",
        "operationId" : "Assets_RunDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the asset to run discovery on",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/DiscoveredAccounts/{accountName}" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets a discovered account",
        "operationId" : "Assets_GetDiscoveredAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountName",
          "in" : "path",
          "description" : "Name of a DiscoveredAssetAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Directory does not exist or DiscoveredAssetAccount does not belong to the given Directory"
          }
        }
      }
    },
    "/v4/Assets/{id}/DiscoveredAccounts" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets an asset's discovered accounts",
        "operationId" : "Assets_GetDiscoveredAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/DiscoveredServices" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets an asset's discovered services",
        "operationId" : "Assets_GetDiscoveredServicesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredService"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/DiscoverServices" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Runs Service Discovery on the given asset",
        "operationId" : "Assets_RunServiceDiscoveryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the asset to run service discovery on",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/DiscoverSshHostKey" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Tests the configured connection to this asset",
        "operationId" : "Assets_DiscoverSshHostKeyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Optionally override asset connection settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetDiscoverSshHostKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/EffectiveManagedBy" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets all effective owners of the specified asset",
        "operationId" : "Assets_GetAssetEffectiveManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EffectiveIdentity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EffectiveIdentity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/EffectiveManagedNetwork" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Check which managed network the specified asset would be assigned to",
        "operationId" : "Assets_TestNetworkAddressAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/Enable" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Enable asset and its accounts from automated platform tasks",
        "operationId" : "Assets_EnableAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/InstallSshKey" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Installs an SSH key for the service account",
        "operationId" : "Assets_InstallSshKeyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Database ID of SSH Key to install (optional - will be generated if not specified). Also option to override existing asset connection settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/InstallSshKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/ManagedBy" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets all owners of the specified asset",
        "operationId" : "Assets_GetAssetManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Assets" ],
        "summary" : "Updates the assigned owners of this asset",
        "operationId" : "Assets_SetAssetManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of owners to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid owners list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/ManagedBy/{operation}" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Add/Remove assigned owners of this asset",
        "operationId" : "Assets_ModifyManagedByAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of owners to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid owners list provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/Platform" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets platform information for specified asset",
        "operationId" : "Assets_GetPlatformAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/RetrieveSshHostKey" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Retrieve Ssh Host Key of the asset",
        "operationId" : "Assets_RetrieveSshHostKeyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/SshHostKey" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets the SshHostKey identifying this asset",
        "operationId" : "Assets_GetAssetSshHostKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Assets" ],
        "summary" : "Updates the ssh host id of this asset",
        "operationId" : "Assets_SetAssetSshHostKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "SSH host id to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetSshHostKey"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Invalid SshHostKey provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Assets" ],
        "summary" : "Removes the ssh host id of this asset",
        "operationId" : "Assets_RemoveSshHostKeyAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Assets/{id}/Synchronize" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Synchronize all directory related objects with the remote server",
        "operationId" : "Assets_SynchronizeAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fullSync",
          "in" : "query",
          "description" : "Whether to sync all entities imported from this directory or just those that have been modified",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Directory not found"
          }
        }
      }
    },
    "/v4/Assets/{id}/Tags" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets an asset's tags",
        "operationId" : "Assets_GetAssetTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Assets" ],
        "summary" : "Updates an asset's tags",
        "operationId" : "Assets_UpdateAssetTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of tags to associate with the Asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/Tags/{operation}" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Add/Remove tags on this asset",
        "operationId" : "Assets_ModifyAssetTagsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of tags to assign to this asset",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'tags' parameter was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      }
    },
    "/v4/Assets/{id}/TestConnection" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Tests the configured connection to this asset",
        "operationId" : "Assets_TestConnectionByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Optionally override asset connection settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestConnectionParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/{id}/UpdateDependentAsset" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Update account password for services and tasks on this assets based on current profile settings",
        "operationId" : "Assets_UpdateDependentServicesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Parameters needed to run platform task",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateDependentAssetParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/BatchCreate" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Processes multiple new assets",
        "operationId" : "Assets_CreateMultipleAssetsAsync",
        "requestBody" : {
          "description" : "New assets to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Assets/BatchDelete" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Processes multiple asset deletes",
        "operationId" : "Assets_DeleteMultipleAsync",
        "parameters" : [ {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "Asset IDs to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetBatchResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetBatchResult"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Assets/BatchUpdate" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Processes multiple asset updates",
        "operationId" : "Assets_UpdateMultipleAssetsAsync",
        "requestBody" : {
          "description" : "assets to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Assets/CheckUniqueName" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Checks if the current name is unique prior to create/update",
        "operationId" : "Assets_CheckAssetNameAsync",
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/DefaultSchema/{platformType}" : {
      "get" : {
        "tags" : [ "Assets" ],
        "summary" : "Get default schema for directory provider",
        "operationId" : "Assets_GetDefaultSchema",
        "parameters" : [ {
          "name" : "platformType",
          "in" : "path",
          "description" : "Identity provider type name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/PlatformType"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultAssetLdapSchema"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultAssetLdapSchema"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform not found"
          }
        }
      }
    },
    "/v4/Assets/DiscoverSchema" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Discovers the available schema attributes using provided domain credentials",
        "operationId" : "Assets_DiscoverSchemaAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Credentials for authenticating to the directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetSchemaParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Assets/DiscoverSchema/{objectClassName}" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Discovers the available schema attributes using provided domain credentials for a specific object class",
        "operationId" : "Assets_DiscoverSchemaByClassAsync",
        "parameters" : [ {
          "name" : "objectClassName",
          "in" : "path",
          "description" : "Name of object class to discover schema for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Credentials for authenticating to active directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetSchemaParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/DiscoverSshHostKey" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Gets the ssh host key for an asset",
        "operationId" : "Assets_DiscoverSshHostKeyAsync",
        "parameters" : [ {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Optionally override asset connection settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DiscoverSshHostKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetSshHostKey"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/InstallSshKey" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Installs an SSH key for the service account",
        "operationId" : "Assets_InstallSshKeyAsync",
        "parameters" : [ {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Information about which asset to install an SSH key for the service account",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetInstallSshKeyParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Assets/TestConnection" : {
      "post" : {
        "tags" : [ "Assets" ],
        "summary" : "Tests the configured connection to this asset",
        "operationId" : "Assets_TestConnectionAsync",
        "parameters" : [ {
          "name" : "extendedLogging",
          "in" : "query",
          "description" : "Generate debug task log for action",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "requestBody" : {
          "description" : "Information about which asset to test the connection with",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetTestConnectionParameters"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a list of audit log types",
        "operationId" : "AuditLog_GetAuditTypes",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditLogType"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditLogType"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a list of audit log access request types",
        "operationId" : "AuditLog_GetAccessRequestTypes",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditLogAccessRequestType"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditLogAccessRequestType"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Activities/{requestId}/{logId}/SessionLog" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of access request session activity log entries",
        "operationId" : "AuditLog_GetAccessRequestActivitySessionLogAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "logId",
          "in" : "path",
          "description" : "The database ID of the activity log entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Activities/{requestId}/{logId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets access request activity log entry with given ID",
        "operationId" : "AuditLog_GetAccessRequestActivitiesByIdAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "logId",
          "in" : "path",
          "description" : "The database ID of the activity log entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Activities/{requestId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets access request activity log entries for a request",
        "operationId" : "AuditLog_GetAccessRequestActivitiesByRequestIdAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Activities" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of access request activity log entries",
        "operationId" : "AuditLog_GetAccessRequestActivitiesAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific account (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Requests/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AccessRequest entries",
        "operationId" : "AuditLog_GetAccessRequestsByLogIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of specify request. (Preferred over 'filter')",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Requests" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AccessRequest log entries",
        "operationId" : "AuditLog_GetAccessRequestsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}/{logId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets access request session activity log entry with given ID",
        "operationId" : "AuditLog_GetAccessRequestSessionActivitiesByIdAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "The unique session ID of a session in the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "logId",
          "in" : "path",
          "description" : "The database ID of the activity log entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}/AuditPortalLink" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets the perma-link to the SPS portal for the session datat",
        "operationId" : "AuditLog_GetAccessRequestSessionAuditPortalLinkAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "The unique session ID of a session in the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer"
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}/Playback" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Retrieve the session playback data required to replay the session recording matching this session id.",
        "operationId" : "AuditLog_GetAccessRequestSessionPlaybackAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "Unique identifier of the AccessRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "Unique ID of the session to replay",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionPlaybackData"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionPlaybackData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets access request session activity log entries for a request",
        "operationId" : "AuditLog_GetAccessRequestSessionActivitiesBySessionIdAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sessionId",
          "in" : "path",
          "description" : "The unique session ID of a session in the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Sessions/{requestId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets access request session activity log entries for a request",
        "operationId" : "AuditLog_GetAccessRequestSessionActivitiesByRequestIdAsync",
        "parameters" : [ {
          "name" : "requestId",
          "in" : "path",
          "description" : "The unique ID of the access request",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/AccessRequests/Sessions" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of access request Session log entries",
        "operationId" : "AuditLog_GetAccessRequestSessionActivityAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific account (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequestSessionActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Appliances" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of ApplianceLog entries",
        "operationId" : "AuditLog_GetApplianceLogAsync",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "Get activity that occurred for either audit category Pangaea.Data.Cassandra.ApplianceLogCategory.Patch or Pangaea.Data.Cassandra.ApplianceLogCategory.Appliance  (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ApplianceLogCategory"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApplianceLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ApplianceLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Appliances/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets ApplianceLog entry by id",
        "operationId" : "AuditLog_GetApplianceLogByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Get activity that occurred for either audit category Pangaea.Data.Cassandra.ApplianceLogCategory.Patch or Pangaea.Data.Cassandra.ApplianceLogCategory.Appliance  (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ApplianceLogCategory"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplianceLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplianceLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Id was not in a correct format",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Appliance Log does not exist"
          }
        }
      }
    },
    "/v4/AuditLog/Archives" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of ArchiveActivityLog entries",
        "operationId" : "AuditLog_GetArchiveActivityAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ArchiveActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ArchiveActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Archives/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a specific ArchiveActivityLog entry",
        "operationId" : "AuditLog_GetArchiveActivityByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArchiveActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/DirectorySync" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of directory sync activity logs",
        "operationId" : "AuditLog_GetDirectorySyncActivityAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/DirectorySync/{taskName}/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets directory sync activity log entry for a specific task and ID",
        "operationId" : "AuditLog_GetDirectorySyncActivityByIdAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "The type of task",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/DirectorySync/{taskName}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets directory sync activity log entries for a specific task",
        "operationId" : "AuditLog_GetDirectorySyncActivityByNameAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "The type of task",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Discovery" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a list of audit log discovery types",
        "operationId" : "AuditLog_GetDiscoveryTypes",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditLogDiscoveryType"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditLogDiscoveryType"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Accounts" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AccountDiscoveryLog entries",
        "operationId" : "AuditLog_GetAccountDiscoveryLogsAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountDiscoveryLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Accounts/{id}/DiscoveredAccounts" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets accounts discovered from a particular discovery task",
        "operationId" : "AuditLog_GetDiscoveredAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAccountLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAccountLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Accounts/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AccountDiscoveryLog entries",
        "operationId" : "AuditLog_GetAccountDiscoveryLogByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Assets" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AssetDiscoveryLog entries",
        "operationId" : "AuditLog_GetAssetDiscoveryLogsAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetDiscoveryLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Assets/{id}/DiscoveredAssets" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets the discovered assets from a specific job log",
        "operationId" : "AuditLog_GetDiscoveredAssetsByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredAsset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Assets/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AssetDiscoveryLog entries by id",
        "operationId" : "AuditLog_GetAssetDiscoveryLogByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Services" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of ServiceDiscoveryLog entries",
        "operationId" : "AuditLog_GetServiceDiscoveryLogsAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Services/{id}/DiscoveredServices" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets Services discovered from a particular discovery task",
        "operationId" : "AuditLog_GetDiscoveredServicesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredServiceLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DiscoveredServiceLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Discovery Task does not exist"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/Services/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a ServiceDiscoveryLog entry by id",
        "operationId" : "AuditLog_GetServiceDiscoveryLogByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ServiceDiscoveryLog does not exist"
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/SshKeys" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of SshKeyDiscoveryLog entries",
        "operationId" : "AuditLog_GetSshKeyDiscoveryLogsAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific account (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyDiscoveryLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SshKeyDiscoveryLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Discovery/SshKeys/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of SshKeyDiscoveryLog entries",
        "operationId" : "AuditLog_GetSshKeyDiscoveryLogByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoveryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshKeyDiscoveryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Licenses" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of LicenseHistoryLog entries",
        "operationId" : "AuditLog_GetLicenseHistoryAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseHistoryLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseHistoryLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Licenses/{licenseType}/{logId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a specific LicenseHistoryLog entry",
        "operationId" : "AuditLog_GetByLicenseHistoryByLogIdAsync",
        "parameters" : [ {
          "name" : "licenseType",
          "in" : "path",
          "description" : "The database ID of the object that was changed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/LicensableModule"
          }
        }, {
          "name" : "logId",
          "in" : "path",
          "description" : "The database ID of the log entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LicenseHistoryLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LicenseHistoryLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Licenses/{licenseType}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of LicenseHistoryLog entries",
        "operationId" : "AuditLog_GetLicenseHistoryByTypeAsync",
        "parameters" : [ {
          "name" : "licenseType",
          "in" : "path",
          "description" : "Product license to get history for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/LicensableModule"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseHistoryLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseHistoryLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Logins" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of audit log login entries",
        "operationId" : "AuditLog_GetLoginHistoryAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Log time range start. Default 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Log time range end (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoginActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LoginActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Logins/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of LoginActivityLog entries",
        "operationId" : "AuditLog_GetLoginHistoryByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User Authentication Log not found"
          }
        }
      }
    },
    "/v4/AuditLog/Maintenance" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets the data and audit log maintenance settings.",
        "operationId" : "AuditLog_GetAuditLogMaintenanceAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogMaintenance"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogMaintenance"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          },
          "503" : {
            "description" : "The service is unavailable. Try again."
          }
        }
      },
      "put" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Update the data and audit log maintenance settings.",
        "operationId" : "AuditLog_SaveAuditLogMaintenanceAsync",
        "requestBody" : {
          "description" : "Settings to save",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditLogMaintenance"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogMaintenance"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogMaintenance"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "This action cannot be performed in the current appliance state.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          },
          "503" : {
            "description" : "The service is unavailable. Try again."
          }
        }
      }
    },
    "/v4/AuditLog/Maintenance/RunNow" : {
      "post" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Schedule a data maintenance job to run now. Supports cancellation during archiving by force complete of the cluster lock.",
        "operationId" : "AuditLog_RunNowAsync",
        "parameters" : [ {
          "name" : "archiveOnly",
          "in" : "query",
          "description" : "If true, this is a test run and we will not purge audit logs after archive. Defaults to false.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "syncAuditData",
          "in" : "query",
          "description" : "If true, sync the audit data after archive/purge completes. Defaults to false.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted"
          },
          "204" : {
            "description" : "NoContent - if archiving is not requested"
          },
          "400" : {
            "description" : "60974 - Audit log maintenance must be configured with an archive server to run with the archive only option.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "This action can only be performed on the primary appliance (not a replica)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/ObjectChanges" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of ObjectChangeLog entries",
        "operationId" : "AuditLog_GetObjectChangesAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific account (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectChangeLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectChangeLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/ObjectChanges/{objectType}/{objectId}/{logId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a specific of ObjectChangeLog entry for the passed objectType and objectId and logId.",
        "operationId" : "AuditLog_GetByObjectLogIdAsync",
        "parameters" : [ {
          "name" : "objectType",
          "in" : "path",
          "description" : "The type of object that was changed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ObjectType"
          }
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "The database ID of the object that was changed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "logId",
          "in" : "path",
          "description" : "The database ID of the log entry",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectChangeLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ObjectChangeLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/ObjectChanges/{objectType}/{objectId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of ObjectChangeLog entries for the passed objectType and objectId.",
        "operationId" : "AuditLog_GetByObjectIdAsync",
        "parameters" : [ {
          "name" : "objectType",
          "in" : "path",
          "description" : "The type of object that was changed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ObjectType"
          }
        }, {
          "name" : "objectId",
          "in" : "path",
          "description" : "The database ID of the object that was changed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectChangeLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectChangeLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/ObjectChanges/{objectType}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of ObjectChangeLog entries for the passed objectType.",
        "operationId" : "AuditLog_GetByObjectTypeAsync",
        "parameters" : [ {
          "name" : "objectType",
          "in" : "path",
          "description" : "The type of object that was changed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ObjectType"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectChangeLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ObjectChangeLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Passwords" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of PasswordActivityLog entries",
        "operationId" : "AuditLog_GetPasswordActivityAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific account (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordActivityLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PasswordActivityLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Passwords/{taskName}/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of PasswordActivityLog entries",
        "operationId" : "AuditLog_GetPasswordActivityByIdAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "The type of task",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Passwords/{taskName}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets password activity log entries for a specific task",
        "operationId" : "AuditLog_GetPasswordActivityByNameAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "The type of task",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PasswordActivityLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Patches" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of PatchHistory entries",
        "operationId" : "AuditLog_GetPatchHistoryAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PatchHistory"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PatchHistory"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60264 - Invalid Date Range",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Patches/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a specific patch history entry.",
        "operationId" : "AuditLog_GetPatchHistoryByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatchHistory"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatchHistory"
                }
              }
            }
          },
          "400" : {
            "description" : "60246 - id was not a valid Guid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Patch History not found"
          }
        }
      }
    },
    "/v4/AuditLog/PlatformScripts" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of platform script log entries",
        "operationId" : "AuditLog_GetPlatformScriptIndexAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PlatformScriptLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PlatformScriptLog"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/PlatformScripts/{platformId}/{id}/Raw" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a specific script in raw format",
        "operationId" : "AuditLog_GetRawPlatformScriptByIdAsync",
        "parameters" : [ {
          "name" : "platformId",
          "in" : "path",
          "description" : "Unique ID of the platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte",
                  "x-content-type" : "application/octet-stream"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/PlatformScripts/{platformId}/{id}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a specific base64 encoded script",
        "operationId" : "AuditLog_GetPlatformScriptByIdAsync",
        "parameters" : [ {
          "name" : "platformId",
          "in" : "path",
          "description" : "Unique ID of the platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Database Id of the log to retrieve",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/PlatformScripts/{platformId}" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets platform script log entries for a specific platform",
        "operationId" : "AuditLog_GetPlatformScriptLogByIdAsync",
        "parameters" : [ {
          "name" : "platformId",
          "in" : "path",
          "description" : "Unique ID of the platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlatformScriptLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlatformScriptLog"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Retention/SigningCertificate/History" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets the audit log signing certificate history",
        "operationId" : "AuditLog_GetSigningCertificateHistoryAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateLog"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/Retention/SigningCertificate" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets the audit log signing certificate",
        "operationId" : "AuditLog_GetSigningCertificateAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Update the audit log signing certificate",
        "operationId" : "AuditLog_SaveSigningCertificateAsync",
        "requestBody" : {
          "description" : "Settings to save",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Reset the audit log signing certificate",
        "operationId" : "AuditLog_ResetSigningCertificateAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuditLog/Search" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets a set of AuditSearchLog entries",
        "operationId" : "AuditLog_SearchAuditLogAsync",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "Get activity that occurred for a specific audit category (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AuditLogCategory"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific user (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "accountId",
          "in" : "query",
          "description" : "Get activity that occurred for a specific account (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditSearchLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditSearchLog"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user."
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuditLog/StreamService" : {
      "get" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Gets current state of the audit log stream service.\r\nThe audit log stream service is the ability for the audit log data to be requested by and streamed to a linked SPS appliance.",
        "operationId" : "AuditLog_GetAuditLogStreamServiceAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogStreamService"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogStreamService"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "AuditLog" ],
        "summary" : "Update the audit log streaming service.",
        "operationId" : "AuditLog_UpdateAccessRequestBrokerAsync",
        "requestBody" : {
          "description" : "Audit log streaming service",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AuditLogStreamService"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogStreamService"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditLogStreamService"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuthenticationProviders" : {
      "get" : {
        "tags" : [ "AuthenticationProviders" ],
        "summary" : "Gets a queryable list of authentication providers",
        "operationId" : "AuthenticationProviders_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuthenticationProvider"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuthenticationProvider"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/AuthenticationProviders/{id}/ForceAsDefault" : {
      "post" : {
        "tags" : [ "AuthenticationProviders" ],
        "summary" : "When set to {true} on a provider, the login page will not display a drop down list\r\n            of all available providers. Instead, the end user will be defaulted in to using the specified provider.\r\n            Only one provider can be marked as the default at a time. When updating the specified provider,\r\n            any previously set default will be cleared.\r\n            <br>If a default provider is set and you need to log in using some other provider, like the\r\n            Safeguard Local provider in order to log in as a local administrator user, a query string parameter\r\n            can be appended to the login page URL, 'primaryProviderID', where the value is set to the 'RstsProviderId'\r\n            you need. For example, \"https://<safeguard>/RSTS/Login?response_type=token&redirect_uri=https%3A%2F%2F<safeguard>%2F&primaryProviderID=local\".<br>You cannot set a provider that is used for two-factor authentication as the default.<br>This functionality is only applicable to web browser based logins, not programmatic API/OAuth2 logins.",
        "operationId" : "AuthenticationProviders_ForceAsDefaultAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the AuthenticationProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticationProvider"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticationProvider"
                }
              }
            }
          },
          "400" : {
            "description" : "60932 - A provider used for two-factor authentication cannot be set as the default.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Authentication provider not found"
          }
        }
      }
    },
    "/v4/AuthenticationProviders/{id}" : {
      "get" : {
        "tags" : [ "AuthenticationProviders" ],
        "summary" : "Gets a single authentication provider",
        "operationId" : "AuthenticationProviders_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of AuthenticationProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticationProvider"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuthenticationProvider"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/AuthenticationProviders/ClearDefault" : {
      "post" : {
        "tags" : [ "AuthenticationProviders" ],
        "summary" : "Any authentication provider that was marked as the default will be cleared such that the\r\n            system will not have a default provider and the login page will display a drop down list of all\r\n            available authentication providers for the user to choose from.",
        "operationId" : "AuthenticationProviders_ClearDefaultAsync",
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/CloudAssistant" : {
      "get" : {
        "tags" : [ "CloudAssistant" ],
        "summary" : "Get the Cloud Assistant status",
        "operationId" : "CloudAssistant_GetCloudAssistantStatusAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudAssistantStatus"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CloudAssistantStatus"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have Appliance, Policy, Operations or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "No API was found matching the given Id"
          }
        }
      }
    },
    "/v4/CloudAssistant/Disable" : {
      "post" : {
        "tags" : [ "CloudAssistant" ],
        "summary" : "Disable the Cloud Assistant integration for this cluster.",
        "operationId" : "CloudAssistant_DisableCloudAssistantAsync",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have Appliance, or Policy permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/CloudAssistant/Enable" : {
      "post" : {
        "tags" : [ "CloudAssistant" ],
        "summary" : "Enable the Cloud Assistant integration for this cluster.",
        "operationId" : "CloudAssistant_EnableCloudAssistantAsync",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have Appliance, or Policy permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/CloudAssistant/EnrolledUsers/{operation}" : {
      "post" : {
        "tags" : [ "CloudAssistant" ],
        "summary" : "Add/Remove users enrolled in Cloud Assistant",
        "operationId" : "CloudAssistant_ModifyCloudAssistantUsersAsync",
        "parameters" : [ {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to enroll/unenroll",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'users' parameter was missing"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/CloudAssistant/EnrolledUsers" : {
      "get" : {
        "tags" : [ "CloudAssistant" ],
        "summary" : "Gets all users enrolled in Cloud Assistant",
        "operationId" : "CloudAssistant_GetCloudAssistantEnrolledUsersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "CloudAssistant" ],
        "summary" : "Sets which users are enrolled in CloudAssistant",
        "operationId" : "CloudAssistant_SetCloudAssistantUsersAsync",
        "requestBody" : {
          "description" : "Users to enroll",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - 'users' parameter was missing"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "List of possible cluster actions",
        "operationId" : "Cluster_Get",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Applications" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Returns the list of applications.",
        "operationId" : "Cluster_GetApplicationsAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Application"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/BackupProtectionSettings" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Returns Backup Protection Settings",
        "operationId" : "Cluster_GetBackupProtectionSettingsAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BackupProtectionSettings"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BackupProtectionSettings"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Sets the Backup Protection Settings",
        "operationId" : "Cluster_SetBackupProtectionSettingsAsync",
        "requestBody" : {
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BackupProtectionSettings"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BackupProtectionSettings"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BackupProtectionSettings"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BackupProtectionSettings"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BackupProtectionSettings"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BackupProtectionSettings"
                }
              }
            }
          },
          "400" : {
            "description" : "This action cannot be performed in the current appliance state.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Certificates" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets the list of cluster certificates",
        "operationId" : "Cluster_GetAllClusterCertificatesAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Certificates/{type}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets the public information for a cluster certificate by type",
        "operationId" : "Cluster_GetClusterCertificateAsync",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Certificate type to get. Supported types are ClusterRoot, SecureTokenService, AuditLogSigning.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/CertificateType"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "400" : {
            "description" : "70008 - Invalid certificate type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets a list of managed networks configuration",
        "operationId" : "Cluster_GetNetworksAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ManagedNetwork"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ManagedNetwork"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Creates a managed network configuration",
        "operationId" : "Cluster_CreateEntityAsync",
        "requestBody" : {
          "description" : "Entity to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManagedNetwork"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks/{id}/Assets/{operation}" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Add/Remove assets assigned to this managed network configuration",
        "operationId" : "Cluster_ModifySystemsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Assets to assign",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks/{id}/Assets" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets all assets that have been explicitly assigned to the managed network configuration",
        "operationId" : "Cluster_GetNetworkAssetsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the managed network",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Explicitly assign a set of assets to this managed network configuration",
        "operationId" : "Cluster_SetNetworkSystemsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Assets to assign",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks/{id}/Members/{operation}" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Add/Remove members assigned to this managed network configuration",
        "operationId" : "Cluster_ModifyMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Member members to assign",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NetworkMember"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks/{id}/Members" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets all members that have been assigned to the managed network configuration",
        "operationId" : "Cluster_GetNetworkMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the managed network",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Sets the members assigned to this managed network configuration",
        "operationId" : "Cluster_SetNetworkMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Cluster members to assign",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/NetworkMember"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks/{id}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets a specific managed network configuration",
        "operationId" : "Cluster_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exists"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Updates a managed network configuration",
        "operationId" : "Cluster_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated entity",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ManagedNetwork"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster" ],
        "summary" : "Removes a managed network configuration. Appliances and assets will be assigned to the default network",
        "operationId" : "Cluster_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/ManagedNetworks/TestAddress" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Check which managed network the specified network address would be assigned to",
        "operationId" : "Cluster_TestNetworkAddressAsync",
        "requestBody" : {
          "description" : "Network address to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin or AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/Members" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return information about all appliances in this cluster.",
        "operationId" : "Cluster_GetMembersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ClusterMember"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Enrolls a new member in this cluster.",
        "operationId" : "Cluster_EnrollMemberAsync",
        "requestBody" : {
          "description" : "Information about the appliance enrolling",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EnrollNewClusterMember"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "60398 - Cannot remove a member while an appliance is enrolling in the cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Members/{id}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return information about a specific appliance in this cluster.",
        "operationId" : "Cluster_GetMemberByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of cluster member",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMember"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMember"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster" ],
        "summary" : "Unjoin a specific member, by id, from the cluster.",
        "operationId" : "Cluster_DeleteMemberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the member to be removed",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60398 - Cannot remove a member while an appliance is enrolling in the cluster",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - Member ID does not exist"
          }
        }
      }
    },
    "/v4/Cluster/Members/{id}/ManagedNetworks/{operation}" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Add/Remove network configuration assignments for this cluster member",
        "operationId" : "Cluster_ModifyClusterMemberNetworksAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Network configurations to assign this cluster member to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/Cluster/Members/{id}/ManagedNetworks" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets all network configurations managed by this cluster member",
        "operationId" : "Cluster_GetClusterMemberNetworksAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the cluster member",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ManagedNetwork"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ManagedNetwork"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Assigns this cluster member to a set of managed network configurations",
        "operationId" : "Cluster_SetClusterMemberNetworksAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the entity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Network configurations to assign this cluster member to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Entity does not exist"
          }
        }
      }
    },
    "/v4/Cluster/Members/{id}/Promote" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Designates a particular cluster member as the cluster leader.",
        "operationId" : "Cluster_SetLeaderAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "id of the cluster member to promote",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMember"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMember"
                }
              }
            }
          },
          "400" : {
            "description" : "60521 - Cannot failover to the Primary appliance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/Members/ActivatePrimary" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Promotes this appliance from StandaloneReadOnly to Online./>",
        "operationId" : "Cluster_ActivatePrimaryAsync",
        "responses" : {
          "200" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Invalid state transition"
          },
          "403" : {
            "description" : "The appliance is not in StandaloneReadOnly.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Members/ForceReset" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Force the cluster configuration on this appliance to reset to a single\r\nappliance operating as a primary. After resetting the cluster configuration\r\nthe appliance will come online in a deactivated mode to avoid conflicts with\r\npassword check/change operations.",
        "operationId" : "Cluster_ForceResetAsync",
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Members/Reset" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Resets the cluster configuration regardless of consensus.",
        "operationId" : "Cluster_ResetMemberAsync",
        "requestBody" : {
          "description" : "New cluster configuration.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ClusterConfiguration"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Members/Self" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Force a health check and return cluster information for this node",
        "operationId" : "Cluster_GetSelfAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMember"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterMember"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Patch/PreconditionCheck" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Returns precondition errors and warnings from the currently staged patch for the entire cluster.",
        "operationId" : "Cluster_CheckPreconditionsAsync",
        "responses" : {
          "200" : {
            "description" : "Success - a staged patch exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterPatchPreconditionResult"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterPatchPreconditionResult"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content - no staged patch"
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/SessionModules" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return information about all of the connected session modules for this cluster.",
        "operationId" : "Cluster_GetSessionModuleConnectionsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeDisconnected",
          "in" : "query",
          "description" : "Include disconnected session modules",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SessionModuleConnection"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SessionModuleConnection"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Starts the trust to create a session connection to link an external session module to this cluster.\r\nNote: This will only be invoked from SPS. They don't know about ApiError so it is best\r\nto keep the response simple.",
        "operationId" : "Cluster_ConnectSessionModuleAsync",
        "requestBody" : {
          "description" : "Connection information for the new external session module",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionModuleConnection"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnection"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnection"
                }
              }
            }
          },
          "202" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Missing, invalid, or non-unique information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "This action can only be performed on the primary appliance (not replica)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return information about a connected session module for this cluster.",
        "operationId" : "Cluster_GetSessionModuleConnectionByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnection"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnection"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Update the connection information for a specific session module in this cluster.",
        "operationId" : "Cluster_UpdateConnectedSessionModuleAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Connection information for the external session module.  Only the description and IP address can be modified.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SessionModuleConnection"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnection"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnection"
                }
              }
            }
          },
          "400" : {
            "description" : "Missing connection information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "This action can only be performed on the primary appliance (not replica)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster" ],
        "summary" : "Disconnect a specific external session module from the cluster.",
        "operationId" : "Cluster_DeleteSessionModuleConnectionAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of the session module to be disconnected",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}/ConnectionPolicies/{policyId}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return a connection policy by session module.",
        "operationId" : "Cluster_GetSessionModuleConnectionPolicyByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "policyId",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "Filter the results by protocol (RDP | SSH (default))",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SessionModuleConnectionProtocol"
          }
        }, {
          "name" : "refresh",
          "in" : "query",
          "description" : "Force a refresh of the session connection policies.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnectionPolicy"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionModuleConnectionPolicy"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}/ConnectionPolicies" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return a list of connection policies by session module.",
        "operationId" : "Cluster_GetSessionModuleConnectionPoliciesByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "protocol",
          "in" : "query",
          "description" : "Filter the results by protocol (RDP | SSH (default))",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SessionModuleConnectionProtocol"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "refresh",
          "in" : "query",
          "description" : "Force a refresh of the session connection policies.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SessionModuleConnectionPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SessionModuleConnectionPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}/Members/{memberId}/ManagedNetworks/{operation}" : {
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Add/Remove network configuration assignments for this managed host member.",
        "operationId" : "Cluster_AddRemoveManagedNetworkBySessionModuleAndMemberIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "memberId",
          "in" : "path",
          "description" : "Unique ID of the member",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Network configurations to assign this managed host member",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}/Members/{memberId}/ManagedNetworks" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return the managed networks by session module and member id.",
        "operationId" : "Cluster_GetManagedNetworksBySessionModuleAndMemberIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "memberId",
          "in" : "path",
          "description" : "Unique ID of the member",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Assigns this managed host member to a set of managed network configurations.",
        "operationId" : "Cluster_AssignManagedNetworkBySessionModuleAndMemberIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "memberId",
          "in" : "path",
          "description" : "Unique ID of the member",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Network configurations to assign this managed host member",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ManagedNetwork"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}/Members/{memberId}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return a managed host member by session module and member id.",
        "operationId" : "Cluster_GetSessionModuleClusterNodeByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "memberId",
          "in" : "path",
          "description" : "Unique ID of the member",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkMember"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkMember"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/{id}/Members" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return a list of the managed host members by session module.",
        "operationId" : "Cluster_GetSessionModuleClusterNodesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the session module",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/AccessRequestBroker" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets the access request broker.",
        "operationId" : "Cluster_GetAccessRequestBrokerAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestBroker"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestBroker"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Cluster" ],
        "summary" : "Update the access request broker.",
        "operationId" : "Cluster_UpdateAccessRequestBrokerAsync",
        "requestBody" : {
          "description" : "Access request broker",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AccessRequestBroker"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestBroker"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccessRequestBroker"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/ConnectionPolicies" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return a list of connection policies from the connected session modules in the cluster.",
        "operationId" : "Cluster_GetSessionModuleConnectionPoliciesAsync",
        "parameters" : [ {
          "name" : "protocol",
          "in" : "query",
          "description" : "Filter the results by protocol (RDP | SSH (default))",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SessionModuleConnectionProtocol"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "refresh",
          "in" : "query",
          "description" : "Force a refresh of the session connection policies.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SessionModuleConnectionPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SessionModuleConnectionPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/Members" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return a list of all cluster members.",
        "operationId" : "Cluster_GetAllClusterNodesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NetworkMember"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/SessionModules/UsingExternal" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Return whether the cluster is configured to use external session modules.",
        "operationId" : "Cluster_GetExternalSessionModuleStateAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Cluster/Status" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Returns the cluster lock status.",
        "operationId" : "Cluster_GetStatusAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterOperationStatus"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ClusterOperationStatus"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/ForceComplete" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Force the current cluster operation to complete.",
        "operationId" : "Cluster_ForceCompleteAsync",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/Isolate" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Isolate the appliance to be available for access requests despite its inability\r\nto communicate with the rest of the cluster.",
        "operationId" : "Cluster_IsolateAsync",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/PatchDistribution" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets the status of the patch distribution in cluster",
        "operationId" : "Cluster_PatchDistributionAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatchDistributionModel"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatchDistributionModel"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/PlatformTaskLoadStatus/{taskName}" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Get currently scheduled tasks",
        "operationId" : "Cluster_GetScheduledPlatformTasksAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "Type of scheduled tasks to find",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ScheduledTaskNames"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ScheduledTask"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ScheduledTask"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/PlatformTaskLoadStatus/Summaries" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Get summarized counts of currently scheduled tasks based on an interval",
        "operationId" : "Cluster_GetScheduledPlatformTasksSummariesAsync",
        "parameters" : [ {
          "name" : "summaryIntervalMinutes",
          "in" : "query",
          "description" : "Interval to summarize tasks. Minimum 30 minutes. (Default = 30 minutes)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 30
          }
        }, {
          "name" : "taskNames",
          "in" : "query",
          "description" : "A comma-separated list of task names to include in entity output. (Default = all)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SummaryInformation"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SummaryInformation"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/PlatformTaskLoadStatus" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Get information about platform tasks load",
        "operationId" : "Cluster_GetLoadStatusAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlatformTaskLoadStatus"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlatformTaskLoadStatus"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/Status/Reintegrate" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Reverts the Isolate and reintegrates the appliance back in the cluster.",
        "operationId" : "Cluster_ReintegrateAsync",
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/VMCompatibleBackup/Authorization" : {
      "get" : {
        "tags" : [ "Cluster" ],
        "summary" : "Gets the VM Compatible Backup Authorization Setting",
        "operationId" : "Cluster_GetVMCompatibleAuthorization",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMCompatibleBackupAuthorizationSetting"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMCompatibleBackupAuthorizationSetting"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster" ],
        "summary" : "Revokes the VM Compatible Backup Authorization",
        "operationId" : "Cluster_DeleteVMCompatibleAuthorizationAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMCompatibleBackupAuthorizationSetting"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VMCompatibleBackupAuthorizationSetting"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be primary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/VMCompatibleBackup/ChallengeRequest" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Generates a OneIdentity Challenge to authorize VM Compatible Backup download.",
        "operationId" : "Cluster_PostVmCompatibleAuthorizationRequestAsync",
        "parameters" : [ {
          "name" : "userIdentifier",
          "in" : "query",
          "description" : "The user who is requesting the challenge.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "invalidateExistingChallengeRequest",
          "in" : "query",
          "description" : "Specify true if you wish to invalidate the existing request and use this one.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "60920 - A challenge request requires a user identifier such as a name or email address.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be primary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "410" : {
            "description" : "Must be hardware",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Cluster" ],
        "summary" : "Deletes all existing challenge requests",
        "operationId" : "Cluster_DeleteAllChallengeRequestsAsync",
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "403" : {
            "description" : "Must be primary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "410" : {
            "description" : "Must be hardware",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Cluster/VMCompatibleBackup/ChallengeResponse" : {
      "post" : {
        "tags" : [ "Cluster" ],
        "summary" : "Using a OneIdentity Challenge Response json string, authorize download of VM compatible backups for the cluster.",
        "operationId" : "Cluster_VmCompatibleAuthorizationResponseAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "60707 - The challenge was generated for '{action}' and cannot be used for '{action}'.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Encrypted Response is not correct",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must be primary",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "410" : {
            "description" : "Must be hardware",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/DailyMessage" : {
      "get" : {
        "tags" : [ "DailyMessage" ],
        "summary" : "Gets the Message of the Day",
        "operationId" : "DailyMessage_GetAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyMessage"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "DailyMessage" ],
        "summary" : "Updates the Message of the Day",
        "operationId" : "DailyMessage_UpdateEntityAsync",
        "requestBody" : {
          "description" : "Updated Message of the day",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DailyMessage"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyMessage"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DailyMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin or AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a list of delete types",
        "operationId" : "Deleted_GetSubUrls",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedEntityType"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedEntityType"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/AssetAccounts" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a list of deleted asset accounts",
        "operationId" : "Deleted_GetDeletedAssetAccountsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedAssetAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedAssetAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/AssetAccounts/{id}" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a single deleted asset account entity",
        "operationId" : "Deleted_GetDeletedAssetAccountByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an asset account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletedAssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletedAssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset account does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Deleted" ],
        "summary" : "Purge a single deleted asset account entity. It will no longer be recoverable.",
        "operationId" : "Deleted_PurgeDeletedAssetAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/AssetAccounts/{id}/Restore" : {
      "post" : {
        "tags" : [ "Deleted" ],
        "summary" : "Restore a single deleted asset account entity",
        "operationId" : "Deleted_RestoreDeletedAssetAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an asset account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Asset account to restore",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AssetAccount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AssetAccount"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset account does not exist"
          }
        }
      }
    },
    "/v4/Deleted/Assets" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a list of deleted assets",
        "operationId" : "Deleted_GetDeletedAssetsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedAsset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Deleted/Assets/{id}" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a single deleted asset entity",
        "operationId" : "Deleted_GetDeletedAssetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletedAsset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletedAsset"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Deleted" ],
        "summary" : "Purge a single deleted asset entity. It will no longer be recoverable.",
        "operationId" : "Deleted_PurgeDeletedAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/Assets/{id}/Restore" : {
      "post" : {
        "tags" : [ "Deleted" ],
        "summary" : "Restore a single deleted asset entity",
        "operationId" : "Deleted_RestoreDeletedAssetAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an Asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Asset to restore",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Asset"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Asset"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Asset does not exist"
          }
        }
      }
    },
    "/v4/Deleted/PurgeSettings" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets the current purge settings",
        "operationId" : "Deleted_GetPurgeSettingsAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeSettings"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeSettings"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Deleted" ],
        "summary" : "Updates the purge settings",
        "operationId" : "Deleted_UpdatePurgeSettingsAsync",
        "requestBody" : {
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurgeSettings"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurgeSettings"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurgeSettings"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PurgeSettings"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeSettings"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeSettings"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/Users" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a list of deleted users",
        "operationId" : "Deleted_GetDeletedUsersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedUser"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DeletedUser"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/Users/{id}" : {
      "get" : {
        "tags" : [ "Deleted" ],
        "summary" : "Gets a single deleted user entity",
        "operationId" : "Deleted_GetDeletedUserByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a user",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletedUser"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeletedUser"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Deleted" ],
        "summary" : "Purge a single deleted user entity. It will no longer be recoverable.",
        "operationId" : "Deleted_PurgeDeletedUserAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a user",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Deleted/Users/{id}/Restore" : {
      "post" : {
        "tags" : [ "Deleted" ],
        "summary" : "Restore a single deleted user entity",
        "operationId" : "Deleted_RestoreDeletedUserAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a user",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "User to restore",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      }
    },
    "/v4/EmailClientConfig" : {
      "get" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Gets the email client configuration",
        "operationId" : "EmailClientConfig_GetEmailConfigAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailClientConfig"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailClientConfig"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "EmailClientConfig does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Updates the email client configuration",
        "operationId" : "EmailClientConfig_UpdateEntityAsync",
        "requestBody" : {
          "description" : "Updated EmailClientConfig",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailClientConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailClientConfig"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailClientConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "60113 - Failed to configure the SMTP relay server",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/EmailClientConfig/ClientCertificate/History" : {
      "get" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Gets the email client authentication certificate history",
        "operationId" : "EmailClientConfig_GetAuthenticationCertificateHistoryAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateLog"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/EmailClientConfig/ClientCertificate" : {
      "get" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Gets the email client authentication certificate",
        "operationId" : "EmailClientConfig_GetAuthenticationCertificateAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Update the email client authentication certificate",
        "operationId" : "EmailClientConfig_SaveAuthenticationCertificateAsync",
        "requestBody" : {
          "description" : "Settings to save",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Reset the email client authentication certificate",
        "operationId" : "EmailClientConfig_ResetAuthenticationCertificateAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/EmailClientConfig/SendTestEmail" : {
      "post" : {
        "tags" : [ "EmailClientConfig" ],
        "summary" : "Sends an email via an SMTP server",
        "operationId" : "EmailClientConfig_SendTestEmailAsync",
        "requestBody" : {
          "description" : "Email configuration overrides for test email",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestEmailClientConfig"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestEmailClientConfig"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestEmailClientConfig"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestEmailClientConfig"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "502" : {
            "description" : "Email Delivery Failed"
          }
        }
      }
    },
    "/v4/EmailTemplates" : {
      "get" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Gets a list of templates",
        "operationId" : "EmailTemplates_GetEmailTemplatesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EmailTemplate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EmailTemplate"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/EmailTemplates/{id}" : {
      "get" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Gets a single template",
        "operationId" : "EmailTemplates_GetEmailTemplateByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EmailTemplate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Updates an email template",
        "operationId" : "EmailTemplates_UpdateEmailTemplateAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EmailTemplate to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        } ],
        "requestBody" : {
          "description" : "Updated EmailTemplate",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "EmailTemplate does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Resets an email template to the default",
        "operationId" : "EmailTemplates_ResetEmailTemplateAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EmailTemplate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/EmailTemplates/{id}/Event" : {
      "get" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Gets the event associated with an email template",
        "operationId" : "EmailTemplates_GetEmailTemplateEventAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EmailTemplate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/EmailTemplates/{id}/RenderTestEmail" : {
      "post" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Renders a sample event notification email using a template",
        "operationId" : "EmailTemplates_RenderEmailTemplateTestEmailByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EmailTemplate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          },
          "502" : {
            "description" : "Email Delivery Failed"
          }
        }
      }
    },
    "/v4/EmailTemplates/{id}/SendTestEmail" : {
      "post" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Sends a sample event notification email using a template",
        "operationId" : "EmailTemplates_SendEmailTemplateTestEmailByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EmailTemplate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        } ],
        "requestBody" : {
          "description" : "email address to send test email to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Email Delivery Failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/EmailTemplates/RenderTestEmail" : {
      "post" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Renders a sample event notification email using template data",
        "operationId" : "EmailTemplates_RenderEmailTemplateTestEmailAsync",
        "requestBody" : {
          "description" : "Email template to render test email for",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EmailTemplate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/EmailTemplates/SendTestEmail" : {
      "post" : {
        "tags" : [ "EmailTemplates" ],
        "summary" : "Sends a sample event notification email using template data",
        "operationId" : "EmailTemplates_SendEmailTemplateTestEmailAsync",
        "requestBody" : {
          "description" : "Email template to render test email for",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SendTestEmailParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400" : {
            "description" : "Email Delivery Failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Gets multiple events",
        "operationId" : "Events_GetEventsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Events/{id}" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Gets a particular event",
        "operationId" : "Events_GetEventById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Event",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/EventName"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Events/FireTestEvent" : {
      "post" : {
        "tags" : [ "Events" ],
        "summary" : "Fires a test event for the purpose of verifying event notification configurations",
        "operationId" : "Events_FireTestEventAsync",
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/EventSubscribers" : {
      "get" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Gets a list of event subscribers",
        "operationId" : "EventSubscribers_GetEventSubscribersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscriber"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscriber"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Creates a new event subscriber",
        "operationId" : "EventSubscribers_CreateEventSubscriberAsync",
        "requestBody" : {
          "description" : "EventSubscriber to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventSubscriber"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriber"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriber"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/EventSubscribers/{id}" : {
      "get" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Gets an event subscriber",
        "operationId" : "EventSubscribers_GetEventSubscriberByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of EventSubscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriber"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriber"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Updates the event subscriber",
        "operationId" : "EventSubscribers_UpdateSubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EventSubscriber to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated EventSubscriber",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EventSubscriber"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriber"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriber"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "EventSubscriber does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Removes an event subscriber",
        "operationId" : "EventSubscribers_DeleteEventSubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EventSubscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/EventSubscribers/{id}/Subscriptions/{operation}" : {
      "post" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Add/Remove subscriptions to receive notifications for the specified events",
        "operationId" : "EventSubscribers_ModifyEventSubscriptionsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EventSubscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Events to subscribe to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscription"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscription"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "EventSubscriber does not exist"
          }
        }
      }
    },
    "/v4/EventSubscribers/{id}/Subscriptions" : {
      "get" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Gets a list of events subscribed to",
        "operationId" : "EventSubscribers_GetEventSubscriptionsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EventSubscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscription"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscription"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "EventSubscribers" ],
        "summary" : "Subscribes to receive notifications for the specified events",
        "operationId" : "EventSubscribers_SetEventSubscriptionsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the EventSubscription",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Events to subscribe to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscription"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscription"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "EventSubscriber does not exist"
          }
        }
      }
    },
    "/v4/HardwareSecurityModule" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Gets the hardware security module integration status.",
        "operationId" : "HardwareSecurityModule_GetHardwareSecurityModuleAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HardwareSecurityModuleStatus"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HardwareSecurityModuleStatus"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Updates the hardware security module configuration.",
        "operationId" : "HardwareSecurityModule_PutHardwareSecurityModuleAsync",
        "requestBody" : {
          "description" : "The hardware security module configuration details.",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HardwareSecurityModuleStatus"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HardwareSecurityModuleStatus"
                }
              }
            }
          },
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Enables the hardware security module integration for the cluster.",
        "operationId" : "HardwareSecurityModule_PostHardwareSecurityModuleAsync",
        "requestBody" : {
          "description" : "The hardware security module configuration details.",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Disables the hardware security module integration.",
        "operationId" : "HardwareSecurityModule_DeleteHardwareSecurityModuleAsync",
        "responses" : {
          "202" : {
            "description" : "Accepted"
          },
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/HardwareSecurityModule/ClientCertificates/{thumbprint}/Appliances" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Gets the appliances the specified hardware security module certificate is used by.",
        "operationId" : "HardwareSecurityModule_GetAppliancesByThumbprintAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Updates the appliances this client certificate is used by.",
        "operationId" : "HardwareSecurityModule_AssignClientCertificateByThumbprintAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Appliance"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/HardwareSecurityModule/ClientCertificates/{thumbprint}" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Gets a hardware security module client certificate.",
        "operationId" : "HardwareSecurityModule_GetClientCertificateByThumbprintAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Deletes a client certificate.",
        "operationId" : "HardwareSecurityModule_DeleteClientCertificatesAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "The thumbprint of the certificate to delete.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/HardwareSecurityModule/ClientCertificates" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Gets the hardware security module client certificates.",
        "operationId" : "HardwareSecurityModule_GetClientCertificatesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SslCertificate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SslCertificate"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Adds a hardware security module client certificate.",
        "operationId" : "HardwareSecurityModule_PostClientCertificatesAsync",
        "requestBody" : {
          "description" : "The client certificate to add.",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleClientCertificate"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleClientCertificate"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleClientCertificate"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/HardwareSecurityModuleClientCertificate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/HardwareSecurityModule/ServerCertificates/{thumbprint}" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Gets a server certificate.",
        "operationId" : "HardwareSecurityModule_GetServerCertificateAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "The thumbprint of the certificate.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Deletes a server certificate.",
        "operationId" : "HardwareSecurityModule_DeleteServerCertificatesAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "The thumbprint of the certificate to delete.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/HardwareSecurityModule/ServerCertificates" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Gets the server certificates.",
        "operationId" : "HardwareSecurityModule_GetServerCertificatesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Adds a server certificate.",
        "operationId" : "HardwareSecurityModule_PostServerCertificatesAsync",
        "requestBody" : {
          "description" : "The server certificate to add.",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "text/json" : {
              "schema" : {
                "type" : "string"
              }
            },
            "application/*+json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/HardwareSecurityModule/Status" : {
      "get" : {
        "tags" : [ "HardwareSecurityModule" ],
        "summary" : "Forces a health check, and gets the hardware security module integration status.",
        "operationId" : "HardwareSecurityModule_GetHardwareSecurityModuleStatusAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HardwareSecurityModuleStatus"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HardwareSecurityModuleStatus"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Identities" : {
      "get" : {
        "tags" : [ "Identities" ],
        "summary" : "Gets a list of identities",
        "operationId" : "Identities_GetIdentityAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin (fine-grain), PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Identities/{id}" : {
      "get" : {
        "tags" : [ "Identities" ],
        "summary" : "Gets a single identity",
        "operationId" : "Identities_GetIdentityByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Database ID of identity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, AssetAdmin (fine-grain), PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Identities/{id}/IdentityProvider" : {
      "get" : {
        "tags" : [ "Identities" ],
        "summary" : "Gets the IdentityProvider associated with the identity",
        "operationId" : "Identities_GetIdentityProviderAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Identity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Identities/{id}/User" : {
      "get" : {
        "tags" : [ "Identities" ],
        "summary" : "Gets the user associated with the identity",
        "operationId" : "Identities_GetIdentityUserAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Identity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, PolicyAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Identities/{id}/UserGroup" : {
      "get" : {
        "tags" : [ "Identities" ],
        "summary" : "Gets the UserGroup associated with the identity",
        "operationId" : "Identities_GetIdentityUserGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Identity",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, PolicyAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/IdentityProviders" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Gets a queryable list of identity providers",
        "operationId" : "IdentityProviders_GetIdentityProvidersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IdentityProvider"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IdentityProvider"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, ApplianceAdmin, OperationsAdmin, AssetAdmin, UserAdmin, PolicyAdmin, HelpdeskAdmin, or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Creates a new identity provider",
        "operationId" : "IdentityProviders_CreateIdentityProviderAsync",
        "requestBody" : {
          "description" : "IdentityProvider to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdentityProvider"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/IdentityProviders/{id}" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Gets a specific identity provider",
        "operationId" : "IdentityProviders_GetIdentityProviderByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, ApplianceAdmin, AssetAdmin, UserAdmin, PolicyAdmin, HelpdeskAdmin, or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Updates an existing identity provider",
        "operationId" : "IdentityProviders_UpdateIdentityProviderAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated IdentityProvider",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdentityProvider"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProvider"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Removes an identity provider",
        "operationId" : "IdentityProviders_DeleteIdentityProviderAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/IdentityProviders/{id}/DirectoryServiceEntries" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Searches the specified directory",
        "operationId" : "IdentityProviders_GetEntriesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Directory IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchType",
          "in" : "query",
          "description" : "Either User, Group, or Computer.  Defaults to User.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/DirectoryProviderSearchType"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectoryServiceEntry"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectoryServiceEntry"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/IdentityProviders/{id}/DirectoryUserGroups" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Searches the specified directory for Group objects as UserGroups",
        "operationId" : "IdentityProviders_SearchUserGroupsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Directory IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/IdentityProviders/{id}/DirectoryUsers" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Searches the specified directory for User objects as Users",
        "operationId" : "IdentityProviders_SearchUsersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of a Directory IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/IdentityProviders/{id}/Synchronize" : {
      "post" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Synchronize all directory related objects with the remote server",
        "operationId" : "IdentityProviders_SynchronizeAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the directory",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fullSync",
          "in" : "query",
          "description" : "Whether to sync all entities imported from this directory or just those that have been modified",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DirectorySyncActivityLog"
                }
              }
            }
          },
          "201" : {
            "description" : "Created"
          },
          "202" : {
            "description" : "Accepted"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Directory not found"
          }
        }
      }
    },
    "/v4/IdentityProviders/{id}/Type" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Gets the identity provider type associated with this provider",
        "operationId" : "IdentityProviders_GetProviderTypeAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the IdentityProvider",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProviderType"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProviderType"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/IdentityProviders/DefaultSchema/{typeRefName}" : {
      "get" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Get default schema for directory provider",
        "operationId" : "IdentityProviders_GetDefaultSchema",
        "parameters" : [ {
          "name" : "typeRefName",
          "in" : "path",
          "description" : "Identity provider type name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultProviderLdapSchema"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DefaultProviderLdapSchema"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform not found"
          }
        }
      }
    },
    "/v4/IdentityProviders/DiscoverDomains" : {
      "post" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Discovers the available domains using provided domain credentials",
        "operationId" : "IdentityProviders_DiscoverDomainsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Credentials for authenticating to the directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdentityProviderSchemaParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DomainInfo"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DomainInfo"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/IdentityProviders/DiscoverSchema/{objectClassName}" : {
      "post" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Discovers the available schema attributes using provided domain credentials for a specific object class",
        "operationId" : "IdentityProviders_DiscoverSchemaByClassAsync",
        "parameters" : [ {
          "name" : "objectClassName",
          "in" : "path",
          "description" : "Name of object class to discover schema for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Credentials for authenticating to active directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdentityProviderSchemaParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/IdentityProviders/DiscoverSchema" : {
      "post" : {
        "tags" : [ "IdentityProviders" ],
        "summary" : "Discovers the available schema attributes using provided domain credentials",
        "operationId" : "IdentityProviders_DiscoverSchemaAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Credentials for authenticating to the directory",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IdentityProviderSchemaParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectorySchema"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/IdentityProviderTypes" : {
      "get" : {
        "tags" : [ "IdentityProviderTypes" ],
        "summary" : "Gets a list of identity provider types",
        "operationId" : "IdentityProviderTypes_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IdentityProviderType"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IdentityProviderType"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/IdentityProviderTypes/{id}" : {
      "get" : {
        "tags" : [ "IdentityProviderTypes" ],
        "summary" : "Gets a single IdentityProviderType",
        "operationId" : "IdentityProviderTypes_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of IdentityProviderType",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProviderType"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IdentityProviderType"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Licenses" : {
      "get" : {
        "tags" : [ "Licenses" ],
        "summary" : "Gets all licenses currently staged or install on the appliance.",
        "operationId" : "Licenses_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProductLicense"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ProductLicense"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Installed licenses returned."
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Licenses" ],
        "summary" : "Stages a license file contained in the JSON object, Base64 encoded.",
        "operationId" : "Licenses_PostLicenseAsJsonAsync",
        "requestBody" : {
          "description" : "The LicenseFile object containing the Base64 encoded license file.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LicenseFile"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The license was validated and staged.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              }
            }
          },
          "400" : {
            "description" : "60252 - The incoming data or license failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Licenses/{key}" : {
      "get" : {
        "tags" : [ "Licenses" ],
        "summary" : "Gets installed license matching the given key.",
        "operationId" : "Licenses_GetByKeyAsync",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "License key of the license to return.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              }
            }
          },
          "400" : {
            "description" : "60251 - License Key missing from request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "No license with the given key was found."
          }
        }
      },
      "delete" : {
        "tags" : [ "Licenses" ],
        "summary" : "Removes an installed license.",
        "operationId" : "Licenses_DeleteAsync",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "License key of the license to remove.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The license was successfully removed."
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Licenses/{key}/Install" : {
      "post" : {
        "tags" : [ "Licenses" ],
        "summary" : "Installs the staged license with the given signature.",
        "operationId" : "Licenses_PostInstallAsync",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The license key of the staged license to install.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The license was installed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              }
            }
          },
          "400" : {
            "description" : "60259 - Failed to move license from staged to installed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "No staged licenses found matching the given signature."
          }
        }
      }
    },
    "/v4/Licenses/Raw" : {
      "post" : {
        "tags" : [ "Licenses" ],
        "summary" : "Stages a license file as a raw stream.",
        "operationId" : "Licenses_PostRawLicenseAsync",
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "$ref" : "#/components/schemas/Licenses_Raw_body"
              },
              "encoding" : {
                "_" : {
                  "style" : "form"
                }
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "The license was validated and staged.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProductLicense"
                }
              }
            }
          },
          "400" : {
            "description" : "The incoming data or license failed validation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "411" : {
            "description" : "The Content-Length header is missing from the request."
          }
        }
      }
    },
    "/v4/Licenses/Sta" : {
      "get" : {
        "tags" : [ "Licenses" ],
        "summary" : "Returns whether the Software Transaction Agreement has been accepted by a user already",
        "operationId" : "Licenses_GetStaAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StaAcceptance"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StaAcceptance"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed to get STA Acceptance status.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Licenses" ],
        "summary" : "Records user's acceptance of the Software Transaction Agreement",
        "operationId" : "Licenses_PostStaAsync",
        "responses" : {
          "200" : {
            "description" : "The user's acceptance was stored successfully.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StaAcceptance"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StaAcceptance"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed to store STA acceptance.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Licenses/Summary" : {
      "get" : {
        "tags" : [ "Licenses" ],
        "summary" : "Gets a summary of licenses.",
        "operationId" : "Licenses_GetSummaryAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseSummary"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LicenseSummary"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Authentication is not required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/LoginMessage" : {
      "get" : {
        "tags" : [ "LoginMessage" ],
        "summary" : "Gets the Login Message",
        "operationId" : "LoginMessage_GetAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginMessage"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "LoginMessage" ],
        "summary" : "Updates the Login Message",
        "operationId" : "LoginMessage_UpdateEntityAsync",
        "requestBody" : {
          "description" : "Updated Login Message",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginMessage"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginMessage"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginMessage"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a fully expanded representation of an authenticated user",
        "operationId" : "Me_GetMeAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Me"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Me"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Allows the current user to update the email address, phone number(s), photo, and time zone",
        "operationId" : "Me_UpdateMeAsync",
        "requestBody" : {
          "description" : "Updated User",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Me"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Me"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Me"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/AccessRequestAssets" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a list of assets that have accounts requestable by the specified user",
        "operationId" : "Me_GetAccessRequestAssetsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/AccessRequestAssets/{assetId}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a specific asset that can be requested by the specified user",
        "operationId" : "Me_GetAccessRequestAssetAsync",
        "parameters" : [ {
          "name" : "assetId",
          "in" : "path",
          "description" : "Unique identifier of the asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyAsset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyAsset"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v4/Me/ActionableRequests" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all requests that the current user can perform an action on",
        "operationId" : "Me_GetActionableRequestsAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionableAccessRequests"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ActionableAccessRequests"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v4/Me/ActionableRequests/{accessRequestRole}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all requests that the current user can perform an action on",
        "operationId" : "Me_GetActionableRequestsByRequestRoleAsync",
        "parameters" : [ {
          "name" : "accessRequestRole",
          "in" : "path",
          "description" : "Return results based on user's access request role, i.e. Requester, Approver, Reviewer, Admin",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/AccessRequestRole"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequest"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessRequest"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Fido2Authenticators" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all registered FIDO2 authenticators for the current user",
        "operationId" : "Me_GetFido2AuthenticatorsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Fido2Authenticator"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Fido2Authenticator"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Fido2Authenticators/{credentialId}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a specific FIDO2 authenticator that has been registered by the current user",
        "operationId" : "Me_GetFido2AuthenticatorAsync",
        "parameters" : [ {
          "name" : "credentialId",
          "in" : "path",
          "description" : "Unique, opaque identifier of the authenticator, in Base64Url encoded format",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fido2Authenticator"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fido2Authenticator"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates the user supplied friendly name given to a FIDO2 authenticator owned by the current user",
        "operationId" : "Me_SetFido2AuthenticatorNameAsync",
        "parameters" : [ {
          "name" : "credentialId",
          "in" : "path",
          "description" : "Unique, opaque identifier of the authenticator, in Base64Url encoded format",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Value to set for this preference",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Fido2Authenticator"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fido2Authenticator"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Fido2Authenticator"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - The entity's key value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Removes a FIDO2 authenticator from the current user",
        "description" : "After registering your first authenticator, you must always have at least one.  In other words, you cannot delete\r\n            all of the authenticators (this can, however, be done by an administrator).  In order to delete your last authenticator,\r\n            you must first register a new one, such that you have two.  Then you can choose to delete your previous authenticator.",
        "operationId" : "Me_DeleteFido2AuthenticatorAsync",
        "parameters" : [ {
          "name" : "credentialId",
          "in" : "path",
          "description" : "Unique, opaque identifier of the authenticator, in Base64Url encoded format",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Fido2Authenticators/RegistrationRedirect" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Get a secure string that is to be included as a query string parameter of an HTTP redirect request that will allow\r\n            the current user to register a new FIDO2 authenticator",
        "operationId" : "Me_GetFido2RegistrationRedirectAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v4/Me/LinkedPolicyAccounts" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Get policy accounts that have been linked to this user",
        "operationId" : "Me_GetLinkedAccountsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must have Auditor, or PolicyAdmin permission.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/OwnedPartitions" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all asset partitions owned by the user",
        "operationId" : "Me_GetMyPartitionsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPartition"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPartition"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Ownership" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets information about assets, partitions, accounts this user owns",
        "operationId" : "Me_GetMyOwnershipAsync",
        "parameters" : [ {
          "name" : "objectType",
          "in" : "query",
          "description" : "Optional Ownership Object Type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/OwnershipType"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnership"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnership"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Me/Password" : {
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Changes the local user's password. Requires that you know the user's current password",
        "operationId" : "Me_ChangeMyPasswordAsync",
        "requestBody" : {
          "description" : "Current password and the new password to set",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangePasswordParameters"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets the personal accounts for the current user",
        "operationId" : "Me_GetPersonalAccountsAsync",
        "parameters" : [ {
          "name" : "personalAccountType",
          "in" : "query",
          "description" : "Type of personal accounts to retrieve",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/PersonalAccountType"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PersonalAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PersonalAccount"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Adds a new personal account",
        "operationId" : "Me_AddPersonalAccountAsync",
        "requestBody" : {
          "description" : "PersonalAccount to add",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonalAccount"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60786 - Primary appliance is unavailable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/{id}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a personal account for the current user",
        "operationId" : "Me_GetPersonalAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates an existing personal account",
        "operationId" : "Me_UpdatePersonalAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PersonalAccount to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonalAccount"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60786 - Primary appliance is unavailable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Remove a personal account",
        "operationId" : "Me_DeletePersonalAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60786 - Primary appliance is unavailable",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/{id}/Password" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a personal account password for the current user",
        "operationId" : "Me_GetPersonalAccountPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account password",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates an existing personal account password",
        "operationId" : "Me_UpdatePersonalAccountPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Personal account Password to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60245 - Missing request body.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/{id}/PasswordHistory" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a personal account password for the current user",
        "operationId" : "Me_GetPersonalAccountPasswordHistoryAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account password",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for audit log queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PersonalAccountPasswordHistory"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PersonalAccountPasswordHistory"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/{id}/Share/{sharedWithId}" : {
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates the personal account share",
        "operationId" : "Me_UpdatePersonalAccountShareAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sharedWithId",
          "in" : "path",
          "description" : "Unique identifier of the user that the personal account is shared with",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PersonalAccountShare information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonalAccountShare"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60786 - Primary appliance is unavailable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Unshares a personal account with another user",
        "operationId" : "Me_UnsharePersonalAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "sharedWithId",
          "in" : "path",
          "description" : "Unique identifier of the user that the personal account is shared with",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found"
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/{id}/Share" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Shares a personal account with another user",
        "operationId" : "Me_SharePersonalAccountAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the personal account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "PersonalAccountShare information",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonalAccountShare"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonalAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "60786 - Primary appliance is unavailable",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/GeneratePassword" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Generates a new personal account password",
        "operationId" : "Me_GeneratePersonalAccountPasswordAsync",
        "requestBody" : {
          "description" : "Personal account password generation rules",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonalAccountPasswordRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "201" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "60783 - Failed to generate a password",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/PersonalAccounts/ShareWithUsers" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a list of users",
        "operationId" : "Me_GetUsersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ShareWithUser"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ShareWithUser"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/Photo" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets the user's photo",
        "operationId" : "Me_GetMyPhotoAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPhoto"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPhoto"
                }
              }
            }
          },
          "204" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates current users photo",
        "operationId" : "Me_UpdateMyPhotoAsync",
        "requestBody" : {
          "description" : "Updated Photo",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPhoto"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be authenticated",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Photo was not updated"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Removes current user photo",
        "operationId" : "Me_DeleteMyPhotoAsync",
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Photo/Raw" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets the user's photo in raw format",
        "operationId" : "Me_GetRawPhotoAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte",
                  "x-content-type" : "application/octet-stream"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "204" : {
            "description" : "Success"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates current user's photo in binary form",
        "operationId" : "Me_PutMyRawPhotoAsync",
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "$ref" : "#/components/schemas/Photo_Raw_body"
              },
              "encoding" : {
                "_" : {
                  "style" : "form"
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      }
    },
    "/v4/Me/Preferences" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all preferences for the current user",
        "operationId" : "Me_GetMyPreferencesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserPreference"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserPreference"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Preferences/{name}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a specific preference for the current user",
        "operationId" : "Me_GetMyPreferenceAsync",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Unique identifier of the UserPreference",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates or create a preference for the current user",
        "operationId" : "Me_SetMyPreferenceAsync",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Unique identifier of the UserPreference",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Value to set for this preference",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPreference"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Removes a preference for the current user",
        "operationId" : "Me_DeleteMyPreferenceAsync",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Unique identifier of the UserPreference",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/RequestEntitlements" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets the entitlements for the current user",
        "operationId" : "Me_GetAccessRequestEntitlementsAsync",
        "parameters" : [ {
          "name" : "accessRequestType",
          "in" : "query",
          "description" : "Only report on access via a specific request type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          }
        }, {
          "name" : "assetIds",
          "in" : "query",
          "description" : "List of asset IDs to get entitlements for (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountIds",
          "in" : "query",
          "description" : "List of account IDs to get entitlements for (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeActiveRequests",
          "in" : "query",
          "description" : "Whether to include information about active requests for same account",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MeEntitlement"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MeEntitlement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/RequestFavorites" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all favorite requests for the current user",
        "operationId" : "Me_GetRequestFavoritesAsync",
        "parameters" : [ {
          "name" : "includeActiveRequests",
          "in" : "query",
          "description" : "Whether to include information about active requests for same account",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRequestFavorite"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRequestFavorite"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Creates an UserRequestFavorite",
        "operationId" : "Me_CreateRequestFavoriteAsync",
        "requestBody" : {
          "description" : "UserRequestFavorite to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRequestFavorite"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRequestFavorite"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRequestFavorite"
                }
              }
            }
          },
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserRequestFavorite does not exist"
          }
        }
      }
    },
    "/v4/Me/RequestFavorites/{favoriteId}/Requests/{operation}" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Add/Remove the requests assigned to the specified request favorite",
        "operationId" : "Me_ModifyFavoriteRequestsAsync",
        "parameters" : [ {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "Unique ID of the request favorite",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Requests to assign to the UserRequestFavorite",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SavedAccessRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedAccessRequest"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedAccessRequest"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Missing one or more parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserRequestFavorite does not exist"
          }
        }
      }
    },
    "/v4/Me/RequestFavorites/{favoriteId}/Requests" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all requests belonging to the specified request favorite",
        "operationId" : "Me_GetFavoriteRequestsAsync",
        "parameters" : [ {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "Unique ID of the request favorite",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeActiveRequests",
          "in" : "query",
          "description" : "Whether to include information about active requests for same account",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedAccessRequest"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedAccessRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserRequestFavorite does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Sets the requests assigned to the specified request favorite",
        "operationId" : "Me_SetFavoriteRequestsAsync",
        "parameters" : [ {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "Unique ID of the request favorite",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Requests to assign to the UserRequestFavorite",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SavedAccessRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedAccessRequest"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SavedAccessRequest"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Missing one or more parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserRequestFavorite does not exist"
          }
        }
      }
    },
    "/v4/Me/RequestFavorites/{favoriteId}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a specific request favorites for the current user",
        "operationId" : "Me_GetRequestFavoriteAsync",
        "parameters" : [ {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "Unique ID of the request favorite",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeActiveRequests",
          "in" : "query",
          "description" : "Whether to include information about active requests for same account",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRequestFavorite"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRequestFavorite"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserRequestFavorite does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates an UserRequestFavorite",
        "operationId" : "Me_UpdateRequestFavoriteAsync",
        "parameters" : [ {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "Unique identifier of the UserRequestFavorite",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated UserRequestFavorite",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserRequestFavorite"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRequestFavorite"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserRequestFavorite"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserRequestFavorite does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Removes an UserRequestFavorite",
        "operationId" : "Me_DeleteRequestFavoriteAsync",
        "parameters" : [ {
          "name" : "favoriteId",
          "in" : "path",
          "description" : "Unique identifier of the UserRequestFavorite",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Roles" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets information about all roles the current user belongs to",
        "operationId" : "Me_GetMyRolesAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/ScheduledAuditLogReports" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all scheduled audit log search reports for the current user",
        "operationId" : "Me_GetScheduledAuditLogReportsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Creates a new scheduled audit log search report",
        "operationId" : "Me_CreateScheduledAuditLogSearchReportAsync",
        "requestBody" : {
          "description" : "Scheduled report to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScheduledAuditLogReport"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                }
              }
            }
          },
          "400" : {
            "description" : "60145 - Only API version 3 properties are supported for audit log reports.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/ScheduledAuditLogReports/{id}/Execute" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Executes the audit log search using saved report configuration",
        "operationId" : "Me_ExecuteScheduledAuditLogReportAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Scheduled report to execute",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Report has been successfully generated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditSearchLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AuditSearchLog"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/ScheduledAuditLogReports/{id}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a specific scheduled audit log search report for the current user",
        "operationId" : "Me_GetScheduledAuditLogReportAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the search",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "put" : {
        "tags" : [ "Me" ],
        "summary" : "Updates a scheduled audit log search report",
        "operationId" : "Me_UpdateScheduledAuditLogSearchReportAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the scheduled audit log search report",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated scheduled audit log search report",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScheduledAuditLogReport"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScheduledAuditLogReport"
                }
              }
            }
          },
          "400" : {
            "description" : "60145 - Only API version 3 properties are supported for audit log reports.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Audit log report does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Me" ],
        "summary" : "Removes a scheduled audit log search report",
        "operationId" : "Me_DeleteScheduledAuditLogReportAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the scheduled audit log search report",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Subscribers" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets all event subscribers for the current user",
        "operationId" : "Me_GetMySubscribersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MyEventSubscriber"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MyEventSubscriber"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Me/Subscribers/{id}" : {
      "get" : {
        "tags" : [ "Me" ],
        "summary" : "Gets a specific event subscriber for the current user",
        "operationId" : "Me_GetMySubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyEventSubscriber"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyEventSubscriber"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/Subscribers/{id}/Disable" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Disable event subscriber for the current user",
        "operationId" : "Me_DisableMySubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Subscribers",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyEventSubscriber"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyEventSubscriber"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Audit log report does not exist"
          }
        }
      }
    },
    "/v4/Me/Subscribers/{id}/Enable" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Enable event subscriber for the current user",
        "operationId" : "Me_EnableMySubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Subscribers",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyEventSubscriber"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyEventSubscriber"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI"
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Audit log report does not exist"
          }
        }
      }
    },
    "/v4/Me/Subscribers/Disable" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Disable event subscribers for the current user",
        "operationId" : "Me_DisableSubscribersAsync",
        "requestBody" : {
          "description" : "Unique identifier of the Subscribers",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            },
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            },
            "text/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            },
            "application/*+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MyEventSubscriber"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MyEventSubscriber"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/Subscribers/Enable" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Enable event subscribers for the current user",
        "operationId" : "Me_EnableSubscribersAsync",
        "requestBody" : {
          "description" : "Unique identifier of the Subscribers",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            },
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            },
            "text/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            },
            "application/*+json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MyEventSubscriber"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MyEventSubscriber"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Me/ValidatePassword" : {
      "post" : {
        "tags" : [ "Me" ],
        "summary" : "Validates that a password meets requirements",
        "operationId" : "Me_ValidateMyPasswordAsync",
        "requestBody" : {
          "description" : "Password to validate",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Platforms" : {
      "get" : {
        "tags" : [ "Platforms" ],
        "summary" : "Gets a list of platforms",
        "operationId" : "Platforms_GetPlatformsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Platform"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Platform"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Platforms" ],
        "summary" : "Create a starling connect or custom platform",
        "operationId" : "Platforms_CreatePlatformAsync",
        "requestBody" : {
          "description" : "Platform to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Platform"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Platforms/{id}" : {
      "get" : {
        "tags" : [ "Platforms" ],
        "summary" : "Gets a specific platform",
        "operationId" : "Platforms_GetPlatformByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Platforms" ],
        "summary" : "Updates a custom platform",
        "operationId" : "Platforms_UpdatePlatformAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Platform",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Platform"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Platforms" ],
        "summary" : "Removes a Platform",
        "operationId" : "Platforms_DeletePlatformAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Platforms/{id}/Script" : {
      "get" : {
        "tags" : [ "Platforms" ],
        "summary" : "Gets the script associated with a custom platform",
        "operationId" : "Platforms_GetPlatformScriptAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "No script defined"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Platforms" ],
        "summary" : "Updates script for the custom platform in base64 format",
        "operationId" : "Platforms_PutScriptAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated base64 platform script",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success - No Content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Platforms" ],
        "summary" : "Removes script for the custom platform",
        "operationId" : "Platforms_DeleteScriptAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have AssetAdmin permission"
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      }
    },
    "/v4/Platforms/{id}/Script/Raw" : {
      "get" : {
        "tags" : [ "Platforms" ],
        "summary" : "Gets the script associated with a custom platform in raw format",
        "operationId" : "Platforms_GetPlatformScriptRawAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte",
                  "x-content-type" : "application/octet-stream"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "204" : {
            "description" : "No script defined"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Platforms" ],
        "summary" : "Updates script for the custom platform in raw format. This receives an httpStream of the file contents of the platform script file.",
        "operationId" : "Platforms_PutRawScriptAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Platform",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "$ref" : "#/components/schemas/Script_Raw_body"
              },
              "encoding" : {
                "_" : {
                  "style" : "form"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      }
    },
    "/v4/Platforms/ValidateScript" : {
      "post" : {
        "tags" : [ "Platforms" ],
        "summary" : "Validates script for the custom platform in base64 format",
        "operationId" : "Platforms_ValidateScriptAsync",
        "requestBody" : {
          "description" : "Updated base64 platform script",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      }
    },
    "/v4/Platforms/ValidateScript/Raw" : {
      "post" : {
        "tags" : [ "Platforms" ],
        "summary" : "Validates script for the custom platform in raw format. This receives an httpStream of the file contents of the platform script file.",
        "operationId" : "Platforms_ValidateRawScriptAsync",
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "$ref" : "#/components/schemas/ValidateScript_Raw_body"
              },
              "encoding" : {
                "_" : {
                  "style" : "form"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Platform"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      }
    },
    "/v4/PolicyAccounts" : {
      "get" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Gets a list of accounts that can be assigned to a policy",
        "operationId" : "PolicyAccounts_GetPolicyAccountsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/PolicyAccounts/{id}" : {
      "get" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Gets a policy account",
        "operationId" : "PolicyAccounts_GetPolicyAccountByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of PolicyAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyAccount"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyAccount"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy Account does not exist"
          }
        }
      }
    },
    "/v4/PolicyAccounts/{id}/AccountGroups" : {
      "get" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Gets the account groups that manage an account belongs to",
        "operationId" : "PolicyAccounts_GetAccountGroupsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the PolicyAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy Account does not exist"
          }
        }
      }
    },
    "/v4/PolicyAccounts/{id}/LinkedUsers/{operation}" : {
      "post" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Add/Remove account linked users",
        "operationId" : "PolicyAccounts_ModifyLinkedUsersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the policy account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of users to be linked",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "70008 - Invalid enum value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy account does not exist"
          }
        }
      }
    },
    "/v4/PolicyAccounts/{id}/LinkedUsers" : {
      "get" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Get users that have been linked to this policy account",
        "operationId" : "PolicyAccounts_GetLinkedUsersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the policy account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy account does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Updates the set of users linked to this policy account",
        "operationId" : "PolicyAccounts_SaveLinkedUsersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the policy account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of users to be linked",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy account does not exist"
          }
        }
      }
    },
    "/v4/PolicyAccounts/{id}/Policies" : {
      "get" : {
        "tags" : [ "PolicyAccounts" ],
        "summary" : "Gets the policies that manage an account belongs to",
        "operationId" : "PolicyAccounts_GetPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the PolicyAccount",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy Account does not exist"
          }
        }
      }
    },
    "/v4/PolicyAssets" : {
      "get" : {
        "tags" : [ "PolicyAssets" ],
        "summary" : "Gets a list of assets that can be assigned to a policy",
        "operationId" : "PolicyAssets_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAsset"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/PolicyAssets/{id}" : {
      "get" : {
        "tags" : [ "PolicyAssets" ],
        "summary" : "Gets a policy asset",
        "operationId" : "PolicyAssets_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of PolicyAsset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyAsset"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PolicyAsset"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy Asset does not exist"
          }
        }
      }
    },
    "/v4/PolicyAssets/{id}/AssetGroups" : {
      "get" : {
        "tags" : [ "PolicyAssets" ],
        "summary" : "Gets all asset groups that a specific asset belongs to",
        "operationId" : "PolicyAssets_GetAssetGroupsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the PolicyAsset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy Asset does not exist"
          }
        }
      }
    },
    "/v4/PolicyAssets/{id}/DirectoryServiceEntries" : {
      "get" : {
        "tags" : [ "PolicyAssets" ],
        "summary" : "Searches the specified directory",
        "operationId" : "PolicyAssets_GetEntriesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an directory asset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "searchBase",
          "in" : "query",
          "description" : "Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of\r\nforest for AD.  Must be in DN Syntax.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchScope",
          "in" : "query",
          "description" : "Defines the scope of the query, either base, one, or sub, defaults to sub.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/SearchScope"
          }
        }, {
          "name" : "searchType",
          "in" : "query",
          "description" : "Either User, Group, or Computer.  Defaults to User.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/DirectorySearchType"
          }
        }, {
          "name" : "searchName",
          "in" : "query",
          "description" : "Sets a search constraint on the \"name\" of the object to return.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "default" : ""
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectoryServiceEntry"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DirectoryServiceEntry"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "IdentityProvider does not exist"
          }
        }
      }
    },
    "/v4/PolicyAssets/{id}/Policies" : {
      "get" : {
        "tags" : [ "PolicyAssets" ],
        "summary" : "Gets the policies that manage an asset belongs to",
        "operationId" : "PolicyAssets_GetPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the PolicyAsset",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Policy Asset does not exist"
          }
        }
      }
    },
    "/v4/ReasonCodes" : {
      "get" : {
        "tags" : [ "ReasonCodes" ],
        "summary" : "Gets a list of reason codes",
        "operationId" : "ReasonCodes_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReasonCode"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ReasonCodes" ],
        "summary" : "Creates a new reason code",
        "operationId" : "ReasonCodes_CreateEntityAsync",
        "requestBody" : {
          "description" : "ReasonCode to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReasonCode"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Reason Code not found"
          }
        }
      }
    },
    "/v4/ReasonCodes/{id}" : {
      "get" : {
        "tags" : [ "ReasonCodes" ],
        "summary" : "Gets a reason code",
        "operationId" : "ReasonCodes_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of ReasonCode",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Reason Code does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "ReasonCodes" ],
        "summary" : "Updates an existing application reason code",
        "operationId" : "ReasonCodes_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ReasonCode",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated ReasonCode",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReasonCode"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReasonCode"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ReasonCode does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "ReasonCodes" ],
        "summary" : "Removes a reason code",
        "operationId" : "ReasonCodes_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ReasonCode",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ReasonCodes/CheckUniqueName" : {
      "post" : {
        "tags" : [ "ReasonCodes" ],
        "summary" : "Checks if the current name is unique prior to create/update",
        "operationId" : "ReasonCodes_CheckUniqueNameAsync",
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission"
          }
        }
      }
    },
    "/v4/Reports" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Gets a list of report categories",
        "operationId" : "Reports_GetV3ReportCategories",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportCategories"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportCategories"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Entitlements" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Gets a list of report categories",
        "operationId" : "Reports_GetEntitlementReportTypes",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EntitlementReportTypes"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EntitlementReportTypes"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Entitlements/AccountEntitlements" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of what users can access a set of accounts",
        "operationId" : "Reports_GetAccountEntitlementsAsync",
        "parameters" : [ {
          "name" : "accountIds",
          "in" : "query",
          "description" : "Comma-separated list of accounts to report access for. Will report on all accounts by default. (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accessRequestType",
          "in" : "query",
          "description" : "Only report on access via a specific request type (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for entitlement queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAccountEntitlement"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAccountEntitlement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Entitlements/AssetEntitlements" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of what users can access accounts on a set of policy assets",
        "operationId" : "Reports_GetAssetEntitlementsAsync",
        "parameters" : [ {
          "name" : "assetIds",
          "in" : "query",
          "description" : "Comma-separated list of policy assets to report access for. Will report on all assets by default. (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accessRequestType",
          "in" : "query",
          "description" : "Only report on access via a specific request type (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for entitlement queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAccountEntitlement"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAccountEntitlement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Entitlements/UserEntitlements" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of what accounts can be accessed by a set of users",
        "operationId" : "Reports_GetUserEntitlementsAsync",
        "parameters" : [ {
          "name" : "userIds",
          "in" : "query",
          "description" : "Comma-separated list of users to report access for. Will report on all users by default. (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accessRequestType",
          "in" : "query",
          "description" : "Only report on access via a specific request type (preferred over filter)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for entitlement queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAccountEntitlement"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserAccountEntitlement"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Gets a list of report categories",
        "operationId" : "Reports_GetOwnershipReportTypes",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OwnershipReportTypes"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OwnershipReportTypes"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/{reportType}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owned items by type: Account, Asset, Partition, Tag, User",
        "operationId" : "Reports_GetOwnershipReportByTypeAsync",
        "parameters" : [ {
          "name" : "reportType",
          "in" : "path",
          "description" : "Ownership Report Type",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/OwnershipReportTypes"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipReportType"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipReportType"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Account/{accountId}/Asset/{assetId}/AssetPartition/{partitionId}/Owners" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owners by account with parent asset and parent partition",
        "operationId" : "Reports_GetOwnershipReportOwnersByAccountIdAssetIdPartitionIdAsync",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Ownership Account Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "Ownership Asset Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "partitionId",
          "in" : "path",
          "description" : "Ownership Partition Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Account/{accountId}/Owners" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owners by account",
        "operationId" : "Reports_GetOwnershipReportOwnersByAccountIdAsync",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "Ownership Account Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Asset/{assetId}/AssetPartition/{partitionId}/Owners" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owners by asset and parent partition",
        "operationId" : "Reports_GetOwnershipReportOwnersByAssetIdPartitionIdAsync",
        "parameters" : [ {
          "name" : "assetId",
          "in" : "path",
          "description" : "Ownership Asset Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "partitionId",
          "in" : "path",
          "description" : "Ownership Partition Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Asset/{assetId}/Owners" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owners by asset",
        "operationId" : "Reports_GetOwnershipReportOwnersByAssetIdAsync",
        "parameters" : [ {
          "name" : "assetId",
          "in" : "path",
          "description" : "Ownership Asset Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Partition/{partitionId}/Owners" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owners by partition",
        "operationId" : "Reports_GetOwnershipReportOwnersByPartitionIdAsync",
        "parameters" : [ {
          "name" : "partitionId",
          "in" : "path",
          "description" : "Ownership Partition Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Tag/{tagId}/Items" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of a set of items by tag",
        "operationId" : "Reports_GetOwnershipReportItemsByTagIdAsync",
        "parameters" : [ {
          "name" : "tagId",
          "in" : "path",
          "description" : "Ownership Tag Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/Tag/{tagId}/Owners" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of owners by tag",
        "operationId" : "Reports_GetOwnershipReportOwnersByTagIdAsync",
        "parameters" : [ {
          "name" : "tagId",
          "in" : "path",
          "description" : "Ownership Tag Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/User/{userId}/Item/{itemId}/Details" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of how a user owns an item",
        "operationId" : "Reports_GetOwnershipReportDetailsByUserIdItemIdAsync",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Ownership User Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "itemId",
          "in" : "path",
          "description" : "Ownership Item Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOwnershipDetail"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOwnershipDetail"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/User/{userId}/Item/{itemId}/Tag/{tagId}/Details" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of how a user owns an item by tag",
        "operationId" : "Reports_GetOwnershipReportDetailsByUserIdItemIdTagIdAsync",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Ownership User Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "itemId",
          "in" : "path",
          "description" : "Ownership Item Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "tagId",
          "in" : "path",
          "description" : "Ownership Tag Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOwnershipDetail"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserOwnershipDetail"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Ownership/User/{userId}/Items" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of a set of items by user",
        "operationId" : "Reports_GetOwnershipReportItemsByUserIdAsync",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "Ownership User Id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnershipDetail"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Tasks" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Gets a list of task report categories",
        "operationId" : "Reports_GetTaskReportTypes",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TaskReportTypes"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TaskReportTypes"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Tasks/AccountTaskSummary" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a summary report of account tasks",
        "operationId" : "Reports_GenerateTaskSummaryReportAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountTaskSummaryReport"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AccountTaskSummaryReport"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Tasks/FailedAccountTasks/{accountTaskName}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of what accounts have failing tasks",
        "operationId" : "Reports_GenerateFailedAccountTaskReportAsync",
        "parameters" : [ {
          "name" : "accountTaskName",
          "in" : "path",
          "description" : "Specific task type for which to generate a failed account report",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/AccountTaskNames"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for task report queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountTaskData"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountTaskData"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Reports/Tasks/FailedAssetTasks/{assetTaskName}" : {
      "get" : {
        "tags" : [ "Reports" ],
        "summary" : "Generates a report of what assets have failing tasks",
        "operationId" : "Reports_GenerateFailedAssetTaskReportAsync",
        "parameters" : [ {
          "name" : "assetTaskName",
          "in" : "path",
          "description" : "Specific task type for which to generate a failed asset report",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/AssetTaskNames"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.\r\nWARNING - Not fully supported for task report queries",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountTaskData"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccountTaskData"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Roles" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets a list of roles",
        "operationId" : "Roles_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Role"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Roles" ],
        "summary" : "Creates a new role",
        "operationId" : "Roles_CreateEntityAsync",
        "requestBody" : {
          "description" : "Role to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      }
    },
    "/v4/Roles/{id}" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets a role",
        "operationId" : "Roles_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Updates an existing application role",
        "operationId" : "Roles_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Role",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Role"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Role"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Role does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Roles" ],
        "summary" : "Removes an application role",
        "operationId" : "Roles_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Roles/{id}/CheckUniquePolicyName" : {
      "post" : {
        "tags" : [ "Roles" ],
        "summary" : "Checks if the current name is unique prior to create/update",
        "operationId" : "Roles_CheckUniquePolicyNameAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Parameters for checking for unique name",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UniqueNameParameters"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      }
    },
    "/v4/Roles/{id}/Members" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets the membership included in the role",
        "operationId" : "Roles_GetMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "No members found"
          }
        }
      },
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Sets the accounts assigned to this group",
        "operationId" : "Roles_SetMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "No members found"
          }
        }
      }
    },
    "/v4/Roles/{id}/Members/{operation}" : {
      "post" : {
        "tags" : [ "Roles" ],
        "summary" : "Add/Remove accounts assigned to this group",
        "operationId" : "Roles_ModifyMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the AccountGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Accounts to assign to the AccountGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Identity"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Identity"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "No members found"
          }
        }
      }
    },
    "/v4/Roles/{id}/Policies" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets the policies of the role",
        "operationId" : "Roles_GetPasswordPoliciesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessPolicy"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AccessPolicy"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      }
    },
    "/v4/Roles/{id}/PolicyPriorities" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets the policy priorities assigned to this role",
        "operationId" : "Roles_GetPolicyPrioritiesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Sets the priorities of a list of policies for a given role. All policies belonging to the specified role must\r\nbe included.",
        "operationId" : "Roles_SetPolicyPrioritiesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the role",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Set the priorities of the policies in the specified role",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Priority"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Role not found"
          }
        }
      }
    },
    "/v4/Roles/Priorities" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets the role priorities",
        "operationId" : "Roles_GetRolePrioritiesAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Updates all role priorities. All roles must be included.",
        "operationId" : "Roles_SetRolePrioritiesAsync",
        "requestBody" : {
          "description" : "Priorities of all roles",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Priority"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Priority"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/RunningTasks" : {
      "get" : {
        "tags" : [ "RunningTasks" ],
        "summary" : "Gets a list of running tasks",
        "operationId" : "RunningTasks_GetAsync",
        "parameters" : [ {
          "name" : "startDate",
          "in" : "query",
          "description" : "Log time range start. Default 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Log time range end (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RunningTask"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RunningTask"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/RunningTasks/{taskName}" : {
      "get" : {
        "tags" : [ "RunningTasks" ],
        "summary" : "Gets a list of running tasks by task name",
        "operationId" : "RunningTasks_GetByNameAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "Name of tasks to filter by. (Preferred over 'filter')",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Log time range start. Default 1 day before endDate. (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "Log time range end (Preferred over 'filter')",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RunningTask"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RunningTask"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/RunningTasks/{taskName}/{id}" : {
      "get" : {
        "tags" : [ "RunningTasks" ],
        "summary" : "Gets a single running task",
        "operationId" : "RunningTasks_GetByIdAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "Name of tasks to filter by. (Preferred over 'filter')",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Task",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunningTask"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RunningTask"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "RunningTasks" ],
        "summary" : "Cancels the queued or running task, whenever possible",
        "operationId" : "RunningTasks_CancelPlatformTaskAsync",
        "parameters" : [ {
          "name" : "taskName",
          "in" : "path",
          "description" : "Name of tasks to filter by. (Preferred over 'filter')",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Task",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ServerCertificateSignatureRequests/{id}" : {
      "get" : {
        "tags" : [ "ServerCertificateSignatureRequests" ],
        "summary" : "Gets a certificate signing request",
        "operationId" : "ServerCertificateSignatureRequests_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Thumbprint of ServerCertificateSignatureRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Server Certificate Signing Request does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "ServerCertificateSignatureRequests" ],
        "summary" : "Removes a certificate signing request",
        "operationId" : "ServerCertificateSignatureRequests_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ServerCertificateSignatureRequest",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "6000 - Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ServerCertificateSignatureRequests" : {
      "get" : {
        "tags" : [ "ServerCertificateSignatureRequests" ],
        "summary" : "Gets a queryable list of certificate signing requests",
        "operationId" : "ServerCertificateSignatureRequests_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "ServerCertificateSignatureRequests" ],
        "summary" : "Creates a new certificate signing request",
        "operationId" : "ServerCertificateSignatureRequests_CreateEntityAsync",
        "requestBody" : {
          "description" : "ServerCertificateSignatureRequest to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificateSignatureRequest"
                }
              }
            }
          },
          "400" : {
            "description" : "Requested a sessions certificate type on a virtual appliance.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ServicesConfig" : {
      "get" : {
        "tags" : [ "ServicesConfig" ],
        "summary" : "Gets the status of the services configuration",
        "operationId" : "ServicesConfig_GetAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServicesConfig"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServicesConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ServicesConfig" ],
        "summary" : "Updates the services configuration",
        "operationId" : "ServicesConfig_UpdateEntityAsync",
        "requestBody" : {
          "description" : "Updated ServicesConfig",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServicesConfig"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServicesConfig"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServicesConfig"
                }
              }
            }
          },
          "400" : {
            "description" : "ServicesConfig did not pass validation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/ServicesConfig/{serviceName}" : {
      "get" : {
        "tags" : [ "ServicesConfig" ],
        "summary" : "Gets the status of the specified services configuration",
        "operationId" : "ServicesConfig_GetServiceAsync",
        "parameters" : [ {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Name of service to check if enabled",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ServiceEnabled"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "ServicesConfig" ],
        "summary" : "Updates the specified services configuration",
        "operationId" : "ServicesConfig_UpdateServiceAsync",
        "parameters" : [ {
          "name" : "serviceName",
          "in" : "path",
          "description" : "Name of service to set enabled",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ServiceEnabled"
          }
        } ],
        "requestBody" : {
          "description" : "Whether service is enabled",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "boolean"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "ServicesConfig did not pass validation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Settings" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Gets all of the application's settings",
        "description" : "<table>\r\n  <tr>\r\n    <th>Setting Name</th>\r\n    <th>Description</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Inform User of Bad Password</td>\r\n    <td>During login, using the Local provider, display a friendly error message if the user's password is incorrect.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Inform User of Disabled Account</td>\r\n    <td>During login, using the Local provider, display a friendly error message if the user's account is disabled.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Inform User of Locked Account</td>\r\n    <td>During login, using the Local provider, display a friendly error message if the user's account is locked.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Inform User of Invalid Token</td>\r\n    <td>Return a friendly error message and reason when an invalid or expired authentication token is used when making an API request.  Otherwise, a generic \"Access denied\" error will be returned.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>User Lockout Duration</td>\r\n    <td>The amount of time, in minutes, when using the Local provider for which a locked user will not be able to log in.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>User Lockout Threshold</td>\r\n    <td>The number of consecutive failed log in attempts before the user is marked as locked.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>User Lockout Window</td>\r\n    <td>The amount of time, in minutes, when using the Local provider for which the User Lockout Threshold will be accumulated.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Disable After Inactive for n Days</td>\r\n    <td>The amount of time, in days, when using the Local provider after which a user will be marked as disabled and cannot log in.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Maximum Password Age</td>\r\n    <td>The amount of time, in days, when using the Local provider after which the user must change their password.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Minimum Password Age</td>\r\n    <td>The amount of time, in days, when using the Local provider for which a user cannot change their password.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Password History</td>\r\n    <td>When using the Local provider, the number of unique new passwords that must be used when a user changes their password before an old password can be reused.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Password Grace Period</td>\r\n    <td>During login, using the Local provider, display a password expiration reminder this many days before a user's password will expire.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Token Lifetime</td>\r\n    <td>The amount of time, in seconds, for which an API authentication token is valid for.  This also corresponds to the amount of time you can remain logged into the Safeguard Desktop Client application before being logged out.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Change Password Url</td>\r\n    <td>Not used.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Inform User of Expired Password</td>\r\n    <td>During login, using the Local provider, display a friendly error message if the user's password is expired.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Maximum Notification Recipients</td>\r\n    <td>Each set of approvers, reviewers, and emergency contacts can have up to this many recipients.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Expiration Warning Duration Days</td>\r\n    <td>The number of days before an Access Request Policy is set to expire at which a PolicyAdmin will receive a reminder.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Default User Timezone</td>\r\n    <td>Available time zones that can be assigned to users as their default time zone.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Max Platform Task Retries</td>\r\n    <td>The number of retries that will be attempted on a platform task, such as Change Password.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Web Client Inactivity Timeout</td>\r\n    <td>The amount of idle time, in minutes, after which a user will be automatically logged out of the Safeguard web site.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Use Fine Grained UserGroup Permissions</td>\r\n    <td>Use fine grained UserGroup permissions, allowing more Admins to perform CRUD operations on UserGroups.  Set to false to revert to previous behavior.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Show Friendly Authentication Error Messages</td>\r\n    <td>When set to true, users authenticating against Active Directory or LDAP will have friendly, specific error messages displayed when the login attempt fails. This includes individual messages for \"Invalid password\" or \"Unknown username\", as well as other possibilities, depending on the provider, like \"The specified account has been locked\". When set to false, only a generic error message of \"Invalid username or bad password\" will ever be displayed on the login page.</td>\r\n  </tr>\r\n</table>",
        "operationId" : "Settings_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Setting"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Setting"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Settings/{id}" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Gets an application setting",
        "operationId" : "Settings_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of Setting",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Setting"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Setting"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Setting not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Updates a setting's value",
        "operationId" : "Settings_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the Setting to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Setting",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Setting"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Setting"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Setting"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, OperationsAdmin, PolicyAdmin or AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Setting does not exist"
          }
        }
      }
    },
    "/v4/SshAlgorithms" : {
      "get" : {
        "tags" : [ "SshAlgorithms" ],
        "summary" : "Gets the list of permitted SSH algorithms",
        "operationId" : "SshAlgorithms_GetAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshAlgorithms"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshAlgorithms"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed to retrieve the algorithms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "410" : {
            "description" : "This operation is not supported for this platform type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "SshAlgorithms" ],
        "summary" : "Modifies SSH algorithms",
        "operationId" : "SshAlgorithms_UpdateAsync",
        "requestBody" : {
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshAlgorithms"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshAlgorithms"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshAlgorithms"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SshAlgorithms"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshAlgorithms"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SshAlgorithms"
                }
              }
            }
          },
          "400" : {
            "description" : "Failed to retrieve the algorithms",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "410" : {
            "description" : "This operation is not supported for this platform type",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/SslCertificates" : {
      "get" : {
        "tags" : [ "SslCertificates" ],
        "summary" : "Gets the currently installed SSL certificates",
        "operationId" : "SslCertificates_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SslCertificate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SslCertificate"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SslCertificates" ],
        "summary" : "Installs the SSL cert and assigns it to cluster appliances.",
        "operationId" : "SslCertificates_InstallCertificateAsync",
        "requestBody" : {
          "description" : "Updated ServerCertificate",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SslCertificate"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Server Certificate entered was null",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/SslCertificates/{thumbprint}/Appliances" : {
      "get" : {
        "tags" : [ "SslCertificates" ],
        "summary" : "Gets the appliances the specified certificate is used by",
        "operationId" : "SslCertificates_GetAppliancesAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "thumbprint of SSL certificate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "SslCertificates" ],
        "summary" : "Update the appliances this SSL certificate is used by.",
        "operationId" : "SslCertificates_AssignSslCertificateAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "thumbprint of SSL certificate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Appliances to update",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Appliance"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Appliance"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - missing body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/SslCertificates/{thumbprint}" : {
      "get" : {
        "tags" : [ "SslCertificates" ],
        "summary" : "Gets a specific SSL certificate",
        "operationId" : "SslCertificates_GetByThumbprintAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "Thumbprint of certificate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SslCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      },
      "delete" : {
        "tags" : [ "SslCertificates" ],
        "summary" : "Remove a specific SSL certificate",
        "operationId" : "SslCertificates_RemoveByThumbprintAsync",
        "parameters" : [ {
          "name" : "thumbprint",
          "in" : "path",
          "description" : "Thumbprint of certificate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have OperationsAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingRegisteredConnector" : {
      "get" : {
        "tags" : [ "StarlingRegisteredConnector" ],
        "summary" : "Get a list of starling registered connectors from safeguard",
        "operationId" : "StarlingRegisteredConnector_GetStarlingRegisteredConnectorsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "StarlingRegisteredConnector" ],
        "summary" : "Create a starling registered connector",
        "operationId" : "StarlingRegisteredConnector_CreateStarlingRegisteredConnectorsAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StarlingRegisteredConnector"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingRegisteredConnector/{id}" : {
      "get" : {
        "tags" : [ "StarlingRegisteredConnector" ],
        "summary" : "Get a starling registered connector from safeguard",
        "operationId" : "StarlingRegisteredConnector_GetStarlingRegisteredConnectorAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Registered connector does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "StarlingRegisteredConnector" ],
        "summary" : "update a starling registered connector",
        "operationId" : "StarlingRegisteredConnector_UpdateStarlingRegisteredConnectorsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StarlingRegisteredConnector"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingRegisteredConnector"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Registered connector does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "StarlingRegisteredConnector" ],
        "summary" : "Delete a starling registered connector",
        "operationId" : "StarlingRegisteredConnector_DeleteStarlingRegisteredConnectorsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have AssetAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingRegisteredConnector/FromStarling" : {
      "get" : {
        "tags" : [ "StarlingRegisteredConnector" ],
        "summary" : "Get a list of registered connectors from starling",
        "operationId" : "StarlingRegisteredConnector_GetRegisteredConnectorsFromStarlingAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StarlingRegisteredConnectorFromStarling"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StarlingRegisteredConnectorFromStarling"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingSubscriptions" : {
      "get" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Get all Starling subscriptions",
        "operationId" : "StarlingSubscriptions_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StarlingSubscription"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StarlingSubscription"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : ""
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Adds the new Starling subscription information.",
        "operationId" : "StarlingSubscriptions_CreateEntityAsync",
        "requestBody" : {
          "description" : "The Starling subscription information to add.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StarlingSubscription"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingSubscription"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingSubscription"
                }
              }
            }
          },
          "400" : {
            "description" : "50208 - Only one Starling subscription is allowed at a time.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingSubscriptions/{id}" : {
      "get" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Gets the specified Starling subscription information.",
        "operationId" : "StarlingSubscriptions_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique id of the Starling subscription to return.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingSubscription"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StarlingSubscription"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Starling subscription not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Remove and unjoin the specified Starling subscription.",
        "operationId" : "StarlingSubscriptions_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The unique id of the Starling subscription to be deleted and removed from the system.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force the removal of the subscription information\r\n            from Safeguard, regardless of whether or not the request to Starling to unjoin was successful.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The Starling subscription was successfully removed."
          },
          "400" : {
            "description" : "50086 - The Starling subscription cannot be deleted because there are active identities\r\n            for whom it is the secondary authentication source."
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingSubscriptions/JoinUrl" : {
      "get" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Get the necessary URL used by a client to initiate the Starling join process.",
        "operationId" : "StarlingSubscriptions_GetJoinUrlAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Must have a valid Password Management or Sessions Management license"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingSubscriptions/Realm" : {
      "get" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "The DNS suffix name(s) for which the Starling authentication provider will be used. This value needs to match\r\nthe email address suffix of a user that intends to be authenticated. If the federated authentication supports\r\nmore than one realm, enter each realm separated by a space or comma.",
        "operationId" : "StarlingSubscriptions_GetRealmAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "204" : {
            "description" : "Must be joined to Starling and have the 'StarlingDirectory' Identity Provider be created\r\n            by the system to get or set the realm(s)."
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "The DNS suffix name(s) for which the Starling authentication provider will be used. This value needs to match\r\nthe email address suffix of a user that intends to be authenticated. If the federated authentication supports\r\nmore than one realm, enter each realm separated by a space or comma.",
        "operationId" : "StarlingSubscriptions_PutRealmAsync",
        "requestBody" : {
          "description" : "The DNS suffix name(s) for which the Starling authentication provider will be used. This\r\n            value needs to match the email address suffix of a user that intends to be authenticated. If the federated\r\n            authentication supports more than one realm, enter each realm separated by a space or comma.",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "maxLength" : 255,
                "type" : "string"
              }
            },
            "application/json" : {
              "schema" : {
                "maxLength" : 255,
                "type" : "string"
              }
            },
            "text/json" : {
              "schema" : {
                "maxLength" : 255,
                "type" : "string"
              }
            },
            "application/*+json" : {
              "schema" : {
                "maxLength" : 255,
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "60459 - Must be joined to Starling to get or set the realm(s).\r\n            <br />\r\n            60988 - The Starling Identity Provider does not exist. Please ensure the appliance has Internet access.\r\n            You may need to wait up to three hours for the system to create the Identity Provider.\r\n            <br />\r\n            70000 - realm value has a maximum length of 255.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/StarlingSubscriptions/RequireAuthentication" : {
      "get" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Controls the 'ForceAuthn' attribute of a SAML2 AuthnRequest. When set to true, the user will\r\nbe required to reenter their credentials on the external federation site, even if they are already\r\nlogged in, thus negating any single sign-on benefits, but may be considered more secure.",
        "operationId" : "StarlingSubscriptions_GetRequireAuthenticationAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "204" : {
            "description" : "Must be joined to Starling and have the 'StarlingDirectory' Identity Provider be created\r\n            by the system to get or set this property."
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "StarlingSubscriptions" ],
        "summary" : "Controls the 'ForceAuthn' attribute of a SAML2 AuthnRequest. When set to true, the user will\r\nbe required to reenter their credentials on the external federation site, even if they are already\r\nlogged in, thus negating any single sign-on benefits, but may be considered more secure.",
        "operationId" : "StarlingSubscriptions_PutRequireAuthenticationAsync",
        "requestBody" : {
          "description" : "Set to true to require the user to reenter their credentials on\r\n            the external federation site, even if they are already logged in. Set to false to allow the user to\r\n            automatically be logged into Safeguard if the external federation site supports SSO.",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "type" : "boolean"
              }
            },
            "application/json" : {
              "schema" : {
                "type" : "boolean"
              }
            },
            "text/json" : {
              "schema" : {
                "type" : "boolean"
              }
            },
            "application/*+json" : {
              "schema" : {
                "type" : "boolean"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "60459 - Must be joined to Starling to get or set this property.\r\n            <br />\r\n            60988 - The Starling Identity Provider does not exist. Please ensure the appliance has Internet access.\r\n            You may need to wait up to three hours for the system to create the Identity Provider.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/SyslogServers" : {
      "get" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Gets a list of known syslog servers",
        "operationId" : "SyslogServers_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyslogServer"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SyslogServer"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Creates a new syslog server configuration",
        "operationId" : "SyslogServers_CreateEntityAsync",
        "requestBody" : {
          "description" : "SyslogServer to create",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyslogServer"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyslogServer"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/SyslogServers/{id}" : {
      "get" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Gets a syslog server configuration",
        "operationId" : "SyslogServers_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of SyslogServer",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyslogServer"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyslogServer"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Updates the syslog server configuration",
        "operationId" : "SyslogServers_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the SyslogServer to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated syslog server configuration",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyslogServer"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyslogServer"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyslogServer"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Syslog server configuration does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Removes a syslog server",
        "operationId" : "SyslogServers_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the SyslogServer",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin or PartitionAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/SyslogServers/ClientCertificate/History" : {
      "get" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Gets the syslog client certificate history",
        "operationId" : "SyslogServers_GetSyslogClientCertificateHistoryAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateLog"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificateLog"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/SyslogServers/ClientCertificate" : {
      "get" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Gets the syslog client certificate",
        "operationId" : "SyslogServers_GetSyslogClientCertificateAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Update the syslog client certificate",
        "operationId" : "SyslogServers_SaveSyslogClientCertificateAsync",
        "requestBody" : {
          "description" : "Settings to save",
          "content" : {
            "application/json-patch+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            },
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            },
            "text/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            },
            "application/*+json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "SyslogServers" ],
        "summary" : "Reset the syslog client certificate",
        "operationId" : "SyslogServers_ResetSyslogClientCertificateAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TaskLogs" : {
      "get" : {
        "tags" : [ "TaskLogs" ],
        "summary" : "Fetch a list of Task Ids for which there are task logs available",
        "operationId" : "TaskLogs_GetAsync",
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "TaskLogs" ],
        "summary" : "Remove all extended debug logging for platform tasks",
        "operationId" : "TaskLogs_RemoveAllLogsAsync",
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TaskLogs/{taskId}" : {
      "get" : {
        "tags" : [ "TaskLogs" ],
        "summary" : "Fetch a list of logs available for the Task identified by the given Id",
        "operationId" : "TaskLogs_GetLogsForTaskIdAsync",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task Guid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/TaskLogs/{taskId}/{logName}" : {
      "get" : {
        "tags" : [ "TaskLogs" ],
        "summary" : "Return all events from the named log for the given Task",
        "operationId" : "TaskLogs_GetTaskLogAsync",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "Task Guid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "logName",
          "in" : "path",
          "description" : "Log name",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Entry"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Entry"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/TicketSystems" : {
      "get" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Gets a list of all ticket systems",
        "operationId" : "TicketSystems_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TicketSystem"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TicketSystem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Creates a new ticket system",
        "operationId" : "TicketSystems_CreateEntityAsync",
        "requestBody" : {
          "description" : "ticket system to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TicketSystem"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketSystem"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketSystem"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ticket system not found"
          }
        }
      }
    },
    "/v4/TicketSystems/{id}" : {
      "get" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Gets a ticket system",
        "operationId" : "TicketSystems_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketSystem"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketSystem"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ticket system does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Updates an existing ticket system",
        "operationId" : "TicketSystems_UpdateEntityAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated ticket system",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TicketSystem"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketSystem"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TicketSystem"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "TicketSystem does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Removes a ticket system",
        "operationId" : "TicketSystems_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TicketSystems/{id}/TestConnection" : {
      "post" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Test connection parameters to a ticket system",
        "operationId" : "TicketSystems_TestConnectionByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ticket system not found"
          }
        }
      }
    },
    "/v4/TicketSystems/{id}/ValidateTicket/{ticket}" : {
      "post" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Validate ticket number against the ticket system",
        "operationId" : "TicketSystems_ValidateTicketAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "ticket",
          "in" : "path",
          "description" : "Ticket number from ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully validated"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ticket system not found"
          }
        }
      }
    },
    "/v4/TicketSystems/TestConnection" : {
      "post" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Test connection parameters to a ticket system",
        "operationId" : "TicketSystems_TestConnectionAsync",
        "requestBody" : {
          "description" : "ticket system configuration to test",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TicketSystemTestConnectionParameters"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ticket system not found"
          }
        }
      }
    },
    "/v4/TicketSystems/ValidateTicket/{ticket}" : {
      "post" : {
        "tags" : [ "TicketSystems" ],
        "summary" : "Validate ticket number against all the ticket systems",
        "operationId" : "TicketSystems_ValidateAnyTicketAsync",
        "parameters" : [ {
          "name" : "ticket",
          "in" : "path",
          "description" : "Ticket number from ticket system",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user"
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "ticket system not found"
          }
        }
      }
    },
    "/v4/TimeZones" : {
      "get" : {
        "tags" : [ "TimeZones" ],
        "summary" : "Gets a list of time zones",
        "operationId" : "TimeZones_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TimeZone"
                  },
                  "x-content-type" : "text/plain"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TimeZone"
                  }
                }
              },
              "text/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TimeZone"
                  }
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TimeZone"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TimeZones/{id}" : {
      "get" : {
        "tags" : [ "TimeZones" ],
        "summary" : "Gets a single timezone",
        "operationId" : "TimeZones_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of TimeZone",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeZone"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeZone"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeZone"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TimeZone"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user.",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "text/plain" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Time Zone not found"
          }
        }
      }
    },
    "/v4/Token/LoginResponse" : {
      "post" : {
        "tags" : [ "Token" ],
        "summary" : "After obtaining an access token from an STS, a client application must exchange that token for a Safeguard user\r\n            token that can then be used to access all API methods.  This method will attempt to authorize the user from the STS and\r\n            if successful, will return a new token value.",
        "operationId" : "Token_LoginResponseAsync",
        "requestBody" : {
          "description" : "Currently, just the {access_token} from the OAuth2 protocol is needed.  In the future, other\r\n            properties may be added.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LoginResponseRequestData"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The client application should check the value of the Pangaea.Data.Transfer.V2.Users.LoginResponse.Status\r\n            property to determine the next course of action.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginResponse"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Token/Logout" : {
      "post" : {
        "tags" : [ "Token" ],
        "summary" : "An explicit logout by an end user to have their Safeguard User Token deleted from the system such that it\r\n            cannot be used again.",
        "description" : "Call this method like any other API method that requires authorization.  Your token must currently be valid.\r\n            If your token has already expired or previously been deleted, an Http 401 response will be returned.",
        "operationId" : "Token_LogoutAsync",
        "parameters" : [ {
          "name" : "timedOut",
          "in" : "query",
          "description" : "A value indicating whether the logout was due to inactivity or not. Defaults to false.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The user's current Safeguard User Token has successfully been deleted from the system."
          },
          "401" : {
            "description" : "You must call this method with a valid, non-expired authorization token.  If the token has previously\r\n            been deleted, or it has already expired, then you will get the standard\r\n            {{\"Code\":60094,\"Message\":\"Authorization is denied for this request.\",\"InnerError\":null}} in an Http 401 response."
          }
        }
      }
    },
    "/v4/TransferProtocols" : {
      "get" : {
        "tags" : [ "TransferProtocols" ],
        "summary" : "Gets a queryable list of transfer protocols used to archive backups",
        "operationId" : "TransferProtocols_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TransferProtocol"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TransferProtocol"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TransferProtocols/{id}" : {
      "get" : {
        "tags" : [ "TransferProtocols" ],
        "summary" : "Gets a transfer protocol used to archive backups",
        "operationId" : "TransferProtocols_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of transfer protocol",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/TransferProtocolType"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransferProtocol"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransferProtocol"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Platform does not exist"
          }
        }
      }
    },
    "/v4/TrustedCertificates" : {
      "get" : {
        "tags" : [ "TrustedCertificates" ],
        "summary" : "Gets a queryable list of trusted certificates",
        "operationId" : "TrustedCertificates_GetAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "TrustedCertificates" ],
        "summary" : "Installs a new certificate authority certificate",
        "operationId" : "TrustedCertificates_CreateEntityAsync",
        "requestBody" : {
          "description" : "ServerCertificate to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServerCertificate"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Request body was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TrustedCertificates/{id}" : {
      "get" : {
        "tags" : [ "TrustedCertificates" ],
        "summary" : "Gets a trusted certificate",
        "operationId" : "TrustedCertificates_GetByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of ServerCertificate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerCertificate"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have OperationsAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Server Certificate not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "TrustedCertificates" ],
        "summary" : "Removes a trusted certificate",
        "operationId" : "TrustedCertificates_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the ServerCertificate",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60097 - ServerCertificate Id was missing",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/TrustedCertificates/Chain" : {
      "post" : {
        "tags" : [ "TrustedCertificates" ],
        "summary" : "Installs a new certificate authority certificate chain",
        "operationId" : "TrustedCertificates_AddCertChainAsync",
        "requestBody" : {
          "description" : "Base-64 encoded DER data for certificate chain",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ServerCertificate"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have ApplianceAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/UserGroups" : {
      "get" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Gets a list of user groups",
        "operationId" : "UserGroups_GetUserGroupsAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Creates a new group of users",
        "operationId" : "UserGroups_CreateUserGroupAsync",
        "requestBody" : {
          "description" : "UserGroup to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroup"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "202" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User group not found"
          }
        }
      }
    },
    "/v4/UserGroups/{id}" : {
      "get" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Gets a user group",
        "operationId" : "UserGroups_GetUserGroupByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User group not found"
          }
        }
      },
      "put" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Updates an existing user group",
        "operationId" : "UserGroups_UpdateUserGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated UserGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserGroup"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success - if using x-await-result to wait until task is complete",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "202" : {
            "description" : "Success - group membership will be updated in the background",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "UserGroup does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Removes an user group",
        "operationId" : "UserGroups_DeleteUserGroupAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have UserAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/UserGroups/{id}/Members" : {
      "get" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Gets the members of a user group",
        "operationId" : "UserGroups_GetUserGroupMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User group does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Sets an existing group's membership",
        "operationId" : "UserGroups_SetUserGroupMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the UserGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "202" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin (fine-grain) or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated members not found"
          }
        }
      }
    },
    "/v4/UserGroups/{id}/Members/{operation}" : {
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Add/Remove members to an existing group",
        "operationId" : "UserGroups_ModifyUserGroupMembersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Users to assign to the UserGroup",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "202" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated members not found"
          }
        }
      }
    },
    "/v4/UserGroups/{id}/Roles" : {
      "get" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Gets the security roles the user group belongs to",
        "operationId" : "UserGroups_GetUserGroupRolesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupRole"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User group does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Specifies which roles a user group should be assigned to",
        "operationId" : "UserGroups_SetUserGroupRolesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Role to assign the UserGroup to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserGroupRole"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupRole"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated roles not found"
          }
        }
      }
    },
    "/v4/UserGroups/{id}/Roles/{operation}" : {
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Add/Remove roles a user group should be assigned to",
        "operationId" : "UserGroups_ModifyUserGroupRolesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Role to assign the UserGroup to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserGroupRole"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupRole"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated roles not found"
          }
        }
      }
    },
    "/v4/UserGroups/{id}/SynchronizeAndUpdateProviders" : {
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Directory Groups: If you ever change the primary or secondary authentication providers of a directory based User Group, those changes\r\nwill not be reflected on existing users within Safeguard.  A user that was added to Safeguard via a directory group will only\r\never have their authentication providers set when the user object is first created in Safeguard.  Subsequent background\r\nsynchronizations and changes to the User Group won't effect those existing user's authentication provider settings.  If,\r\nhowever, you do need to force the authentication providers to be updated on existing users, then you must call this method.\r\nLocal Groups:  Call this to simply synchronize a local group with its members to ensure AdminRoles on the members are correct.",
        "operationId" : "UserGroups_SynchronizeAndUpdateProvidersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of UserGroup",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Success - group membership will be updated in the background",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "204" : {
            "description" : "Success - if using x-await-result to wait until task is complete"
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User group not found"
          }
        }
      }
    },
    "/v4/UserGroups/BatchCreate" : {
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Processes multiple new user groups",
        "operationId" : "UserGroups_CreateMultipleUserGroupsAsync",
        "requestBody" : {
          "description" : "New user groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/UserGroups/BatchDelete" : {
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Processes multiple user groups deletes",
        "operationId" : "UserGroups_DeleteMultipleUserGroupsAsync",
        "parameters" : [ {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "user groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupBatchResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupBatchResult"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/UserGroups/BatchUpdate" : {
      "post" : {
        "tags" : [ "UserGroups" ],
        "summary" : "Processes multiple user groups updates",
        "operationId" : "UserGroups_UpdateMultipleUserGroupsAsync",
        "requestBody" : {
          "description" : "user groups to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserGroup"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroupBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin or PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/UserPasswordRule" : {
      "get" : {
        "tags" : [ "UserPasswordRule" ],
        "summary" : "Gets the user password rule",
        "operationId" : "UserPasswordRule_GetUserPasswordRuleAsync",
        "parameters" : [ {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPasswordRule"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User Password Rule not found"
          }
        }
      },
      "put" : {
        "tags" : [ "UserPasswordRule" ],
        "summary" : "Updates the user password rule",
        "operationId" : "UserPasswordRule_UpdateUserPasswordRuleAsync",
        "requestBody" : {
          "description" : "Updated PasswordRule",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPasswordRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPasswordRule"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPasswordRule"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or ApplianceAdmin permission"
          },
          "404" : {
            "description" : "User Password Rule not found"
          }
        }
      }
    },
    "/v4/UserPasswordRule/GeneratePassword" : {
      "post" : {
        "tags" : [ "UserPasswordRule" ],
        "summary" : "Generates a random password using this rule",
        "operationId" : "UserPasswordRule_GeneratePasswordAsync",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPasswordRule"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/UserPasswordRule/ValidatePassword" : {
      "post" : {
        "tags" : [ "UserPasswordRule" ],
        "summary" : "Validates a proposed password against this rule",
        "operationId" : "UserPasswordRule_ValidateUserPasswordAsync",
        "requestBody" : {
          "description" : "Password to validate against this rule",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "60247 - Password did not pass validation"
          },
          "401" : {
            "description" : "Must be an authenticated user.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found"
          }
        }
      }
    },
    "/v4/Users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets a list of users",
        "operationId" : "Users_GetUsersAsync",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Creates a new application user",
        "operationId" : "Users_CreateUserAsync",
        "requestBody" : {
          "description" : "User to create",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets a single user",
        "operationId" : "Users_GetUserByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Updates an existing application user",
        "operationId" : "Users_UpdateUserAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated User",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "60263 - Cannot disable the currently authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Removes a User",
        "description" : "Include 'X-Force-Delete' header to force delete despite dependencies when given 50104 error",
        "operationId" : "Users_DeleteAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60317 - Cannot delete the currently authenticated user",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Users/{id}/LinkedPolicyAccounts/{operation}" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Add/Remove user linked accounts",
        "operationId" : "Users_ModifyLinkedAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "List of accounts to be linked",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "70008 - Invalid enum value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      }
    },
    "/v4/Users/{id}/LinkedPolicyAccounts" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Get policy accounts that have been linked to this user",
        "operationId" : "Users_GetLinkedAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Updates set of accounts linked to this user",
        "operationId" : "Users_SaveLinkedAccountsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "List of accounts to be linked",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PolicyAccount"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PolicyAccount"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      }
    },
    "/v4/Users/{id}/OwnedPartitions" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets information about partitions this user owns",
        "operationId" : "Users_GetUserPartitionsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPartition"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AssetPartition"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Ownership" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets information about assets, partitions, accounts this user owns",
        "operationId" : "Users_GetUserOwnershipAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnership"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserOwnership"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Password" : {
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Sets the password of the local user",
        "operationId" : "Users_SetPasswordAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "changePasswordAtNextLogin",
          "in" : "query",
          "description" : "Force user to change password at next login",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "Password to set for this user",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60247 - Password does not meet the complexity requirements",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Photo" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets the user's photo",
        "operationId" : "Users_GetPhotoAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPhoto"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPhoto"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user."
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Photo not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Updates an existing application user's photo",
        "operationId" : "Users_UpdatePhotoAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Updated Photo (64K max size)",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPhoto"
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60102 - id value does not match the resource URI"
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Removes an application user photo",
        "operationId" : "Users_DeletePhotoAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Photo/Raw" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets the user's photo in raw format (64K max size)",
        "operationId" : "Users_GetRawPhotoAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte",
                  "x-content-type" : "application/octet-stream"
                }
              },
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "401" : {
            "description" : "Must be an authenticated user."
          },
          "404" : {
            "description" : "User or user photo not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Updates an existing application user's photo in binary form",
        "operationId" : "Users_PutRawPhotoAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/octet-stream" : {
              "schema" : {
                "$ref" : "#/components/schemas/Photo_Raw_body_1"
              },
              "encoding" : {
                "_" : {
                  "style" : "form"
                }
              }
            }
          }
        },
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60316 - Missing photo data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      }
    },
    "/v4/Users/{id}/Preferences" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets all preferences for the given user",
        "operationId" : "Users_GetUserPreferencesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserPreference"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserPreference"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Preferences/{name}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets a specific preference for the given user",
        "operationId" : "Users_GetUserPreferenceAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Unique identifier of the UserPreference",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or Preference not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Updates or create a preference for the given user",
        "operationId" : "Users_SetUserPreferenceAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Unique identifier of the UserPreference",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maxLength" : 255,
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Value to set for this preference",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserPreference"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPreference"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin or UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Removes a preference for the given user",
        "operationId" : "Users_DeleteUserPreferenceAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Unique identifier of the UserPreference",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "403" : {
            "description" : "Must have GlobalAdmin or UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the Primary"
          }
        }
      }
    },
    "/v4/Users/{id}/Roles" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets information about roles this user belongs to",
        "operationId" : "Users_GetRolesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin, ApplicationAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "Users" ],
        "summary" : "Specifies which roles a user should be assigned to explicitly",
        "operationId" : "Users_SetRolesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "requestBody" : {
          "description" : "Roles to assign the User to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserRole"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60009 - Missing member ID values",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated roles not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Roles/{operation}" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Add/Remove roles a user should be assigned to",
        "operationId" : "Users_ModifyRolesAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "operation",
          "in" : "path",
          "description" : "Operation to perform on the list",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "$ref" : "#/components/schemas/ListOperation"
          }
        } ],
        "requestBody" : {
          "description" : "Role to assign the User to",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/UserRole"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserRole"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60103 - Missing one or more parameters",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have PolicyAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "Updated roles not found"
          }
        }
      }
    },
    "/v4/Users/{id}/Subscribers" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets a list of subscriptions for a user",
        "operationId" : "Users_GetUserSubscribersAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of the user",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscriberUser"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EventSubscriberUser"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Users/{id}/Subscribers/{subscriberId}/Disable" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Disable an event subscriber for this user",
        "operationId" : "Users_DisableUserEventSubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "Unique ID of the event subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriberUser"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriberUser"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin or HelpdeskAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or event subscriber does not exist"
          }
        }
      }
    },
    "/v4/Users/{id}/Subscribers/{subscriberId}/Enable" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Enable an event subscriber for this user",
        "operationId" : "Users_EnableUserEventSubscriberAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "Unique ID of the event subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriberUser"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriberUser"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin or HelpdeskAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User or event subscriber does not exist"
          }
        }
      }
    },
    "/v4/Users/{id}/Subscribers/{subscriberId}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets a single subscriber for this user",
        "operationId" : "Users_GetUserSubscriberByIdAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique ID of an User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "subscriberId",
          "in" : "path",
          "description" : "Unique ID of the event subscriber",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names to include in entity output",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriberUser"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventSubscriberUser"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User does not exist"
          }
        }
      }
    },
    "/v4/Users/{id}/Unlock" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Unlocks the specified user account",
        "operationId" : "Users_UnlockAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60261 - This action is only available for local identity provider users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/{id}/UserGroups" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets the user's group memberships",
        "operationId" : "Users_GetUserGroupsAsync",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Unique identifier of the User",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Which page (starting with 0) of data to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The size of a page of data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "orderby",
          "in" : "query",
          "description" : "List of property names (comma-separated) to sort entities by. Prepend properties with - for\r\ndescending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "q",
          "in" : "query",
          "description" : "Search all string fields for the specified value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    },
    "/v4/Users/BatchCreate" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Processes multiple new users",
        "operationId" : "Users_CreateMultipleUsersAsync",
        "requestBody" : {
          "description" : "New users to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Users/BatchDelete" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Processes multiple users to delete",
        "operationId" : "Users_DeleteMultipleUsersAsync",
        "parameters" : [ {
          "name" : "forceDelete",
          "in" : "query",
          "description" : "Include 'X-Force-Delete' HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104\r\nerror",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "User Ids to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserBatchResult"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserBatchResult"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "Success - No Content"
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Users/BatchUpdate" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Processes multiple users to update",
        "operationId" : "Users_UpdateMultipleUsersAsync",
        "requestBody" : {
          "description" : "Users to process",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserBatchResponse"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/UserBatchResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "60245 - Missing request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have UserAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v4/Users/ValidatePassword" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Validates that a password meets requirements",
        "operationId" : "Users_ValidatePasswordAsync",
        "requestBody" : {
          "description" : "Password to validate",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "boolean",
                  "x-content-type" : "application/json"
                }
              },
              "text/csv" : {
                "schema" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "60247 - Password did not meet complexity requirements",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403" : {
            "description" : "Must have HelpdeskAdmin permission",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              },
              "text/csv" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AccessPolicy" : {
        "required" : [ "Name", "RoleId" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the policy (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the policy"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The description of the policy",
            "nullable" : true
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "Database ID of the role this policy is assigned to",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of the role this policy is assigned to (Read-only)",
            "nullable" : true
          },
          "RolePriority" : {
            "type" : "integer",
            "description" : "Priority of the role this policy is assigned to (Read-only)",
            "format" : "int32"
          },
          "Priority" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The priority of this policy compared to other policies in this role\r\nSet to 0 to add as the lowest priority policy. Default is max role priority plus 1.",
            "format" : "int32"
          },
          "AccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts that have been assigned to this policy",
            "format" : "int32"
          },
          "AssetCount" : {
            "type" : "integer",
            "description" : "Number of assets that have been assigned to this policy",
            "format" : "int32"
          },
          "AccountGroupCount" : {
            "type" : "integer",
            "description" : "Number of account groups that have been assigned to this policy",
            "format" : "int32"
          },
          "AssetGroupCount" : {
            "type" : "integer",
            "description" : "Number of asset groups that have been assigned to this policy",
            "format" : "int32"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "RequesterProperties" : {
            "$ref" : "#/components/schemas/PolicyRequesterProperties"
          },
          "ApproverProperties" : {
            "$ref" : "#/components/schemas/PolicyApproverProperties"
          },
          "ReviewerProperties" : {
            "$ref" : "#/components/schemas/PolicyReviewerProperties"
          },
          "AccessRequestProperties" : {
            "$ref" : "#/components/schemas/AccessRequestProperties"
          },
          "SessionProperties" : {
            "$ref" : "#/components/schemas/SessionProperties"
          },
          "EmergencyAccessProperties" : {
            "$ref" : "#/components/schemas/PolicyEmergencyAccessProperties"
          },
          "ApproverSets" : {
            "type" : "array",
            "description" : "Sets of approvers required to approve requests granted by this policy",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ApproverSet"
            }
          },
          "Reviewers" : {
            "type" : "array",
            "description" : "List of identities allowed to review requests allowed by this policy",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "NotificationContacts" : {
            "type" : "array",
            "description" : "List of contacts that will be notified when requests need to be escalated, etc.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NotificationContact"
            }
          },
          "ReasonCodes" : {
            "type" : "array",
            "description" : "List of reason codes that may be used when making password requests",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ReasonCode"
            }
          },
          "ScopeItems" : {
            "type" : "array",
            "description" : "List of scope items that be requested by this policy",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PolicyScopeItem"
            }
          },
          "ExpirationDate" : {
            "type" : "string",
            "description" : "Date/time after which the associated policy/role will cease to be active",
            "format" : "date-time",
            "nullable" : true
          },
          "IsExpired" : {
            "type" : "boolean",
            "description" : "Whether this policy is expired.  (Read-only)"
          },
          "InvalidConnectionPolicy" : {
            "type" : "boolean",
            "description" : "Whether this policy has an invalid connection policy."
          },
          "HourlyRestrictionProperties" : {
            "$ref" : "#/components/schemas/HourlyRestrictionProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents security configuration governing the access to assets and accounts",
        "example" : {
          "Description" : "Description",
          "ApproverProperties" : {
            "RequireApproval" : true,
            "PendingApprovalEscalationEnabled" : true,
            "PendingApprovalDurationBeforeEscalationDays" : 22435,
            "PendingApprovalDurationBeforeEscalationHours" : 17,
            "PendingApprovalDurationBeforeEscalationMinutes" : 6
          },
          "RequesterProperties" : {
            "RequireServiceTicket" : false,
            "DefaultReleaseDurationMinutes" : 43,
            "DefaultReleaseDurationDays" : 6,
            "DefaultReleaseDurationHours" : 9,
            "MaximumReleaseDurationMinutes" : 8,
            "AllowCustomDuration" : false,
            "MaximumReleaseDurationDays" : 3,
            "RequireReasonComment" : false,
            "MaximumReleaseDurationHours" : 2,
            "RequireReasonCode" : false
          },
          "InvalidConnectionPolicy" : true,
          "AccountCount" : 5,
          "Name" : "Name",
          "CreatedByUserId" : 3,
          "EmergencyAccessProperties" : {
            "IgnoreHourlyRestrictions" : true,
            "AllowEmergencyAccess" : false
          },
          "ReviewerProperties" : {
            "PendingReviewDurationBeforeEscalationHours" : 22,
            "RequireReviewerComment" : false,
            "AllowSubsequentAccessRequestsWithoutReview" : false,
            "PendingReviewEscalationEnabled" : true,
            "PendingReviewDurationBeforeEscalationMinutes" : 55,
            "RequiredReviewers" : 1066272551,
            "PendingReviewDurationBeforeEscalationDays" : 16465
          },
          "ApproverSets" : [ {
            "RequiredApprovers" : 190081825,
            "Approvers" : [ {
              "IdentityProviderId" : 6,
              "PrincipalKind" : "Unknown",
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 7,
              "IdentityProviderTypeReferenceName" : "Unknown",
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 6,
              "PrincipalKind" : "Unknown",
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 7,
              "IdentityProviderTypeReferenceName" : "Unknown",
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ]
          }, {
            "RequiredApprovers" : 190081825,
            "Approvers" : [ {
              "IdentityProviderId" : 6,
              "PrincipalKind" : "Unknown",
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 7,
              "IdentityProviderTypeReferenceName" : "Unknown",
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 6,
              "PrincipalKind" : "Unknown",
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 7,
              "IdentityProviderTypeReferenceName" : "Unknown",
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ]
          } ],
          "ScopeItems" : [ {
            "Account" : null,
            "Description" : "Description",
            "ScopeItemType" : "Asset",
            "AccountGroup" : {
              "CreatedByUserId" : 3,
              "Description" : "Description",
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "Id" : 3,
              "GroupingRule" : {
                "RuleConditionGroup" : {
                  "Children" : [ {
                    "TaggingGroupingConditionGroup" : null,
                    "TaggingGroupingCondition" : {
                      "CompareValue" : "CompareValue",
                      "CompareType" : "EqualTo",
                      "ObjectAttribute" : "Name"
                    }
                  }, {
                    "TaggingGroupingConditionGroup" : null,
                    "TaggingGroupingCondition" : {
                      "CompareValue" : "CompareValue",
                      "CompareType" : "EqualTo",
                      "ObjectAttribute" : "Name"
                    }
                  } ],
                  "LogicalJoinType" : "And"
                },
                "Description" : "Description",
                "Enabled" : true
              },
              "IsDynamic" : true,
              "Accounts" : [ null, null ],
              "Name" : "Name"
            },
            "Asset" : null,
            "Id" : 7,
            "Name" : "Name",
            "AssetGroup" : {
              "AssetGroupingRule" : null,
              "CreatedByUserId" : 5,
              "Description" : "Description",
              "Assets" : [ null, null ],
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "Id" : 7,
              "IsDynamic" : true,
              "Name" : "Name"
            }
          }, {
            "Account" : null,
            "Description" : "Description",
            "ScopeItemType" : "Asset",
            "AccountGroup" : {
              "CreatedByUserId" : 3,
              "Description" : "Description",
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "Id" : 3,
              "GroupingRule" : {
                "RuleConditionGroup" : {
                  "Children" : [ {
                    "TaggingGroupingConditionGroup" : null,
                    "TaggingGroupingCondition" : {
                      "CompareValue" : "CompareValue",
                      "CompareType" : "EqualTo",
                      "ObjectAttribute" : "Name"
                    }
                  }, {
                    "TaggingGroupingConditionGroup" : null,
                    "TaggingGroupingCondition" : {
                      "CompareValue" : "CompareValue",
                      "CompareType" : "EqualTo",
                      "ObjectAttribute" : "Name"
                    }
                  } ],
                  "LogicalJoinType" : "And"
                },
                "Description" : "Description",
                "Enabled" : true
              },
              "IsDynamic" : true,
              "Accounts" : [ null, null ],
              "Name" : "Name"
            },
            "Asset" : null,
            "Id" : 7,
            "Name" : "Name",
            "AssetGroup" : {
              "AssetGroupingRule" : null,
              "CreatedByUserId" : 5,
              "Description" : "Description",
              "Assets" : [ null, null ],
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "Id" : 7,
              "IsDynamic" : true,
              "Name" : "Name"
            }
          } ],
          "ReasonCodes" : [ {
            "Description" : "Description",
            "Id" : 8,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "Id" : 8,
            "Name" : "Name"
          } ],
          "AccountGroupCount" : 7,
          "AssetGroupCount" : 9,
          "IsExpired" : true,
          "Priority" : 1280358508,
          "AssetCount" : 2,
          "HourlyRestrictionProperties" : {
            "EnableHourlyRestrictions" : false,
            "ThursdayValidHours" : [ 6, 6 ],
            "WednesdayValidHours" : [ 0, 0 ],
            "SaturdayValidHours" : [ 1, 1 ],
            "TuesdayValidHours" : [ 4, 4 ],
            "MondayValidHours" : [ 3, 3 ],
            "FridayValidHours" : [ 4, 4 ],
            "SundayValidHours" : [ 4, 4 ]
          },
          "RoleId" : 6,
          "NotificationContacts" : [ {
            "ContactAddress" : "ContactAddress",
            "ContactType" : "ReleaseWithoutApproval"
          }, {
            "ContactAddress" : "ContactAddress",
            "ContactType" : "ReleaseWithoutApproval"
          } ],
          "AccessRequestProperties" : {
            "AccessRequestType" : "Password",
            "ChangeSshKeyAfterCheckin" : true,
            "AllowLinkedAccountPasswordAccess" : false,
            "SessionAccessAccountType" : "None",
            "LinkedAccountScopeFiltering" : false,
            "AllowSessionPasswordRelease" : false,
            "UseAltLoginName" : false,
            "SessionAccessAccounts" : [ {
              "IsServiceAccount" : true,
              "Description" : "Description",
              "Platform" : {
                "PlatformFamily" : "None",
                "DisplayName" : "DisplayName",
                "Id" : 6,
                "IsAcctNameCaseSensitive" : true,
                "PlatformType" : "Unknown",
                "SupportsSessionManagement" : true
              },
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "LinkedUsersCount" : 9,
              "RequestProperties" : {
                "AllowPasswordRequest" : true,
                "AllowSshKeyRequest" : true,
                "AllowSessionRequest" : true
              },
              "AccountType" : "Asset",
              "Name" : "Name",
              "NotifyOwnersOnly" : true,
              "HasSshKey" : true,
              "SuspendAccountWhenCheckedIn" : true,
              "AltLoginName" : "AltLoginName",
              "Asset" : {
                "AssetPartitionId" : 6,
                "AssetPartitionName" : "AssetPartitionName",
                "NetworkAddress" : "NetworkAddress",
                "Id" : 3,
                "Name" : "Name"
              },
              "NetBiosName" : "NetBiosName",
              "Id" : 8,
              "Disabled" : true,
              "HasPassword" : true
            }, {
              "IsServiceAccount" : true,
              "Description" : "Description",
              "Platform" : {
                "PlatformFamily" : "None",
                "DisplayName" : "DisplayName",
                "Id" : 6,
                "IsAcctNameCaseSensitive" : true,
                "PlatformType" : "Unknown",
                "SupportsSessionManagement" : true
              },
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "LinkedUsersCount" : 9,
              "RequestProperties" : {
                "AllowPasswordRequest" : true,
                "AllowSshKeyRequest" : true,
                "AllowSessionRequest" : true
              },
              "AccountType" : "Asset",
              "Name" : "Name",
              "NotifyOwnersOnly" : true,
              "HasSshKey" : true,
              "SuspendAccountWhenCheckedIn" : true,
              "AltLoginName" : "AltLoginName",
              "Asset" : {
                "AssetPartitionId" : 6,
                "AssetPartitionName" : "AssetPartitionName",
                "NetworkAddress" : "NetworkAddress",
                "Id" : 3,
                "Name" : "Name"
              },
              "NetBiosName" : "NetBiosName",
              "Id" : 8,
              "Disabled" : true,
              "HasPassword" : true
            } ],
            "AllowSessionSshKeyRelease" : false,
            "TerminateExpiredSessions" : false,
            "MaximumSimultaneousReleases" : 66,
            "ChangePasswordAfterCheckin" : true,
            "PassphraseProtectSshKey" : true,
            "AllowSimultaneousAccess" : false
          },
          "RoleName" : "RoleName",
          "SessionProperties" : {
            "SessionModuleConnectionId" : 1,
            "RemoteDesktopApplicationProperties" : {
              "ApplicationHostLoginAccount" : null,
              "ApplicationDisplayName" : "ApplicationDisplayName",
              "ApplicationAlias" : "ApplicationAlias",
              "ApplicationHostAssetId" : 2,
              "ApplicationHostAccountId" : 7,
              "ApplicationHostAsset" : {
                "AssetPartitionId" : 6,
                "AssetPartitionName" : "AssetPartitionName",
                "AssetType" : "NotSpecified",
                "Description" : "Description",
                "SshHostKey" : {
                  "Fingerprint" : "Fingerprint",
                  "SshHostKey" : "SshHostKey",
                  "FingerprintSha256" : "FingerprintSha256"
                },
                "NetworkAddress" : "NetworkAddress",
                "Platform" : {
                  "DisplayName" : "DisplayName",
                  "Id" : 5,
                  "PlatformType" : null,
                  "SupportsSessionManagement" : true
                },
                "DomainName" : "DomainName",
                "SessionAccessProperties" : {
                  "RemoteDesktopSessionPort" : 21975,
                  "AllowSessionRequests" : true,
                  "TelnetSessionPort" : 20275,
                  "SshSessionPort" : 43935
                },
                "Id" : 6,
                "Disabled" : true,
                "Name" : "Name"
              }
            },
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef"
          },
          "RolePriority" : 1,
          "ExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Reviewers" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ]
        }
      },
      "AccessRequest" : {
        "type" : "object",
        "properties" : {
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Database ID of the account being requested",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account being requested",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Name of the domain of the account",
            "nullable" : true
          },
          "AccountAssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset of the account",
            "format" : "int32",
            "nullable" : true
          },
          "AccountAssetName" : {
            "type" : "string",
            "description" : "Name of the asset of the account",
            "nullable" : true
          },
          "AccountRequestType" : {
            "$ref" : "#/components/schemas/AccountRequestType"
          },
          "ApprovedByMe" : {
            "type" : "boolean",
            "description" : "{true} when the access request was approved by the current authenticated user"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset to request access for",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset to request access for",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset to request access for",
            "nullable" : true
          },
          "AssetSshHostKey" : {
            "type" : "string",
            "description" : "SSH host key of the asset to request access for",
            "nullable" : true
          },
          "CreatedOn" : {
            "type" : "string",
            "description" : "The UTC Date/Time the access request was created",
            "format" : "date-time"
          },
          "CurrentApprovalCount" : {
            "type" : "integer",
            "description" : "The current number of approvals for the access request",
            "format" : "int32"
          },
          "CurrentReviewerCount" : {
            "type" : "integer",
            "description" : "The current number of reviews for the access request",
            "format" : "int32"
          },
          "DurationInMinutes" : {
            "type" : "integer",
            "description" : "The duration of the request in minutes.",
            "format" : "int32"
          },
          "ExpiresOn" : {
            "type" : "string",
            "description" : "The UTC Date/Time the access request will expire",
            "format" : "date-time"
          },
          "Id" : {
            "type" : "string",
            "description" : "Qualified ID of the access request",
            "nullable" : true
          },
          "IsEmergency" : {
            "type" : "boolean",
            "description" : "{true} when the access request was submitted as being an emergency"
          },
          "NeedsAcknowledgement" : {
            "type" : "boolean",
            "description" : "{true} when the requester needs to acknowledge the access request before it will be \"closed\""
          },
          "RequestAvailability" : {
            "type" : "array",
            "description" : "DateTimes when the request is available for access.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DateTimeInterval"
            }
          },
          "ReasonCode" : {
            "$ref" : "#/components/schemas/ReasonCode"
          },
          "ReasonComment" : {
            "type" : "string",
            "description" : "Description of why the access request is needed",
            "nullable" : true
          },
          "RequestedDurationDays" : {
            "type" : "integer",
            "description" : "The duration of the access request (days)",
            "format" : "int32"
          },
          "RequestedDurationHours" : {
            "type" : "integer",
            "description" : "The duration of the access request (hours)",
            "format" : "int32"
          },
          "RequestedDurationMinutes" : {
            "type" : "integer",
            "description" : "The duration of the access request (minutes)",
            "format" : "int32"
          },
          "RequestedFor" : {
            "type" : "string",
            "description" : "The UTC Date/Time the access request becomes active",
            "format" : "date-time"
          },
          "RequesterDisplayName" : {
            "type" : "string",
            "description" : "Display name of the user that made the access request",
            "nullable" : true
          },
          "RequesterEmailAddress" : {
            "type" : "string",
            "description" : "Email address of the user that made the access request",
            "nullable" : true
          },
          "RequesterId" : {
            "type" : "integer",
            "description" : "Database ID of the user that made the access request",
            "format" : "int32"
          },
          "RequiredApprovalCount" : {
            "type" : "integer",
            "description" : "Number of approvals required before the access request can become available",
            "format" : "int32"
          },
          "RequiredReviewerCount" : {
            "type" : "integer",
            "description" : "Number of reviews required before the access request can be closed",
            "format" : "int32"
          },
          "State" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "StateChangedOn" : {
            "type" : "string",
            "description" : "The UTC date/time the Pangaea.Data.Transfer.V4.AccessRequestWorkflow.AccessRequest.State changed",
            "format" : "date-time"
          },
          "TicketNumber" : {
            "type" : "string",
            "description" : "Number of the help desk ticket as required by policy",
            "nullable" : true
          },
          "WasCancelled" : {
            "type" : "boolean",
            "description" : "{true} when the access request was cancelled by the requester"
          },
          "WasCheckedOut" : {
            "type" : "boolean",
            "description" : "{true} when the access was checked out by the requester"
          },
          "WasDenied" : {
            "type" : "boolean",
            "description" : "{true} when the access request was denied by an approver before the request was approved"
          },
          "WasEvicted" : {
            "type" : "boolean",
            "description" : "{true} when the access request was closed due the requester being deleted or disabled."
          },
          "WasExpired" : {
            "type" : "boolean",
            "description" : "{true} when the access request expired as defined by {ExpirationUtcDateTime}"
          },
          "WasRevoked" : {
            "type" : "boolean",
            "description" : "{true} when the access request was revoked by an approver after the request was approved"
          },
          "WorkflowActions" : {
            "type" : "array",
            "description" : "Actions that have occurred to the access request",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequestWorkflowAction"
            }
          },
          "PolicyId" : {
            "type" : "integer",
            "description" : "Database ID of the winning access policy for this request",
            "format" : "int32"
          },
          "PolicyName" : {
            "type" : "string",
            "description" : "Name of the winning access policy for this request",
            "nullable" : true
          },
          "RequireReviewerComment" : {
            "type" : "boolean",
            "description" : "Whether a reviewer is required to supply a comment"
          },
          "AllowSraSessionLaunch" : {
            "type" : "boolean",
            "description" : "Whether SRA remote sessions are enabled"
          },
          "AllowSessionPasswordRelease" : {
            "type" : "boolean",
            "description" : "Whether password checkouts are allowed for session requests"
          },
          "Sessions" : {
            "type" : "array",
            "description" : "Information about sessions initialized using this request",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequestSession"
            }
          },
          "AllowSubsequentAccessRequestsWithoutReview" : {
            "type" : "boolean",
            "description" : "Whether this policy will allow bypassing any pending reviews in order to create new requests."
          },
          "SessionModuleConnectionId" : {
            "type" : "integer",
            "description" : "External session module connection ID",
            "format" : "int32",
            "nullable" : true
          },
          "SessionConnectionPolicyRef" : {
            "type" : "string",
            "description" : "External session connection policy reference",
            "nullable" : true
          },
          "RequesterUsername" : {
            "type" : "string",
            "description" : "Username of the user that made the access request",
            "nullable" : true
          },
          "AllowSessionSshKeyRelease" : {
            "type" : "boolean",
            "description" : "Whether SSH key checkouts are allowed for session requests"
          },
          "AccountDistinguishedName" : {
            "type" : "string",
            "description" : "DistinguishedName of the account",
            "nullable" : true
          },
          "AssetPlatformId" : {
            "type" : "integer",
            "description" : "Platform ID of the asset to request access for",
            "format" : "int32"
          },
          "AssetPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "AssetPlatformDisplayName" : {
            "type" : "string",
            "description" : "Platform display name of the asset to request access for",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccountId" : 0,
          "SessionModuleConnectionId" : 6,
          "RequireReviewerComment" : true,
          "AccountAssetName" : "AccountAssetName",
          "WasDenied" : true,
          "RequesterUsername" : "RequesterUsername",
          "AssetPlatformType" : "Unknown",
          "TicketNumber" : "TicketNumber",
          "AllowSraSessionLaunch" : true,
          "WasCheckedOut" : true,
          "CurrentReviewerCount" : 5,
          "RequiredReviewerCount" : 7,
          "AssetPlatformId" : 7,
          "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
          "ReasonComment" : "ReasonComment",
          "WasExpired" : true,
          "Sessions" : [ {
            "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
            "HasRecording" : true,
            "ApplianceName" : "ApplianceName",
            "State" : "None",
            "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
            "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
            "ApplianceId" : "ApplianceId",
            "SessionId" : 1
          }, {
            "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
            "HasRecording" : true,
            "ApplianceName" : "ApplianceName",
            "State" : "None",
            "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
            "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
            "ApplianceId" : "ApplianceId",
            "SessionId" : 1
          } ],
          "ReasonCode" : {
            "Description" : "Description",
            "Id" : 8,
            "Name" : "Name"
          },
          "AccountDistinguishedName" : "AccountDistinguishedName",
          "AssetName" : "AssetName",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "RequesterEmailAddress" : "RequesterEmailAddress",
          "AllowSessionSshKeyRelease" : true,
          "State" : "New",
          "PolicyName" : "PolicyName",
          "AllowSubsequentAccessRequestsWithoutReview" : true,
          "Id" : "Id",
          "AssetId" : 1,
          "RequiredApprovalCount" : 4,
          "RequestedDurationDays" : 7,
          "AccountName" : "AccountName",
          "NeedsAcknowledgement" : true,
          "AccessRequestType" : "Password",
          "WasRevoked" : true,
          "ApprovedByMe" : true,
          "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
          "RequestedDurationHours" : 9,
          "AccountDomainName" : "AccountDomainName",
          "AccountAssetId" : 6,
          "DurationInMinutes" : 2,
          "RequestedDurationMinutes" : 3,
          "WasCancelled" : true,
          "IsEmergency" : true,
          "RequestAvailability" : [ {
            "Begin" : "2000-01-23T04:56:07.000+00:00",
            "End" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Begin" : "2000-01-23T04:56:07.000+00:00",
            "End" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
          "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
          "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
          "WorkflowActions" : [ {
            "OldState" : null,
            "Comment" : "Comment",
            "ActionType" : "AcknowledgeRequest",
            "User" : {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            },
            "NewState" : null,
            "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
            "SessionId" : 1
          }, {
            "OldState" : null,
            "Comment" : "Comment",
            "ActionType" : "AcknowledgeRequest",
            "User" : {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            },
            "NewState" : null,
            "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
            "SessionId" : 1
          } ],
          "RequesterDisplayName" : "RequesterDisplayName",
          "RequesterId" : 2,
          "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
          "AllowSessionPasswordRelease" : true,
          "WasEvicted" : true,
          "AssetSshHostKey" : "AssetSshHostKey",
          "CurrentApprovalCount" : 5,
          "AccountRequestType" : "None",
          "PolicyId" : 1
        }
      },
      "AccessRequestActivityLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Database ID of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "Time the change occurred (Read-only)",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Unique id of the user that caused the change (Read-only).",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "RequestId" : {
            "type" : "string",
            "description" : "ID of the access request",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "RequesterId" : {
            "type" : "integer",
            "description" : "ID of the requester",
            "format" : "int32"
          },
          "RequesterName" : {
            "type" : "string",
            "description" : "Name of the requester",
            "nullable" : true
          },
          "BrokerId" : {
            "type" : "integer",
            "description" : "ID of the broker",
            "format" : "int32"
          },
          "BrokerName" : {
            "type" : "string",
            "description" : "Name of the broker",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "ID of the account being requested",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account being requested",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Account domain name",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Id of the asset that has been requested access to",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset that has been requested access to",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset that has been requested access to",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of the partition the asset belongs to",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name  of the partition the asset belongs to",
            "nullable" : true
          },
          "SessionId" : {
            "type" : "integer",
            "description" : "Id of the session that was initialized (if applicable)",
            "format" : "int32",
            "nullable" : true
          },
          "SubmittedDate" : {
            "type" : "string",
            "description" : "Time when request was submitted",
            "format" : "date-time"
          },
          "OldState" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "Action" : {
            "$ref" : "#/components/schemas/AccessRequestStateAction"
          },
          "NewState" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Comment supplied with action",
            "nullable" : true
          },
          "RecordingProperties" : {
            "$ref" : "#/components/schemas/SessionRecordingProperties"
          },
          "OfflineWorkflow" : {
            "type" : "boolean",
            "description" : "True if the appliance was in offline workflow mode at the time of the log"
          },
          "ReasonCode" : {
            "type" : "integer",
            "description" : "Request reason code",
            "format" : "int32",
            "nullable" : true
          },
          "ReasonName" : {
            "type" : "string",
            "description" : "Request reason name",
            "nullable" : true
          },
          "ReasonComment" : {
            "type" : "string",
            "description" : "Request reason comment",
            "nullable" : true
          },
          "TicketNumber" : {
            "type" : "string",
            "description" : "Request ticket number",
            "nullable" : true
          },
          "IsEmergency" : {
            "type" : "boolean",
            "description" : "If request was for emergency"
          },
          "SessionSpsNodeIpAddress" : {
            "type" : "string",
            "description" : "Session node IpAddress that serves the session request.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Access Request Activity Log",
        "example" : {
          "OldState" : "New",
          "AccessRequestType" : "Password",
          "Action" : "AcknowledgeRequest",
          "ApplianceName" : "ApplianceName",
          "AccountId" : 5,
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "SubmittedDate" : "2000-01-23T04:56:07.000+00:00",
          "AccountDomainName" : "AccountDomainName",
          "SessionSpsNodeIpAddress" : "SessionSpsNodeIpAddress",
          "AssetPartitionName" : "AssetPartitionName",
          "TicketNumber" : "TicketNumber",
          "RequesterName" : "RequesterName",
          "IsEmergency" : true,
          "ApplianceId" : "ApplianceId",
          "SessionId" : 7,
          "AssetPartitionId" : 2,
          "Comment" : "Comment",
          "RequestId" : "RequestId",
          "ReasonComment" : "ReasonComment",
          "BrokerId" : 1,
          "RequesterId" : 6,
          "EventName" : "Unknown",
          "ReasonCode" : 9,
          "BrokerName" : "BrokerName",
          "AssetName" : "AssetName",
          "OfflineWorkflow" : true,
          "ReasonName" : "ReasonName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "UserId" : 0,
          "NewState" : null,
          "Id" : "Id",
          "RecordingProperties" : {
            "HasRecording" : true,
            "RecordingId" : "RecordingId",
            "SpsApplianceId" : 7,
            "SessionResult" : "SessionResult",
            "IsLive" : true,
            "DownloadUrl" : "DownloadUrl"
          },
          "AssetId" : 5,
          "AccountName" : "AccountName"
        }
      },
      "AccessRequestApprovalBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AccessRequest"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/ApproveRequest"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "AccountId" : 0,
            "SessionModuleConnectionId" : 6,
            "RequireReviewerComment" : true,
            "AccountAssetName" : "AccountAssetName",
            "WasDenied" : true,
            "RequesterUsername" : "RequesterUsername",
            "AssetPlatformType" : "Unknown",
            "TicketNumber" : "TicketNumber",
            "AllowSraSessionLaunch" : true,
            "WasCheckedOut" : true,
            "CurrentReviewerCount" : 5,
            "RequiredReviewerCount" : 7,
            "AssetPlatformId" : 7,
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "ReasonComment" : "ReasonComment",
            "WasExpired" : true,
            "Sessions" : [ {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            }, {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            } ],
            "ReasonCode" : {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            },
            "AccountDistinguishedName" : "AccountDistinguishedName",
            "AssetName" : "AssetName",
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "RequesterEmailAddress" : "RequesterEmailAddress",
            "AllowSessionSshKeyRelease" : true,
            "State" : "New",
            "PolicyName" : "PolicyName",
            "AllowSubsequentAccessRequestsWithoutReview" : true,
            "Id" : "Id",
            "AssetId" : 1,
            "RequiredApprovalCount" : 4,
            "RequestedDurationDays" : 7,
            "AccountName" : "AccountName",
            "NeedsAcknowledgement" : true,
            "AccessRequestType" : "Password",
            "WasRevoked" : true,
            "ApprovedByMe" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestedDurationHours" : 9,
            "AccountDomainName" : "AccountDomainName",
            "AccountAssetId" : 6,
            "DurationInMinutes" : 2,
            "RequestedDurationMinutes" : 3,
            "WasCancelled" : true,
            "IsEmergency" : true,
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
            "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "WorkflowActions" : [ {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            }, {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            } ],
            "RequesterDisplayName" : "RequesterDisplayName",
            "RequesterId" : 2,
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
            "AllowSessionPasswordRelease" : true,
            "WasEvicted" : true,
            "AssetSshHostKey" : "AssetSshHostKey",
            "CurrentApprovalCount" : 5,
            "AccountRequestType" : "None",
            "PolicyId" : 1
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : {
            "Comment" : "Comment",
            "RequestId" : "RequestId"
          },
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AccessRequestApprover" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Id of the approver",
            "format" : "int32"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "Display Name of the approver",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "DisplayName" : "DisplayName",
          "Id" : 6
        }
      },
      "AccessRequestApproverSet" : {
        "type" : "object",
        "properties" : {
          "RequiredApprovers" : {
            "type" : "integer",
            "description" : "Minimum required number of approvers from this approver set",
            "format" : "int32"
          },
          "Approvers" : {
            "type" : "array",
            "description" : "List of approvers",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequestApprover"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "RequiredApprovers" : 0,
          "Approvers" : [ {
            "DisplayName" : "DisplayName",
            "Id" : 6
          }, {
            "DisplayName" : "DisplayName",
            "Id" : 6
          } ]
        }
      },
      "AccessRequestBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AccessRequest"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/NewAccessRequest"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "AccountId" : 0,
            "SessionModuleConnectionId" : 6,
            "RequireReviewerComment" : true,
            "AccountAssetName" : "AccountAssetName",
            "WasDenied" : true,
            "RequesterUsername" : "RequesterUsername",
            "AssetPlatformType" : "Unknown",
            "TicketNumber" : "TicketNumber",
            "AllowSraSessionLaunch" : true,
            "WasCheckedOut" : true,
            "CurrentReviewerCount" : 5,
            "RequiredReviewerCount" : 7,
            "AssetPlatformId" : 7,
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "ReasonComment" : "ReasonComment",
            "WasExpired" : true,
            "Sessions" : [ {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            }, {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            } ],
            "ReasonCode" : {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            },
            "AccountDistinguishedName" : "AccountDistinguishedName",
            "AssetName" : "AssetName",
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "RequesterEmailAddress" : "RequesterEmailAddress",
            "AllowSessionSshKeyRelease" : true,
            "State" : "New",
            "PolicyName" : "PolicyName",
            "AllowSubsequentAccessRequestsWithoutReview" : true,
            "Id" : "Id",
            "AssetId" : 1,
            "RequiredApprovalCount" : 4,
            "RequestedDurationDays" : 7,
            "AccountName" : "AccountName",
            "NeedsAcknowledgement" : true,
            "AccessRequestType" : "Password",
            "WasRevoked" : true,
            "ApprovedByMe" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestedDurationHours" : 9,
            "AccountDomainName" : "AccountDomainName",
            "AccountAssetId" : 6,
            "DurationInMinutes" : 2,
            "RequestedDurationMinutes" : 3,
            "WasCancelled" : true,
            "IsEmergency" : true,
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
            "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "WorkflowActions" : [ {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            }, {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            } ],
            "RequesterDisplayName" : "RequesterDisplayName",
            "RequesterId" : 2,
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
            "AllowSessionPasswordRelease" : true,
            "WasEvicted" : true,
            "AssetSshHostKey" : "AssetSshHostKey",
            "CurrentApprovalCount" : 5,
            "AccountRequestType" : "None",
            "PolicyId" : 1
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : {
            "AccessRequestType" : "Password",
            "AccountId" : 6,
            "ReasonComment" : "ReasonComment",
            "TicketNumber" : "TicketNumber",
            "RequestedDurationMinutes" : 41,
            "IsEmergency" : false,
            "AllowSraSessionLaunch" : true,
            "RequestedDurationHours" : 5,
            "AssetId" : 1,
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "ReasonCodeId" : 5,
            "RequestedDurationDays" : 17
          },
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AccessRequestBroker" : {
        "type" : "object",
        "properties" : {
          "Enabled" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Enabled" : true
        }
      },
      "AccessRequestDenyBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AccessRequest"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/DenyRequest"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "AccountId" : 0,
            "SessionModuleConnectionId" : 6,
            "RequireReviewerComment" : true,
            "AccountAssetName" : "AccountAssetName",
            "WasDenied" : true,
            "RequesterUsername" : "RequesterUsername",
            "AssetPlatformType" : "Unknown",
            "TicketNumber" : "TicketNumber",
            "AllowSraSessionLaunch" : true,
            "WasCheckedOut" : true,
            "CurrentReviewerCount" : 5,
            "RequiredReviewerCount" : 7,
            "AssetPlatformId" : 7,
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "ReasonComment" : "ReasonComment",
            "WasExpired" : true,
            "Sessions" : [ {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            }, {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            } ],
            "ReasonCode" : {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            },
            "AccountDistinguishedName" : "AccountDistinguishedName",
            "AssetName" : "AssetName",
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "RequesterEmailAddress" : "RequesterEmailAddress",
            "AllowSessionSshKeyRelease" : true,
            "State" : "New",
            "PolicyName" : "PolicyName",
            "AllowSubsequentAccessRequestsWithoutReview" : true,
            "Id" : "Id",
            "AssetId" : 1,
            "RequiredApprovalCount" : 4,
            "RequestedDurationDays" : 7,
            "AccountName" : "AccountName",
            "NeedsAcknowledgement" : true,
            "AccessRequestType" : "Password",
            "WasRevoked" : true,
            "ApprovedByMe" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestedDurationHours" : 9,
            "AccountDomainName" : "AccountDomainName",
            "AccountAssetId" : 6,
            "DurationInMinutes" : 2,
            "RequestedDurationMinutes" : 3,
            "WasCancelled" : true,
            "IsEmergency" : true,
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
            "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "WorkflowActions" : [ {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            }, {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            } ],
            "RequesterDisplayName" : "RequesterDisplayName",
            "RequesterId" : 2,
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
            "AllowSessionPasswordRelease" : true,
            "WasEvicted" : true,
            "AssetSshHostKey" : "AssetSshHostKey",
            "CurrentApprovalCount" : 5,
            "AccountRequestType" : "None",
            "PolicyId" : 1
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : {
            "Comment" : "Comment",
            "RequestId" : "RequestId"
          },
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AccessRequestLog" : {
        "type" : "object",
        "properties" : {
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "RequestId" : {
            "type" : "string",
            "description" : "ID of the access request",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "RequesterId" : {
            "type" : "integer",
            "description" : "ID of the requester",
            "format" : "int32"
          },
          "RequesterName" : {
            "type" : "string",
            "description" : "Name of the requester",
            "nullable" : true
          },
          "RequesterUsername" : {
            "type" : "string",
            "description" : "Username of the requester",
            "nullable" : true
          },
          "RequesterEmail" : {
            "type" : "string",
            "description" : "Email of the requester",
            "nullable" : true
          },
          "RequesterTimezone" : {
            "type" : "string",
            "description" : "Timezone of the requester",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "ID of the account that was requested",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account that was requested",
            "nullable" : true
          },
          "AccountAssetId" : {
            "type" : "integer",
            "description" : "ID of the asset of the account that was requested",
            "format" : "int32",
            "nullable" : true
          },
          "AccountAssetName" : {
            "type" : "string",
            "description" : "Name of the asset of the account that was requested",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of the account that was requested",
            "nullable" : true
          },
          "AccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of the account that was requested",
            "nullable" : true
          },
          "AccountRequestType" : {
            "$ref" : "#/components/schemas/AccountRequestType"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Id of the asset that was requested",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset that was requested",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset that was requested",
            "nullable" : true
          },
          "RequestDuration" : {
            "type" : "integer",
            "description" : "Duration requested",
            "format" : "int32"
          },
          "SubmittedAt" : {
            "type" : "string",
            "description" : "Time when request was submitted",
            "format" : "date-time"
          },
          "RequiredAt" : {
            "type" : "string",
            "description" : "Time when request will available was required",
            "format" : "date-time"
          },
          "RequestExpiresAt" : {
            "type" : "string",
            "description" : "Time when request expires",
            "format" : "date-time"
          },
          "ApprovedAt" : {
            "type" : "string",
            "description" : "Time when request was approved",
            "format" : "date-time",
            "nullable" : true
          },
          "IsEmergency" : {
            "type" : "boolean",
            "description" : "If request was for emergency"
          },
          "WasCancelled" : {
            "type" : "boolean",
            "description" : "If request was cancelled"
          },
          "WasDenied" : {
            "type" : "boolean",
            "description" : "If request was denied"
          },
          "WasExpired" : {
            "type" : "boolean",
            "description" : "If request was expired normally"
          },
          "WasRevoked" : {
            "type" : "boolean",
            "description" : "If request was revoked"
          },
          "WasCheckedOut" : {
            "type" : "boolean",
            "description" : "If request was checked out"
          },
          "WasEvicted" : {
            "type" : "boolean",
            "description" : "If request was evicted"
          },
          "ReasonCode" : {
            "type" : "integer",
            "description" : "Request reason code",
            "format" : "int32",
            "nullable" : true
          },
          "ReasonName" : {
            "type" : "string",
            "description" : "Request reason name",
            "nullable" : true
          },
          "ReasonComment" : {
            "type" : "string",
            "description" : "Request reason comment",
            "nullable" : true
          },
          "TicketNumber" : {
            "type" : "string",
            "description" : "Request ticket number",
            "nullable" : true
          },
          "OfflineWorkflow" : {
            "type" : "boolean",
            "description" : "True if the appliance was in offline workflow mode at the time of the log"
          },
          "PolicyId" : {
            "type" : "integer",
            "description" : "Id of access policy used for this request",
            "format" : "int32"
          },
          "PolicyName" : {
            "type" : "string",
            "description" : "Name of access policy used for this request",
            "nullable" : true
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "Id of role used for this request",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of role used for this request",
            "nullable" : true
          },
          "DefaultReleaseDurationDays" : {
            "type" : "integer",
            "description" : "Default duration (days) the request will be available.",
            "format" : "int32",
            "readOnly" : true
          },
          "DefaultReleaseDurationHours" : {
            "type" : "integer",
            "description" : "Default duration (hours) the request will be available.",
            "format" : "int32",
            "readOnly" : true
          },
          "DefaultReleaseDurationMinutes" : {
            "type" : "integer",
            "description" : "Default duration (minutes) the request will be available.",
            "format" : "int32",
            "readOnly" : true
          },
          "MaximumReleaseDurationDays" : {
            "type" : "integer",
            "description" : "The maximum duration (days) the request will be available",
            "format" : "int32",
            "readOnly" : true
          },
          "MaximumReleaseDurationHours" : {
            "type" : "integer",
            "description" : "The maximum duration (hours) the request will be available.",
            "format" : "int32",
            "readOnly" : true
          },
          "MaximumReleaseDurationMinutes" : {
            "type" : "integer",
            "description" : "The maximum duration (minutes) the request will be available.",
            "format" : "int32",
            "readOnly" : true
          },
          "HourlyRestrictionProperties" : {
            "$ref" : "#/components/schemas/HourlyRestrictionProperties"
          },
          "PolicyExpirationDate" : {
            "type" : "string",
            "description" : "Date/time after which the associated policy/role will cease to be active",
            "format" : "date-time",
            "nullable" : true
          },
          "AllowCustomDuration" : {
            "type" : "boolean",
            "description" : "Whether to allow the release duration to be modified during a request."
          },
          "RequiresApproval" : {
            "type" : "boolean",
            "description" : "Requests must be approved before becoming available"
          },
          "RequiresReasonCode" : {
            "type" : "boolean",
            "description" : "A reason code is required for request to be made."
          },
          "RequiresReasonComment" : {
            "type" : "boolean",
            "description" : "A reason comment is required before a request can be made."
          },
          "EmergencyAccessEnabled" : {
            "type" : "boolean",
            "description" : "Whether the members of this role can request emergency access"
          },
          "EmergencyAccessAnytime" : {
            "type" : "boolean",
            "description" : "Ignore hourly restrictions when requesting emergency access"
          },
          "EmergencyAccessSimultaneous" : {
            "type" : "boolean",
            "description" : "Allow multiple users to request emergency access simultaneously for same account"
          },
          "RequiredReviewers" : {
            "type" : "integer",
            "description" : "The minimum number of reviews required before a request is closed",
            "format" : "int32"
          },
          "ChangePasswordAfterRelease" : {
            "type" : "boolean",
            "description" : "Whether to change the account password after a release has expired"
          },
          "ChangeSshKeyAfterRelease" : {
            "type" : "boolean",
            "description" : "Whether to change the account SSH key after a release has expired"
          },
          "AllowSessionPasswordRelease" : {
            "type" : "boolean",
            "description" : "Allow password release during session request"
          },
          "AllowSessionSshKeyRelease" : {
            "type" : "boolean",
            "description" : "Allow SSH key release during session request"
          },
          "MaximumSimultaneousReleases" : {
            "type" : "integer",
            "description" : "Maximum number of requests during the same time period",
            "format" : "int32"
          },
          "PendingReviewDurationBeforeEscalationDays" : {
            "type" : "integer",
            "description" : "The maximum duration (days) an expired request may be pending review before notifying escalation contacts",
            "format" : "int32",
            "readOnly" : true
          },
          "PendingReviewDurationBeforeEscalationHours" : {
            "type" : "integer",
            "description" : "The maximum duration (hours) a expired request may be pending review before notifying escalation contacts",
            "format" : "int32",
            "readOnly" : true
          },
          "PendingReviewDurationBeforeEscalationMinutes" : {
            "type" : "integer",
            "description" : "The maximum duration (minutes) a expired request may be pending review before notifying escalation contacts",
            "format" : "int32",
            "readOnly" : true
          },
          "PendingApprovalDurationBeforeEscalationDays" : {
            "type" : "integer",
            "description" : "The maximum duration (days) a request may be pending approval before notifying escalation contacts",
            "format" : "int32",
            "readOnly" : true
          },
          "PendingApprovalDurationBeforeEscalationHours" : {
            "type" : "integer",
            "description" : "The maximum duration (hours) a request may be pending approval before notifying escalation contacts",
            "format" : "int32",
            "readOnly" : true
          },
          "PendingApprovalDurationBeforeEscalationMinutes" : {
            "type" : "integer",
            "description" : "The maximum duration (minutes) a request may be pending approval before notifying escalation contacts",
            "format" : "int32",
            "readOnly" : true
          },
          "Reviewers" : {
            "type" : "array",
            "description" : "Policy reviewers",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequestLogIdentity"
            }
          },
          "ApproverSets" : {
            "type" : "array",
            "description" : "Policy approver sets",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequestLogApproverSet"
            }
          },
          "RequestState" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "SessionProperties" : {
            "$ref" : "#/components/schemas/SessionProperties"
          },
          "BrokerId" : {
            "type" : "integer",
            "description" : "ID of the broker",
            "format" : "int32"
          },
          "BrokerName" : {
            "type" : "string",
            "description" : "Name of the broker",
            "nullable" : true
          },
          "AllowSraSessionLaunch" : {
            "type" : "boolean",
            "description" : "Allow Sra session launch"
          },
          "ApplicationSessionProperties" : {
            "$ref" : "#/components/schemas/ApplicationSessionProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Password Request Log",
        "example" : {
          "AccountId" : 6,
          "MaximumReleaseDurationMinutes" : 1,
          "AllowCustomDuration" : true,
          "AccountAssetName" : "AccountAssetName",
          "WasDenied" : true,
          "RequestDuration" : 5,
          "EmergencyAccessAnytime" : true,
          "ChangeSshKeyAfterRelease" : true,
          "RequesterUsername" : "RequesterUsername",
          "RequiredAt" : "2000-01-23T04:56:07.000+00:00",
          "TicketNumber" : "TicketNumber",
          "AllowSraSessionLaunch" : true,
          "ApproverSets" : [ {
            "Approvers" : [ null, null ],
            "Id" : 8,
            "RequiredApprovals" : 9
          }, {
            "Approvers" : [ null, null ],
            "Id" : 8,
            "RequiredApprovals" : 9
          } ],
          "WasCheckedOut" : true,
          "PendingApprovalDurationBeforeEscalationMinutes" : 9,
          "DefaultReleaseDurationMinutes" : 4,
          "RequestId" : "RequestId",
          "ReasonComment" : "ReasonComment",
          "WasExpired" : true,
          "MaximumReleaseDurationDays" : 7,
          "RequesterTimezone" : "RequesterTimezone",
          "AccountDistinguishedName" : "AccountDistinguishedName",
          "ReasonCode" : 2,
          "AssetName" : "AssetName",
          "OfflineWorkflow" : true,
          "BrokerName" : "BrokerName",
          "ApplicationSessionProperties" : {
            "ApplicationHostAssetName" : "ApplicationHostAssetName",
            "ApplicationName" : "ApplicationName",
            "ApplicationHostAssetNetworkAddress" : "ApplicationHostAssetNetworkAddress",
            "ApplicationAlias" : "ApplicationAlias",
            "ApplicationHostAssetId" : 3,
            "ApplicationHostAccountId" : 6,
            "ApplicationHostAccountName" : "ApplicationHostAccountName"
          },
          "RoleName" : "RoleName",
          "RequestState" : "New",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "DefaultReleaseDurationDays" : 3,
          "SessionProperties" : {
            "SessionModuleConnectionId" : 1,
            "RemoteDesktopApplicationProperties" : {
              "ApplicationHostLoginAccount" : null,
              "ApplicationDisplayName" : "ApplicationDisplayName",
              "ApplicationAlias" : "ApplicationAlias",
              "ApplicationHostAssetId" : 2,
              "ApplicationHostAccountId" : 7,
              "ApplicationHostAsset" : {
                "AssetPartitionId" : 6,
                "AssetPartitionName" : "AssetPartitionName",
                "AssetType" : "NotSpecified",
                "Description" : "Description",
                "SshHostKey" : {
                  "Fingerprint" : "Fingerprint",
                  "SshHostKey" : "SshHostKey",
                  "FingerprintSha256" : "FingerprintSha256"
                },
                "NetworkAddress" : "NetworkAddress",
                "Platform" : {
                  "DisplayName" : "DisplayName",
                  "Id" : 5,
                  "PlatformType" : null,
                  "SupportsSessionManagement" : true
                },
                "DomainName" : "DomainName",
                "SessionAccessProperties" : {
                  "RemoteDesktopSessionPort" : 21975,
                  "AllowSessionRequests" : true,
                  "TelnetSessionPort" : 20275,
                  "SshSessionPort" : 43935
                },
                "Id" : 6,
                "Disabled" : true,
                "Name" : "Name"
              }
            },
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef"
          },
          "AllowSessionSshKeyRelease" : true,
          "PolicyName" : "PolicyName",
          "PendingApprovalDurationBeforeEscalationDays" : 5,
          "EmergencyAccessSimultaneous" : true,
          "MaximumReleaseDurationHours" : 1,
          "Reviewers" : [ {
            "IsGroup" : true,
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "EmailAddress" : "EmailAddress"
          }, {
            "IsGroup" : true,
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "EmailAddress" : "EmailAddress"
          } ],
          "PendingApprovalDurationBeforeEscalationHours" : 9,
          "AssetId" : 5,
          "AccountName" : "AccountName",
          "AccessRequestType" : "Password",
          "RequiresReasonComment" : true,
          "WasRevoked" : true,
          "RequiredReviewers" : 1,
          "EmergencyAccessEnabled" : true,
          "PendingReviewDurationBeforeEscalationDays" : 7,
          "RequiresApproval" : true,
          "AccountDomainName" : "AccountDomainName",
          "AccountAssetId" : 1,
          "ApprovedAt" : "2000-01-23T04:56:07.000+00:00",
          "SubmittedAt" : "2000-01-23T04:56:07.000+00:00",
          "MaximumSimultaneousReleases" : 6,
          "RequiresReasonCode" : true,
          "RequesterName" : "RequesterName",
          "WasCancelled" : true,
          "IsEmergency" : true,
          "PolicyExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "ChangePasswordAfterRelease" : true,
          "RequestExpiresAt" : "2000-01-23T04:56:07.000+00:00",
          "PendingReviewDurationBeforeEscalationHours" : 1,
          "DefaultReleaseDurationHours" : 2,
          "BrokerId" : 6,
          "RequesterEmail" : "RequesterEmail",
          "RequesterId" : 0,
          "HourlyRestrictionProperties" : {
            "EnableHourlyRestrictions" : false,
            "ThursdayValidHours" : [ 6, 6 ],
            "WednesdayValidHours" : [ 0, 0 ],
            "SaturdayValidHours" : [ 1, 1 ],
            "TuesdayValidHours" : [ 4, 4 ],
            "MondayValidHours" : [ 3, 3 ],
            "FridayValidHours" : [ 4, 4 ],
            "SundayValidHours" : [ 4, 4 ]
          },
          "RoleId" : 9,
          "ReasonName" : "ReasonName",
          "AllowSessionPasswordRelease" : true,
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "WasEvicted" : true,
          "PendingReviewDurationBeforeEscalationMinutes" : 4,
          "AccountRequestType" : "None",
          "PolicyId" : 7
        }
      },
      "AccessRequestLogApproverSet" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "RequiredApprovals" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Approvers" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequestLogIdentity"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Approvers" : [ null, null ],
          "Id" : 8,
          "RequiredApprovals" : 9
        }
      },
      "AccessRequestLogIdentity" : {
        "type" : "object",
        "properties" : {
          "DisplayName" : {
            "type" : "string",
            "nullable" : true
          },
          "EmailAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsGroup" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "IsGroup" : true,
          "DisplayName" : "DisplayName",
          "Id" : 6,
          "EmailAddress" : "EmailAddress"
        }
      },
      "AccessRequestProperties" : {
        "type" : "object",
        "properties" : {
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "AllowSimultaneousAccess" : {
            "type" : "boolean",
            "description" : "Whether to allow more than one access request to be active at the same time",
            "default" : false
          },
          "MaximumSimultaneousReleases" : {
            "maximum" : 99,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Maximum number of times access can be granted during the same time period",
            "format" : "int32",
            "default" : 1
          },
          "ChangePasswordAfterCheckin" : {
            "type" : "boolean",
            "description" : "Whether to change the account password after an access request is checked in",
            "default" : true
          },
          "ChangeSshKeyAfterCheckin" : {
            "type" : "boolean",
            "description" : "Whether to change the SSH key pair after an access request is checked in",
            "default" : true
          },
          "AllowSessionPasswordRelease" : {
            "type" : "boolean",
            "description" : "Whether to allow the password to be released as part of a session access request (RemoteDesktop or Ssh)",
            "default" : false
          },
          "AllowSessionSshKeyRelease" : {
            "type" : "boolean",
            "description" : "Whether to allow the SSH key to be released as part of a session access request (Ssh)",
            "default" : false
          },
          "SessionAccessAccountType" : {
            "$ref" : "#/components/schemas/SessionAccessAccountType"
          },
          "SessionAccessAccounts" : {
            "type" : "array",
            "description" : "Details of session access accounts (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PolicyAccount"
            }
          },
          "TerminateExpiredSessions" : {
            "type" : "boolean",
            "description" : "Whether to terminate active sessions when the access request expires",
            "default" : false
          },
          "AllowLinkedAccountPasswordAccess" : {
            "type" : "boolean",
            "description" : "Whether to allow linked accounts to be requested",
            "default" : false
          },
          "PassphraseProtectSshKey" : {
            "type" : "boolean",
            "description" : "Whether the SSH private key will be encrypted upon check out",
            "default" : true
          },
          "UseAltLoginName" : {
            "type" : "boolean",
            "description" : "Whether to use the AltLoginName AD attribute for a session connection launch string",
            "default" : false
          },
          "LinkedAccountScopeFiltering" : {
            "type" : "boolean",
            "description" : "Whether to filter linked accounts using scope filtering. Only valid when using linked session accounts or linked account password access",
            "default" : false
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration governing access requests",
        "example" : {
          "AccessRequestType" : "Password",
          "ChangeSshKeyAfterCheckin" : true,
          "AllowLinkedAccountPasswordAccess" : false,
          "SessionAccessAccountType" : "None",
          "LinkedAccountScopeFiltering" : false,
          "AllowSessionPasswordRelease" : false,
          "UseAltLoginName" : false,
          "SessionAccessAccounts" : [ {
            "IsServiceAccount" : true,
            "Description" : "Description",
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "LinkedUsersCount" : 9,
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "AccountType" : "Asset",
            "Name" : "Name",
            "NotifyOwnersOnly" : true,
            "HasSshKey" : true,
            "SuspendAccountWhenCheckedIn" : true,
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "NetBiosName" : "NetBiosName",
            "Id" : 8,
            "Disabled" : true,
            "HasPassword" : true
          }, {
            "IsServiceAccount" : true,
            "Description" : "Description",
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "LinkedUsersCount" : 9,
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "AccountType" : "Asset",
            "Name" : "Name",
            "NotifyOwnersOnly" : true,
            "HasSshKey" : true,
            "SuspendAccountWhenCheckedIn" : true,
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "NetBiosName" : "NetBiosName",
            "Id" : 8,
            "Disabled" : true,
            "HasPassword" : true
          } ],
          "AllowSessionSshKeyRelease" : false,
          "TerminateExpiredSessions" : false,
          "MaximumSimultaneousReleases" : 66,
          "ChangePasswordAfterCheckin" : true,
          "PassphraseProtectSshKey" : true,
          "AllowSimultaneousAccess" : false
        }
      },
      "AccessRequestReviewBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AccessRequest"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/ReviewRequest"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "AccountId" : 0,
            "SessionModuleConnectionId" : 6,
            "RequireReviewerComment" : true,
            "AccountAssetName" : "AccountAssetName",
            "WasDenied" : true,
            "RequesterUsername" : "RequesterUsername",
            "AssetPlatformType" : "Unknown",
            "TicketNumber" : "TicketNumber",
            "AllowSraSessionLaunch" : true,
            "WasCheckedOut" : true,
            "CurrentReviewerCount" : 5,
            "RequiredReviewerCount" : 7,
            "AssetPlatformId" : 7,
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "ReasonComment" : "ReasonComment",
            "WasExpired" : true,
            "Sessions" : [ {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            }, {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            } ],
            "ReasonCode" : {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            },
            "AccountDistinguishedName" : "AccountDistinguishedName",
            "AssetName" : "AssetName",
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "RequesterEmailAddress" : "RequesterEmailAddress",
            "AllowSessionSshKeyRelease" : true,
            "State" : "New",
            "PolicyName" : "PolicyName",
            "AllowSubsequentAccessRequestsWithoutReview" : true,
            "Id" : "Id",
            "AssetId" : 1,
            "RequiredApprovalCount" : 4,
            "RequestedDurationDays" : 7,
            "AccountName" : "AccountName",
            "NeedsAcknowledgement" : true,
            "AccessRequestType" : "Password",
            "WasRevoked" : true,
            "ApprovedByMe" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestedDurationHours" : 9,
            "AccountDomainName" : "AccountDomainName",
            "AccountAssetId" : 6,
            "DurationInMinutes" : 2,
            "RequestedDurationMinutes" : 3,
            "WasCancelled" : true,
            "IsEmergency" : true,
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
            "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "WorkflowActions" : [ {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            }, {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            } ],
            "RequesterDisplayName" : "RequesterDisplayName",
            "RequesterId" : 2,
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
            "AllowSessionPasswordRelease" : true,
            "WasEvicted" : true,
            "AssetSshHostKey" : "AssetSshHostKey",
            "CurrentApprovalCount" : 5,
            "AccountRequestType" : "None",
            "PolicyId" : 1
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : {
            "Comment" : "Comment",
            "RequestId" : "RequestId"
          },
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AccessRequestRole" : {
        "type" : "string",
        "description" : "Users role in relation to an access request",
        "format" : "string",
        "enum" : [ "Requester", "Approver", "Reviewer", "Admin" ]
      },
      "AccessRequestSession" : {
        "type" : "object",
        "properties" : {
          "SessionId" : {
            "type" : "integer",
            "description" : "Unique ID of session for request",
            "format" : "int32"
          },
          "InitializedDate" : {
            "type" : "string",
            "description" : "Date session was initialized",
            "format" : "date-time"
          },
          "ConnectedDate" : {
            "type" : "string",
            "description" : "Date session connected to target asset",
            "format" : "date-time",
            "nullable" : true
          },
          "TerminatedDate" : {
            "type" : "string",
            "description" : "Date session was terminated",
            "format" : "date-time",
            "nullable" : true
          },
          "State" : {
            "$ref" : "#/components/schemas/SessionState"
          },
          "HasRecording" : {
            "type" : "boolean",
            "description" : "Whether session was recorded"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Appliance ID session was run on",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Appliance name session was run on",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Information about sessions initialized using this request",
        "example" : {
          "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
          "HasRecording" : true,
          "ApplianceName" : "ApplianceName",
          "State" : "None",
          "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
          "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
          "ApplianceId" : "ApplianceId",
          "SessionId" : 1
        }
      },
      "AccessRequestSessionActivityLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Database ID of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the activity occurred",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Unique id of the user that caused the change (Read-only).",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "RequestId" : {
            "type" : "string",
            "description" : "ID of the access request",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "RequesterId" : {
            "type" : "integer",
            "description" : "ID of the requester",
            "format" : "int32"
          },
          "RequesterName" : {
            "type" : "string",
            "description" : "Name of the requester",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "ID of the account being requested",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account being requested",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Account domain name",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Id of the asset that has been requested access to",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset that has been requested access to",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Name of the asset that has been requested access to",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of the partition the asset belongs to",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the partition the asset belongs to",
            "nullable" : true
          },
          "SessionId" : {
            "type" : "integer",
            "description" : "Id of the session that was initialized",
            "format" : "int32"
          },
          "EventData" : {
            "type" : "string",
            "description" : "More information about the event",
            "nullable" : true
          },
          "RecordingProperties" : {
            "$ref" : "#/components/schemas/SessionRecordingProperties"
          },
          "SessionSpsNodeIpAddress" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Log of session activities after session is initialized",
        "example" : {
          "AssetPartitionId" : 5,
          "AccessRequestType" : "Password",
          "ApplianceName" : "ApplianceName",
          "AccountId" : 1,
          "RequestId" : "RequestId",
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "RequesterId" : 6,
          "EventName" : "Unknown",
          "AccountDomainName" : "AccountDomainName",
          "SessionSpsNodeIpAddress" : "SessionSpsNodeIpAddress",
          "AssetName" : "AssetName",
          "EventData" : "EventData",
          "AssetPartitionName" : "AssetPartitionName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "UserId" : 0,
          "RequesterName" : "RequesterName",
          "Id" : "Id",
          "ApplianceId" : "ApplianceId",
          "RecordingProperties" : {
            "HasRecording" : true,
            "RecordingId" : "RecordingId",
            "SpsApplianceId" : 7,
            "SessionResult" : "SessionResult",
            "IsLive" : true,
            "DownloadUrl" : "DownloadUrl"
          },
          "AssetId" : 5,
          "SessionId" : 2,
          "AccountName" : "AccountName"
        }
      },
      "AccessRequestState" : {
        "type" : "string",
        "description" : "Represents the state of the access request",
        "format" : "string",
        "enum" : [ "New", "PendingApproval", "Approved", "PendingTimeRequested", "RequestAvailable", "PasswordCheckedOut", "Reclaimed", "RequestCheckedIn", "Expired", "Terminated", "PendingReview", "Closed", "PendingAcknowledgment", "Complete", "PendingPasswordReset", "SessionInitialized", "PendingAccountSuspended", "PendingAccountRestored", "SshKeyCheckedOut", "PendingSshKeyReset" ]
      },
      "AccessRequestStateAction" : {
        "type" : "string",
        "description" : "Represents a type of action that can occur on a access request",
        "format" : "string",
        "enum" : [ "AcknowledgeRequest", "ApproveRequest", "CancelRequest", "CheckInRequest", "CheckOutPassword", "CloseRequestWithoutReview", "DenyRequest", "EvictRequest", "ExpireRequest", "Initialize", "PasswordWasReset", "ReviewRequest", "RevokeRequest", "TimeRequestedArrived", "NextState", "InitializeSession", "AuthenticateSession", "AuthorizeSession", "CheckOutSessionPassword", "TerminateSession", "AuditSession", "InitializeSessionPlayback", "AccountWasSuspended", "AccountWasRestored", "CloseRequest", "PasswordResetByPassed", "CheckOutSshKey", "SshKeyWasReset", "SshKeyResetBypassed", "CheckOutSessionSshKey" ]
      },
      "AccessRequestType" : {
        "type" : "string",
        "description" : "Type of access being granted",
        "format" : "string",
        "enum" : [ "Password", "RemoteDesktop", "Ssh", "Telnet", "SshKey", "RemoteDesktopApplication" ]
      },
      "AccessRequestWorkflowAction" : {
        "type" : "object",
        "properties" : {
          "ActionType" : {
            "$ref" : "#/components/schemas/AccessRequestStateAction"
          },
          "Comment" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Optional information about the action taken",
            "nullable" : true
          },
          "NewState" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "OccurredOn" : {
            "type" : "string",
            "description" : "The UTC Date/Time the action took place",
            "format" : "date-time"
          },
          "OldState" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "User" : {
            "$ref" : "#/components/schemas/Identity"
          },
          "SessionId" : {
            "type" : "integer",
            "description" : "Identifier for the session that was initialized (if applicable)",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an action taken to a access request",
        "example" : {
          "OldState" : null,
          "Comment" : "Comment",
          "ActionType" : "AcknowledgeRequest",
          "User" : {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          },
          "NewState" : null,
          "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
          "SessionId" : 1
        }
      },
      "AccountAssetProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the asset this account is associated with",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the asset this account is associated with",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "The network address of the asset this account is associated with",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of AssetPartition to be used by this account (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the AssetPartition this account belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Account asset information",
        "example" : {
          "AssetPartitionId" : 6,
          "AssetPartitionName" : "AssetPartitionName",
          "NetworkAddress" : "NetworkAddress",
          "Id" : 3,
          "Name" : "Name"
        }
      },
      "AccountDiscoveryLog" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of the event",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory name the task was executed against (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset.",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the platform of the asset (Read-only)",
            "nullable" : true
          },
          "IsDirectory" : {
            "type" : "boolean",
            "description" : "Whether this is a directory platform (Read-only)",
            "readOnly" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network.",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The database ID of the asset partition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "The database ID of the profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "The database ID of the account discovery schedule when used (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of the account discovery schedule when used (Read-only)",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user that requested the task (Read-only)",
            "format" : "int32"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "InstallSshKeyFingerprint" : {
            "type" : "string",
            "description" : "Thumbprint of SSH key to install",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "DiscoveredAccounts" : {
            "type" : "array",
            "description" : "Accounts discovered by this task",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredAccountLog"
            }
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters passed to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a task that may run on a remote machine",
        "example" : {
          "ProfileId" : 5,
          "AccountDiscoveryScheduleId" : 5,
          "ApplianceName" : "ApplianceName",
          "IsDirectory" : true,
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "ProfileName" : "ProfileName",
          "CustomScriptParameters" : [ {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "Name" : "Unknown",
          "AssetPartitionName" : "AssetPartitionName",
          "NetworkAddress" : "NetworkAddress",
          "PlatformId" : 6,
          "DiscoveredAccounts" : [ {
            "Status" : "None",
            "DomainName" : "DomainName",
            "DiscoveredUserId" : "DiscoveredUserId",
            "DiscoveredGroups" : [ {
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ],
            "Name" : "Name"
          }, {
            "Status" : "None",
            "DomainName" : "DomainName",
            "DiscoveredUserId" : "DiscoveredUserId",
            "DiscoveredGroups" : [ {
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ],
            "Name" : "Name"
          } ],
          "InstallSshKeyFingerprint" : "InstallSshKeyFingerprint",
          "ApplianceId" : "ApplianceId",
          "AssetPartitionId" : 1,
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "EventName" : "Unknown",
          "AssetName" : "AssetName",
          "PlatformDisplayName" : "PlatformDisplayName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 2,
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "Id" : "Id",
          "PlatformType" : "Unknown",
          "AssetId" : 0,
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "AccountDiscoveryRule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Friendly name used to identify this rule"
          },
          "AutoManageDiscoveredAccounts" : {
            "type" : "boolean",
            "description" : "If selected, accounts found through discovery will be automatically taken under management."
          },
          "AccountTemplate" : {
            "$ref" : "#/components/schemas/AccountTemplate"
          },
          "UnixAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/UnixAccountDiscoveryProperties"
          },
          "WindowsAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/WindowsAccountDiscoveryProperties"
          },
          "DirectoryAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/DirectoryAccountDiscoveryProperties"
          },
          "StarlingConnectAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/StarlingConnectAccountDiscoveryProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Rule limiting the results of an account discovery process",
        "example" : {
          "UnixAccountDiscoveryProperties" : {
            "PropertyConstraintProperties" : {
              "NameFilter" : "NameFilter",
              "GroupFilter" : "GroupFilter",
              "GidFilter" : [ "GidFilter", "GidFilter" ],
              "UidFilter" : [ "UidFilter", "UidFilter" ]
            },
            "RuleType" : "PropertyConstraint"
          },
          "AutoManageDiscoveredAccounts" : true,
          "DirectoryAccountDiscoveryProperties" : {
            "PropertyConstraintProperties" : {
              "NameFilter" : "NameFilter",
              "PrimaryGidFilter" : [ "PrimaryGidFilter", "PrimaryGidFilter" ],
              "RidFilter" : [ "RidFilter", "RidFilter" ],
              "GroupFilter" : "GroupFilter",
              "UidFilter" : [ "UidFilter", "UidFilter" ],
              "GidFilter" : [ "GidFilter", "GidFilter" ]
            },
            "SearchName" : "SearchName",
            "Groups" : [ "Groups", "Groups" ],
            "SearchScope" : "OneLevel",
            "SearchBase" : "SearchBase",
            "SearchNameType" : "StartsWith",
            "RuleType" : "Name",
            "LdapFilter" : "LdapFilter"
          },
          "StarlingConnectAccountDiscoveryProperties" : {
            "PropertyConstraintProperties" : {
              "NameFilter" : "NameFilter",
              "GroupFilter" : "GroupFilter",
              "RoleFilter" : "RoleFilter"
            },
            "RuleType" : "PropertyConstraint"
          },
          "WindowsAccountDiscoveryProperties" : {
            "PropertyConstraintProperties" : {
              "NameFilter" : "NameFilter",
              "RidFilter" : [ "RidFilter", "RidFilter" ],
              "GroupFilter" : "GroupFilter",
              "GidFilter" : [ "GidFilter", "GidFilter" ]
            },
            "RuleType" : "PropertyConstraint"
          },
          "Name" : "Name",
          "AccountTemplate" : {
            "ProfileId" : 0,
            "SshKeyProfileName" : "SshKeyProfileName",
            "InitialPassword" : "InitialPassword",
            "SshKeySyncGroupPriority" : 2,
            "Description" : "Description",
            "AllowSessionRelease" : true,
            "SshKeySyncGroupId" : 5,
            "SyncGroupName" : "SyncGroupName",
            "InitialSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ProfileName" : "ProfileName",
            "SshKeySyncGroupName" : "SshKeySyncGroupName",
            "SharedServiceAccount" : false,
            "SshKeyProfileId" : 6,
            "AllowPasswordRelease" : true,
            "HasInitialPassword" : true,
            "AllowSshKeyRelease" : true,
            "SyncGroupId" : 1,
            "SetInitialSshKey" : true,
            "SetInitialPassword" : true,
            "SyncGroupPriority" : 5,
            "HasInitialSshKey" : true,
            "Tags" : [ {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            } ]
          }
        }
      },
      "AccountDiscoverySchedule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 80,
            "minimum" : 1,
            "maxLength" : 80,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this change schedule is applied to",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this change schedule is applied to (Read-only)",
            "nullable" : true
          },
          "DiscoveryType" : {
            "$ref" : "#/components/schemas/AccountDiscoveryScheduleType"
          },
          "DirectoryId" : {
            "type" : "integer",
            "description" : "The ID of the directory this schedule applies to if it has a Directory discovery type",
            "format" : "int32",
            "nullable" : true
          },
          "DirectoryName" : {
            "type" : "string",
            "description" : "The name of the directory this schedule applies to if it has a Directory discovery type (Read-only)",
            "nullable" : true
          },
          "AssetsCount" : {
            "type" : "integer",
            "description" : "Number of assets assigned to this discovery schedule (Read-only)",
            "format" : "int32"
          },
          "ScheduleDiscoverServices" : {
            "type" : "boolean"
          },
          "AutoConfigureDependentSystems" : {
            "type" : "boolean"
          },
          "AccountDiscoveryRules" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccountDiscoveryRule"
            }
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Account Discovery Schedule belonging to a Partition",
        "example" : {
          "ScheduleType" : "Never",
          "Description" : "Description",
          "StartHour" : 21,
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 5,
          "RepeatDayOfMonth" : 22,
          "DiscoveryType" : "Directory",
          "DirectoryName" : "DirectoryName",
          "AssetPartitionId" : 0,
          "StartMinute" : 21,
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "AutoConfigureDependentSystems" : true,
          "DirectoryId" : 6,
          "AccountDiscoveryRules" : [ {
            "UnixAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "GroupFilter" : "GroupFilter",
                "GidFilter" : [ "GidFilter", "GidFilter" ],
                "UidFilter" : [ "UidFilter", "UidFilter" ]
              },
              "RuleType" : "PropertyConstraint"
            },
            "AutoManageDiscoveredAccounts" : true,
            "DirectoryAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "PrimaryGidFilter" : [ "PrimaryGidFilter", "PrimaryGidFilter" ],
                "RidFilter" : [ "RidFilter", "RidFilter" ],
                "GroupFilter" : "GroupFilter",
                "UidFilter" : [ "UidFilter", "UidFilter" ],
                "GidFilter" : [ "GidFilter", "GidFilter" ]
              },
              "SearchName" : "SearchName",
              "Groups" : [ "Groups", "Groups" ],
              "SearchScope" : "OneLevel",
              "SearchBase" : "SearchBase",
              "SearchNameType" : "StartsWith",
              "RuleType" : "Name",
              "LdapFilter" : "LdapFilter"
            },
            "StarlingConnectAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "GroupFilter" : "GroupFilter",
                "RoleFilter" : "RoleFilter"
              },
              "RuleType" : "PropertyConstraint"
            },
            "WindowsAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "RidFilter" : [ "RidFilter", "RidFilter" ],
                "GroupFilter" : "GroupFilter",
                "GidFilter" : [ "GidFilter", "GidFilter" ]
              },
              "RuleType" : "PropertyConstraint"
            },
            "Name" : "Name",
            "AccountTemplate" : {
              "ProfileId" : 0,
              "SshKeyProfileName" : "SshKeyProfileName",
              "InitialPassword" : "InitialPassword",
              "SshKeySyncGroupPriority" : 2,
              "Description" : "Description",
              "AllowSessionRelease" : true,
              "SshKeySyncGroupId" : 5,
              "SyncGroupName" : "SyncGroupName",
              "InitialSshKey" : {
                "Comment" : "Comment",
                "Fingerprint" : "Fingerprint",
                "PrivateKey" : "PrivateKey",
                "FingerprintSha256" : "FingerprintSha256",
                "KeyType" : "Unknown",
                "PublicKey" : "PublicKey",
                "Passphrase" : "Passphrase",
                "KeyLength" : 4884
              },
              "ProfileName" : "ProfileName",
              "SshKeySyncGroupName" : "SshKeySyncGroupName",
              "SharedServiceAccount" : false,
              "SshKeyProfileId" : 6,
              "AllowPasswordRelease" : true,
              "HasInitialPassword" : true,
              "AllowSshKeyRelease" : true,
              "SyncGroupId" : 1,
              "SetInitialSshKey" : true,
              "SetInitialPassword" : true,
              "SyncGroupPriority" : 5,
              "HasInitialSshKey" : true,
              "Tags" : [ {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              }, {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              } ]
            }
          }, {
            "UnixAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "GroupFilter" : "GroupFilter",
                "GidFilter" : [ "GidFilter", "GidFilter" ],
                "UidFilter" : [ "UidFilter", "UidFilter" ]
              },
              "RuleType" : "PropertyConstraint"
            },
            "AutoManageDiscoveredAccounts" : true,
            "DirectoryAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "PrimaryGidFilter" : [ "PrimaryGidFilter", "PrimaryGidFilter" ],
                "RidFilter" : [ "RidFilter", "RidFilter" ],
                "GroupFilter" : "GroupFilter",
                "UidFilter" : [ "UidFilter", "UidFilter" ],
                "GidFilter" : [ "GidFilter", "GidFilter" ]
              },
              "SearchName" : "SearchName",
              "Groups" : [ "Groups", "Groups" ],
              "SearchScope" : "OneLevel",
              "SearchBase" : "SearchBase",
              "SearchNameType" : "StartsWith",
              "RuleType" : "Name",
              "LdapFilter" : "LdapFilter"
            },
            "StarlingConnectAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "GroupFilter" : "GroupFilter",
                "RoleFilter" : "RoleFilter"
              },
              "RuleType" : "PropertyConstraint"
            },
            "WindowsAccountDiscoveryProperties" : {
              "PropertyConstraintProperties" : {
                "NameFilter" : "NameFilter",
                "RidFilter" : [ "RidFilter", "RidFilter" ],
                "GroupFilter" : "GroupFilter",
                "GidFilter" : [ "GidFilter", "GidFilter" ]
              },
              "RuleType" : "PropertyConstraint"
            },
            "Name" : "Name",
            "AccountTemplate" : {
              "ProfileId" : 0,
              "SshKeyProfileName" : "SshKeyProfileName",
              "InitialPassword" : "InitialPassword",
              "SshKeySyncGroupPriority" : 2,
              "Description" : "Description",
              "AllowSessionRelease" : true,
              "SshKeySyncGroupId" : 5,
              "SyncGroupName" : "SyncGroupName",
              "InitialSshKey" : {
                "Comment" : "Comment",
                "Fingerprint" : "Fingerprint",
                "PrivateKey" : "PrivateKey",
                "FingerprintSha256" : "FingerprintSha256",
                "KeyType" : "Unknown",
                "PublicKey" : "PublicKey",
                "Passphrase" : "Passphrase",
                "KeyLength" : 4884
              },
              "ProfileName" : "ProfileName",
              "SshKeySyncGroupName" : "SshKeySyncGroupName",
              "SharedServiceAccount" : false,
              "SshKeyProfileId" : 6,
              "AllowPasswordRelease" : true,
              "HasInitialPassword" : true,
              "AllowSshKeyRelease" : true,
              "SyncGroupId" : 1,
              "SetInitialSshKey" : true,
              "SetInitialPassword" : true,
              "SyncGroupPriority" : 5,
              "HasInitialSshKey" : true,
              "Tags" : [ {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              }, {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              } ]
            }
          } ],
          "AssetsCount" : 1,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 5,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "ScheduleDiscoverServices" : true,
          "RepeatInterval" : 494379917
        }
      },
      "AccountDiscoveryScheduleType" : {
        "type" : "string",
        "description" : "The type of accounts to search for",
        "format" : "string",
        "enum" : [ "Directory", "Unix", "Windows", "StarlingConnect" ]
      },
      "AccountGroup" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Id of the table entry",
            "format" : "int32",
            "readOnly" : true,
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the account group"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description regarding the account group",
            "nullable" : true
          },
          "IsDynamic" : {
            "type" : "boolean",
            "description" : "Whether or not this is a dynamic account group"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "Accounts" : {
            "type" : "array",
            "description" : "Set of policy accounts that are assigned to this account group",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PolicyAccount"
            }
          },
          "GroupingRule" : {
            "$ref" : "#/components/schemas/TaggingGroupingRule"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a group of accounts on the appliance.",
        "example" : {
          "CreatedByUserId" : 3,
          "Description" : "Description",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 3,
          "GroupingRule" : {
            "RuleConditionGroup" : {
              "Children" : [ {
                "TaggingGroupingConditionGroup" : null,
                "TaggingGroupingCondition" : {
                  "CompareValue" : "CompareValue",
                  "CompareType" : "EqualTo",
                  "ObjectAttribute" : "Name"
                }
              }, {
                "TaggingGroupingConditionGroup" : null,
                "TaggingGroupingCondition" : {
                  "CompareValue" : "CompareValue",
                  "CompareType" : "EqualTo",
                  "ObjectAttribute" : "Name"
                }
              } ],
              "LogicalJoinType" : "And"
            },
            "Description" : "Description",
            "Enabled" : true
          },
          "IsDynamic" : true,
          "Accounts" : [ null, null ],
          "Name" : "Name"
        }
      },
      "AccountGroupBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AccountGroup"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/AccountGroup"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "CreatedByUserId" : 3,
            "Description" : "Description",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 3,
            "GroupingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "IsDynamic" : true,
            "Accounts" : [ null, null ],
            "Name" : "Name"
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AccountGroupBatchResult" : {
        "type" : "object",
        "properties" : {
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : 6,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AccountPassword" : {
        "type" : "object",
        "properties" : {
          "TimeStarted" : {
            "type" : "string",
            "description" : "When the password came into effect",
            "format" : "date-time",
            "readOnly" : true
          },
          "TimeEnded" : {
            "type" : "string",
            "description" : "When the passowrd expired or was changed",
            "format" : "date-time",
            "readOnly" : true
          },
          "Password" : {
            "type" : "string",
            "description" : "The password during this time period",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Resource for viewing the password history of an account",
        "example" : {
          "TimeStarted" : "2000-01-23T04:56:07.000+00:00",
          "TimeEnded" : "2000-01-23T04:56:07.000+00:00",
          "Password" : "Password"
        }
      },
      "AccountPasswordRule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the password rule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "If owned by the system then this rule cannot be deleted (Read-only)"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database Identifier of this Password Rule's Associated Asset Partition (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of this Password Rule's Associated Asset Partition",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of the password rule"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the password rule",
            "nullable" : true
          },
          "MaxCharacters" : {
            "maximum" : 255,
            "minimum" : 3,
            "type" : "integer",
            "description" : "The maximum length of the password",
            "format" : "int32",
            "default" : 12
          },
          "MinCharacters" : {
            "maximum" : 255,
            "minimum" : 3,
            "type" : "integer",
            "description" : "The minimum length of the password",
            "format" : "int32",
            "default" : 8
          },
          "AllowUppercaseCharacters" : {
            "type" : "boolean",
            "description" : "Allow uppercase characters in the password?",
            "default" : true
          },
          "MinUppercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, what is the minimum number of uppercase characters required",
            "format" : "int32",
            "default" : 1
          },
          "InvalidUppercaseCharacters" : {
            "type" : "array",
            "description" : "List of uppercase alphabet characters that may not be used.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveUppercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of uppercase characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowLowercaseCharacters" : {
            "type" : "boolean",
            "description" : "Allow lowercase characters in the password?",
            "default" : true
          },
          "MinLowercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, what is the minimum number of lowercase characters required",
            "format" : "int32",
            "default" : 1
          },
          "InvalidLowercaseCharacters" : {
            "type" : "array",
            "description" : "List of lowercase alphabet characters that may not be used.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveLowercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of lowercase characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowNumericCharacters" : {
            "type" : "boolean",
            "description" : "Allow numeric characters in the password?",
            "default" : true
          },
          "MinNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, what is the minimum number of numeric characters required",
            "format" : "int32",
            "default" : 1
          },
          "InvalidNumericCharacters" : {
            "type" : "array",
            "description" : "List of numeric characters that may not be used.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of numeric characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowNonAlphaNumericCharacters" : {
            "type" : "boolean",
            "description" : "Allow non-alphanumeric characters in the password?",
            "default" : false
          },
          "MinNonAlphaNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, the minimum number of non-alphanumeric characters required",
            "format" : "int32",
            "default" : 0
          },
          "NonAlphaNumericRestrictionType" : {
            "$ref" : "#/components/schemas/NonAlphaNumericRestrictionType"
          },
          "AllowedNonAlphaNumericCharacters" : {
            "type" : "array",
            "description" : "List of non-alphanumeric characters that may be used when NonAlphaNumericRestrictionType is set to 'Include'",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "InvalidNonAlphaNumericCharacters" : {
            "type" : "array",
            "description" : "List of numeric characters that may not be used when NonAlphaNumericRestrictionType is set to 'Exclude'\r\nNOTE: Generated passwords will be restricted to the set of printable ascii characters.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveNonAlphaNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of non-alphanumeric characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowedFirstCharacterType" : {
            "$ref" : "#/components/schemas/PasswordCharacterType"
          },
          "AllowedLastCharacterType" : {
            "$ref" : "#/components/schemas/PasswordCharacterType"
          },
          "MaxConsecutiveAlphabeticCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If upper or lower characters are allowed, what is the maximum number of alphabet characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "MaxConsecutiveAlphaNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If upper or lower or numeric characters are allowed, what is the maximum number of alphabet or numeric characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatedCharacterRestriction" : {
            "$ref" : "#/components/schemas/PasswordCharacterRepeatMode"
          }
        },
        "additionalProperties" : false,
        "description" : "A password rule used to generate account password during password change automation applied to a partition profile.",
        "example" : {
          "AllowedFirstCharacterType" : "All",
          "Description" : "Description",
          "AllowLowercaseCharacters" : true,
          "MaxConsecutiveNonAlphaNumericCharacters" : 32,
          "NonAlphaNumericRestrictionType" : "Include",
          "InvalidNumericCharacters" : [ "InvalidNumericCharacters", "InvalidNumericCharacters" ],
          "InvalidLowercaseCharacters" : [ "InvalidLowercaseCharacters", "InvalidLowercaseCharacters" ],
          "MinNumericCharacters" : 51,
          "Name" : "Name",
          "AssetPartitionName" : "AssetPartitionName",
          "InvalidUppercaseCharacters" : [ "InvalidUppercaseCharacters", "InvalidUppercaseCharacters" ],
          "CreatedByUserId" : 1,
          "MaxConsecutiveUppercaseCharacters" : 180,
          "AllowedLastCharacterType" : null,
          "AllowedNonAlphaNumericCharacters" : [ "AllowedNonAlphaNumericCharacters", "AllowedNonAlphaNumericCharacters" ],
          "AssetPartitionId" : 6,
          "MaxConsecutiveLowercaseCharacters" : 92,
          "MaxConsecutiveAlphabeticCharacters" : 27,
          "MaxConsecutiveNumericCharacters" : 106,
          "MinCharacters" : 145,
          "MinLowercaseCharacters" : 237,
          "AllowNonAlphaNumericCharacters" : false,
          "InvalidNonAlphaNumericCharacters" : [ "InvalidNonAlphaNumericCharacters", "InvalidNonAlphaNumericCharacters" ],
          "AllowNumericCharacters" : true,
          "MaxConsecutiveAlphaNumericCharacters" : 38,
          "RepeatedCharacterRestriction" : "NotSpecified",
          "AllowUppercaseCharacters" : true,
          "MinUppercaseCharacters" : 58,
          "MaxCharacters" : 153,
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "MinNonAlphaNumericCharacters" : 188,
          "IsSystemOwned" : true
        }
      },
      "AccountPlatformProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the type of platform (Read-only)",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The display name of the type of platform (Read-only)",
            "nullable" : true
          },
          "IsAcctNameCaseSensitive" : {
            "type" : "boolean",
            "description" : "Does the platform require case sensitive account names?"
          },
          "SupportsSessionManagement" : {
            "type" : "boolean",
            "description" : "Does the platform support sessions?"
          },
          "PlatformFamily" : {
            "$ref" : "#/components/schemas/PlatformFamily"
          }
        },
        "additionalProperties" : false,
        "description" : "Account platform properties",
        "example" : {
          "PlatformFamily" : "None",
          "DisplayName" : "DisplayName",
          "Id" : 6,
          "IsAcctNameCaseSensitive" : true,
          "PlatformType" : "Unknown",
          "SupportsSessionManagement" : true
        }
      },
      "AccountPolicy" : {
        "type" : "object",
        "properties" : {
          "PolicyId" : {
            "type" : "integer",
            "description" : "Database ID of the policy the account belongs to",
            "format" : "int32",
            "x-key" : true
          },
          "PolicyName" : {
            "type" : "string",
            "description" : "Name of the policy the account belongs to",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "Database ID of the role the policy belongs to",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of the role the policy belongs to",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Database ID of the account",
            "format" : "int32",
            "x-key" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset the account belongs to",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset the account belongs to",
            "nullable" : true
          },
          "PolicyAssetCount" : {
            "type" : "integer",
            "description" : "Number of assets in the policy",
            "format" : "int32"
          },
          "PolicyAssetGroupCount" : {
            "type" : "integer",
            "description" : "Number of asset groups in the policy",
            "format" : "int32"
          },
          "PolicyAccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts in the policy",
            "format" : "int32"
          },
          "PolicyAccountGroupCount" : {
            "type" : "integer",
            "description" : "Number of account groups in the policy",
            "format" : "int32"
          },
          "Membership" : {
            "type" : "array",
            "description" : "How this policy membership was explicitly granted (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccountPolicyMembership"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a policy that an account belongs to plus how that membership was granted",
        "example" : {
          "AccessRequestType" : "Password",
          "AccountId" : 1,
          "RoleId" : 6,
          "AssetName" : "AssetName",
          "PolicyAccountCount" : 7,
          "RoleName" : "RoleName",
          "PolicyAccountGroupCount" : 9,
          "PolicyName" : "PolicyName",
          "PolicyAssetCount" : 5,
          "Membership" : [ {
            "AccountId" : 2,
            "PolicyMemberIsAccountGroup" : true,
            "PolicyMemberId" : 4,
            "PolicyMemberName" : "PolicyMemberName",
            "PolicyId" : 3
          }, {
            "AccountId" : 2,
            "PolicyMemberIsAccountGroup" : true,
            "PolicyMemberId" : 4,
            "PolicyMemberName" : "PolicyMemberName",
            "PolicyId" : 3
          } ],
          "AssetId" : 5,
          "PolicyAssetGroupCount" : 2,
          "PolicyId" : 0,
          "AccountName" : "AccountName"
        }
      },
      "AccountPolicyMembership" : {
        "type" : "object",
        "properties" : {
          "PolicyId" : {
            "type" : "integer",
            "description" : "Database ID of the policy",
            "format" : "int32",
            "x-key" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Database ID of the account that is managed by the policy",
            "format" : "int32"
          },
          "PolicyMemberId" : {
            "type" : "integer",
            "description" : "Database ID of the policy member that manages the account",
            "format" : "int32"
          },
          "PolicyMemberName" : {
            "type" : "string",
            "description" : "Name of the policy member",
            "nullable" : true
          },
          "PolicyMemberIsAccountGroup" : {
            "type" : "boolean",
            "description" : "Whether the policy member is an account or a account group"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a member of a policy",
        "example" : {
          "AccountId" : 2,
          "PolicyMemberIsAccountGroup" : true,
          "PolicyMemberId" : 4,
          "PolicyMemberName" : "PolicyMemberName",
          "PolicyId" : 3
        }
      },
      "AccountProfileProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of profile explicitly assigned to this account",
            "format" : "int32",
            "nullable" : true,
            "default" : -1
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the profile explicitly assigned to the account (Read-only)",
            "nullable" : true
          },
          "EffectiveId" : {
            "type" : "integer",
            "description" : "Database ID of the profile to be used by this account. If Id is null this is inherited from the asset or partition it belongs to (Read-only)",
            "format" : "int32"
          },
          "EffectiveName" : {
            "type" : "string",
            "description" : "Name of the profile to be used this account. If Name is null this is inherited from the asset or partition it belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Profile information for accounts",
        "example" : {
          "Id" : 5,
          "EffectiveName" : "EffectiveName",
          "EffectiveId" : 5,
          "Name" : "Name"
        }
      },
      "AccountRequestProperties" : {
        "type" : "object",
        "properties" : {
          "AllowPasswordRequest" : {
            "type" : "boolean",
            "description" : "When set to {true}, an end user may submit a new Password Access Request for the account.\r\nWhen set to {false}, an end user will receive an error when trying to submit a new Password Access Request.",
            "default" : true
          },
          "AllowSessionRequest" : {
            "type" : "boolean",
            "description" : "When set to {true}, an end user may submit a new session based Access Request for the account.\r\nWhen set to {false}, an end user will receive an error when trying to submit a new session based Access Request.",
            "default" : true
          },
          "AllowSshKeyRequest" : {
            "type" : "boolean",
            "description" : "When set to {true}, an end user may submit a new SSH Key Access Request for the account.\r\nWhen set to {false}, an end user will receive an error when trying to submit a new SSH Key Access Request.",
            "default" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Account access request properties",
        "example" : {
          "AllowPasswordRequest" : true,
          "AllowSshKeyRequest" : true,
          "AllowSessionRequest" : true
        }
      },
      "AccountRequestType" : {
        "type" : "string",
        "description" : "Type of request that can be made using an account",
        "format" : "string",
        "enum" : [ "None", "LocalPassword", "DirectoryPassword", "LinkedSession", "DirectorySession", "CustomSession", "LocalSession", "LinkedPassword", "SshKey" ]
      },
      "AccountSshKey" : {
        "type" : "object",
        "properties" : {
          "PrivateKey" : {
            "type" : "string",
            "description" : "Private key represented in base64 (write-only)",
            "nullable" : true
          },
          "Passphrase" : {
            "type" : "string",
            "description" : "Passphrase to decrypt PrivateKey (write-only)",
            "nullable" : true
          },
          "PublicKey" : {
            "type" : "string",
            "description" : "Public key represented in base64",
            "nullable" : true
          },
          "Comment" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Comment associated with key",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH key (Read-only)",
            "nullable" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH key",
            "nullable" : true
          },
          "KeyType" : {
            "$ref" : "#/components/schemas/SshKeyType"
          },
          "KeyLength" : {
            "maximum" : 8192,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Length, in bits, of SSH key",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an SSH key assigned to an account",
        "example" : {
          "Comment" : "Comment",
          "Fingerprint" : "Fingerprint",
          "PrivateKey" : "PrivateKey",
          "FingerprintSha256" : "FingerprintSha256",
          "KeyType" : "Unknown",
          "PublicKey" : "PublicKey",
          "Passphrase" : "Passphrase",
          "KeyLength" : 656
        }
      },
      "AccountSshKeyHistory" : {
        "type" : "object",
        "properties" : {
          "TimeStarted" : {
            "type" : "string",
            "description" : "When the password came into effect",
            "format" : "date-time"
          },
          "TimeEnded" : {
            "type" : "string",
            "description" : "When the passowrd expired or was changed",
            "format" : "date-time"
          },
          "SshKey" : {
            "$ref" : "#/components/schemas/AccountSshKey"
          }
        },
        "additionalProperties" : false,
        "description" : "History SSH key assigned to an account",
        "example" : {
          "SshKey" : {
            "Comment" : "Comment",
            "Fingerprint" : "Fingerprint",
            "PrivateKey" : "PrivateKey",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "Passphrase" : "Passphrase",
            "KeyLength" : 656
          },
          "TimeStarted" : "2000-01-23T04:56:07.000+00:00",
          "TimeEnded" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "AccountSshKeyProfileProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of SSH key profile explicitly assigned to this account",
            "format" : "int32",
            "nullable" : true,
            "default" : -1
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the SSH Key profile explicitly assigned to this account (Read-only)",
            "nullable" : true
          },
          "EffectiveId" : {
            "type" : "integer",
            "description" : "Database ID of the SSH Key profile to be used by this account. If Id is null this is inherited from the asset or partition it belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "EffectiveName" : {
            "type" : "string",
            "description" : "Name of the SSH Key profile to be used this account. If Name is null this is inherited from the asset or partition it belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "SSH Key Profile for accounts",
        "example" : {
          "Id" : 2,
          "EffectiveName" : "EffectiveName",
          "EffectiveId" : 7,
          "Name" : "Name"
        }
      },
      "AccountSshKeySyncGroupProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique identifier of SSH key sync group this account belongs to if applicable",
            "format" : "int32",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of SSH key sync group this account belongs to if applicable (Read-only)",
            "nullable" : true
          },
          "Priority" : {
            "type" : "integer",
            "description" : "Priority of this account in the SSH key sync group",
            "format" : "int32",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether the SSH key sync group is disabled",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Account SSH key sync group information",
        "example" : {
          "Priority" : 7,
          "Id" : 4,
          "Disabled" : true,
          "Name" : "Name"
        }
      },
      "AccountSyncGroupProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique identifier of sync group this account belongs to if applicable",
            "format" : "int32",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of sync group this account belongs to if applicable (Read-only)",
            "nullable" : true
          },
          "Priority" : {
            "type" : "integer",
            "description" : "Priority of this account in the sync group",
            "format" : "int32",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether the sync group is disabled",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Account sync group properties",
        "example" : {
          "Priority" : 2,
          "Id" : 3,
          "Disabled" : true,
          "Name" : "Name"
        }
      },
      "AccountTaskData" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database key of the account (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the account (Read-only)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "The domain name that the account belongs to. (Read-only)",
            "nullable" : true
          },
          "NetBiosName" : {
            "type" : "string",
            "description" : "The netbios name of the domain the account is from. (Read-only)",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the object (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "A short description of the account. (Read-only)",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "The system ID for use with platform tasks (Read-only)",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "The name of the asset or directory this account is associated with (Read-only)",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "The network address of the system of the account",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of partition asset belongs to",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of partition asset belongs to",
            "nullable" : true
          },
          "SyncGroupId" : {
            "type" : "integer",
            "description" : "Unique identifier of sync group this account belongs to if applicable (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "SyncGroupName" : {
            "type" : "string",
            "description" : "Name of SSH key sync group this account belongs to if applicable (Read-only)",
            "nullable" : true
          },
          "SshKeySyncGroupId" : {
            "type" : "integer",
            "description" : "Unique identifier of sync group this account belongs to if applicable (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeySyncGroupName" : {
            "type" : "string",
            "description" : "Name of SSH key sync group this account belongs to if applicable (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the type of platform (Read-only)",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "The display name of the type of platform (Read-only)",
            "nullable" : true
          },
          "HasPassword" : {
            "type" : "boolean",
            "description" : "Whether the account has a password set or not (Read-only)"
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "AccountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "IsServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account is being used as a service account (Read-only)"
          },
          "EffectiveProfileId" : {
            "type" : "integer",
            "description" : "Database ID of the effective profile assigned to this account or to the asset or partition it belongs to (Read-only)",
            "format" : "int32"
          },
          "EffectiveProfileName" : {
            "type" : "string",
            "description" : "Name of the effective profile assigned to this account or to the asset or partition it belongs to (Read-only)",
            "nullable" : true
          },
          "EffectiveSshKeyProfileId" : {
            "type" : "integer",
            "description" : "Database ID of the effective SSH key profile assigned to this account or to the asset or partition it belongs to (Read-only)",
            "format" : "int32"
          },
          "EffectiveSshKeyProfileName" : {
            "type" : "string",
            "description" : "Name of the effective SSH key profile assigned to this account or to the asset or partition it belongs to (Read-only)",
            "nullable" : true
          },
          "PlatformTaskInformation" : {
            "$ref" : "#/components/schemas/PlatformTaskInformation"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents platform task information for an asset or directory account",
        "example" : {
          "Description" : "Description",
          "EffectiveProfileId" : 7,
          "SyncGroupName" : "SyncGroupName",
          "EffectiveSshKeyProfileName" : "EffectiveSshKeyProfileName",
          "Name" : "Name",
          "AssetPartitionName" : "AssetPartitionName",
          "PlatformId" : 2,
          "Disabled" : true,
          "AssetPartitionId" : 1,
          "IsServiceAccount" : true,
          "EffectiveProfileName" : "EffectiveProfileName",
          "DomainName" : "DomainName",
          "DistinguishedName" : "DistinguishedName",
          "SshKeySyncGroupId" : 5,
          "PlatformTaskInformation" : {
            "LastFailureTaskDate" : "2000-01-23T04:56:07.000+00:00",
            "TaskName" : "Unknown",
            "LastSuccessTaskDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedTaskAttempts" : 3,
            "LastTaskDate" : "2000-01-23T04:56:07.000+00:00",
            "NextTaskDate" : "2000-01-23T04:56:07.000+00:00",
            "LastTaskId" : "LastTaskId"
          },
          "SshKeySyncGroupName" : "SshKeySyncGroupName",
          "AccountType" : "Asset",
          "AssetName" : "AssetName",
          "EffectiveSshKeyProfileId" : 9,
          "SyncGroupId" : 5,
          "PlatformDisplayName" : "PlatformDisplayName",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "NetBiosName" : "NetBiosName",
          "Id" : 0,
          "PlatformType" : "Unknown",
          "AssetId" : 6,
          "HasPassword" : true
        }
      },
      "AccountTaskNames" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "CheckPassword", "ChangePassword", "ChangeSshKey", "RestoreAccount", "SuspendAccount", "CheckSshKey", "DiscoverSshKeys", "RevokeSshKey" ]
      },
      "AccountTaskProperties" : {
        "type" : "object",
        "properties" : {
          "HasAccountTaskFailure" : {
            "type" : "boolean",
            "description" : "Whether this account has any platform task failures (Read-only)"
          },
          "LastPasswordCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the last password check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessPasswordCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful password check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailurePasswordCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed password check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastPasswordCheckTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last password check (Read-only)",
            "nullable" : true
          },
          "FailedPasswordCheckAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed password check attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextPasswordCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the next password check, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastPasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessPasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailurePasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastPasswordChangeTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last password change (Read-only)",
            "nullable" : true
          },
          "FailedPasswordChangeAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed password change attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextPasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the next password change, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the last SSH key check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSshKeyCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful SSH key check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSshKeyCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed SSH key check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyCheckTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last SSH key check (Read-only)",
            "nullable" : true
          },
          "FailedSshKeyCheckAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed ssh key check attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSshKeyCheckDate" : {
            "type" : "string",
            "description" : "The date/time of the next SSH key check (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last SSH key change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful SSH key change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed SSH key discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyChangeTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last SSH key change (Read-only)",
            "nullable" : true
          },
          "FailedSshKeyChangeAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed ssh key change attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the next SSH key change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last SSH key discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSshKeyDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful SSH key discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSshKeyDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed SSH key discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyDiscoveryTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last SSH key discovery (Read-only)",
            "nullable" : true
          },
          "FailedSshKeyDiscoveryAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed ssh key discovery attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSshKeyDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the next SSH key discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyRevokeDate" : {
            "type" : "string",
            "description" : "The date/time of the last revoke SSH key task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSshKeyRevokeDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful revoke SSH key task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSshKeyRevokeDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed revoke SSH key task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyRevokeTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last SSH key revoke (Read-only)",
            "nullable" : true
          },
          "FailedSshKeyRevokeAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed revoke SSH key task attempts since last success (Read-only)",
            "format" : "int32"
          },
          "LastSuspendAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the last suspend account task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSuspendAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful suspend account task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSuspendAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed suspend account task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuspendAccountTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last suspend account (Read-only)",
            "nullable" : true
          },
          "FailedSuspendAccountAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed suspend account task attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSuspendAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the next suspend account task, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastRestoreAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the last restore account task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessRestoreAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful restore account task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureRestoreAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed restore account task (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastRestoreAccountTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last restore account (Read-only)",
            "nullable" : true
          },
          "FailedRestoreAccountAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed restore account task attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextRestoreAccountDate" : {
            "type" : "string",
            "description" : "The date/time of the next restore account task, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Task information for accounts",
        "example" : {
          "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedRestoreAccountAttempts" : 5,
          "NextSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedSshKeyRevokeAttempts" : 1,
          "NextSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuspendAccountTaskId" : "LastSuspendAccountTaskId",
          "LastFailurePasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyDiscoveryTaskId" : "LastSshKeyDiscoveryTaskId",
          "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
          "NextSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedPasswordChangeAttempts" : 1,
          "FailedSshKeyChangeAttempts" : 6,
          "FailedPasswordCheckAttempts" : 1,
          "LastRestoreAccountTaskId" : "LastRestoreAccountTaskId",
          "LastSuccessPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "LastPasswordCheckTaskId" : "LastPasswordCheckTaskId",
          "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuccessRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
          "LastSuccessSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedSuspendAccountAttempts" : 4,
          "LastFailureSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyRevokeTaskId" : "LastSshKeyRevokeTaskId",
          "HasAccountTaskFailure" : true,
          "NextPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedSshKeyCheckAttempts" : 1,
          "NextRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyCheckTaskId" : "LastSshKeyCheckTaskId",
          "LastSuccessSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuccessSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedSshKeyDiscoveryAttempts" : 7,
          "LastSuccessSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "AccountTaskSummaryReport" : {
        "type" : "object",
        "properties" : {
          "PasswordCheckFailures" : {
            "type" : "integer",
            "description" : "Number of password check failures",
            "format" : "int32"
          },
          "PasswordChangeFailures" : {
            "type" : "integer",
            "description" : "Number of password change failures",
            "format" : "int32"
          },
          "PasswordCheckSuccesses" : {
            "type" : "integer",
            "description" : "Number of password check successes",
            "format" : "int32"
          },
          "PasswordChangeSuccesses" : {
            "type" : "integer",
            "description" : "Number of password change successes",
            "format" : "int32"
          },
          "SshKeyCheckFailures" : {
            "type" : "integer",
            "description" : "Number of SSH key check failures",
            "format" : "int32"
          },
          "SshKeyChangeFailures" : {
            "type" : "integer",
            "description" : "Number of SSH key change failures",
            "format" : "int32"
          },
          "SshKeyCheckSuccesses" : {
            "type" : "integer",
            "description" : "Number of SSH key check successes",
            "format" : "int32"
          },
          "SshKeyChangeSuccesses" : {
            "type" : "integer",
            "description" : "Number of SSH key change successes",
            "format" : "int32"
          },
          "SshKeyDiscoveryFailures" : {
            "type" : "integer",
            "description" : "Number of SSH key discovery failures",
            "format" : "int32"
          },
          "SshKeyRevokeFailures" : {
            "type" : "integer",
            "description" : "Number of SSH key revoke failures",
            "format" : "int32"
          },
          "SshKeyDiscoverySuccesses" : {
            "type" : "integer",
            "description" : "Number of SSH key discovery successes",
            "format" : "int32"
          },
          "SshKeyRevokeSuccesses" : {
            "type" : "integer",
            "description" : "Number of SSH key revoke successes",
            "format" : "int32"
          },
          "SuspendAccountFailures" : {
            "type" : "integer",
            "description" : "Number of suspend account failures",
            "format" : "int32"
          },
          "RestoreAccountFailures" : {
            "type" : "integer",
            "description" : "Number of restore account failures",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "A summary report of account tasks",
        "example" : {
          "PasswordCheckFailures" : 0,
          "SshKeyCheckSuccesses" : 7,
          "SshKeyCheckFailures" : 5,
          "SshKeyDiscoveryFailures" : 3,
          "SshKeyChangeSuccesses" : 9,
          "SshKeyRevokeSuccesses" : 7,
          "SshKeyChangeFailures" : 2,
          "SuspendAccountFailures" : 1,
          "SshKeyRevokeFailures" : 2,
          "PasswordCheckSuccesses" : 1,
          "RestoreAccountFailures" : 1,
          "PasswordChangeSuccesses" : 5,
          "PasswordChangeFailures" : 6,
          "SshKeyDiscoverySuccesses" : 4
        }
      },
      "AccountTemplate" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the account",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "Id of a profile to be assigned to the newly managed account. If null then profile used to discover account will be used.",
            "format" : "int32",
            "nullable" : true
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "The name of the profile to be assigned to the newly managed account (Read-only)",
            "nullable" : true
          },
          "SshKeyProfileId" : {
            "type" : "integer",
            "description" : "Id of a SSH key profile to be assigned to the newly managed account. If null then profile used to discover account will be used.",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeyProfileName" : {
            "type" : "string",
            "description" : "The name of the SSH key profile to be assigned to the newly managed account (Read-only)",
            "nullable" : true
          },
          "AllowPasswordRelease" : {
            "type" : "boolean",
            "description" : "Allow password requests on the newly managed asset account to be released",
            "default" : true
          },
          "AllowSessionRelease" : {
            "type" : "boolean",
            "description" : "Allow session requests on the newly managed asset account to be released",
            "default" : true
          },
          "AllowSshKeyRelease" : {
            "type" : "boolean",
            "description" : "Allow SSH key requests on the newly managed asset account to be released",
            "default" : true
          },
          "SharedServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account can be used as a service account for other assets (only valid for directory accounts)",
            "default" : false
          },
          "SyncGroupId" : {
            "type" : "integer",
            "description" : "ID of the sync group to assign this account to. (Read-only)\r\nNOTE: Sync group takes precedence over profile setting above. Profile will be explicitly set.\r\nNOTE: Sync priority will be set to 0.",
            "format" : "int32",
            "nullable" : true
          },
          "SyncGroupName" : {
            "type" : "string",
            "description" : "The name of the sync group to be assigned to the newly managed account (Read-only)",
            "nullable" : true
          },
          "SyncGroupPriority" : {
            "type" : "integer",
            "description" : "The priority to assign to discovered accounts in the sync group",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeySyncGroupId" : {
            "type" : "integer",
            "description" : "ID of the SSH key sync group to assign this account to. (Read-only)\r\nNOTE: SSH key Sync group takes precedence over SSH key profile setting above. Profile will be explicitly set.\r\nNOTE: SSH key Sync priority will be set to 0.",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeySyncGroupName" : {
            "type" : "string",
            "description" : "The name of the SSH key sync group to be assigned to the newly managed account (Read-only)",
            "nullable" : true
          },
          "SshKeySyncGroupPriority" : {
            "type" : "integer",
            "description" : "The priority to assign to discovered accounts in the SSH key sync group",
            "format" : "int32",
            "nullable" : true
          },
          "SetInitialPassword" : {
            "type" : "boolean",
            "description" : "Whether the initial password of the account should be set"
          },
          "InitialPassword" : {
            "type" : "string",
            "description" : "The initial password to store for this account (Write-only)",
            "nullable" : true
          },
          "HasInitialPassword" : {
            "type" : "boolean",
            "description" : "Whether an initial password value is set (Read-only)"
          },
          "SetInitialSshKey" : {
            "type" : "boolean",
            "description" : "Whether the initial SSH key of the account should be set"
          },
          "InitialSshKey" : {
            "$ref" : "#/components/schemas/SystemSshKey"
          },
          "HasInitialSshKey" : {
            "type" : "boolean",
            "description" : "Whether an initial SSH key value is set (Read-only)"
          },
          "Tags" : {
            "type" : "array",
            "description" : "The tags to be associated with the newly managed account",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ProfileId" : 0,
          "SshKeyProfileName" : "SshKeyProfileName",
          "InitialPassword" : "InitialPassword",
          "SshKeySyncGroupPriority" : 2,
          "Description" : "Description",
          "AllowSessionRelease" : true,
          "SshKeySyncGroupId" : 5,
          "SyncGroupName" : "SyncGroupName",
          "InitialSshKey" : {
            "Comment" : "Comment",
            "Fingerprint" : "Fingerprint",
            "PrivateKey" : "PrivateKey",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "Passphrase" : "Passphrase",
            "KeyLength" : 4884
          },
          "ProfileName" : "ProfileName",
          "SshKeySyncGroupName" : "SshKeySyncGroupName",
          "SharedServiceAccount" : false,
          "SshKeyProfileId" : 6,
          "AllowPasswordRelease" : true,
          "HasInitialPassword" : true,
          "AllowSshKeyRelease" : true,
          "SyncGroupId" : 1,
          "SetInitialSshKey" : true,
          "SetInitialPassword" : true,
          "SyncGroupPriority" : 5,
          "HasInitialSshKey" : true,
          "Tags" : [ {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          } ]
        }
      },
      "AccountType" : {
        "type" : "string",
        "description" : "Type of PolicyAccount",
        "format" : "string",
        "enum" : [ "Asset", "Directory" ]
      },
      "ActionableAccessRequests" : {
        "type" : "object",
        "properties" : {
          "Admin" : {
            "type" : "array",
            "description" : "Requests the the Policy Admin my close if necessary",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequest"
            }
          },
          "Approver" : {
            "type" : "array",
            "description" : "Requests that are awaiting approval from the current user",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequest"
            }
          },
          "Requester" : {
            "type" : "array",
            "description" : "Requests submitted by the current user that are either open or\r\nhave had activity needing acknowledgement",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequest"
            }
          },
          "Reviewer" : {
            "type" : "array",
            "description" : "Requests that are awaiting review from the current user",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AccessRequest"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents asset requests that the current user can perform some action on",
        "example" : {
          "Requester" : [ null, null ],
          "Approver" : [ null, null ],
          "Admin" : [ {
            "AccountId" : 0,
            "SessionModuleConnectionId" : 6,
            "RequireReviewerComment" : true,
            "AccountAssetName" : "AccountAssetName",
            "WasDenied" : true,
            "RequesterUsername" : "RequesterUsername",
            "AssetPlatformType" : "Unknown",
            "TicketNumber" : "TicketNumber",
            "AllowSraSessionLaunch" : true,
            "WasCheckedOut" : true,
            "CurrentReviewerCount" : 5,
            "RequiredReviewerCount" : 7,
            "AssetPlatformId" : 7,
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "ReasonComment" : "ReasonComment",
            "WasExpired" : true,
            "Sessions" : [ {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            }, {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            } ],
            "ReasonCode" : {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            },
            "AccountDistinguishedName" : "AccountDistinguishedName",
            "AssetName" : "AssetName",
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "RequesterEmailAddress" : "RequesterEmailAddress",
            "AllowSessionSshKeyRelease" : true,
            "State" : "New",
            "PolicyName" : "PolicyName",
            "AllowSubsequentAccessRequestsWithoutReview" : true,
            "Id" : "Id",
            "AssetId" : 1,
            "RequiredApprovalCount" : 4,
            "RequestedDurationDays" : 7,
            "AccountName" : "AccountName",
            "NeedsAcknowledgement" : true,
            "AccessRequestType" : "Password",
            "WasRevoked" : true,
            "ApprovedByMe" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestedDurationHours" : 9,
            "AccountDomainName" : "AccountDomainName",
            "AccountAssetId" : 6,
            "DurationInMinutes" : 2,
            "RequestedDurationMinutes" : 3,
            "WasCancelled" : true,
            "IsEmergency" : true,
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
            "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "WorkflowActions" : [ {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            }, {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            } ],
            "RequesterDisplayName" : "RequesterDisplayName",
            "RequesterId" : 2,
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
            "AllowSessionPasswordRelease" : true,
            "WasEvicted" : true,
            "AssetSshHostKey" : "AssetSshHostKey",
            "CurrentApprovalCount" : 5,
            "AccountRequestType" : "None",
            "PolicyId" : 1
          }, {
            "AccountId" : 0,
            "SessionModuleConnectionId" : 6,
            "RequireReviewerComment" : true,
            "AccountAssetName" : "AccountAssetName",
            "WasDenied" : true,
            "RequesterUsername" : "RequesterUsername",
            "AssetPlatformType" : "Unknown",
            "TicketNumber" : "TicketNumber",
            "AllowSraSessionLaunch" : true,
            "WasCheckedOut" : true,
            "CurrentReviewerCount" : 5,
            "RequiredReviewerCount" : 7,
            "AssetPlatformId" : 7,
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "ReasonComment" : "ReasonComment",
            "WasExpired" : true,
            "Sessions" : [ {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            }, {
              "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
              "HasRecording" : true,
              "ApplianceName" : "ApplianceName",
              "State" : "None",
              "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
              "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
              "ApplianceId" : "ApplianceId",
              "SessionId" : 1
            } ],
            "ReasonCode" : {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            },
            "AccountDistinguishedName" : "AccountDistinguishedName",
            "AssetName" : "AssetName",
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "RequesterEmailAddress" : "RequesterEmailAddress",
            "AllowSessionSshKeyRelease" : true,
            "State" : "New",
            "PolicyName" : "PolicyName",
            "AllowSubsequentAccessRequestsWithoutReview" : true,
            "Id" : "Id",
            "AssetId" : 1,
            "RequiredApprovalCount" : 4,
            "RequestedDurationDays" : 7,
            "AccountName" : "AccountName",
            "NeedsAcknowledgement" : true,
            "AccessRequestType" : "Password",
            "WasRevoked" : true,
            "ApprovedByMe" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestedDurationHours" : 9,
            "AccountDomainName" : "AccountDomainName",
            "AccountAssetId" : 6,
            "DurationInMinutes" : 2,
            "RequestedDurationMinutes" : 3,
            "WasCancelled" : true,
            "IsEmergency" : true,
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "CreatedOn" : "2000-01-23T04:56:07.000+00:00",
            "AssetPlatformDisplayName" : "AssetPlatformDisplayName",
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
            "WorkflowActions" : [ {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            }, {
              "OldState" : null,
              "Comment" : "Comment",
              "ActionType" : "AcknowledgeRequest",
              "User" : {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              },
              "NewState" : null,
              "OccurredOn" : "2000-01-23T04:56:07.000+00:00",
              "SessionId" : 1
            } ],
            "RequesterDisplayName" : "RequesterDisplayName",
            "RequesterId" : 2,
            "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef",
            "AllowSessionPasswordRelease" : true,
            "WasEvicted" : true,
            "AssetSshHostKey" : "AssetSshHostKey",
            "CurrentApprovalCount" : 5,
            "AccountRequestType" : "None",
            "PolicyId" : 1
          } ],
          "Reviewer" : [ null, null ]
        }
      },
      "ActiveRequest" : {
        "type" : "object",
        "properties" : {
          "RequestId" : {
            "type" : "string",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "IsEmergency" : {
            "type" : "boolean"
          },
          "RequestedFor" : {
            "type" : "string",
            "format" : "date-time"
          },
          "ExpiresOn" : {
            "type" : "string",
            "format" : "date-time"
          },
          "RequestAvailability" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DateTimeInterval"
            }
          },
          "State" : {
            "$ref" : "#/components/schemas/AccessRequestState"
          },
          "StateChangedOn" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccessRequestType" : "Password",
          "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
          "RequestId" : "RequestId",
          "State" : "New",
          "IsEmergency" : true,
          "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
          "RequestAvailability" : [ {
            "Begin" : "2000-01-23T04:56:07.000+00:00",
            "End" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Begin" : "2000-01-23T04:56:07.000+00:00",
            "End" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "ActiveSession" : {
        "type" : "object",
        "properties" : {
          "ApplianceId" : {
            "type" : "string",
            "description" : "Appliance this session was run on",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Appliance this session was run on",
            "nullable" : true
          },
          "AccessRequestId" : {
            "type" : "string",
            "description" : "Qualified ID of the access request",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset to request access for",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset to request access for",
            "nullable" : true
          },
          "RequesterDisplayName" : {
            "type" : "string",
            "description" : "Display name of the user that made the access request",
            "nullable" : true
          },
          "RequesterUsername" : {
            "type" : "string",
            "description" : "Username of the user that made the access request",
            "nullable" : true
          },
          "RequesterEmailAddress" : {
            "type" : "string",
            "description" : "Email address of the user that made the access request",
            "nullable" : true
          },
          "RequesterId" : {
            "type" : "integer",
            "description" : "Database ID of the user that made the access request",
            "format" : "int32"
          },
          "SessionId" : {
            "type" : "integer",
            "description" : "Unique ID of session for request",
            "format" : "int32"
          },
          "InitializedDate" : {
            "type" : "string",
            "description" : "Date session was initialized",
            "format" : "date-time"
          },
          "ConnectedDate" : {
            "type" : "string",
            "description" : "Date session connected to target asset",
            "format" : "date-time",
            "nullable" : true
          },
          "TerminatedDate" : {
            "type" : "string",
            "description" : "Date session was terminated",
            "format" : "date-time",
            "nullable" : true
          },
          "State" : {
            "$ref" : "#/components/schemas/SessionState"
          },
          "HasRecording" : {
            "type" : "boolean",
            "description" : "Whether session was recorded"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccessRequestType" : "Password",
          "ApplianceName" : "ApplianceName",
          "AccessRequestId" : "AccessRequestId",
          "RequesterDisplayName" : "RequesterDisplayName",
          "RequesterId" : 6,
          "InitializedDate" : "2000-01-23T04:56:07.000+00:00",
          "TerminatedDate" : "2000-01-23T04:56:07.000+00:00",
          "AssetName" : "AssetName",
          "RequesterUsername" : "RequesterUsername",
          "ConnectedDate" : "2000-01-23T04:56:07.000+00:00",
          "HasRecording" : true,
          "RequesterEmailAddress" : "RequesterEmailAddress",
          "State" : "None",
          "ApplianceId" : "ApplianceId",
          "AssetId" : 0,
          "SessionId" : 1
        }
      },
      "AdminRoleName" : {
        "type" : "string",
        "description" : "Names of admin roles a user can belong too",
        "format" : "string",
        "enum" : [ "GlobalAdmin", "Auditor", "AssetAdmin", "ApplianceAdmin", "PolicyAdmin", "UserAdmin", "HelpdeskAdmin", "OperationsAdmin", "ApplicationAuditor", "SystemAuditor" ]
      },
      "AllProfileSchedulesSummary" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of this schedule (Read-only)",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of this profile (Read-only)",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition where profile is assigned (Read-only)",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "AssetDiscoveryType" : {
            "$ref" : "#/components/schemas/AssetDiscoveryType"
          },
          "AccountDiscoveryType" : {
            "$ref" : "#/components/schemas/AccountDiscoveryScheduleType"
          },
          "ProfileType" : {
            "$ref" : "#/components/schemas/ProfileScheduleType"
          },
          "AssetsCount" : {
            "type" : "integer",
            "description" : "Count of assets using the AccountDiscovery profile or count of assets with accounts using other profile types. Does not apply to AssetDiscovery profiles. (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AccountsCount" : {
            "type" : "integer",
            "description" : "Count of accounts using the profile. Does not apply to AssetDiscovery or AccountDiscovery profiles. (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ScheduleType" : "Never",
          "Description" : "Description",
          "StartHour" : 16,
          "AccountDiscoveryType" : "Directory",
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 6,
          "AccountsCount" : 5,
          "RepeatDayOfMonth" : 7,
          "ProfileType" : "AccountDiscovery",
          "StartMinute" : 54,
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "AssetsCount" : 1,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "AssetDiscoveryType" : "Directory",
          "Id" : 0,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "RepeatInterval" : 1210617418
        }
      },
      "ApiError" : {
        "type" : "object",
        "properties" : {
          "Code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Message" : {
            "type" : "string",
            "nullable" : true
          },
          "InnerError" : {
            "$ref" : "#/components/schemas/ApiError"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Message" : "Message",
          "InnerError" : null,
          "Code" : 6
        }
      },
      "Appliance" : {
        "required" : [ "Id" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Appliance unique ID"
          },
          "Name" : {
            "type" : "string",
            "description" : "Appliance display name",
            "nullable" : true
          },
          "Ipv4Address" : {
            "type" : "string",
            "description" : "IPv4 address of this appliance",
            "nullable" : true
          },
          "Ipv6Address" : {
            "type" : "string",
            "description" : "IPv6 address of this appliance",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Appliance in the cluster",
        "example" : {
          "Id" : "Id",
          "Ipv6Address" : "Ipv6Address",
          "Name" : "Name",
          "Ipv4Address" : "Ipv4Address"
        }
      },
      "ApplianceLoadData" : {
        "type" : "object",
        "properties" : {
          "RecordDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "The appliance ID the load data is for",
            "nullable" : true
          },
          "ApplianceState" : {
            "$ref" : "#/components/schemas/ApplianceState"
          },
          "AuditLogScore" : {
            "type" : "integer",
            "description" : "Score out of 100 of audit log database when status measurement was taken",
            "format" : "int32"
          },
          "VpnLatencyScore" : {
            "type" : "integer",
            "description" : "Score out of 100 of VPN latency when status measurement was taken",
            "format" : "int32"
          },
          "TimeExpires" : {
            "type" : "string",
            "description" : "When this record information is expired",
            "format" : "date-time"
          },
          "Score" : {
            "type" : "number",
            "description" : "Fitness score for this appliance",
            "format" : "double"
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "The appliance name the load data is for",
            "nullable" : true
          },
          "MaxTaskThreads" : {
            "type" : "integer",
            "description" : "The maximum number of task threads allowed (see /service/appliance/Settings)",
            "format" : "int32"
          },
          "TaskThreads" : {
            "type" : "integer",
            "description" : "Total number of threads in use. One thread per unique asset.",
            "format" : "int32"
          },
          "QueuedTasks" : {
            "type" : "integer",
            "description" : "Number of tasks queued on this appliance",
            "format" : "int32"
          },
          "ApplianceIpAddress" : {
            "type" : "string",
            "description" : "IP address of the appliance",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents platform task data for an appliance",
        "example" : {
          "ApplianceIpAddress" : "ApplianceIpAddress",
          "Score" : 1.4658129805029452,
          "VpnLatencyScore" : 6,
          "ApplianceName" : "ApplianceName",
          "AuditLogScore" : 0,
          "TimeExpires" : "2000-01-23T04:56:07.000+00:00",
          "MaxTaskThreads" : 5,
          "QueuedTasks" : 2,
          "RecordDate" : "2000-01-23T04:56:07.000+00:00",
          "TaskThreads" : 5,
          "ApplianceId" : "ApplianceId",
          "ApplianceState" : "Unknown"
        }
      },
      "ApplianceLog" : {
        "type" : "object",
        "properties" : {
          "LogId" : {
            "type" : "string",
            "description" : "The unique id (Timeuuid) of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "Time of authentication",
            "format" : "date-time"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventData" : {
            "type" : "string",
            "description" : "JSON representation of log details (Read-only).",
            "nullable" : true
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Unique id of the user that authenticated.",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Appliance log",
        "example" : {
          "ApplianceName" : "ApplianceName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "EventDisplayName" : "EventDisplayName",
          "UserId" : 0,
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "EventName" : "Unknown",
          "ApplianceId" : "ApplianceId",
          "LogId" : "LogId",
          "EventData" : "EventData"
        }
      },
      "ApplianceLogCategory" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Appliance", "Patch" ]
      },
      "ApplianceState" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "EnrollingReplica", "Initializing", "LeavingCluster", "Maintenance", "Offline", "Online", "PendingPatch", "PendingPrimaryReboot", "PrimaryNoQuorum", "Quarantine", "ReplicaDisconnected", "ReplicaNoQuorum", "ReplicaWithQuorum", "ShuttingDown", "StandaloneReadOnly", "TransitioningToPrimary", "TransitioningToReplica", "Isolated", "InitialSetupRequired", "HardwareSecurityModuleError" ]
      },
      "Application" : {
        "type" : "object",
        "properties" : {
          "ProductCode" : {
            "type" : "string",
            "description" : "The product code of the application",
            "nullable" : true
          },
          "Url" : {
            "type" : "string",
            "description" : "The url of the application",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ProductCode" : "ProductCode",
          "Url" : "Url"
        }
      },
      "ApplicationSessionProperties" : {
        "type" : "object",
        "properties" : {
          "ApplicationHostAssetId" : {
            "type" : "integer",
            "description" : "Database ID of asset hosting application",
            "format" : "int32",
            "nullable" : true
          },
          "ApplicationHostAssetName" : {
            "type" : "string",
            "description" : "Name of asset hosting application",
            "nullable" : true
          },
          "ApplicationHostAssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of asset hosting application",
            "nullable" : true
          },
          "ApplicationHostAccountId" : {
            "type" : "integer",
            "description" : "Database ID of login account of application host",
            "format" : "int32",
            "nullable" : true
          },
          "ApplicationHostAccountName" : {
            "type" : "string",
            "description" : "Name of login account of application host",
            "nullable" : true
          },
          "ApplicationName" : {
            "type" : "string",
            "description" : "Name of application",
            "nullable" : true
          },
          "ApplicationAlias" : {
            "type" : "string",
            "description" : "Remote application alias",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration of application session",
        "example" : {
          "ApplicationHostAssetName" : "ApplicationHostAssetName",
          "ApplicationName" : "ApplicationName",
          "ApplicationHostAssetNetworkAddress" : "ApplicationHostAssetNetworkAddress",
          "ApplicationAlias" : "ApplicationAlias",
          "ApplicationHostAssetId" : 3,
          "ApplicationHostAccountId" : 6,
          "ApplicationHostAccountName" : "ApplicationHostAccountName"
        }
      },
      "Approver" : {
        "type" : "object",
        "properties" : {
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name of the Identity (Read-only)",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the Identity (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "IdentityProviderId" : {
            "type" : "integer",
            "description" : "Database ID of the identity provider (Read-only)",
            "format" : "int32"
          },
          "IdentityProviderName" : {
            "type" : "string",
            "description" : "Name of the identity provider (Read-only)",
            "nullable" : true
          },
          "IdentityProviderTypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this identity is owned by the system and cannot be deleted (Read-only)"
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the Identity (Read-only)",
            "nullable" : true
          },
          "PrincipalKind" : {
            "$ref" : "#/components/schemas/PrincipalKind"
          },
          "EmailAddress" : {
            "type" : "string",
            "description" : "Email address of the Identity if applicable (Read-only)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name of the Identity if applicable (Read-only)",
            "nullable" : true
          },
          "FullDisplayName" : {
            "type" : "string",
            "description" : "Full display name of the Identity (Read-only)",
            "nullable" : true,
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "description" : "A user that is assigned as an approver",
        "example" : {
          "IdentityProviderId" : 6,
          "PrincipalKind" : "Unknown",
          "FullDisplayName" : "FullDisplayName",
          "DomainName" : "DomainName",
          "DisplayName" : "DisplayName",
          "IdentityProviderName" : "IdentityProviderName",
          "Id" : 7,
          "IdentityProviderTypeReferenceName" : "Unknown",
          "EmailAddress" : "EmailAddress",
          "IsSystemOwned" : true,
          "Name" : "Name"
        }
      },
      "ApproveRequest" : {
        "required" : [ "RequestId" ],
        "type" : "object",
        "properties" : {
          "RequestId" : {
            "type" : "string",
            "description" : "Unique ID of the access request to approve"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Comment made by approver to describe approval",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Information for approving a request",
        "example" : {
          "Comment" : "Comment",
          "RequestId" : "RequestId"
        }
      },
      "ApproverSet" : {
        "type" : "object",
        "properties" : {
          "RequiredApprovers" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The minimum number of approvers required by this approver set",
            "format" : "int32"
          },
          "Approvers" : {
            "type" : "array",
            "description" : "List of users that may approve to meet the required approver count",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Approver"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a set of identities required to approve a access request for a policy",
        "example" : {
          "RequiredApprovers" : 190081825,
          "Approvers" : [ {
            "IdentityProviderId" : 6,
            "PrincipalKind" : "Unknown",
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 7,
            "IdentityProviderTypeReferenceName" : "Unknown",
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 6,
            "PrincipalKind" : "Unknown",
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 7,
            "IdentityProviderTypeReferenceName" : "Unknown",
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ]
        }
      },
      "ArchiveActivityLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that performed the activity",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "ArchiveType" : {
            "$ref" : "#/components/schemas/ArchiveType"
          },
          "SourcePath" : {
            "type" : "string",
            "description" : "Source file or path",
            "nullable" : true
          },
          "DestinationPath" : {
            "type" : "string",
            "description" : "Destination file or path. (Download only)",
            "nullable" : true
          },
          "FileName" : {
            "type" : "string",
            "description" : "Name of file that is transferred (Read-only)",
            "nullable" : true
          },
          "FileId" : {
            "type" : "string",
            "description" : "Unique ID of the file",
            "nullable" : true
          },
          "ArchiveServerId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "ArchiveServerName" : {
            "type" : "string",
            "description" : "Name of the asset or directory name the task was executed against (Read-only)",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network.",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/ArchiveServerConnectionProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an archive task that may run on a remote machine",
        "example" : {
          "ApplianceName" : "ApplianceName",
          "ArchiveType" : "UploadBackup",
          "ArchiveServerId" : 6,
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "FileName" : "FileName",
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountHasSshKey" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "Port" : 36944,
            "ServiceAccountAssetPlatformType" : "Unknown",
            "ServiceAccountName" : "ServiceAccountName",
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 1,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "TransferProtocolType" : "Smb",
            "ServiceAccountAssetPlatformId" : 7,
            "ServiceAccountAssetId" : 2,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "EventName" : "Unknown",
          "ArchiveServerName" : "ArchiveServerName",
          "SourcePath" : "SourcePath",
          "DestinationPath" : "DestinationPath",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "NetworkAddress" : "NetworkAddress",
          "UserId" : 0,
          "FileId" : "FileId",
          "Id" : "Id",
          "ApplianceId" : "ApplianceId",
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "ArchiveCustomTestConnectionParameters" : {
        "required" : [ "ArchiveServerName", "NetworkAddress" ],
        "type" : "object",
        "properties" : {
          "ArchiveServerName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "Name of the asset to test the connection with"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network address to connect to."
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "StoragePath" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The file path where backups, etc. should be stored",
            "nullable" : true,
            "default" : ""
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/ArchiveServerConnectionProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Custom archive server test connection parameters"
      },
      "ArchiveDiscoverSshHostKeyParameters" : {
        "required" : [ "NetworkAddress", "ServerName" ],
        "type" : "object",
        "properties" : {
          "ServerName" : {
            "type" : "string",
            "description" : "Name of the server to get ssh host key from"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network."
          },
          "Port" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used by SSH to login to the machine",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "ArchivePlatformConnectionProperties" : {
        "type" : "object",
        "properties" : {
          "ServiceAccountId" : {
            "type" : "integer",
            "description" : "Database ID of an asset account for connecting to the asset. Cannot be specified simultaneously with ServiceAccountName.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The name of an account that is not being managed for connecting to the asset. Cannot be specified simultaneously with ServiceAccountId.",
            "nullable" : true
          },
          "EffectiveServiceAccountName" : {
            "type" : "string",
            "description" : "The name of the account for connecting to the asset whether the account is managed or not (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDomainName" : {
            "type" : "string",
            "description" : "The domain name of the service account if the task uses a Directory\r\nor DirectoryAccount (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "EffectiveServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Effective distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "ServiceAccountCredentialType" : {
            "$ref" : "#/components/schemas/ServiceAccountCredentialType"
          },
          "ServiceAccountPassword" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "If ServiceAccountId is not specified then the service account password may be set via this property. (write-only)",
            "nullable" : true
          },
          "ServiceAccountHasPassword" : {
            "type" : "boolean",
            "description" : "Whether the service account has a password set or not (Read-only)"
          },
          "ServiceAccountSshKey" : {
            "$ref" : "#/components/schemas/SystemSshKey"
          },
          "ServiceAccountHasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the service account has an SSH key set or not (Read-only)"
          },
          "Port" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used to connect to the system",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountSshKeyId" : {
            "type" : "integer",
            "description" : "Specific SSH key to use to login to machine. Only applies when ServiceAccountCredentialType is set to 'SshKey'. (Read-only) (Deprecated)",
            "format" : "int32",
            "nullable" : true,
            "deprecated" : true
          },
          "ServiceAccountSshKeyFingerprint" : {
            "type" : "string",
            "description" : "Fingerprint of the SSH key being used by the service account to authenticate to the machine (Read-only) (Deprecated)",
            "nullable" : true,
            "deprecated" : true
          },
          "ServiceAccountSshKeyComment" : {
            "type" : "string",
            "description" : "Comment for the SSH key being used by the service account to authenticate to the machine (Read-only) (Deprecated)",
            "nullable" : true,
            "deprecated" : true
          },
          "ServiceAccountAssetId" : {
            "type" : "integer",
            "description" : "The database ID of the asset the service account belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetName" : {
            "type" : "string",
            "description" : "The name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountAssetPlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset the service account belongs to (Read-only)",
            "format" : "int32"
          },
          "ServiceAccountAssetPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "ServiceAccountAssetPlatformDisplayName" : {
            "type" : "string",
            "description" : "The platform display name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountNetbiosName" : {
            "type" : "string",
            "description" : "The netbios name of the service account (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Connection properties for archive server platform tasks"
      },
      "ArchiveServer" : {
        "required" : [ "ConnectionProperties", "Name", "NetworkAddress" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique ID of this archive server configuration",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "Display name of the server"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the server",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network address to connect to."
          },
          "ManagedNetworkId" : {
            "type" : "integer",
            "description" : "Database ID of the manage network this asset is explicitly assigned to. If null then \r\nmanaged network will be calculated dynamically.",
            "format" : "int32",
            "nullable" : true
          },
          "ManagedNetworkName" : {
            "type" : "string",
            "description" : "Display name managed network (Read-only)",
            "nullable" : true
          },
          "StoragePath" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The file path where backups, etc. should be stored",
            "nullable" : true,
            "default" : ""
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/ArchiveServerConnectionProperties"
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "SSH Public Host Key",
            "nullable" : true
          },
          "SshHostKeyFingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH host key (Read-only)",
            "nullable" : true
          },
          "SshHostKeyFingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH host key (Read-only)",
            "nullable" : true
          },
          "TransferProtocol" : {
            "$ref" : "#/components/schemas/TransferProtocol"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a physical server where backups, etc. may be stored",
        "example" : {
          "Description" : "Description",
          "SshHostKey" : "SshHostKey",
          "NetworkAddress" : "NetworkAddress",
          "StoragePath" : "StoragePath",
          "ManagedNetworkId" : 6,
          "ManagedNetworkName" : "ManagedNetworkName",
          "SshHostKeyFingerprintSha256" : "SshHostKeyFingerprintSha256",
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountHasSshKey" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "Port" : 36944,
            "ServiceAccountAssetPlatformType" : "Unknown",
            "ServiceAccountName" : "ServiceAccountName",
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 1,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "TransferProtocolType" : "Smb",
            "ServiceAccountAssetPlatformId" : 7,
            "ServiceAccountAssetId" : 2,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "SshHostKeyFingerprint" : "SshHostKeyFingerprint",
          "Id" : 0,
          "Name" : "Name",
          "TransferProtocol" : {
            "SupportsCustomPort" : true,
            "Description" : "Description",
            "SupportsSshKey" : true,
            "SupportsPassword" : true,
            "Id" : null,
            "Name" : "Name"
          }
        }
      },
      "ArchiveServerConnectionProperties" : {
        "required" : [ "TransferProtocolType" ],
        "type" : "object",
        "properties" : {
          "TransferProtocolType" : {
            "$ref" : "#/components/schemas/TransferProtocolType"
          },
          "ServiceAccountId" : {
            "type" : "integer",
            "description" : "Database ID of an asset account for connecting to the asset. Cannot be specified simultaneously with ServiceAccountName.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The name of an account that is not being managed for connecting to the asset. Cannot be specified simultaneously with ServiceAccountId.",
            "nullable" : true
          },
          "EffectiveServiceAccountName" : {
            "type" : "string",
            "description" : "The name of the account for connecting to the asset whether the account is managed or not (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDomainName" : {
            "type" : "string",
            "description" : "The domain name of the service account if the task uses a Directory\r\nor DirectoryAccount (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "EffectiveServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Effective distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "ServiceAccountCredentialType" : {
            "$ref" : "#/components/schemas/ServiceAccountCredentialType"
          },
          "ServiceAccountPassword" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "If ServiceAccountId is not specified then the service account password may be set via this property. (write-only)",
            "nullable" : true
          },
          "ServiceAccountHasPassword" : {
            "type" : "boolean",
            "description" : "Whether the service account has a password set or not (Read-only)"
          },
          "ServiceAccountSshKey" : {
            "$ref" : "#/components/schemas/SystemSshKey"
          },
          "ServiceAccountHasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the service account has an SSH key set or not (Read-only)"
          },
          "Port" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used to connect to the system",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetId" : {
            "type" : "integer",
            "description" : "The database ID of the asset the service account belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetName" : {
            "type" : "string",
            "description" : "The name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountAssetPlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset the service account belongs to (Read-only)",
            "format" : "int32"
          },
          "ServiceAccountAssetPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "ServiceAccountAssetPlatformDisplayName" : {
            "type" : "string",
            "description" : "The platform display name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountNetbiosName" : {
            "type" : "string",
            "description" : "The netbios name of the service account (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
          "ServiceAccountHasSshKey" : true,
          "ServiceAccountDomainName" : "ServiceAccountDomainName",
          "Port" : 36944,
          "ServiceAccountAssetPlatformType" : "Unknown",
          "ServiceAccountName" : "ServiceAccountName",
          "ServiceAccountSshKey" : {
            "Comment" : "Comment",
            "Fingerprint" : "Fingerprint",
            "PrivateKey" : "PrivateKey",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "Passphrase" : "Passphrase",
            "KeyLength" : 4884
          },
          "ServiceAccountId" : 1,
          "ServiceAccountAssetName" : "ServiceAccountAssetName",
          "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
          "TransferProtocolType" : "Smb",
          "ServiceAccountAssetPlatformId" : 7,
          "ServiceAccountAssetId" : 2,
          "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
          "ServiceAccountPassword" : "ServiceAccountPassword",
          "ServiceAccountCredentialType" : "None",
          "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
          "ServiceAccountHasPassword" : true,
          "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
        }
      },
      "ArchiveServerCustomInstallSshKeyParameters" : {
        "required" : [ "ArchiveServerName", "NetworkAddress" ],
        "type" : "object",
        "properties" : {
          "ArchiveServerName" : {
            "type" : "string",
            "description" : "Name of the asset to test the connection with"
          },
          "SshKeyToInstall" : {
            "$ref" : "#/components/schemas/AccountSshKey"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network."
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/ArchiveServerConnectionProperties"
          }
        },
        "additionalProperties" : false
      },
      "ArchiveServerSshHostKey" : {
        "type" : "object",
        "properties" : {
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH host key (Read-only)",
            "nullable" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH host key (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an SSH Host Key used to identify archive servers",
        "example" : {
          "Fingerprint" : "Fingerprint",
          "SshHostKey" : "SshHostKey",
          "FingerprintSha256" : "FingerprintSha256"
        }
      },
      "ArchiveServerSshKeyParameters" : {
        "type" : "object",
        "properties" : {
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "SshKeyToInstall" : {
            "$ref" : "#/components/schemas/AccountSshKey"
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/ArchivePlatformConnectionProperties"
          }
        },
        "additionalProperties" : false
      },
      "ArchiveTestConnectionParameters" : {
        "type" : "object",
        "properties" : {
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "ArchiveType" : {
        "type" : "string",
        "description" : "Type of archive task",
        "format" : "string",
        "enum" : [ "UploadBackup", "TestConnection", "UploadAuditLog" ]
      },
      "Asset" : {
        "required" : [ "Name", "PlatformId" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of system (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the system",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Database ID of platform type / version",
            "format" : "int32"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display name platform (Read-only)",
            "nullable" : true
          },
          "IsDirectory" : {
            "type" : "boolean",
            "description" : "Whether this asset is a directory platform (Read-only)"
          },
          "ManagedNetworkId" : {
            "type" : "integer",
            "description" : "Database ID of the managed network this asset is explicitly assigned to. If null then \r\nmanaged network will be calculated dynamically.",
            "format" : "int32",
            "nullable" : true
          },
          "ManagedNetworkName" : {
            "type" : "string",
            "description" : "Name of the managed network (Read-only)",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "Name" : {
            "maximum" : 100,
            "minimum" : 1,
            "maxLength" : 100,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the system. (Read-only for directories)"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of the asset partition this asset belongs to",
            "format" : "int32",
            "default" : -1
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to",
            "nullable" : true
          },
          "LicenseClass" : {
            "$ref" : "#/components/schemas/LicenseClass"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "TaskProperties" : {
            "$ref" : "#/components/schemas/AssetTaskProperties"
          },
          "DirectoryAssetProperties" : {
            "$ref" : "#/components/schemas/DirectoryAssetProperties"
          },
          "SessionAccessProperties" : {
            "$ref" : "#/components/schemas/AssetSessionAccessProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AssetPlatform"
          },
          "RegisteredConnector" : {
            "$ref" : "#/components/schemas/StarlingRegisteredConnector"
          },
          "ManagedBy" : {
            "type" : "array",
            "description" : "List of Identities that manage this asset",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "Tags" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this asset and its accounts are disabled and prevented from running platform tasks"
          },
          "AssetDiscoveryJobId" : {
            "type" : "integer",
            "description" : "Database ID of asset discovery job that added this asset (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetDiscoveryJobName" : {
            "type" : "string",
            "description" : "Name of asset discovery job that added this asset (Read-only)",
            "nullable" : true
          },
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "Database ID of account discovery schedule assigned to this asset",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of account discovery schedule assigned to this asset (Read-only)",
            "nullable" : true
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetCustomScriptParameter"
            }
          },
          "DiscoveredDirectoryGroups" : {
            "type" : "array",
            "description" : "Directory groups this asset is a member of",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredGroup"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "SshHostKey" : {
            "$ref" : "#/components/schemas/AssetSshHostKey"
          },
          "PasswordProfile" : {
            "$ref" : "#/components/schemas/AssetPasswordProfileProperties"
          },
          "SshKeyProfile" : {
            "$ref" : "#/components/schemas/AssetSshKeyProfileProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a system with accounts that can be managed",
        "example" : {
          "AccountDiscoveryScheduleId" : 6,
          "Description" : "Description",
          "ManagedBy" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ],
          "IsDirectory" : true,
          "Platform" : {
            "Description" : "Description",
            "Architecture" : "Architecture",
            "DeviceClass" : "Unknown",
            "ConnectionProperties" : {
              "SupportsSslCertificateVerification" : true,
              "SupportsNamedPipeForServiceAccountConnection" : true,
              "SupportsPasswordAuthentication" : true,
              "SupportsSshKeyAuthentication" : true,
              "SupportsServiceName" : true,
              "SupportsAccessKeyAuthentication" : true,
              "SupportsLocalhostPasswordAuthentication" : true,
              "RequiresDistinguishedName" : true,
              "SupportsInstance" : true,
              "SupportsOraclePrivileges" : true,
              "SupportsDirectorySync" : true,
              "SupportsClientId" : true,
              "DefaultPort" : 6,
              "SupportsDirectoryPasswordAuthentication" : true,
              "SupportsWorkstationId" : true,
              "SupportsTimeout" : true,
              "SupportsPrivilegedAccount" : true,
              "SupportsDirectoryAssetDiscovery" : true,
              "SupportsLdap" : true,
              "SupportsPrivilegeElevationCommand" : true,
              "SupportsSslEncryption" : true,
              "SupportsStarlingConnectAuthentication" : true,
              "SupportsAccountPasswordAuthentication" : true,
              "SupportsSshTransport" : true,
              "SupportsTopSecretInterval" : true,
              "DefaultSslPort" : 7,
              "SupportsSslThumbprint" : true,
              "AllowCustomPort" : true,
              "SupportsEnablePassword" : true,
              "PrivilegedAccountName" : "PrivilegedAccountName",
              "SupportsTacacsSecret" : true
            },
            "IsAcctNameCaseSensitive" : true,
            "PasswordFeatureProperties" : {
              "SupportsPasswordManagement" : true,
              "SupportsSshKeyManagement" : true,
              "RequireNetworkAddress" : true,
              "SupportsDependentSystemTasks" : true,
              "AllowRequireCurrentPassword" : true,
              "SupportsSuspendRestoreAccount" : true,
              "SupportsAccountDiscovery" : true,
              "SupportsServiceDiscovery" : true,
              "SupportsUsePasswordHash" : true
            },
            "LicenseClass" : null,
            "CustomScriptProperties" : {
              "Parameters" : [ {
                "DefaultValue" : "DefaultValue",
                "Type" : "String",
                "Description" : "Description",
                "TaskName" : null,
                "Name" : "Name"
              }, {
                "DefaultValue" : "DefaultValue",
                "Type" : "String",
                "Description" : "Description",
                "TaskName" : null,
                "Name" : "Name"
              } ],
              "HasScript" : true
            },
            "Name" : "Name",
            "Version" : "Version",
            "SupportedOperations" : [ "Unknown", "Unknown" ],
            "SessionFeatureProperties" : {
              "DefaultRemoteDesktopSessionPort" : 4,
              "DefaultTelnetSessionPort" : 5,
              "SupportsSessionManagement" : true,
              "DefaultSshSessionPort" : 1
            },
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 1,
            "PlatformType" : "Unknown",
            "IsSystemOwned" : true
          },
          "ManagedNetworkName" : "ManagedNetworkName",
          "DiscoveredDirectoryGroups" : [ {
            "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          }, {
            "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          } ],
          "RegisteredConnector" : {
            "StarlingConnectorId" : "StarlingConnectorId",
            "RegisteredConnectorId" : "RegisteredConnectorId",
            "VisibleToPartitions" : [ {
              "CreatedByUserId" : 6,
              "Description" : "Description",
              "ManagedBy" : [ {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              }, {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              } ],
              "DefaultProfileName" : "DefaultProfileName",
              "DefaultSshKeyProfileId" : 5,
              "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "DefaultProfileId" : 1,
              "Id" : 0,
              "Name" : "Name"
            }, {
              "CreatedByUserId" : 6,
              "Description" : "Description",
              "ManagedBy" : [ {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              }, {
                "IdentityProviderId" : 4,
                "PrincipalKind" : null,
                "FullDisplayName" : "FullDisplayName",
                "DomainName" : "DomainName",
                "DisplayName" : "DisplayName",
                "IdentityProviderName" : "IdentityProviderName",
                "Id" : 0,
                "IdentityProviderTypeReferenceName" : null,
                "EmailAddress" : "EmailAddress",
                "IsSystemOwned" : true,
                "Name" : "Name"
              } ],
              "DefaultProfileName" : "DefaultProfileName",
              "DefaultSshKeyProfileId" : 5,
              "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "DefaultProfileId" : 1,
              "Id" : 0,
              "Name" : "Name"
            } ],
            "RegisteredConnectorDisplayName" : "RegisteredConnectorDisplayName",
            "Platform" : null,
            "DisplayName" : "DisplayName",
            "StarlingConnectorVersion" : "StarlingConnectorVersion",
            "Id" : 9,
            "VisibleToAllPartitions" : true
          },
          "CustomScriptParameters" : [ {
            "Type" : null,
            "TaskName" : null,
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Type" : null,
            "TaskName" : null,
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "LicenseClass" : "System",
          "Name" : "Name",
          "PasswordProfile" : {
            "Id" : 8,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 9,
            "Name" : "Name"
          },
          "AssetPartitionName" : "AssetPartitionName",
          "CreatedByUserId" : 5,
          "NetworkAddress" : "NetworkAddress",
          "ManagedNetworkId" : 1,
          "TaskProperties" : {
            "LastFailureDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
            "NextDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedAccountDiscoveryAttempts" : 7,
            "FailedTestConnectionAttempts" : 3,
            "LastDependentServiceUpdateTaskId" : "LastDependentServiceUpdateTaskId",
            "LastSuccessDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
            "HasAssetTaskFailure" : true,
            "LastSuccessAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastAccountDiscoveryTaskId" : "LastAccountDiscoveryTaskId",
            "LastSuccessTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
            "LastServiceDiscoveryTaskId" : "LastServiceDiscoveryTaskId",
            "LastFailureServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "NextTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
            "NextServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
            "LastAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedServiceDiscoveryAttempts" : 9,
            "LastTestConnectionTaskId" : "LastTestConnectionTaskId",
            "FailedDependentServiceUpdateAttempts" : 2,
            "NextAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuccessServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00"
          },
          "PlatformId" : 6,
          "Disabled" : true,
          "Tags" : [ {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          } ],
          "AssetPartitionId" : 5,
          "AssetDiscoveryJobId" : 9,
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "DirectoryAssetProperties" : {
            "FailedSyncAttempts" : 1,
            "LastDirectoryDeleteSyncTaskId" : "LastDirectoryDeleteSyncTaskId",
            "LastDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "DomainName" : "DomainName",
            "LastFailureSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "NextDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "ForestRootDomain" : "ForestRootDomain",
            "DomainControllers" : [ {
              "ServerType" : "DomainController",
              "IsWritable" : true,
              "NetworkAddress" : "NetworkAddress",
              "DomainName" : "DomainName"
            }, {
              "ServerType" : "DomainController",
              "IsWritable" : true,
              "NetworkAddress" : "NetworkAddress",
              "DomainName" : "DomainName"
            } ],
            "UsePasswordHash" : true,
            "SchemaProperties" : {
              "UserProperties" : {
                "AltLoginNameAttribute" : "AltLoginNameAttribute",
                "UserNameAttribute" : "UserNameAttribute",
                "DescriptionAttribute" : "DescriptionAttribute",
                "UserClassType" : [ "UserClassType", "UserClassType" ],
                "PasswordAttribute" : "PasswordAttribute",
                "MemberOfAttribute" : "MemberOfAttribute"
              },
              "ComputerProperties" : {
                "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
                "NetworkAddressAttribute" : "NetworkAddressAttribute",
                "DescriptionAttribute" : "DescriptionAttribute",
                "OperatingSystemAttribute" : "OperatingSystemAttribute",
                "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
                "NameAttribute" : "NameAttribute",
                "MemberOfAttribute" : "MemberOfAttribute"
              },
              "GroupProperties" : {
                "MemberAttribute" : "MemberAttribute",
                "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
                "NameAttribute" : "NameAttribute"
              }
            },
            "Domains" : [ {
              "DomainName" : "DomainName",
              "DomainUniqueId" : "DomainUniqueId",
              "NetBiosName" : "NetBiosName",
              "NamingContext" : "NamingContext"
            }, {
              "DomainName" : "DomainName",
              "DomainUniqueId" : "DomainUniqueId",
              "NetBiosName" : "NetBiosName",
              "NamingContext" : "NamingContext"
            } ],
            "LastSuccessDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "DeleteSyncIntervalMinutes" : 1586191969,
            "FailedDeleteSyncAttempts" : 1,
            "LastSuccessSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "AllowSharedSearch" : true,
            "LastFailureDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "NextSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "SynchronizationIntervalMinutes" : 890262545,
            "LastDirectorySyncTaskId" : "LastDirectorySyncTaskId"
          },
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "SessionAccessProperties" : {
            "RemoteDesktopSessionPort" : 21975,
            "AllowSessionRequests" : true,
            "TelnetSessionPort" : 20275,
            "SshSessionPort" : 43935
          },
          "AssetDiscoveryJobName" : "AssetDiscoveryJobName",
          "PlatformDisplayName" : "PlatformDisplayName",
          "SshHostKey" : {
            "Fingerprint" : "Fingerprint",
            "SshHostKey" : "SshHostKey",
            "FingerprintSha256" : "FingerprintSha256"
          },
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "SshKeyProfile" : {
            "Id" : 6,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 3,
            "Name" : "Name"
          },
          "Id" : 0
        }
      },
      "AssetAccount" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the account (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The name of the account"
          },
          "DistinguishedName" : {
            "maximum" : 2000,
            "maxLength" : 2000,
            "type" : "string",
            "description" : "The distinguished name of the account (required for ACF2-Ldap)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Name of the domain this object is from. Required if this is an object to import from a directory.",
            "nullable" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "A short description of the account.",
            "nullable" : true
          },
          "AltLoginName" : {
            "type" : "string",
            "description" : "The alternate login name (Read-only)",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ManagedBy" : {
            "type" : "array",
            "description" : "List of Identities that manage this asset",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "IsServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account is a service account or not (Read-only)"
          },
          "SharedServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account can be used as a service account for other assets (only valid for directory accounts)"
          },
          "Tags" : {
            "type" : "array",
            "description" : "The tags associated with this account",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "Asset" : {
            "$ref" : "#/components/schemas/AccountAssetProperties"
          },
          "PasswordProfile" : {
            "$ref" : "#/components/schemas/AccountProfileProperties"
          },
          "SshKeyProfile" : {
            "$ref" : "#/components/schemas/AccountSshKeyProfileProperties"
          },
          "RequestProperties" : {
            "$ref" : "#/components/schemas/AccountRequestProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AccountPlatformProperties"
          },
          "DiscoveredProperties" : {
            "$ref" : "#/components/schemas/DiscoveredAccountProperties"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryAccountProperties"
          },
          "SyncGroup" : {
            "$ref" : "#/components/schemas/AccountSyncGroupProperties"
          },
          "SshKeySyncGroup" : {
            "$ref" : "#/components/schemas/AccountSshKeySyncGroupProperties"
          },
          "HasPassword" : {
            "type" : "boolean",
            "description" : "Whether the account has a password set or not (Read-only)"
          },
          "HasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the account has an SSH key assigned or not (Read-only)"
          },
          "TaskProperties" : {
            "$ref" : "#/components/schemas/AccountTaskProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an remote asset account",
        "example" : {
          "Description" : "Description",
          "ManagedBy" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ],
          "Platform" : {
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "IsAcctNameCaseSensitive" : true,
            "PlatformType" : "Unknown",
            "SupportsSessionManagement" : true
          },
          "Name" : "Name",
          "PasswordProfile" : {
            "Id" : 5,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 5,
            "Name" : "Name"
          },
          "CreatedByUserId" : 6,
          "TaskProperties" : {
            "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedRestoreAccountAttempts" : 5,
            "NextSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedSshKeyRevokeAttempts" : 1,
            "NextSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuspendAccountTaskId" : "LastSuspendAccountTaskId",
            "LastFailurePasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyDiscoveryTaskId" : "LastSshKeyDiscoveryTaskId",
            "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
            "NextSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedPasswordChangeAttempts" : 1,
            "FailedSshKeyChangeAttempts" : 6,
            "FailedPasswordCheckAttempts" : 1,
            "LastRestoreAccountTaskId" : "LastRestoreAccountTaskId",
            "LastSuccessPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "LastPasswordCheckTaskId" : "LastPasswordCheckTaskId",
            "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuccessRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
            "LastSuccessSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedSuspendAccountAttempts" : 4,
            "LastFailureSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyRevokeTaskId" : "LastSshKeyRevokeTaskId",
            "HasAccountTaskFailure" : true,
            "NextPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedSshKeyCheckAttempts" : 1,
            "NextRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyCheckTaskId" : "LastSshKeyCheckTaskId",
            "LastSuccessSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuccessSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "FailedSshKeyDiscoveryAttempts" : 7,
            "LastSuccessSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00"
          },
          "SshKeySyncGroup" : {
            "Priority" : 7,
            "Id" : 4,
            "Disabled" : true,
            "Name" : "Name"
          },
          "AltLoginName" : "AltLoginName",
          "Asset" : {
            "AssetPartitionId" : 6,
            "AssetPartitionName" : "AssetPartitionName",
            "NetworkAddress" : "NetworkAddress",
            "Id" : 3,
            "Name" : "Name"
          },
          "Disabled" : true,
          "SyncGroup" : {
            "Priority" : 2,
            "Id" : 3,
            "Disabled" : true,
            "Name" : "Name"
          },
          "Tags" : [ {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          } ],
          "IsServiceAccount" : true,
          "DiscoveredProperties" : {
            "AccountDiscoveryScheduleId" : 9,
            "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
            "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
            "DiscoveredUserId" : "DiscoveredUserId",
            "DiscoveredGroups" : [ {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ]
          },
          "DistinguishedName" : "DistinguishedName",
          "DomainName" : "DomainName",
          "DirectoryProperties" : {
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName"
          },
          "RequestProperties" : {
            "AllowPasswordRequest" : true,
            "AllowSshKeyRequest" : true,
            "AllowSessionRequest" : true
          },
          "SharedServiceAccount" : true,
          "HasSshKey" : true,
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "SshKeyProfile" : {
            "Id" : 2,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 7,
            "Name" : "Name"
          },
          "Id" : 0,
          "HasPassword" : true
        }
      },
      "AssetAccountBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AssetAccount"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/AssetAccount"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "Description" : "Description",
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "Name" : "Name",
            "PasswordProfile" : {
              "Id" : 5,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 5,
              "Name" : "Name"
            },
            "CreatedByUserId" : 6,
            "TaskProperties" : {
              "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedRestoreAccountAttempts" : 5,
              "NextSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSshKeyRevokeAttempts" : 1,
              "NextSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuspendAccountTaskId" : "LastSuspendAccountTaskId",
              "LastFailurePasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyDiscoveryTaskId" : "LastSshKeyDiscoveryTaskId",
              "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
              "NextSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedPasswordChangeAttempts" : 1,
              "FailedSshKeyChangeAttempts" : 6,
              "FailedPasswordCheckAttempts" : 1,
              "LastRestoreAccountTaskId" : "LastRestoreAccountTaskId",
              "LastSuccessPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordCheckTaskId" : "LastPasswordCheckTaskId",
              "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
              "LastSuccessSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSuspendAccountAttempts" : 4,
              "LastFailureSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyRevokeTaskId" : "LastSshKeyRevokeTaskId",
              "HasAccountTaskFailure" : true,
              "NextPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSshKeyCheckAttempts" : 1,
              "NextRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyCheckTaskId" : "LastSshKeyCheckTaskId",
              "LastSuccessSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSshKeyDiscoveryAttempts" : 7,
              "LastSuccessSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "SshKeySyncGroup" : {
              "Priority" : 7,
              "Id" : 4,
              "Disabled" : true,
              "Name" : "Name"
            },
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "Disabled" : true,
            "SyncGroup" : {
              "Priority" : 2,
              "Id" : 3,
              "Disabled" : true,
              "Name" : "Name"
            },
            "Tags" : [ {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            } ],
            "IsServiceAccount" : true,
            "DiscoveredProperties" : {
              "AccountDiscoveryScheduleId" : 9,
              "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
              "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
              "DiscoveredUserId" : "DiscoveredUserId",
              "DiscoveredGroups" : [ {
                "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
                "DiscoveredGroupId" : "DiscoveredGroupId",
                "DiscoveredGroupName" : "DiscoveredGroupName"
              }, {
                "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
                "DiscoveredGroupId" : "DiscoveredGroupId",
                "DiscoveredGroupName" : "DiscoveredGroupName"
              } ]
            },
            "DistinguishedName" : "DistinguishedName",
            "DomainName" : "DomainName",
            "DirectoryProperties" : {
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName"
            },
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "SharedServiceAccount" : true,
            "HasSshKey" : true,
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "SshKeyProfile" : {
              "Id" : 2,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 7,
              "Name" : "Name"
            },
            "Id" : 0,
            "HasPassword" : true
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AssetAccountBatchResult" : {
        "type" : "object",
        "properties" : {
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : 6,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AssetBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/Asset"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/Asset"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "AccountDiscoveryScheduleId" : 6,
            "Description" : "Description",
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "IsDirectory" : true,
            "Platform" : {
              "Description" : "Description",
              "Architecture" : "Architecture",
              "DeviceClass" : "Unknown",
              "ConnectionProperties" : {
                "SupportsSslCertificateVerification" : true,
                "SupportsNamedPipeForServiceAccountConnection" : true,
                "SupportsPasswordAuthentication" : true,
                "SupportsSshKeyAuthentication" : true,
                "SupportsServiceName" : true,
                "SupportsAccessKeyAuthentication" : true,
                "SupportsLocalhostPasswordAuthentication" : true,
                "RequiresDistinguishedName" : true,
                "SupportsInstance" : true,
                "SupportsOraclePrivileges" : true,
                "SupportsDirectorySync" : true,
                "SupportsClientId" : true,
                "DefaultPort" : 6,
                "SupportsDirectoryPasswordAuthentication" : true,
                "SupportsWorkstationId" : true,
                "SupportsTimeout" : true,
                "SupportsPrivilegedAccount" : true,
                "SupportsDirectoryAssetDiscovery" : true,
                "SupportsLdap" : true,
                "SupportsPrivilegeElevationCommand" : true,
                "SupportsSslEncryption" : true,
                "SupportsStarlingConnectAuthentication" : true,
                "SupportsAccountPasswordAuthentication" : true,
                "SupportsSshTransport" : true,
                "SupportsTopSecretInterval" : true,
                "DefaultSslPort" : 7,
                "SupportsSslThumbprint" : true,
                "AllowCustomPort" : true,
                "SupportsEnablePassword" : true,
                "PrivilegedAccountName" : "PrivilegedAccountName",
                "SupportsTacacsSecret" : true
              },
              "IsAcctNameCaseSensitive" : true,
              "PasswordFeatureProperties" : {
                "SupportsPasswordManagement" : true,
                "SupportsSshKeyManagement" : true,
                "RequireNetworkAddress" : true,
                "SupportsDependentSystemTasks" : true,
                "AllowRequireCurrentPassword" : true,
                "SupportsSuspendRestoreAccount" : true,
                "SupportsAccountDiscovery" : true,
                "SupportsServiceDiscovery" : true,
                "SupportsUsePasswordHash" : true
              },
              "LicenseClass" : null,
              "CustomScriptProperties" : {
                "Parameters" : [ {
                  "DefaultValue" : "DefaultValue",
                  "Type" : "String",
                  "Description" : "Description",
                  "TaskName" : null,
                  "Name" : "Name"
                }, {
                  "DefaultValue" : "DefaultValue",
                  "Type" : "String",
                  "Description" : "Description",
                  "TaskName" : null,
                  "Name" : "Name"
                } ],
                "HasScript" : true
              },
              "Name" : "Name",
              "Version" : "Version",
              "SupportedOperations" : [ "Unknown", "Unknown" ],
              "SessionFeatureProperties" : {
                "DefaultRemoteDesktopSessionPort" : 4,
                "DefaultTelnetSessionPort" : 5,
                "SupportsSessionManagement" : true,
                "DefaultSshSessionPort" : 1
              },
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 1,
              "PlatformType" : "Unknown",
              "IsSystemOwned" : true
            },
            "ManagedNetworkName" : "ManagedNetworkName",
            "DiscoveredDirectoryGroups" : [ {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ],
            "RegisteredConnector" : {
              "StarlingConnectorId" : "StarlingConnectorId",
              "RegisteredConnectorId" : "RegisteredConnectorId",
              "VisibleToPartitions" : [ {
                "CreatedByUserId" : 6,
                "Description" : "Description",
                "ManagedBy" : [ {
                  "IdentityProviderId" : 4,
                  "PrincipalKind" : null,
                  "FullDisplayName" : "FullDisplayName",
                  "DomainName" : "DomainName",
                  "DisplayName" : "DisplayName",
                  "IdentityProviderName" : "IdentityProviderName",
                  "Id" : 0,
                  "IdentityProviderTypeReferenceName" : null,
                  "EmailAddress" : "EmailAddress",
                  "IsSystemOwned" : true,
                  "Name" : "Name"
                }, {
                  "IdentityProviderId" : 4,
                  "PrincipalKind" : null,
                  "FullDisplayName" : "FullDisplayName",
                  "DomainName" : "DomainName",
                  "DisplayName" : "DisplayName",
                  "IdentityProviderName" : "IdentityProviderName",
                  "Id" : 0,
                  "IdentityProviderTypeReferenceName" : null,
                  "EmailAddress" : "EmailAddress",
                  "IsSystemOwned" : true,
                  "Name" : "Name"
                } ],
                "DefaultProfileName" : "DefaultProfileName",
                "DefaultSshKeyProfileId" : 5,
                "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
                "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
                "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
                "DefaultProfileId" : 1,
                "Id" : 0,
                "Name" : "Name"
              }, {
                "CreatedByUserId" : 6,
                "Description" : "Description",
                "ManagedBy" : [ {
                  "IdentityProviderId" : 4,
                  "PrincipalKind" : null,
                  "FullDisplayName" : "FullDisplayName",
                  "DomainName" : "DomainName",
                  "DisplayName" : "DisplayName",
                  "IdentityProviderName" : "IdentityProviderName",
                  "Id" : 0,
                  "IdentityProviderTypeReferenceName" : null,
                  "EmailAddress" : "EmailAddress",
                  "IsSystemOwned" : true,
                  "Name" : "Name"
                }, {
                  "IdentityProviderId" : 4,
                  "PrincipalKind" : null,
                  "FullDisplayName" : "FullDisplayName",
                  "DomainName" : "DomainName",
                  "DisplayName" : "DisplayName",
                  "IdentityProviderName" : "IdentityProviderName",
                  "Id" : 0,
                  "IdentityProviderTypeReferenceName" : null,
                  "EmailAddress" : "EmailAddress",
                  "IsSystemOwned" : true,
                  "Name" : "Name"
                } ],
                "DefaultProfileName" : "DefaultProfileName",
                "DefaultSshKeyProfileId" : 5,
                "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
                "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
                "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
                "DefaultProfileId" : 1,
                "Id" : 0,
                "Name" : "Name"
              } ],
              "RegisteredConnectorDisplayName" : "RegisteredConnectorDisplayName",
              "Platform" : null,
              "DisplayName" : "DisplayName",
              "StarlingConnectorVersion" : "StarlingConnectorVersion",
              "Id" : 9,
              "VisibleToAllPartitions" : true
            },
            "CustomScriptParameters" : [ {
              "Type" : null,
              "TaskName" : null,
              "Value" : "Value",
              "Name" : "Name"
            }, {
              "Type" : null,
              "TaskName" : null,
              "Value" : "Value",
              "Name" : "Name"
            } ],
            "LicenseClass" : "System",
            "Name" : "Name",
            "PasswordProfile" : {
              "Id" : 8,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 9,
              "Name" : "Name"
            },
            "AssetPartitionName" : "AssetPartitionName",
            "CreatedByUserId" : 5,
            "NetworkAddress" : "NetworkAddress",
            "ManagedNetworkId" : 1,
            "TaskProperties" : {
              "LastFailureDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
              "NextDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedAccountDiscoveryAttempts" : 7,
              "FailedTestConnectionAttempts" : 3,
              "LastDependentServiceUpdateTaskId" : "LastDependentServiceUpdateTaskId",
              "LastSuccessDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
              "HasAssetTaskFailure" : true,
              "LastSuccessAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastAccountDiscoveryTaskId" : "LastAccountDiscoveryTaskId",
              "LastSuccessTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
              "LastServiceDiscoveryTaskId" : "LastServiceDiscoveryTaskId",
              "LastFailureServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "NextTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
              "NextServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
              "LastAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedServiceDiscoveryAttempts" : 9,
              "LastTestConnectionTaskId" : "LastTestConnectionTaskId",
              "FailedDependentServiceUpdateAttempts" : 2,
              "NextAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "PlatformId" : 6,
            "Disabled" : true,
            "Tags" : [ {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            } ],
            "AssetPartitionId" : 5,
            "AssetDiscoveryJobId" : 9,
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "DirectoryAssetProperties" : {
              "FailedSyncAttempts" : 1,
              "LastDirectoryDeleteSyncTaskId" : "LastDirectoryDeleteSyncTaskId",
              "LastDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
              "DomainName" : "DomainName",
              "LastFailureSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
              "NextDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
              "ForestRootDomain" : "ForestRootDomain",
              "DomainControllers" : [ {
                "ServerType" : "DomainController",
                "IsWritable" : true,
                "NetworkAddress" : "NetworkAddress",
                "DomainName" : "DomainName"
              }, {
                "ServerType" : "DomainController",
                "IsWritable" : true,
                "NetworkAddress" : "NetworkAddress",
                "DomainName" : "DomainName"
              } ],
              "UsePasswordHash" : true,
              "SchemaProperties" : {
                "UserProperties" : {
                  "AltLoginNameAttribute" : "AltLoginNameAttribute",
                  "UserNameAttribute" : "UserNameAttribute",
                  "DescriptionAttribute" : "DescriptionAttribute",
                  "UserClassType" : [ "UserClassType", "UserClassType" ],
                  "PasswordAttribute" : "PasswordAttribute",
                  "MemberOfAttribute" : "MemberOfAttribute"
                },
                "ComputerProperties" : {
                  "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
                  "NetworkAddressAttribute" : "NetworkAddressAttribute",
                  "DescriptionAttribute" : "DescriptionAttribute",
                  "OperatingSystemAttribute" : "OperatingSystemAttribute",
                  "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
                  "NameAttribute" : "NameAttribute",
                  "MemberOfAttribute" : "MemberOfAttribute"
                },
                "GroupProperties" : {
                  "MemberAttribute" : "MemberAttribute",
                  "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
                  "NameAttribute" : "NameAttribute"
                }
              },
              "Domains" : [ {
                "DomainName" : "DomainName",
                "DomainUniqueId" : "DomainUniqueId",
                "NetBiosName" : "NetBiosName",
                "NamingContext" : "NamingContext"
              }, {
                "DomainName" : "DomainName",
                "DomainUniqueId" : "DomainUniqueId",
                "NetBiosName" : "NetBiosName",
                "NamingContext" : "NamingContext"
              } ],
              "LastSuccessDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
              "DeleteSyncIntervalMinutes" : 1586191969,
              "FailedDeleteSyncAttempts" : 1,
              "LastSuccessSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
              "AllowSharedSearch" : true,
              "LastFailureDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
              "NextSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
              "SynchronizationIntervalMinutes" : 890262545,
              "LastDirectorySyncTaskId" : "LastDirectorySyncTaskId"
            },
            "ConnectionProperties" : {
              "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
              "ServiceAccountSshKeyProfileId" : 1,
              "ServiceAccountHasSshKey" : true,
              "RegisteredConnectorId" : 1,
              "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
              "UseNamedPipeForServiceAccountConnection" : true,
              "Instance" : "Instance",
              "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
              "Port" : 48874,
              "ServiceAccountAssetPlatformType" : null,
              "ServiceAccountSshKey" : {
                "Comment" : "Comment",
                "Fingerprint" : "Fingerprint",
                "PrivateKey" : "PrivateKey",
                "FingerprintSha256" : "FingerprintSha256",
                "KeyType" : "Unknown",
                "PublicKey" : "PublicKey",
                "Passphrase" : "Passphrase",
                "KeyLength" : 4884
              },
              "ServiceAccountId" : 6,
              "ServiceAccountAssetName" : "ServiceAccountAssetName",
              "HasSecretKey" : true,
              "TacacsSecret" : "TacacsSecret",
              "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
              "CommandTimeout" : 13584,
              "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
              "EnablePassword" : "EnablePassword",
              "WorkstationId" : "WorkstationId",
              "SslThumbprint" : "SslThumbprint",
              "EnableHasPassword" : true,
              "ClientId" : 737,
              "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
              "ServiceAccountPassword" : "ServiceAccountPassword",
              "ServiceAccountCredentialType" : "None",
              "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
              "ServiceAccountHasPassword" : true,
              "ServiceAccountDomainName" : "ServiceAccountDomainName",
              "UseSslEncryption" : true,
              "ServiceAccountProfileName" : "ServiceAccountProfileName",
              "HasTacacsSecret" : true,
              "UseTopSecretInterval" : true,
              "ServiceAccountName" : "ServiceAccountName",
              "VerifySslCertificate" : true,
              "OraclePrivileges" : "OraclePrivileges",
              "SecretKey" : "SecretKey",
              "ServiceAccountAssetPlatformId" : 4,
              "ServiceAccountProfileId" : 1,
              "ServiceName" : "ServiceName",
              "AccessKeyId" : "AccessKeyId",
              "ServiceAccountAssetId" : 1,
              "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
              "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
            },
            "SessionAccessProperties" : {
              "RemoteDesktopSessionPort" : 21975,
              "AllowSessionRequests" : true,
              "TelnetSessionPort" : 20275,
              "SshSessionPort" : 43935
            },
            "AssetDiscoveryJobName" : "AssetDiscoveryJobName",
            "PlatformDisplayName" : "PlatformDisplayName",
            "SshHostKey" : {
              "Fingerprint" : "Fingerprint",
              "SshHostKey" : "SshHostKey",
              "FingerprintSha256" : "FingerprintSha256"
            },
            "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "SshKeyProfile" : {
              "Id" : 6,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 3,
              "Name" : "Name"
            },
            "Id" : 0
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AssetBatchResult" : {
        "type" : "object",
        "properties" : {
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : 6,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AssetConnectionProperties" : {
        "type" : "object",
        "properties" : {
          "ServiceAccountUniqueObjectId" : {
            "type" : "string",
            "description" : "Unique object ID of service account. Directory accounts only. (Read-only)",
            "nullable" : true
          },
          "ServiceAccountSecurityId" : {
            "type" : "string",
            "description" : "Security ID of service account. Directory accounts only. (Read-only)",
            "nullable" : true
          },
          "EnablePassword" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "Cisco routers require an extra password to enable password management. (write-only)",
            "nullable" : true
          },
          "EnableHasPassword" : {
            "type" : "boolean",
            "description" : "Whether the asset has an enable password set (Read-only)"
          },
          "CommandTimeout" : {
            "maximum" : 32767,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How long to wait (in seconds) for both the connect and command timeout",
            "format" : "int32",
            "default" : 20
          },
          "WorkstationId" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Workstation ID to assign to telnet session\r\nValid on AS/400 only",
            "nullable" : true
          },
          "ClientId" : {
            "maximum" : 999,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Client ID used for SAP sessions",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "ServiceAccountProfileId" : {
            "type" : "integer",
            "description" : "ID of profile explicitly explicitly assigned to the service account. During asset creation this profile will be assigned to the service account.\r\nUse null to inherit profile from the asset.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountProfileName" : {
            "type" : "string",
            "description" : "Name of profile explicitly explicitly assigned to the service account.",
            "nullable" : true
          },
          "ServiceAccountSshKeyProfileId" : {
            "type" : "integer",
            "description" : "ID of SSH key profile explicitly explicitly assigned to the service account. During asset creation this profile will be assigned to the service account.\r\nUse null to inherit profile from the asset.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountSshKeyProfileName" : {
            "type" : "string",
            "description" : "Name of SSH key profile explicitly explicitly assigned to the service account.",
            "nullable" : true
          },
          "UseSslEncryption" : {
            "type" : "boolean",
            "description" : "Whether to encrypt data with SSL. Default to true where supported except for ActiveDirectory",
            "nullable" : true,
            "default" : true
          },
          "VerifySslCertificate" : {
            "type" : "boolean",
            "description" : "Verify SSL certificate if using SSL",
            "default" : true
          },
          "Instance" : {
            "maximum" : 256,
            "maxLength" : 256,
            "type" : "string",
            "description" : "database instance name to specify for odbc transports",
            "nullable" : true
          },
          "ServiceName" : {
            "maximum" : 256,
            "maxLength" : 256,
            "type" : "string",
            "description" : "service name to specify for odbc transports",
            "nullable" : true
          },
          "SslThumbprint" : {
            "maximum" : 256,
            "maxLength" : 256,
            "type" : "string",
            "description" : "Thumbprint of nominated Ssl Certificate to use",
            "nullable" : true
          },
          "PrivilegeElevationCommand" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Whether or not to use delegation of commands (e.g. sudo.) The prefix is used to preface\r\ncommands requiring privileged access on the asset. Note that this must be non-interactive.\r\nValid for most unix-compatible platforms (Read-only)",
            "nullable" : true
          },
          "AccessKeyId" : {
            "maximum" : 32,
            "maxLength" : 32,
            "type" : "string",
            "description" : "AWS requires an access key id for password management.",
            "nullable" : true
          },
          "SecretKey" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "AWS requires a secret key for password management. (write-only)",
            "nullable" : true
          },
          "HasSecretKey" : {
            "type" : "boolean",
            "description" : "Whether the asset has secret key"
          },
          "OraclePrivileges" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Oracle platforms may support a means of specifying what privileges are needed when logging in (Oracle-only)",
            "nullable" : true
          },
          "UseNamedPipeForServiceAccountConnection" : {
            "type" : "boolean",
            "description" : "Identifies whether Named Pipe or TCP/IP is used for Windows/AD service account connections to the asset."
          },
          "RegisteredConnectorId" : {
            "type" : "integer",
            "description" : "Database ID of the starling registered connector",
            "format" : "int32",
            "nullable" : true
          },
          "TacacsSecret" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "Cisco ISE requires a Tacacs Secret to Check password (write-only)",
            "nullable" : true
          },
          "HasTacacsSecret" : {
            "type" : "boolean",
            "description" : "Whether the asset has a Tacacs secret (Read-only)"
          },
          "UseTopSecretInterval" : {
            "type" : "boolean",
            "description" : "Whether to use the profile's next change date as the interval on a Top Secret mainframe"
          },
          "ServiceAccountId" : {
            "type" : "integer",
            "description" : "Database ID of an asset account for connecting to the asset. Cannot be specified simultaneously with ServiceAccountName.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The name of an account that is not being managed for connecting to the asset. Cannot be specified simultaneously with ServiceAccountId.",
            "nullable" : true
          },
          "EffectiveServiceAccountName" : {
            "type" : "string",
            "description" : "The name of the account for connecting to the asset whether the account is managed or not (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDomainName" : {
            "type" : "string",
            "description" : "The domain name of the service account if the task uses a Directory\r\nor DirectoryAccount (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "EffectiveServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Effective distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "ServiceAccountCredentialType" : {
            "$ref" : "#/components/schemas/ServiceAccountCredentialType"
          },
          "ServiceAccountPassword" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "If ServiceAccountId is not specified then the service account password may be set via this property. (write-only)",
            "nullable" : true
          },
          "ServiceAccountHasPassword" : {
            "type" : "boolean",
            "description" : "Whether the service account has a password set or not (Read-only)"
          },
          "ServiceAccountSshKey" : {
            "$ref" : "#/components/schemas/SystemSshKey"
          },
          "ServiceAccountHasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the service account has an SSH key set or not (Read-only)"
          },
          "Port" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used to connect to the system",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetId" : {
            "type" : "integer",
            "description" : "The database ID of the asset the service account belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetName" : {
            "type" : "string",
            "description" : "The name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountAssetPlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset the service account belongs to (Read-only)",
            "format" : "int32"
          },
          "ServiceAccountAssetPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "ServiceAccountAssetPlatformDisplayName" : {
            "type" : "string",
            "description" : "The platform display name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountNetbiosName" : {
            "type" : "string",
            "description" : "The netbios name of the service account (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Settings detailing how the console connects to the asset",
        "example" : {
          "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
          "ServiceAccountSshKeyProfileId" : 1,
          "ServiceAccountHasSshKey" : true,
          "RegisteredConnectorId" : 1,
          "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
          "UseNamedPipeForServiceAccountConnection" : true,
          "Instance" : "Instance",
          "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
          "Port" : 48874,
          "ServiceAccountAssetPlatformType" : null,
          "ServiceAccountSshKey" : {
            "Comment" : "Comment",
            "Fingerprint" : "Fingerprint",
            "PrivateKey" : "PrivateKey",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "Passphrase" : "Passphrase",
            "KeyLength" : 4884
          },
          "ServiceAccountId" : 6,
          "ServiceAccountAssetName" : "ServiceAccountAssetName",
          "HasSecretKey" : true,
          "TacacsSecret" : "TacacsSecret",
          "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
          "CommandTimeout" : 13584,
          "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
          "EnablePassword" : "EnablePassword",
          "WorkstationId" : "WorkstationId",
          "SslThumbprint" : "SslThumbprint",
          "EnableHasPassword" : true,
          "ClientId" : 737,
          "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
          "ServiceAccountPassword" : "ServiceAccountPassword",
          "ServiceAccountCredentialType" : "None",
          "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
          "ServiceAccountHasPassword" : true,
          "ServiceAccountDomainName" : "ServiceAccountDomainName",
          "UseSslEncryption" : true,
          "ServiceAccountProfileName" : "ServiceAccountProfileName",
          "HasTacacsSecret" : true,
          "UseTopSecretInterval" : true,
          "ServiceAccountName" : "ServiceAccountName",
          "VerifySslCertificate" : true,
          "OraclePrivileges" : "OraclePrivileges",
          "SecretKey" : "SecretKey",
          "ServiceAccountAssetPlatformId" : 4,
          "ServiceAccountProfileId" : 1,
          "ServiceName" : "ServiceName",
          "AccessKeyId" : "AccessKeyId",
          "ServiceAccountAssetId" : 1,
          "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
          "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
        }
      },
      "AssetCustomScriptParameter" : {
        "required" : [ "Name", "TaskName" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of the parameter"
          },
          "Value" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Value of the parameter. If not specified (or set to null) the existing value will be retained (or set to default type value for create, e.g. empty string)",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/CustomScriptParameterType"
          },
          "TaskName" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters passed to custom platform script",
        "example" : {
          "Type" : null,
          "TaskName" : null,
          "Value" : "Value",
          "Name" : "Name"
        }
      },
      "AssetDiscoverSshHostKeyParameters" : {
        "type" : "object",
        "properties" : {
          "Port" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used by SSH to login to the machine",
            "format" : "int32",
            "nullable" : true
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the system",
            "format" : "int32",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network.",
            "nullable" : true
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false
      },
      "AssetDiscoveryCondition" : {
        "required" : [ "ConditionType" ],
        "type" : "object",
        "properties" : {
          "ConditionType" : {
            "$ref" : "#/components/schemas/AssetDiscoveryConditionType"
          },
          "AdGroups" : {
            "type" : "array",
            "description" : "Optional AD group to restrict Active Directory search to",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "LdapFilter" : {
            "maximum" : 1024,
            "minimum" : 1,
            "maxLength" : 1024,
            "minLength" : 1,
            "type" : "string",
            "description" : "Custom LDAP filter to search for computer objects (Only available for Directory DiscoveryType)",
            "nullable" : true
          },
          "PropertyConstraints" : {
            "type" : "array",
            "description" : "Set of property constraints to match against discovered assets",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetDiscoveryPropertyConstraint"
            }
          },
          "SearchBase" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Search base for computer objects (Only available for Directory DiscoveryType)",
            "nullable" : true
          },
          "SearchScope" : {
            "$ref" : "#/components/schemas/DiscoverySearchScope"
          }
        },
        "additionalProperties" : false,
        "description" : "Conditions to determine which assets to add to database",
        "example" : {
          "SearchScope" : "OneLevel",
          "AdGroups" : [ "AdGroups", "AdGroups" ],
          "SearchBase" : "SearchBase",
          "ConditionType" : "FindAll",
          "PropertyConstraints" : [ {
            "Operator" : "Equals",
            "PropertyName" : "Name",
            "Value" : "Value"
          }, {
            "Operator" : "Equals",
            "PropertyName" : "Name",
            "Value" : "Value"
          } ],
          "LdapFilter" : "LdapFilter"
        }
      },
      "AssetDiscoveryConditionType" : {
        "type" : "string",
        "description" : "Type of discovery condition",
        "format" : "string",
        "enum" : [ "FindAll", "LdapFilter", "PropertyConstraint", "AdGroupMembership" ]
      },
      "AssetDiscoveryJob" : {
        "required" : [ "DiscoveryType", "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this job belongs to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this job belongs to (Read-only)",
            "nullable" : true
          },
          "DiscoveryType" : {
            "$ref" : "#/components/schemas/AssetDiscoveryType"
          },
          "DirectoryDiscoveryProperties" : {
            "$ref" : "#/components/schemas/DirectoryDiscoveryProperties"
          },
          "NetworkDiscoveryProperties" : {
            "$ref" : "#/components/schemas/NetworkDiscoveryProperties"
          },
          "TaskProperties" : {
            "$ref" : "#/components/schemas/AssetDiscoveryJobTaskProperties"
          },
          "Rules" : {
            "type" : "array",
            "description" : "Set of rules to apply to discovered assets",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetDiscoveryRule"
            }
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a scheduled asset discovery job",
        "example" : {
          "ScheduleType" : "Never",
          "Description" : "Description",
          "StartHour" : 16,
          "DirectoryDiscoveryProperties" : {
            "DirectoryId" : 5,
            "DirectoryPlatformDisplayName" : "DirectoryPlatformDisplayName",
            "DirectoryPlatformType" : "Unknown",
            "DirectoryPlatformId" : 5,
            "DirectoryNetworkAddress" : "DirectoryNetworkAddress",
            "DirectoryName" : "DirectoryName"
          },
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 5,
          "RepeatDayOfMonth" : 7,
          "TaskProperties" : {
            "FailedAssetDiscoveryAttempts" : 6,
            "NextAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "HasTaskFailure" : true,
            "LastSuccessAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
            "LastAssetDiscoveryTaskId" : "LastAssetDiscoveryTaskId",
            "LastAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00"
          },
          "DiscoveryType" : "Directory",
          "AssetPartitionId" : 0,
          "StartMinute" : 54,
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "NetworkDiscoveryProperties" : {
            "ScanOptions" : {
              "ScanTimeout" : 2,
              "OsFingerPrint" : false
            },
            "ScanRules" : [ {
              "StartIp" : "StartIp",
              "EndIp" : "EndIp",
              "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
            }, {
              "StartIp" : "StartIp",
              "EndIp" : "EndIp",
              "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
            } ]
          },
          "Rules" : [ {
            "AssetTemplate" : {
              "AccountDiscoveryScheduleId" : 0,
              "ManagedNetworkName" : "ManagedNetworkName",
              "ConnectionProperties" : {
                "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
                "ServiceAccountSshKeyProfileId" : 1,
                "ServiceAccountHasSshKey" : true,
                "RegisteredConnectorId" : 1,
                "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
                "UseNamedPipeForServiceAccountConnection" : true,
                "Instance" : "Instance",
                "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
                "Port" : 48874,
                "ServiceAccountAssetPlatformType" : null,
                "ServiceAccountSshKey" : {
                  "Comment" : "Comment",
                  "Fingerprint" : "Fingerprint",
                  "PrivateKey" : "PrivateKey",
                  "FingerprintSha256" : "FingerprintSha256",
                  "KeyType" : "Unknown",
                  "PublicKey" : "PublicKey",
                  "Passphrase" : "Passphrase",
                  "KeyLength" : 4884
                },
                "ServiceAccountId" : 6,
                "ServiceAccountAssetName" : "ServiceAccountAssetName",
                "HasSecretKey" : true,
                "TacacsSecret" : "TacacsSecret",
                "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
                "CommandTimeout" : 13584,
                "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
                "EnablePassword" : "EnablePassword",
                "WorkstationId" : "WorkstationId",
                "SslThumbprint" : "SslThumbprint",
                "EnableHasPassword" : true,
                "ClientId" : 737,
                "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
                "ServiceAccountPassword" : "ServiceAccountPassword",
                "ServiceAccountCredentialType" : "None",
                "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
                "ServiceAccountHasPassword" : true,
                "ServiceAccountDomainName" : "ServiceAccountDomainName",
                "UseSslEncryption" : true,
                "ServiceAccountProfileName" : "ServiceAccountProfileName",
                "HasTacacsSecret" : true,
                "UseTopSecretInterval" : true,
                "ServiceAccountName" : "ServiceAccountName",
                "VerifySslCertificate" : true,
                "OraclePrivileges" : "OraclePrivileges",
                "SecretKey" : "SecretKey",
                "ServiceAccountAssetPlatformId" : 4,
                "ServiceAccountProfileId" : 1,
                "ServiceName" : "ServiceName",
                "AccessKeyId" : "AccessKeyId",
                "ServiceAccountAssetId" : 1,
                "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
                "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
              },
              "SessionAccessProperties" : {
                "RemoteDesktopSessionPort" : 21975,
                "AllowSessionRequests" : true,
                "TelnetSessionPort" : 20275,
                "SshSessionPort" : 43935
              },
              "PasswordProfile" : {
                "Id" : 8,
                "EffectiveName" : "EffectiveName",
                "EffectiveId" : 9,
                "Name" : "Name"
              },
              "PlatformDisplayName" : "PlatformDisplayName",
              "ManagedNetworkId" : 6,
              "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
              "PlatformFamily" : "None",
              "SshKeyProfile" : {
                "Id" : 6,
                "EffectiveName" : "EffectiveName",
                "EffectiveId" : 3,
                "Name" : "Name"
              },
              "PlatformId" : 1,
              "PlatformType" : "Unknown",
              "Tags" : [ {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              }, {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              } ]
            },
            "Conditions" : [ {
              "SearchScope" : "OneLevel",
              "AdGroups" : [ "AdGroups", "AdGroups" ],
              "SearchBase" : "SearchBase",
              "ConditionType" : "FindAll",
              "PropertyConstraints" : [ {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              }, {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              } ],
              "LdapFilter" : "LdapFilter"
            }, {
              "SearchScope" : "OneLevel",
              "AdGroups" : [ "AdGroups", "AdGroups" ],
              "SearchBase" : "SearchBase",
              "ConditionType" : "FindAll",
              "PropertyConstraints" : [ {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              }, {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              } ],
              "LdapFilter" : "LdapFilter"
            } ],
            "Name" : "Name"
          }, {
            "AssetTemplate" : {
              "AccountDiscoveryScheduleId" : 0,
              "ManagedNetworkName" : "ManagedNetworkName",
              "ConnectionProperties" : {
                "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
                "ServiceAccountSshKeyProfileId" : 1,
                "ServiceAccountHasSshKey" : true,
                "RegisteredConnectorId" : 1,
                "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
                "UseNamedPipeForServiceAccountConnection" : true,
                "Instance" : "Instance",
                "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
                "Port" : 48874,
                "ServiceAccountAssetPlatformType" : null,
                "ServiceAccountSshKey" : {
                  "Comment" : "Comment",
                  "Fingerprint" : "Fingerprint",
                  "PrivateKey" : "PrivateKey",
                  "FingerprintSha256" : "FingerprintSha256",
                  "KeyType" : "Unknown",
                  "PublicKey" : "PublicKey",
                  "Passphrase" : "Passphrase",
                  "KeyLength" : 4884
                },
                "ServiceAccountId" : 6,
                "ServiceAccountAssetName" : "ServiceAccountAssetName",
                "HasSecretKey" : true,
                "TacacsSecret" : "TacacsSecret",
                "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
                "CommandTimeout" : 13584,
                "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
                "EnablePassword" : "EnablePassword",
                "WorkstationId" : "WorkstationId",
                "SslThumbprint" : "SslThumbprint",
                "EnableHasPassword" : true,
                "ClientId" : 737,
                "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
                "ServiceAccountPassword" : "ServiceAccountPassword",
                "ServiceAccountCredentialType" : "None",
                "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
                "ServiceAccountHasPassword" : true,
                "ServiceAccountDomainName" : "ServiceAccountDomainName",
                "UseSslEncryption" : true,
                "ServiceAccountProfileName" : "ServiceAccountProfileName",
                "HasTacacsSecret" : true,
                "UseTopSecretInterval" : true,
                "ServiceAccountName" : "ServiceAccountName",
                "VerifySslCertificate" : true,
                "OraclePrivileges" : "OraclePrivileges",
                "SecretKey" : "SecretKey",
                "ServiceAccountAssetPlatformId" : 4,
                "ServiceAccountProfileId" : 1,
                "ServiceName" : "ServiceName",
                "AccessKeyId" : "AccessKeyId",
                "ServiceAccountAssetId" : 1,
                "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
                "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
              },
              "SessionAccessProperties" : {
                "RemoteDesktopSessionPort" : 21975,
                "AllowSessionRequests" : true,
                "TelnetSessionPort" : 20275,
                "SshSessionPort" : 43935
              },
              "PasswordProfile" : {
                "Id" : 8,
                "EffectiveName" : "EffectiveName",
                "EffectiveId" : 9,
                "Name" : "Name"
              },
              "PlatformDisplayName" : "PlatformDisplayName",
              "ManagedNetworkId" : 6,
              "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
              "PlatformFamily" : "None",
              "SshKeyProfile" : {
                "Id" : 6,
                "EffectiveName" : "EffectiveName",
                "EffectiveId" : 3,
                "Name" : "Name"
              },
              "PlatformId" : 1,
              "PlatformType" : "Unknown",
              "Tags" : [ {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              }, {
                "Description" : "Description",
                "AdminAssigned" : true,
                "Id" : 1,
                "Name" : "Name"
              } ]
            },
            "Conditions" : [ {
              "SearchScope" : "OneLevel",
              "AdGroups" : [ "AdGroups", "AdGroups" ],
              "SearchBase" : "SearchBase",
              "ConditionType" : "FindAll",
              "PropertyConstraints" : [ {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              }, {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              } ],
              "LdapFilter" : "LdapFilter"
            }, {
              "SearchScope" : "OneLevel",
              "AdGroups" : [ "AdGroups", "AdGroups" ],
              "SearchBase" : "SearchBase",
              "ConditionType" : "FindAll",
              "PropertyConstraints" : [ {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              }, {
                "Operator" : "Equals",
                "PropertyName" : "Name",
                "Value" : "Value"
              } ],
              "LdapFilter" : "LdapFilter"
            } ],
            "Name" : "Name"
          } ],
          "RepeatWeekOfMonth" : "First",
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 1,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "RepeatInterval" : 1210617418
        }
      },
      "AssetDiscoveryJobTaskProperties" : {
        "type" : "object",
        "properties" : {
          "HasTaskFailure" : {
            "type" : "boolean",
            "description" : "Whether this asset discovery job has any platform task failures (Read-only)"
          },
          "LastAssetDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last asset discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessAssetDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful asset discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureAssetDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed asset discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedAssetDiscoveryAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed asset discovery attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextAssetDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the next asset discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastAssetDiscoveryTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last asset discovery (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Task information for an asset discovery job",
        "example" : {
          "FailedAssetDiscoveryAttempts" : 6,
          "NextAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "HasTaskFailure" : true,
          "LastSuccessAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastAssetDiscoveryTaskId" : "LastAssetDiscoveryTaskId",
          "LastAssetDiscoveryDate" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "AssetDiscoveryLog" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user that requested the task (Read-only)",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the event (Read-only)",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "AssetDiscoveryJobId" : {
            "type" : "integer",
            "description" : "Database ID of the discovery job (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetDiscoveryJobName" : {
            "type" : "string",
            "description" : "Name of the asset discovery job (Read-only)",
            "nullable" : true
          },
          "AssetDiscoveryType" : {
            "$ref" : "#/components/schemas/AssetDiscoveryType"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this job belongs to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "DirectoryDiscoveryProperties" : {
            "$ref" : "#/components/schemas/DirectoryDiscoveryProperties"
          },
          "NetworkDiscoveryProperties" : {
            "$ref" : "#/components/schemas/NetworkDiscoveryProperties"
          },
          "DiscoveredAssets" : {
            "type" : "array",
            "description" : "Record of assets that were found during discovery",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredAsset"
            }
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters passed to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory name the task was executed against (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a task that may run on a remote machine",
        "example" : {
          "AssetPartitionId" : 1,
          "AssetDiscoveryJobId" : 6,
          "DiscoveredAssets" : [ {
            "Description" : "Description",
            "Platform" : "Platform",
            "ObjectSid" : "ObjectSid",
            "OperatingSystemVersion" : "OperatingSystemVersion",
            "Name" : "Name",
            "PasswordProfile" : {
              "Id" : 9,
              "Name" : "Name"
            },
            "NetworkAddress" : "NetworkAddress",
            "RelativeId" : "RelativeId",
            "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
            "PlatformId" : 2,
            "TestConnectionMessage" : "TestConnectionMessage",
            "RuleName" : "RuleName",
            "OperatingSystemName" : "OperatingSystemName",
            "Architecture" : "Architecture",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "DistinguishedName" : "DistinguishedName",
            "DomainName" : "DomainName",
            "TestConnectionState" : "Unknown",
            "ComputerCategory" : "ComputerCategory",
            "ObjectGuid" : "ObjectGuid",
            "TestConnectionLogId" : "TestConnectionLogId",
            "PlatformDisplayName" : "PlatformDisplayName",
            "SshKeyProfile" : {
              "Id" : 3,
              "Name" : "Name"
            },
            "Id" : 7,
            "Location" : "Location"
          }, {
            "Description" : "Description",
            "Platform" : "Platform",
            "ObjectSid" : "ObjectSid",
            "OperatingSystemVersion" : "OperatingSystemVersion",
            "Name" : "Name",
            "PasswordProfile" : {
              "Id" : 9,
              "Name" : "Name"
            },
            "NetworkAddress" : "NetworkAddress",
            "RelativeId" : "RelativeId",
            "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
            "PlatformId" : 2,
            "TestConnectionMessage" : "TestConnectionMessage",
            "RuleName" : "RuleName",
            "OperatingSystemName" : "OperatingSystemName",
            "Architecture" : "Architecture",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "DistinguishedName" : "DistinguishedName",
            "DomainName" : "DomainName",
            "TestConnectionState" : "Unknown",
            "ComputerCategory" : "ComputerCategory",
            "ObjectGuid" : "ObjectGuid",
            "TestConnectionLogId" : "TestConnectionLogId",
            "PlatformDisplayName" : "PlatformDisplayName",
            "SshKeyProfile" : {
              "Id" : 3,
              "Name" : "Name"
            },
            "Id" : 7,
            "Location" : "Location"
          } ],
          "ApplianceName" : "ApplianceName",
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "EventName" : "Unknown",
          "CustomScriptParameters" : [ {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "NetworkDiscoveryProperties" : {
            "ScanOptions" : {
              "ScanTimeout" : 2,
              "OsFingerPrint" : false
            },
            "ScanRules" : [ {
              "StartIp" : "StartIp",
              "EndIp" : "EndIp",
              "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
            }, {
              "StartIp" : "StartIp",
              "EndIp" : "EndIp",
              "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
            } ]
          },
          "DirectoryDiscoveryProperties" : {
            "DirectoryId" : 5,
            "DirectoryPlatformDisplayName" : "DirectoryPlatformDisplayName",
            "DirectoryPlatformType" : "Unknown",
            "DirectoryPlatformId" : 5,
            "DirectoryNetworkAddress" : "DirectoryNetworkAddress",
            "DirectoryName" : "DirectoryName"
          },
          "AssetName" : "AssetName",
          "Name" : "Unknown",
          "AssetDiscoveryJobName" : "AssetDiscoveryJobName",
          "AssetPartitionName" : "AssetPartitionName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 0,
          "AssetDiscoveryType" : "Directory",
          "Id" : "Id",
          "ApplianceId" : "ApplianceId",
          "AssetId" : 4,
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "AssetDiscoveryNetScanRule" : {
        "required" : [ "StartIp" ],
        "type" : "object",
        "properties" : {
          "StartIp" : {
            "maximum" : 45,
            "minimum" : 1,
            "maxLength" : 45,
            "minLength" : 1,
            "type" : "string",
            "description" : "Starting Ip"
          },
          "EndIp" : {
            "maximum" : 45,
            "minimum" : 1,
            "maxLength" : 45,
            "minLength" : 1,
            "type" : "string",
            "description" : "Ending Ip",
            "nullable" : true
          },
          "ExcludeIps" : {
            "type" : "array",
            "description" : "Set Of Ips to exclude in network asset discovery scan request",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Rule to apply to discover network assets",
        "example" : {
          "StartIp" : "StartIp",
          "EndIp" : "EndIp",
          "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
        }
      },
      "AssetDiscoveryPropertyConstraint" : {
        "required" : [ "Operator", "PropertyName" ],
        "type" : "object",
        "properties" : {
          "PropertyName" : {
            "$ref" : "#/components/schemas/DiscoveredAssetProperty"
          },
          "Operator" : {
            "$ref" : "#/components/schemas/DiscoveredAssetPropertyConstraintOperator"
          },
          "Value" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Value to match against",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Set of property constraints to match against discovered assets",
        "example" : {
          "Operator" : "Equals",
          "PropertyName" : "Name",
          "Value" : "Value"
        }
      },
      "AssetDiscoveryRule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of the discovery rule"
          },
          "AssetTemplate" : {
            "$ref" : "#/components/schemas/AssetTemplate"
          },
          "Conditions" : {
            "type" : "array",
            "description" : "Conditions to determine which assets to add to database",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetDiscoveryCondition"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Rule to apply to discovered assets",
        "example" : {
          "AssetTemplate" : {
            "AccountDiscoveryScheduleId" : 0,
            "ManagedNetworkName" : "ManagedNetworkName",
            "ConnectionProperties" : {
              "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
              "ServiceAccountSshKeyProfileId" : 1,
              "ServiceAccountHasSshKey" : true,
              "RegisteredConnectorId" : 1,
              "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
              "UseNamedPipeForServiceAccountConnection" : true,
              "Instance" : "Instance",
              "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
              "Port" : 48874,
              "ServiceAccountAssetPlatformType" : null,
              "ServiceAccountSshKey" : {
                "Comment" : "Comment",
                "Fingerprint" : "Fingerprint",
                "PrivateKey" : "PrivateKey",
                "FingerprintSha256" : "FingerprintSha256",
                "KeyType" : "Unknown",
                "PublicKey" : "PublicKey",
                "Passphrase" : "Passphrase",
                "KeyLength" : 4884
              },
              "ServiceAccountId" : 6,
              "ServiceAccountAssetName" : "ServiceAccountAssetName",
              "HasSecretKey" : true,
              "TacacsSecret" : "TacacsSecret",
              "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
              "CommandTimeout" : 13584,
              "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
              "EnablePassword" : "EnablePassword",
              "WorkstationId" : "WorkstationId",
              "SslThumbprint" : "SslThumbprint",
              "EnableHasPassword" : true,
              "ClientId" : 737,
              "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
              "ServiceAccountPassword" : "ServiceAccountPassword",
              "ServiceAccountCredentialType" : "None",
              "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
              "ServiceAccountHasPassword" : true,
              "ServiceAccountDomainName" : "ServiceAccountDomainName",
              "UseSslEncryption" : true,
              "ServiceAccountProfileName" : "ServiceAccountProfileName",
              "HasTacacsSecret" : true,
              "UseTopSecretInterval" : true,
              "ServiceAccountName" : "ServiceAccountName",
              "VerifySslCertificate" : true,
              "OraclePrivileges" : "OraclePrivileges",
              "SecretKey" : "SecretKey",
              "ServiceAccountAssetPlatformId" : 4,
              "ServiceAccountProfileId" : 1,
              "ServiceName" : "ServiceName",
              "AccessKeyId" : "AccessKeyId",
              "ServiceAccountAssetId" : 1,
              "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
              "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
            },
            "SessionAccessProperties" : {
              "RemoteDesktopSessionPort" : 21975,
              "AllowSessionRequests" : true,
              "TelnetSessionPort" : 20275,
              "SshSessionPort" : 43935
            },
            "PasswordProfile" : {
              "Id" : 8,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 9,
              "Name" : "Name"
            },
            "PlatformDisplayName" : "PlatformDisplayName",
            "ManagedNetworkId" : 6,
            "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
            "PlatformFamily" : "None",
            "SshKeyProfile" : {
              "Id" : 6,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 3,
              "Name" : "Name"
            },
            "PlatformId" : 1,
            "PlatformType" : "Unknown",
            "Tags" : [ {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            } ]
          },
          "Conditions" : [ {
            "SearchScope" : "OneLevel",
            "AdGroups" : [ "AdGroups", "AdGroups" ],
            "SearchBase" : "SearchBase",
            "ConditionType" : "FindAll",
            "PropertyConstraints" : [ {
              "Operator" : "Equals",
              "PropertyName" : "Name",
              "Value" : "Value"
            }, {
              "Operator" : "Equals",
              "PropertyName" : "Name",
              "Value" : "Value"
            } ],
            "LdapFilter" : "LdapFilter"
          }, {
            "SearchScope" : "OneLevel",
            "AdGroups" : [ "AdGroups", "AdGroups" ],
            "SearchBase" : "SearchBase",
            "ConditionType" : "FindAll",
            "PropertyConstraints" : [ {
              "Operator" : "Equals",
              "PropertyName" : "Name",
              "Value" : "Value"
            }, {
              "Operator" : "Equals",
              "PropertyName" : "Name",
              "Value" : "Value"
            } ],
            "LdapFilter" : "LdapFilter"
          } ],
          "Name" : "Name"
        }
      },
      "AssetDiscoveryType" : {
        "type" : "string",
        "description" : "Type of asset discovery job",
        "format" : "string",
        "enum" : [ "Directory", "Network" ]
      },
      "AssetDomainInfo" : {
        "type" : "object",
        "properties" : {
          "DomainName" : {
            "type" : "string",
            "description" : "Name of the domain",
            "nullable" : true
          },
          "NetBiosName" : {
            "type" : "string",
            "description" : "Netbios name of the domain",
            "nullable" : true
          },
          "DomainUniqueId" : {
            "type" : "string",
            "description" : "Sid of the Domain",
            "nullable" : true
          },
          "NamingContext" : {
            "type" : "string",
            "description" : "Default Naming Context for the Domain",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents information about available domains that can be searched in an Directory",
        "example" : {
          "DomainName" : "DomainName",
          "DomainUniqueId" : "DomainUniqueId",
          "NetBiosName" : "NetBiosName",
          "NamingContext" : "NamingContext"
        }
      },
      "AssetGroup" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Id of the table entry",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the asset group"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description regarding the asset group",
            "nullable" : true
          },
          "IsDynamic" : {
            "type" : "boolean",
            "description" : "Whether or not this is a dynamic asset group"
          },
          "Assets" : {
            "type" : "array",
            "description" : "Set of policy assets that are assigned to this asset group",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PolicyAsset"
            }
          },
          "AssetGroupingRule" : {
            "$ref" : "#/components/schemas/TaggingGroupingRule"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a group of assets on the appliance for use in session policy.\r\nNOTE: Only assets that support session access are allowed",
        "example" : {
          "AssetGroupingRule" : null,
          "CreatedByUserId" : 5,
          "Description" : "Description",
          "Assets" : [ null, null ],
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 7,
          "IsDynamic" : true,
          "Name" : "Name"
        }
      },
      "AssetGroupBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AssetGroup"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/AssetGroup"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "AssetGroupingRule" : null,
            "CreatedByUserId" : 5,
            "Description" : "Description",
            "Assets" : [ null, null ],
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 7,
            "IsDynamic" : true,
            "Name" : "Name"
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AssetGroupBatchResult" : {
        "type" : "object",
        "properties" : {
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : 6,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "AssetGroupPolicy" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the policy",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the policy",
            "nullable" : true
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "Database ID of the role the policy belongs to",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of the role the policy belongs to",
            "nullable" : true
          },
          "PolicyAssetCount" : {
            "type" : "integer",
            "description" : "Number of assets assigned to the policy",
            "format" : "int32"
          },
          "PolicyAssetGroupCount" : {
            "type" : "integer",
            "description" : "Number of asset groups assigned to the policy",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a policy that an asset group is assigned to",
        "example" : {
          "RoleName" : "RoleName",
          "PolicyAssetCount" : 1,
          "Id" : 0,
          "RoleId" : 6,
          "PolicyAssetGroupCount" : 5,
          "Name" : "Name"
        }
      },
      "AssetInstallSshKeyParameters" : {
        "required" : [ "AssetName" ],
        "type" : "object",
        "properties" : {
          "SshKeyToInstall" : {
            "$ref" : "#/components/schemas/AccountSshKey"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset to test the connection with"
          },
          "DomainName" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The domain to test directory asset connection against. Forest root will be used if null.",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Database ID of platform type / version",
            "format" : "int32",
            "nullable" : true
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "ExtendedLogging" : {
            "type" : "boolean",
            "description" : "Whether to enable extended logging for the task",
            "default" : false
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false
      },
      "AssetLdapSchema" : {
        "type" : "object",
        "properties" : {
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserAssetSchemaProperties"
          },
          "GroupProperties" : {
            "$ref" : "#/components/schemas/GroupAssetSchemaProperties"
          },
          "ComputerProperties" : {
            "$ref" : "#/components/schemas/ComputerSchemaProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Directory property mappings used when importing and synchronizing entities",
        "example" : {
          "UserProperties" : {
            "AltLoginNameAttribute" : "AltLoginNameAttribute",
            "UserNameAttribute" : "UserNameAttribute",
            "DescriptionAttribute" : "DescriptionAttribute",
            "UserClassType" : [ "UserClassType", "UserClassType" ],
            "PasswordAttribute" : "PasswordAttribute",
            "MemberOfAttribute" : "MemberOfAttribute"
          },
          "ComputerProperties" : {
            "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
            "NetworkAddressAttribute" : "NetworkAddressAttribute",
            "DescriptionAttribute" : "DescriptionAttribute",
            "OperatingSystemAttribute" : "OperatingSystemAttribute",
            "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
            "NameAttribute" : "NameAttribute",
            "MemberOfAttribute" : "MemberOfAttribute"
          },
          "GroupProperties" : {
            "MemberAttribute" : "MemberAttribute",
            "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
            "NameAttribute" : "NameAttribute"
          }
        }
      },
      "AssetPartition" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the AssetPartition",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of the partition"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the partition",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ManagedBy" : {
            "type" : "array",
            "description" : "List of Identities that own this partition",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "DefaultProfileId" : {
            "type" : "integer",
            "description" : "Default profile for all assets in this partition",
            "format" : "int32"
          },
          "DefaultProfileName" : {
            "type" : "string",
            "description" : "Name of the default profile for this partition (Read-only)",
            "nullable" : true
          },
          "DefaultSshKeyProfileId" : {
            "type" : "integer",
            "description" : "Default SSH key profile for all assets in this partition",
            "format" : "int32",
            "nullable" : true
          },
          "DefaultSshKeyProfileName" : {
            "type" : "string",
            "description" : "Name of the default SSH key profile for this partition (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a collection of assets and accounts along with management configuratino",
        "example" : {
          "CreatedByUserId" : 6,
          "Description" : "Description",
          "ManagedBy" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ],
          "DefaultProfileName" : "DefaultProfileName",
          "DefaultSshKeyProfileId" : 5,
          "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "DefaultProfileId" : 1,
          "Id" : 0,
          "Name" : "Name"
        }
      },
      "AssetPasswordProfileProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of profile explicitly assigned to this asset",
            "format" : "int32",
            "nullable" : true,
            "default" : -1
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the profile explicitly assigned to this asset (Read-only)",
            "nullable" : true
          },
          "EffectiveId" : {
            "type" : "integer",
            "description" : "Database ID of the profile to be used by this asset. If Id is null this is inherited from the partition it belongs to (Read-only)",
            "format" : "int32"
          },
          "EffectiveName" : {
            "type" : "string",
            "description" : "Name of the profile profile to be used by this asset. If Name is null this is inherited from the partition it belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Profile information for assets",
        "example" : {
          "Id" : 8,
          "EffectiveName" : "EffectiveName",
          "EffectiveId" : 9,
          "Name" : "Name"
        }
      },
      "AssetPlatform" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the platform version (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformFamily" : {
            "$ref" : "#/components/schemas/PlatformFamily"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name for the platform (Read-only)",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the platform (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of the platform (Read-only)",
            "nullable" : true
          },
          "Version" : {
            "type" : "string",
            "description" : "Version of platform",
            "nullable" : true
          },
          "Architecture" : {
            "type" : "string",
            "description" : "Architecture of platform",
            "nullable" : true
          },
          "DeviceClass" : {
            "$ref" : "#/components/schemas/DeviceClass"
          },
          "IsAcctNameCaseSensitive" : {
            "type" : "boolean",
            "description" : "Does the platform require case sensitive account names? (Read-only)"
          },
          "LicenseClass" : {
            "$ref" : "#/components/schemas/LicenseClass"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "If system owned then this platform cannot be modified or deleted (Read-only)"
          },
          "SupportedOperations" : {
            "type" : "array",
            "description" : "Operations this custom platform supports (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskNames"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/PlatformConnectionProperties"
          },
          "PasswordFeatureProperties" : {
            "$ref" : "#/components/schemas/PlatformPasswordFeatureProperties"
          },
          "SessionFeatureProperties" : {
            "$ref" : "#/components/schemas/PlatformSessionFeatureProperties"
          },
          "CustomScriptProperties" : {
            "$ref" : "#/components/schemas/PlatformCustomScriptProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a set of platform specific properties for an asset",
        "example" : {
          "Description" : "Description",
          "Architecture" : "Architecture",
          "DeviceClass" : "Unknown",
          "ConnectionProperties" : {
            "SupportsSslCertificateVerification" : true,
            "SupportsNamedPipeForServiceAccountConnection" : true,
            "SupportsPasswordAuthentication" : true,
            "SupportsSshKeyAuthentication" : true,
            "SupportsServiceName" : true,
            "SupportsAccessKeyAuthentication" : true,
            "SupportsLocalhostPasswordAuthentication" : true,
            "RequiresDistinguishedName" : true,
            "SupportsInstance" : true,
            "SupportsOraclePrivileges" : true,
            "SupportsDirectorySync" : true,
            "SupportsClientId" : true,
            "DefaultPort" : 6,
            "SupportsDirectoryPasswordAuthentication" : true,
            "SupportsWorkstationId" : true,
            "SupportsTimeout" : true,
            "SupportsPrivilegedAccount" : true,
            "SupportsDirectoryAssetDiscovery" : true,
            "SupportsLdap" : true,
            "SupportsPrivilegeElevationCommand" : true,
            "SupportsSslEncryption" : true,
            "SupportsStarlingConnectAuthentication" : true,
            "SupportsAccountPasswordAuthentication" : true,
            "SupportsSshTransport" : true,
            "SupportsTopSecretInterval" : true,
            "DefaultSslPort" : 7,
            "SupportsSslThumbprint" : true,
            "AllowCustomPort" : true,
            "SupportsEnablePassword" : true,
            "PrivilegedAccountName" : "PrivilegedAccountName",
            "SupportsTacacsSecret" : true
          },
          "IsAcctNameCaseSensitive" : true,
          "PasswordFeatureProperties" : {
            "SupportsPasswordManagement" : true,
            "SupportsSshKeyManagement" : true,
            "RequireNetworkAddress" : true,
            "SupportsDependentSystemTasks" : true,
            "AllowRequireCurrentPassword" : true,
            "SupportsSuspendRestoreAccount" : true,
            "SupportsAccountDiscovery" : true,
            "SupportsServiceDiscovery" : true,
            "SupportsUsePasswordHash" : true
          },
          "LicenseClass" : null,
          "CustomScriptProperties" : {
            "Parameters" : [ {
              "DefaultValue" : "DefaultValue",
              "Type" : "String",
              "Description" : "Description",
              "TaskName" : null,
              "Name" : "Name"
            }, {
              "DefaultValue" : "DefaultValue",
              "Type" : "String",
              "Description" : "Description",
              "TaskName" : null,
              "Name" : "Name"
            } ],
            "HasScript" : true
          },
          "Name" : "Name",
          "Version" : "Version",
          "SupportedOperations" : [ "Unknown", "Unknown" ],
          "SessionFeatureProperties" : {
            "DefaultRemoteDesktopSessionPort" : 4,
            "DefaultTelnetSessionPort" : 5,
            "SupportsSessionManagement" : true,
            "DefaultSshSessionPort" : 1
          },
          "PlatformFamily" : "None",
          "DisplayName" : "DisplayName",
          "Id" : 1,
          "PlatformType" : "Unknown",
          "IsSystemOwned" : true
        }
      },
      "AssetPolicy" : {
        "type" : "object",
        "properties" : {
          "PolicyId" : {
            "type" : "integer",
            "description" : "Database ID of the policy the account belongs to",
            "format" : "int32",
            "x-key" : true
          },
          "PolicyName" : {
            "type" : "string",
            "description" : "Name of the policy the account belongs to",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "Database ID of the role the policy belongs to",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of the role the policy belongs to",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the account",
            "format" : "int32",
            "x-key" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the account",
            "nullable" : true
          },
          "PolicyAccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts in the policy",
            "format" : "int32"
          },
          "PolicyAccountGroupCount" : {
            "type" : "integer",
            "description" : "Number of account groups in the policy",
            "format" : "int32"
          },
          "PolicyAssetCount" : {
            "type" : "integer",
            "description" : "Number of assets in the policy",
            "format" : "int32"
          },
          "PolicyAssetGroupCount" : {
            "type" : "integer",
            "description" : "Number of asset groups in the policy",
            "format" : "int32"
          },
          "Membership" : {
            "type" : "array",
            "description" : "How this policy membership was explicitly granted (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetPolicyMembership"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a policy that an asset belongs to plus how that membership was granted",
        "example" : {
          "AccessRequestType" : "Password",
          "PolicyAccountCount" : 5,
          "RoleName" : "RoleName",
          "PolicyAccountGroupCount" : 5,
          "PolicyName" : "PolicyName",
          "PolicyAssetCount" : 2,
          "Membership" : [ {
            "PolicyMemberIsAccountGroup" : true,
            "PolicyMemberIsAssetGroup" : true,
            "PolicyMemberId" : 2,
            "PolicyMemberName" : "PolicyMemberName",
            "AssetId" : 3,
            "PolicyId" : 9
          }, {
            "PolicyMemberIsAccountGroup" : true,
            "PolicyMemberIsAssetGroup" : true,
            "PolicyMemberId" : 2,
            "PolicyMemberName" : "PolicyMemberName",
            "AssetId" : 3,
            "PolicyId" : 9
          } ],
          "RoleId" : 6,
          "AssetId" : 1,
          "PolicyAssetGroupCount" : 7,
          "PolicyId" : 0,
          "AssetName" : "AssetName"
        }
      },
      "AssetPolicyMembership" : {
        "type" : "object",
        "properties" : {
          "PolicyId" : {
            "type" : "integer",
            "description" : "Database ID of the policy",
            "format" : "int32",
            "x-key" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the account that is managed by the policy",
            "format" : "int32"
          },
          "PolicyMemberId" : {
            "type" : "integer",
            "description" : "Database ID of the policy member that manages the account",
            "format" : "int32"
          },
          "PolicyMemberName" : {
            "type" : "string",
            "description" : "Name of the policy member",
            "nullable" : true
          },
          "PolicyMemberIsAssetGroup" : {
            "type" : "boolean",
            "description" : "Whether the policy member is an asset or an asset group"
          },
          "PolicyMemberIsAccountGroup" : {
            "type" : "boolean",
            "description" : "Whether the policy member is an asset or an account group"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a member of a policy",
        "example" : {
          "PolicyMemberIsAccountGroup" : true,
          "PolicyMemberIsAssetGroup" : true,
          "PolicyMemberId" : 2,
          "PolicyMemberName" : "PolicyMemberName",
          "AssetId" : 3,
          "PolicyId" : 9
        }
      },
      "AssetSchemaParameters" : {
        "type" : "object",
        "properties" : {
          "DirectoryId" : {
            "type" : "integer",
            "description" : "Use service account credentials from specified directory provider",
            "format" : "int32",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "The network address of the server the directory resides on (not required for Active Directory)",
            "nullable" : true
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Credential parameters for directory schema discovery"
      },
      "AssetSessionAccessProperties" : {
        "type" : "object",
        "properties" : {
          "AllowSessionRequests" : {
            "type" : "boolean",
            "description" : "Whether to allow session requests to be made to this asset using linked or policy-specific accounts",
            "default" : true
          },
          "SshSessionPort" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port for SSH sessions",
            "format" : "int32",
            "nullable" : true
          },
          "RemoteDesktopSessionPort" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port for Remote Desktop sessions",
            "format" : "int32",
            "nullable" : true
          },
          "TelnetSessionPort" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port for Telnet sessions",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "RemoteDesktopSessionPort" : 21975,
          "AllowSessionRequests" : true,
          "TelnetSessionPort" : 20275,
          "SshSessionPort" : 43935
        }
      },
      "AssetSshHostKey" : {
        "type" : "object",
        "properties" : {
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH host key (Read-only)",
            "nullable" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH host key (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an SSH Host Key used to identify assets",
        "example" : {
          "Fingerprint" : "Fingerprint",
          "SshHostKey" : "SshHostKey",
          "FingerprintSha256" : "FingerprintSha256"
        }
      },
      "AssetSshKeyProfileProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of SSH key profile explicitly assigned to this asset",
            "format" : "int32",
            "nullable" : true,
            "default" : -1
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the SSH Key profile explicitly assigned to this asset (Read-only)",
            "nullable" : true
          },
          "EffectiveId" : {
            "type" : "integer",
            "description" : "Database ID of the SSH Key profile to be used by this asset. If Id is null this is inherited from the partition it belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "EffectiveName" : {
            "type" : "string",
            "description" : "Name of the SSH Key profile profile to be used by this asset. If Name is null this is inherited from the partition it belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "SSH Key Profile for assets",
        "example" : {
          "Id" : 6,
          "EffectiveName" : "EffectiveName",
          "EffectiveId" : 3,
          "Name" : "Name"
        }
      },
      "AssetTaskNames" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "TestConnection", "UpdateDependentAsset", "DiscoverAccounts", "DiscoverServices" ]
      },
      "AssetTaskProperties" : {
        "type" : "object",
        "properties" : {
          "HasAssetTaskFailure" : {
            "type" : "boolean",
            "description" : "Whether this asset has any platform task failures (Read-only)"
          },
          "LastAccountDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last account discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessAccountDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful account discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureAccountDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed account discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedAccountDiscoveryAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed account discovery attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextAccountDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the next account discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastAccountDiscoveryTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last account discovery (Read-only)",
            "nullable" : true
          },
          "LastServiceDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last service discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessServiceDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful service discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureServiceDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed service discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedServiceDiscoveryAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed service discovery attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextServiceDiscoveryDate" : {
            "type" : "string",
            "description" : "The date/time of the next service discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastServiceDiscoveryTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last service discovery (Read-only)",
            "nullable" : true
          },
          "LastTestConnectionDate" : {
            "type" : "string",
            "description" : "The date/time of the test connection (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessTestConnectionDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful test connection (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureTestConnectionDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed test connnection (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedTestConnectionAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed test connection attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextTestConnectionDate" : {
            "type" : "string",
            "description" : "The date/time of the next test connection, if this Service is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastTestConnectionTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last test connection (Read-only)",
            "nullable" : true
          },
          "LastDependentServiceUpdateDate" : {
            "type" : "string",
            "description" : "The date/time of the dependent service update (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessDependentServiceUpdateDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful dependent service update (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureDependentServiceUpdateDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed dependent service update (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedDependentServiceUpdateAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed dependent service update attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextDependentServiceUpdateDate" : {
            "type" : "string",
            "description" : "The date/time of the next dependent service update, if this Service is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastDependentServiceUpdateTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last dependent service update (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Task information for an asset",
        "example" : {
          "LastFailureDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
          "NextDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedAccountDiscoveryAttempts" : 7,
          "FailedTestConnectionAttempts" : 3,
          "LastDependentServiceUpdateTaskId" : "LastDependentServiceUpdateTaskId",
          "LastSuccessDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
          "HasAssetTaskFailure" : true,
          "LastSuccessAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastAccountDiscoveryTaskId" : "LastAccountDiscoveryTaskId",
          "LastSuccessTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
          "LastServiceDiscoveryTaskId" : "LastServiceDiscoveryTaskId",
          "LastFailureServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "NextTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
          "NextServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
          "LastAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastTestConnectionDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedServiceDiscoveryAttempts" : 9,
          "LastTestConnectionTaskId" : "LastTestConnectionTaskId",
          "FailedDependentServiceUpdateAttempts" : 2,
          "NextAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastDependentServiceUpdateDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuccessServiceDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureAccountDiscoveryDate" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "AssetTemplate" : {
        "type" : "object",
        "properties" : {
          "PasswordProfile" : {
            "$ref" : "#/components/schemas/AssetPasswordProfileProperties"
          },
          "SshKeyProfile" : {
            "$ref" : "#/components/schemas/AssetSshKeyProfileProperties"
          },
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "Account discovery schedule to assign to discovered assets",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of the Account discovery schedule to assign to discovered assets (Read-only)",
            "nullable" : true
          },
          "ManagedNetworkId" : {
            "type" : "integer",
            "description" : "Database ID of the managed network this asset is explicitly assigned to. If null then \r\nmanaged network will be calculated dynamically.",
            "format" : "int32",
            "nullable" : true
          },
          "ManagedNetworkName" : {
            "type" : "string",
            "description" : "Display name managed network (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Platform type to assign to assets discovered by this rule.\r\nIf null then the platform will be derived from discovered properties.",
            "format" : "int32",
            "nullable" : true
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformFamily" : {
            "$ref" : "#/components/schemas/PlatformFamily"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display name of assigned platform (Read-only)",
            "nullable" : true
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "SessionAccessProperties" : {
            "$ref" : "#/components/schemas/AssetSessionAccessProperties"
          },
          "Tags" : {
            "type" : "array",
            "description" : "The tags to be associated with the asset",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Asset template for discovered assets",
        "example" : {
          "AccountDiscoveryScheduleId" : 0,
          "ManagedNetworkName" : "ManagedNetworkName",
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "SessionAccessProperties" : {
            "RemoteDesktopSessionPort" : 21975,
            "AllowSessionRequests" : true,
            "TelnetSessionPort" : 20275,
            "SshSessionPort" : 43935
          },
          "PasswordProfile" : {
            "Id" : 8,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 9,
            "Name" : "Name"
          },
          "PlatformDisplayName" : "PlatformDisplayName",
          "ManagedNetworkId" : 6,
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "PlatformFamily" : "None",
          "SshKeyProfile" : {
            "Id" : 6,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 3,
            "Name" : "Name"
          },
          "PlatformId" : 1,
          "PlatformType" : "Unknown",
          "Tags" : [ {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "AdminAssigned" : true,
            "Id" : 1,
            "Name" : "Name"
          } ]
        }
      },
      "AssetTestConnectionParameters" : {
        "required" : [ "AssetName" ],
        "type" : "object",
        "properties" : {
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset to test the connection with"
          },
          "DomainName" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The domain to test directory asset connection against. Forest root will be used if null.",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Database ID of platform type / version",
            "format" : "int32",
            "nullable" : true
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "ExtendedLogging" : {
            "type" : "boolean",
            "description" : "Whether to enable extended logging for the task",
            "default" : false
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false
      },
      "AssetType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "NotSpecified", "Asset", "Directory" ]
      },
      "AuditLogAccessRequestType" : {
        "type" : "string",
        "description" : "Audit log access request types",
        "format" : "string",
        "enum" : [ "Requests", "Activities", "Sessions" ]
      },
      "AuditLogCategory" : {
        "type" : "string",
        "description" : "Categories of information provided by the ActivityLog",
        "format" : "string",
        "enum" : [ "Unknown", "Appliance", "AccessRequestActivity", "Login", "ObjectChange", "Password", "AssetDiscovery", "AccountDiscovery", "Patch", "License", "AccessRequestSessions", "Archive", "ServiceDiscovery", "DirectorySync", "SshKeyDiscovery" ]
      },
      "AuditLogDiscoveryType" : {
        "type" : "string",
        "description" : "Audit log access request types",
        "format" : "string",
        "enum" : [ "Accounts", "Assets", "Services", "SshKeys" ]
      },
      "AuditLogMaintenance" : {
        "type" : "object",
        "properties" : {
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run",
            "nullable" : true,
            "default" : "UTC"
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true,
            "default" : "(UTC) Coordinated Universal Time"
          },
          "DayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run. Default is midnight.",
            "format" : "int32",
            "default" : 0
          },
          "DaysToRetainLogs" : {
            "maximum" : 2147483647,
            "minimum" : 30,
            "type" : "integer",
            "description" : "How long to retain audit logs before deletion. Minimum is 30 days. Default is 365 days.",
            "format" : "int32",
            "default" : 365
          },
          "PurgeArchiveAuditLogs" : {
            "type" : "boolean",
            "description" : "Specify true if audit logs older than DaysToRetainLogs should be purged. Default is false.\r\nAudit logs will only be archived before purge if an archive server is configured.",
            "default" : false
          },
          "ArchiveServerId" : {
            "type" : "integer",
            "description" : "Database ID of archive server. Must be configured to archive audit logs before purge.",
            "format" : "int32",
            "nullable" : true
          },
          "ArchiveServerName" : {
            "type" : "string",
            "description" : "Name of archive server (Read-only)",
            "nullable" : true
          },
          "NextScheduledMaintenance" : {
            "type" : "string",
            "description" : "The next time retention is scheduled to run",
            "format" : "date-time",
            "nullable" : true
          },
          "LastScheduledMaintenance" : {
            "type" : "string",
            "description" : "The last time retention was run",
            "format" : "date-time",
            "nullable" : true
          },
          "LastDataSync" : {
            "type" : "string",
            "description" : "The last time data sync completed",
            "format" : "date-time",
            "nullable" : true
          },
          "LastAuditLogSync" : {
            "type" : "string",
            "description" : "The last time audit log sync completed",
            "format" : "date-time",
            "nullable" : true
          },
          "LastScheduledRetentionSuccess" : {
            "type" : "string",
            "description" : "The last time retention was run and succeeded",
            "format" : "date-time",
            "nullable" : true
          },
          "LastScheduledRetentionFailure" : {
            "type" : "string",
            "description" : "The last time retention was run and failed",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration for data and audit log archive, purge and repair.",
        "example" : {
          "DayOfWeek" : "Sunday",
          "StartHour" : 1,
          "ArchiveServerId" : 1,
          "LastAuditLogSync" : "2000-01-23T04:56:07.000+00:00",
          "NextScheduledMaintenance" : "2000-01-23T04:56:07.000+00:00",
          "LastScheduledRetentionFailure" : "2000-01-23T04:56:07.000+00:00",
          "ArchiveServerName" : "ArchiveServerName",
          "TimeZoneDisplayName" : "(UTC) Coordinated Universal Time",
          "LastScheduledRetentionSuccess" : "2000-01-23T04:56:07.000+00:00",
          "DaysToRetainLogs" : 1294386370,
          "PurgeArchiveAuditLogs" : false,
          "LastScheduledMaintenance" : "2000-01-23T04:56:07.000+00:00",
          "TimeZoneId" : "UTC",
          "LastDataSync" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "AuditLogStreamService" : {
        "type" : "object",
        "properties" : {
          "Enabled" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Enabled" : true
        }
      },
      "AuditLogType" : {
        "type" : "string",
        "description" : "Type of audit log",
        "format" : "string",
        "enum" : [ "Logins", "AccessRequests", "Licenses", "Patches", "ObjectChanges", "Passwords", "Discovery", "Archives", "Appliances", "Search", "Retention", "PlatformScripts" ]
      },
      "AuditSearchLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Database ID of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the activity occurred",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that performed the activity",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "Category" : {
            "$ref" : "#/components/schemas/AuditLogCategory"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "ErrorType" : {
            "$ref" : "#/components/schemas/AuthenticationErrorType"
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/ObjectType"
          },
          "ObjectId" : {
            "type" : "string",
            "description" : "ID of object",
            "nullable" : true
          },
          "ObjectName" : {
            "type" : "string",
            "description" : "Name of object",
            "nullable" : true
          },
          "RequestId" : {
            "type" : "string",
            "description" : "Access request ID",
            "nullable" : true
          },
          "SessionId" : {
            "type" : "integer",
            "description" : "Access request session ID",
            "format" : "int32",
            "nullable" : true
          },
          "RecordingProperties" : {
            "$ref" : "#/components/schemas/SessionRecordingProperties"
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "RequesterId" : {
            "type" : "integer",
            "description" : "Requester ID",
            "format" : "int32",
            "nullable" : true
          },
          "RequesterName" : {
            "type" : "string",
            "description" : "Requester name",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Account ID",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Account name",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Account domain name",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Asset ID",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Asset name",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Asset network address",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Asset Partition ID",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Asset Partition name",
            "nullable" : true
          },
          "TaskName" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "LicenseType" : {
            "$ref" : "#/components/schemas/LicensableModule"
          },
          "SubmittedDate" : {
            "type" : "string",
            "description" : "Request submission date",
            "format" : "date-time",
            "nullable" : true
          },
          "Data" : {
            "type" : "string",
            "description" : "Supplemental data associated with the event, e.g., session commands",
            "nullable" : true
          },
          "SessionSpsNodeIpAddress" : {
            "type" : "string",
            "description" : "Session node IpAddress that serves the session request.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "An action/activity performed by a user",
        "example" : {
          "AccessRequestType" : "Password",
          "ApplianceName" : "ApplianceName",
          "Category" : "Unknown",
          "AccountId" : 5,
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "SubmittedDate" : "2000-01-23T04:56:07.000+00:00",
          "AccountDomainName" : "AccountDomainName",
          "SessionSpsNodeIpAddress" : "SessionSpsNodeIpAddress",
          "LicenseType" : "PasswordManagement",
          "AssetPartitionName" : "AssetPartitionName",
          "ObjectType" : "NotSpecified",
          "ErrorType" : "NoError",
          "RequesterName" : "RequesterName",
          "ApplianceId" : "ApplianceId",
          "SessionId" : 6,
          "AssetPartitionId" : 2,
          "RequestId" : "RequestId",
          "ObjectId" : "ObjectId",
          "RequesterId" : 1,
          "Data" : "Data",
          "EventName" : "Unknown",
          "AssetName" : "AssetName",
          "ObjectName" : "ObjectName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "TaskName" : "Unknown",
          "UserId" : 0,
          "Id" : "Id",
          "RecordingProperties" : {
            "HasRecording" : true,
            "RecordingId" : "RecordingId",
            "SpsApplianceId" : 7,
            "SessionResult" : "SessionResult",
            "IsLive" : true,
            "DownloadUrl" : "DownloadUrl"
          },
          "AssetId" : 5,
          "AccountName" : "AccountName"
        }
      },
      "AuthenticationErrorType" : {
        "type" : "string",
        "description" : "Types of authentication failures",
        "format" : "string",
        "enum" : [ "NoError", "UserIsDisabled", "BadPassword", "UserIsLocked", "PasswordExpired", "AccessDenied", "UserIsUnknown", "InvalidToken", "ChangePassword" ]
      },
      "AuthenticationProvider" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique Id of authentication provider (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the authentication provider (Read-only)",
            "nullable" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "IdentityProviderId" : {
            "type" : "integer",
            "description" : "Unique ID of related identity provider (Read-only)",
            "format" : "int32"
          },
          "RstsProviderId" : {
            "type" : "string",
            "description" : "RSTS provider identifier (Read-only)",
            "nullable" : true
          },
          "RstsProviderScope" : {
            "type" : "string",
            "description" : "RSTS provider scope (Read-only)",
            "nullable" : true
          },
          "ForceAsDefault" : {
            "type" : "boolean",
            "description" : "When set to {true} on a provider, the login page will not display a drop down list\r\n            of all available providers. Instead, the end user will be defaulted in to using this provider.\r\n            Only one provider can be marked with {true} at a time. When updating a provider and setting\r\n            this to {true}, this will be automatically set to {false} on all other providers."
          }
        },
        "additionalProperties" : false,
        "description" : "Available configurations for authentication",
        "example" : {
          "RstsProviderId" : "RstsProviderId",
          "IdentityProviderId" : 6,
          "RstsProviderScope" : "RstsProviderScope",
          "TypeReferenceName" : "Unknown",
          "Id" : 0,
          "ForceAsDefault" : true,
          "Name" : "Name"
        }
      },
      "AuthnContextComparison" : {
        "type" : "string",
        "description" : "From Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0 – Errata Composite\r\n            section 3.3.2.2.1. Specifies the comparison method used to evaluate the requested context\r\n            classes or statements, one of \"exact\", \"minimum\", \"maximum\", or \"better\".",
        "format" : "string",
        "enum" : [ "Exact", "Minimum", "Maximum", "Better" ]
      },
      "BackupProtectionSettings" : {
        "type" : "object",
        "properties" : {
          "BackupPasswordIdentifier" : {
            "type" : "string",
            "description" : "System set guid string when Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionSettings.BackupProtectionType is Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionType.Password",
            "nullable" : true
          },
          "BackupProtectionType" : {
            "$ref" : "#/components/schemas/BackupProtectionType"
          },
          "BackupPassword" : {
            "type" : "string",
            "description" : "User defined password when Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionSettings.BackupProtectionType is Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionType.Password",
            "nullable" : true
          },
          "BackupGpgPublicKeyName" : {
            "type" : "string",
            "description" : "User specified GPG public key name when Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionSettings.BackupProtectionType is Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionType.Gpg",
            "nullable" : true
          },
          "BackupGpgPublicKeyData" : {
            "type" : "string",
            "description" : "User specified GPG public key data when Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionSettings.BackupProtectionType is Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionType.Gpg",
            "nullable" : true
          },
          "BackupGpgPublicKeyFingerprint" : {
            "type" : "string",
            "description" : "User specified GPG public key fingerprint when Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionSettings.BackupProtectionType is Pangaea.Data.Transfer.V3.BackupRestore.BackupProtectionType.Gpg",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "BackupGpgPublicKeyName" : "BackupGpgPublicKeyName",
          "BackupProtectionType" : "Appliance",
          "BackupGpgPublicKeyData" : "BackupGpgPublicKeyData",
          "BackupGpgPublicKeyFingerprint" : "BackupGpgPublicKeyFingerprint",
          "BackupPasswordIdentifier" : "BackupPasswordIdentifier",
          "BackupPassword" : "BackupPassword"
        }
      },
      "BackupProtectionType" : {
        "type" : "string",
        "description" : "Mutually exclusive, customer selected ways of protecting a backup.",
        "format" : "string",
        "enum" : [ "Appliance", "Password", "Gpg" ]
      },
      "BatchManageParameters" : {
        "type" : "object",
        "properties" : {
          "DiscoveredAccounts" : {
            "type" : "array",
            "description" : "The discovered accounts to manage",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredAssetAccount"
            }
          },
          "AccountTemplate" : {
            "$ref" : "#/components/schemas/AccountTemplate"
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters needed for request to manage a batch of accounts"
      },
      "CertificateType" : {
        "type" : "string",
        "description" : "How certificate may be used",
        "format" : "string",
        "enum" : [ "Unknown", "Ssl", "Trusted", "TimeStamping", "RdpSigning", "SessionRecording", "AuditLogSigning", "ClientAuthentication", "SyslogClient", "ClusterRoot", "SecureTokenService", "EmailClientAuthentication" ]
      },
      "ChangePasswordParameters" : {
        "required" : [ "NewPassword", "OldPassword" ],
        "type" : "object",
        "properties" : {
          "OldPassword" : {
            "type" : "string",
            "description" : "The current password"
          },
          "NewPassword" : {
            "type" : "string",
            "description" : "The password to set"
          }
        },
        "additionalProperties" : false,
        "description" : "Information needed to change the current user password"
      },
      "CloudAssistantStatus" : {
        "type" : "object",
        "properties" : {
          "Joined" : {
            "type" : "boolean"
          },
          "Enabled" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "SenderId" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Enabled" : true,
          "SenderId" : "SenderId",
          "Joined" : true
        }
      },
      "ClusterConfiguration" : {
        "type" : "object",
        "properties" : {
          "Members" : {
            "type" : "array",
            "description" : "A list of members to include in the cluster.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ClusterMember"
            }
          },
          "PrimaryId" : {
            "type" : "string",
            "description" : "The ID of the primary appliance.",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "ClusterConnectivityHealthDetail" : {
        "type" : "object",
        "properties" : {
          "Error" : {
            "type" : "string",
            "nullable" : true
          },
          "Status" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "ErrorCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ErrorDetail" : {
            "type" : "string",
            "nullable" : true
          },
          "NodeConnectivity" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NodeConnectivityHealth"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Status" : null,
          "ErrorDetail" : "ErrorDetail",
          "Error" : "Error",
          "ErrorCode" : 6,
          "NodeConnectivity" : [ {
            "MinLatency" : null,
            "AverageLatency" : null,
            "IsReachable" : true,
            "ApplianceId" : "ApplianceId",
            "MaxLatency" : null
          }, {
            "MinLatency" : null,
            "AverageLatency" : null,
            "IsReachable" : true,
            "ApplianceId" : "ApplianceId",
            "MaxLatency" : null
          } ]
        }
      },
      "ClusterMember" : {
        "type" : "object",
        "properties" : {
          "Health" : {
            "$ref" : "#/components/schemas/NodeHealth"
          },
          "Id" : {
            "type" : "string",
            "description" : "Unique Id of the cluster member",
            "nullable" : true,
            "x-key" : true
          },
          "IsLeader" : {
            "type" : "boolean",
            "description" : "Flag indicating whether the member is the cluster leader"
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the cluster member",
            "nullable" : true
          },
          "HostDnsSuffix" : {
            "type" : "string",
            "description" : "HostDnsSuffix of the cluster member",
            "nullable" : true
          },
          "Ipv4Address" : {
            "type" : "string",
            "description" : "The Ipv4 address of the cluster member",
            "nullable" : true
          },
          "Ipv6Address" : {
            "type" : "string",
            "description" : "The Ipv6 address of the cluster member",
            "nullable" : true
          },
          "SslCertificateThumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate used for SSL",
            "nullable" : true
          },
          "EnrolledSince" : {
            "type" : "string",
            "description" : "The timestamp when this member was enrolled in the cluster",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "HostDnsSuffix" : "HostDnsSuffix",
          "Health" : {
            "SessionsModule" : null,
            "ResourceUsage" : {
              "Status" : null,
              "ErrorDetail" : "ErrorDetail",
              "Error" : "Error",
              "NodeResourceHealth" : {
                "ProcessorCount" : 4,
                "ProcessorPercentUsed" : 7.386282,
                "MemoryPercentFree" : 3.6160767,
                "Temperatures" : [ {
                  "TemperatureCelsius" : 1.2315135,
                  "ZoneName" : "ZoneName",
                  "TemperatureFahrenheit" : 1.0246457,
                  "TemperatureKelvin" : 1.4894159
                }, {
                  "TemperatureCelsius" : 1.2315135,
                  "ZoneName" : "ZoneName",
                  "TemperatureFahrenheit" : 1.0246457,
                  "TemperatureKelvin" : 1.4894159
                } ],
                "MemoryFreeBytes" : 9,
                "MemoryTotalBytes" : 2,
                "DiskFreeBytes" : 5,
                "DiskPercentFree" : 2.302136,
                "DiskTotalBytes" : 7
              },
              "ErrorCode" : 5
            },
            "CheckDuration" : {
              "TotalMilliseconds" : 3.616076749251911,
              "Hours" : 5,
              "Days" : 5,
              "Seconds" : 9,
              "Milliseconds" : 2,
              "Minutes" : 7
            },
            "AuditLog" : {
              "Status" : "Unknown",
              "ErrorDetail" : "ErrorDetail",
              "Error" : "Error",
              "ErrorCode" : 0
            },
            "Name" : "Name",
            "NetworkInformation" : {
              "HostDnsSuffix" : "HostDnsSuffix",
              "LinkSpeedMbps" : 1,
              "LinkPresent" : true,
              "MacAddress" : "MacAddress",
              "Ipv6Address" : "Ipv6Address",
              "Ipv4Address" : "Ipv4Address"
            },
            "ClusterConnectivity" : {
              "Status" : null,
              "ErrorDetail" : "ErrorDetail",
              "Error" : "Error",
              "ErrorCode" : 6,
              "NodeConnectivity" : [ {
                "MinLatency" : null,
                "AverageLatency" : null,
                "IsReachable" : true,
                "ApplianceId" : "ApplianceId",
                "MaxLatency" : null
              }, {
                "MinLatency" : null,
                "AverageLatency" : null,
                "IsReachable" : true,
                "ApplianceId" : "ApplianceId",
                "MaxLatency" : null
              } ]
            },
            "ClusterCommunication" : null,
            "HardwareSecurityModule" : null,
            "SerialNumber" : "SerialNumber",
            "UpTime" : null,
            "Version" : {
              "Major" : 6,
              "Revision" : 1,
              "BuildDate" : "2000-01-23T04:56:07.000+00:00",
              "BuildPlatform" : "BuildPlatform",
              "Build" : 4,
              "RsmsVersion" : "RsmsVersion",
              "OsPatchLevel" : 5,
              "Minor" : 7,
              "BuildVariant" : "BuildVariant"
            },
            "State" : "Unknown",
            "AccessWorkflow" : null,
            "PolicyData" : null,
            "CheckDate" : "2000-01-23T04:56:07.000+00:00",
            "ApplianceId" : "ApplianceId"
          },
          "EnrolledSince" : "2000-01-23T04:56:07.000+00:00",
          "Id" : "Id",
          "IsLeader" : true,
          "SslCertificateThumbprint" : "SslCertificateThumbprint",
          "Ipv6Address" : "Ipv6Address",
          "Name" : "Name",
          "Ipv4Address" : "Ipv4Address"
        }
      },
      "ClusterOperation" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "None", "Enroll", "Remove", "Failover", "Reset", "Patch", "PatchDistribution", "UpdateIp", "AuditLogSync", "JoinSessionsModule", "AuditLogPurgeArchive" ]
      },
      "ClusterOperationNodeStatus" : {
        "type" : "object",
        "properties" : {
          "NodeId" : {
            "type" : "string",
            "description" : "Appliance ID",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "NodeId" : "NodeId"
        }
      },
      "ClusterOperationStatus" : {
        "type" : "object",
        "properties" : {
          "Operation" : {
            "$ref" : "#/components/schemas/ClusterOperation"
          },
          "OwnerId" : {
            "type" : "string",
            "description" : "Unique Id of the cluster member",
            "nullable" : true
          },
          "Started" : {
            "type" : "string",
            "description" : "The timestamp when this operation started",
            "format" : "date-time",
            "nullable" : true
          },
          "Nodes" : {
            "type" : "array",
            "description" : "Status for each node in the cluster",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ClusterOperationNodeStatus"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Started" : "2000-01-23T04:56:07.000+00:00",
          "OwnerId" : "OwnerId",
          "Operation" : "None",
          "Nodes" : [ {
            "NodeId" : "NodeId"
          }, {
            "NodeId" : "NodeId"
          } ]
        }
      },
      "ClusterPatchModel" : {
        "type" : "object",
        "properties" : {
          "StagingStatus" : {
            "$ref" : "#/components/schemas/PatchStagingStatus"
          },
          "Id" : {
            "type" : "string",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "Isleader" : {
            "type" : "boolean"
          },
          "Errors" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Warnings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "PatchVersion" : {
            "type" : "string",
            "nullable" : true
          },
          "TargetOsLevel" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "IsOsPatch" : {
            "type" : "boolean",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Errors" : [ "Errors", "Errors" ],
          "PatchVersion" : "PatchVersion",
          "IsOsPatch" : true,
          "NetworkAddress" : "NetworkAddress",
          "StagingStatus" : "None",
          "Isleader" : true,
          "Id" : "Id",
          "Warnings" : [ "Warnings", "Warnings" ],
          "TargetOsLevel" : 0,
          "Name" : "Name"
        }
      },
      "ClusterPatchPreconditionResult" : {
        "type" : "object",
        "properties" : {
          "ClusterResults" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PatchPreconditionResult"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Contains the Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult for each member in the cluster.",
        "example" : {
          "ClusterResults" : [ {
            "PatchVersion" : {
              "Major" : 6,
              "ServicePack" : 5,
              "Minor" : 1,
              "HotfixLevel" : 5
            },
            "Errors" : [ "Errors", "Errors" ],
            "IsOsPatch" : true,
            "ApplianceId" : "ApplianceId",
            "TargetOsLevel" : 0,
            "Warnings" : [ "Warnings", "Warnings" ]
          }, {
            "PatchVersion" : {
              "Major" : 6,
              "ServicePack" : 5,
              "Minor" : 1,
              "HotfixLevel" : 5
            },
            "Errors" : [ "Errors", "Errors" ],
            "IsOsPatch" : true,
            "ApplianceId" : "ApplianceId",
            "TargetOsLevel" : 0,
            "Warnings" : [ "Warnings", "Warnings" ]
          } ]
        }
      },
      "ComparisonOperator" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "EqualTo", "NotEqualTo", "StartsWith", "Contains", "DoesNotContain", "EndsWith", "RegexCompare", "IsTrue", "IsFalse" ]
      },
      "ComputerSchemaDescriptors" : {
        "type" : "object",
        "properties" : {
          "ComputerClassTypeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "NameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DescriptionAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "NetworkAddressAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "OperatingSystemAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "OperatingSystemVersionAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          }
        },
        "additionalProperties" : false,
        "description" : "Descriptors for computer schema properties",
        "example" : {
          "ComputerClassTypeDescriptor" : null,
          "NameAttributeDescriptor" : null,
          "OperatingSystemVersionAttributeDescriptor" : null,
          "DescriptionAttributeDescriptor" : null,
          "OperatingSystemAttributeDescriptor" : null,
          "NetworkAddressAttributeDescriptor" : null
        }
      },
      "ComputerSchemaProperties" : {
        "type" : "object",
        "properties" : {
          "ComputerClassType" : {
            "type" : "array",
            "description" : "LDAP objects that have all of the specified objectClass types will be treated as computers.\r\nThese objectClass types will also be used to validate the attributes mapped to computer properties.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "NameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of host name schema attribute",
            "nullable" : true
          },
          "DescriptionAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of description schema attribute",
            "nullable" : true
          },
          "NetworkAddressAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of host schema attribute",
            "nullable" : true
          },
          "OperatingSystemAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of host AD schema attribute",
            "nullable" : true
          },
          "OperatingSystemVersionAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of host schema attribute",
            "nullable" : true
          },
          "MemberOfAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Member of group schema attribute",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Directory attribute mappings for computers",
        "example" : {
          "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
          "NetworkAddressAttribute" : "NetworkAddressAttribute",
          "DescriptionAttribute" : "DescriptionAttribute",
          "OperatingSystemAttribute" : "OperatingSystemAttribute",
          "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
          "NameAttribute" : "NameAttribute",
          "MemberOfAttribute" : "MemberOfAttribute"
        }
      },
      "ConditionJoinType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "And", "Or" ]
      },
      "CustomPartitionDiscoverAccountsParameters" : {
        "required" : [ "AssetId", "Name" ],
        "type" : "object",
        "properties" : {
          "AssetId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Name" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Friendly name used to identify this rule"
          },
          "AutoManageDiscoveredAccounts" : {
            "type" : "boolean",
            "description" : "If selected, accounts found through discovery will be automatically taken under management."
          },
          "AccountTemplate" : {
            "$ref" : "#/components/schemas/AccountTemplate"
          },
          "UnixAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/UnixAccountDiscoveryProperties"
          },
          "WindowsAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/WindowsAccountDiscoveryProperties"
          },
          "DirectoryAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/DirectoryAccountDiscoveryProperties"
          },
          "StarlingConnectAccountDiscoveryProperties" : {
            "$ref" : "#/components/schemas/StarlingConnectAccountDiscoveryProperties"
          }
        },
        "additionalProperties" : false
      },
      "CustomScriptParameter" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "The name of the parameter",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Short explanation of the parameter",
            "nullable" : true
          },
          "DefaultValue" : {
            "type" : "string",
            "description" : "Default value of the parameter",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/CustomScriptParameterType"
          },
          "TaskName" : {
            "$ref" : "#/components/schemas/TaskNames"
          }
        },
        "additionalProperties" : false,
        "description" : "A parameters that should be provided to the custom platform script when invoked",
        "example" : {
          "DefaultValue" : "DefaultValue",
          "Type" : "String",
          "Description" : "Description",
          "TaskName" : null,
          "Name" : "Name"
        }
      },
      "CustomScriptParameterType" : {
        "type" : "string",
        "description" : "The type of the parameter - used for validation",
        "format" : "string",
        "enum" : [ "String", "Integer", "Boolean", "Secret", "Array", "Object" ]
      },
      "DailyMessage" : {
        "type" : "object",
        "properties" : {
          "UseRss" : {
            "type" : "boolean",
            "description" : "Flag for whether to use the Address field to access an RSS feed [true] or to access the Subject and Message fields from settings [false]"
          },
          "Address" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "Web Address of an RSS feed.",
            "nullable" : true
          },
          "Subject" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "Subject line of a Daily Message.",
            "nullable" : true
          },
          "Message" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "Content of a Daily Message.",
            "nullable" : true
          },
          "UpdatedDate" : {
            "type" : "string",
            "description" : "Date this entity was updated (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "UpdatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that updated this entity (Read-only)",
            "format" : "int32"
          },
          "UpdatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that updated this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a Message of the Day.",
        "example" : {
          "UseRss" : true,
          "Address" : "Address",
          "Message" : "Message",
          "UpdatedDate" : "2000-01-23T04:56:07.000+00:00",
          "Subject" : "Subject",
          "UpdatedByUserId" : 0,
          "UpdatedByUserDisplayName" : "UpdatedByUserDisplayName"
        }
      },
      "DateRangeType" : {
        "type" : "string",
        "description" : "Type of date range",
        "format" : "string",
        "enum" : [ "None", "Last24Hours", "Last7Days", "Last30Days", "Last60Days", "Last90Days", "Custom" ]
      },
      "DateTasks" : {
        "type" : "object",
        "properties" : {
          "TotalDateTaskCount" : {
            "type" : "integer",
            "description" : "Sum of all TaskSummary.Count for this summary interval",
            "format" : "int32"
          },
          "SummaryDateTime" : {
            "type" : "string",
            "description" : "Beginning of interval being summarized",
            "format" : "date-time"
          },
          "Counts" : {
            "type" : "array",
            "description" : "List of task names and counts for this summary interval",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskSummary"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "The count of all tasks occurring in a given summary interval",
        "example" : {
          "TotalDateTaskCount" : 6,
          "Counts" : [ {
            "Count" : 1,
            "Name" : "Unknown"
          }, {
            "Count" : 1,
            "Name" : "Unknown"
          } ],
          "SummaryDateTime" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "DateTimeInterval" : {
        "type" : "object",
        "properties" : {
          "Begin" : {
            "type" : "string",
            "description" : "The inclusive lower bound of the interval",
            "format" : "date-time"
          },
          "End" : {
            "type" : "string",
            "description" : "The exclusive upper bound of the interval",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents two datetimes - a begin and an end. The interval includes the begin, and excludes the end.",
        "example" : {
          "Begin" : "2000-01-23T04:56:07.000+00:00",
          "End" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "DayOfWeek" : {
        "type" : "string",
        "description" : "Days of the week",
        "format" : "string",
        "enum" : [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ]
      },
      "DefaultAssetLdapSchema" : {
        "type" : "object",
        "properties" : {
          "DefaultSchema" : {
            "$ref" : "#/components/schemas/AssetLdapSchema"
          },
          "UserSchemaDescriptors" : {
            "$ref" : "#/components/schemas/UserAssetSchemaDescriptors"
          },
          "ComputerSchemaDescriptors" : {
            "$ref" : "#/components/schemas/ComputerSchemaDescriptors"
          },
          "GroupSchemaDescriptors" : {
            "$ref" : "#/components/schemas/GroupAssetSchemaDescriptors"
          }
        },
        "additionalProperties" : false,
        "description" : "Default ldap schema for a directory",
        "example" : {
          "DefaultSchema" : {
            "UserProperties" : {
              "AltLoginNameAttribute" : "AltLoginNameAttribute",
              "UserNameAttribute" : "UserNameAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "UserClassType" : [ "UserClassType", "UserClassType" ],
              "PasswordAttribute" : "PasswordAttribute",
              "MemberOfAttribute" : "MemberOfAttribute"
            },
            "ComputerProperties" : {
              "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
              "NetworkAddressAttribute" : "NetworkAddressAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "OperatingSystemAttribute" : "OperatingSystemAttribute",
              "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
              "NameAttribute" : "NameAttribute",
              "MemberOfAttribute" : "MemberOfAttribute"
            },
            "GroupProperties" : {
              "MemberAttribute" : "MemberAttribute",
              "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
              "NameAttribute" : "NameAttribute"
            }
          },
          "UserSchemaDescriptors" : {
            "MemberOfAttributeDescriptor" : null,
            "PasswordAttributeDescriptor" : null,
            "DescriptionAttributeDescriptor" : null,
            "UserNameAttributeDescriptor" : null,
            "AltLoginNameAttributeDescriptor" : null,
            "UserClassTypeDescriptor" : {
              "ReadOnly" : true,
              "Required" : true
            }
          },
          "ComputerSchemaDescriptors" : {
            "ComputerClassTypeDescriptor" : null,
            "NameAttributeDescriptor" : null,
            "OperatingSystemVersionAttributeDescriptor" : null,
            "DescriptionAttributeDescriptor" : null,
            "OperatingSystemAttributeDescriptor" : null,
            "NetworkAddressAttributeDescriptor" : null
          },
          "GroupSchemaDescriptors" : {
            "MemberAttributeDescriptor" : null,
            "NameAttributeDescriptor" : null,
            "GroupClassTypeDescriptor" : null
          }
        }
      },
      "DefaultProviderLdapSchema" : {
        "type" : "object",
        "properties" : {
          "DefaultSchema" : {
            "$ref" : "#/components/schemas/IdentityProviderLdapSchema"
          },
          "UserSchemaDescriptors" : {
            "$ref" : "#/components/schemas/UserProviderSchemaDescriptors"
          },
          "GroupSchemaDescriptors" : {
            "$ref" : "#/components/schemas/GroupSchemaDescriptors"
          }
        },
        "additionalProperties" : false,
        "description" : "Default ldap schema for a directory",
        "example" : {
          "DefaultSchema" : {
            "UserProperties" : {
              "DirectoryGroupSyncAttributeForManagedObjects" : "DirectoryGroupSyncAttributeForManagedObjects",
              "FirstNameAttribute" : "FirstNameAttribute",
              "DirectoryGroupSyncAttributeForExternalFederationAuthentication" : "DirectoryGroupSyncAttributeForExternalFederationAuthentication",
              "PhoneAttribute" : "PhoneAttribute",
              "DirectoryGroupSyncAttributeForRadiusAuthentication" : "DirectoryGroupSyncAttributeForRadiusAuthentication",
              "UserNameAttribute" : "UserNameAttribute",
              "MobileAttribute" : "MobileAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "LastNameAttribute" : "LastNameAttribute",
              "UserClassType" : [ "UserClassType", "UserClassType" ],
              "MailAttribute" : "MailAttribute"
            },
            "GroupProperties" : {
              "MemberAttribute" : "MemberAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
              "NameAttribute" : "NameAttribute"
            }
          },
          "UserSchemaDescriptors" : {
            "DirectoryGroupSyncAttributeForManagedObjectsDescriptor" : null,
            "DescriptionAttributeDescriptor" : null,
            "MobileAttributeDescriptor" : null,
            "MailAttributeDescriptor" : null,
            "PhoneAttributeDescriptor" : null,
            "UserNameAttributeDescriptor" : null,
            "FirstNameAttributeDescriptor" : null,
            "DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor" : null,
            "UserClassTypeDescriptor" : {
              "ReadOnly" : true,
              "Required" : true
            },
            "LastNameAttributeDescriptor" : null,
            "DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor" : null
          },
          "GroupSchemaDescriptors" : {
            "MemberAttributeDescriptor" : null,
            "NameAttributeDescriptor" : null,
            "DescriptionAttributeDescriptor" : null,
            "GroupClassTypeDescriptor" : null
          }
        }
      },
      "DeletedAsset" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of system (Read-only)",
            "format" : "int32"
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of the system",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Database ID of platform type / version",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display name platform (Read-only)",
            "nullable" : true
          },
          "IsDirectory" : {
            "type" : "boolean",
            "description" : "Whether this asset is a directory platform (Read-only)"
          },
          "ManagedNetworkId" : {
            "type" : "integer",
            "description" : "Database ID of the managed network this asset is explicitly assigned to. If null then \r\nmanaged network will be calculated dynamically.",
            "format" : "int32",
            "nullable" : true
          },
          "ManagedNetworkName" : {
            "type" : "string",
            "description" : "Name of the managed network (Read-only)",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "DeletedDate" : {
            "type" : "string",
            "description" : "Date this entity was deleted (Read-only)",
            "format" : "date-time"
          },
          "DeletedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that deleted this entity (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "DeletedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that deleted this entity (Read-only)",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the system. (Read-only for directories)",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of of the asset partition this asset belongs to",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to",
            "nullable" : true
          },
          "LicenseClass" : {
            "$ref" : "#/components/schemas/LicenseClass"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "DirectoryAssetProperties" : {
            "$ref" : "#/components/schemas/DirectoryAssetProperties"
          },
          "SessionAccessProperties" : {
            "$ref" : "#/components/schemas/AssetSessionAccessProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AssetPlatform"
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this asset and its accounts are disabled and prevented from running platform tasks"
          },
          "AssetDiscoveryJobId" : {
            "type" : "integer",
            "description" : "Database ID of asset discovery job that added this asset (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetDiscoveryJobName" : {
            "type" : "string",
            "description" : "Name of asset discovery job that added this asset (Read-only)",
            "nullable" : true
          },
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "Database ID of account discovery schedule assigned to this asset",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of account discovery schedule assigned to this asset (Read-only)",
            "nullable" : true
          },
          "AllowSessionRequests" : {
            "type" : "boolean",
            "description" : "Whether to allow session requests to be made to this asset using linked or policy-specific accounts"
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "PasswordProfile" : {
            "$ref" : "#/components/schemas/AssetPasswordProfileProperties"
          },
          "SshKeyProfile" : {
            "$ref" : "#/components/schemas/AssetSshKeyProfileProperties"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccountDiscoveryScheduleId" : 9,
          "Description" : "Description",
          "IsDirectory" : true,
          "Platform" : {
            "Description" : "Description",
            "Architecture" : "Architecture",
            "DeviceClass" : "Unknown",
            "ConnectionProperties" : {
              "SupportsSslCertificateVerification" : true,
              "SupportsNamedPipeForServiceAccountConnection" : true,
              "SupportsPasswordAuthentication" : true,
              "SupportsSshKeyAuthentication" : true,
              "SupportsServiceName" : true,
              "SupportsAccessKeyAuthentication" : true,
              "SupportsLocalhostPasswordAuthentication" : true,
              "RequiresDistinguishedName" : true,
              "SupportsInstance" : true,
              "SupportsOraclePrivileges" : true,
              "SupportsDirectorySync" : true,
              "SupportsClientId" : true,
              "DefaultPort" : 6,
              "SupportsDirectoryPasswordAuthentication" : true,
              "SupportsWorkstationId" : true,
              "SupportsTimeout" : true,
              "SupportsPrivilegedAccount" : true,
              "SupportsDirectoryAssetDiscovery" : true,
              "SupportsLdap" : true,
              "SupportsPrivilegeElevationCommand" : true,
              "SupportsSslEncryption" : true,
              "SupportsStarlingConnectAuthentication" : true,
              "SupportsAccountPasswordAuthentication" : true,
              "SupportsSshTransport" : true,
              "SupportsTopSecretInterval" : true,
              "DefaultSslPort" : 7,
              "SupportsSslThumbprint" : true,
              "AllowCustomPort" : true,
              "SupportsEnablePassword" : true,
              "PrivilegedAccountName" : "PrivilegedAccountName",
              "SupportsTacacsSecret" : true
            },
            "IsAcctNameCaseSensitive" : true,
            "PasswordFeatureProperties" : {
              "SupportsPasswordManagement" : true,
              "SupportsSshKeyManagement" : true,
              "RequireNetworkAddress" : true,
              "SupportsDependentSystemTasks" : true,
              "AllowRequireCurrentPassword" : true,
              "SupportsSuspendRestoreAccount" : true,
              "SupportsAccountDiscovery" : true,
              "SupportsServiceDiscovery" : true,
              "SupportsUsePasswordHash" : true
            },
            "LicenseClass" : null,
            "CustomScriptProperties" : {
              "Parameters" : [ {
                "DefaultValue" : "DefaultValue",
                "Type" : "String",
                "Description" : "Description",
                "TaskName" : null,
                "Name" : "Name"
              }, {
                "DefaultValue" : "DefaultValue",
                "Type" : "String",
                "Description" : "Description",
                "TaskName" : null,
                "Name" : "Name"
              } ],
              "HasScript" : true
            },
            "Name" : "Name",
            "Version" : "Version",
            "SupportedOperations" : [ "Unknown", "Unknown" ],
            "SessionFeatureProperties" : {
              "DefaultRemoteDesktopSessionPort" : 4,
              "DefaultTelnetSessionPort" : 5,
              "SupportsSessionManagement" : true,
              "DefaultSshSessionPort" : 1
            },
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 1,
            "PlatformType" : "Unknown",
            "IsSystemOwned" : true
          },
          "ManagedNetworkName" : "ManagedNetworkName",
          "LicenseClass" : "System",
          "Name" : "Name",
          "PasswordProfile" : {
            "Id" : 8,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 9,
            "Name" : "Name"
          },
          "AssetPartitionName" : "AssetPartitionName",
          "CreatedByUserId" : 5,
          "NetworkAddress" : "NetworkAddress",
          "ManagedNetworkId" : 1,
          "PlatformId" : 6,
          "Disabled" : true,
          "AssetPartitionId" : 2,
          "AssetDiscoveryJobId" : 7,
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "DirectoryAssetProperties" : {
            "FailedSyncAttempts" : 1,
            "LastDirectoryDeleteSyncTaskId" : "LastDirectoryDeleteSyncTaskId",
            "LastDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "DomainName" : "DomainName",
            "LastFailureSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "NextDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "ForestRootDomain" : "ForestRootDomain",
            "DomainControllers" : [ {
              "ServerType" : "DomainController",
              "IsWritable" : true,
              "NetworkAddress" : "NetworkAddress",
              "DomainName" : "DomainName"
            }, {
              "ServerType" : "DomainController",
              "IsWritable" : true,
              "NetworkAddress" : "NetworkAddress",
              "DomainName" : "DomainName"
            } ],
            "UsePasswordHash" : true,
            "SchemaProperties" : {
              "UserProperties" : {
                "AltLoginNameAttribute" : "AltLoginNameAttribute",
                "UserNameAttribute" : "UserNameAttribute",
                "DescriptionAttribute" : "DescriptionAttribute",
                "UserClassType" : [ "UserClassType", "UserClassType" ],
                "PasswordAttribute" : "PasswordAttribute",
                "MemberOfAttribute" : "MemberOfAttribute"
              },
              "ComputerProperties" : {
                "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
                "NetworkAddressAttribute" : "NetworkAddressAttribute",
                "DescriptionAttribute" : "DescriptionAttribute",
                "OperatingSystemAttribute" : "OperatingSystemAttribute",
                "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
                "NameAttribute" : "NameAttribute",
                "MemberOfAttribute" : "MemberOfAttribute"
              },
              "GroupProperties" : {
                "MemberAttribute" : "MemberAttribute",
                "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
                "NameAttribute" : "NameAttribute"
              }
            },
            "Domains" : [ {
              "DomainName" : "DomainName",
              "DomainUniqueId" : "DomainUniqueId",
              "NetBiosName" : "NetBiosName",
              "NamingContext" : "NamingContext"
            }, {
              "DomainName" : "DomainName",
              "DomainUniqueId" : "DomainUniqueId",
              "NetBiosName" : "NetBiosName",
              "NamingContext" : "NamingContext"
            } ],
            "LastSuccessDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "DeleteSyncIntervalMinutes" : 1586191969,
            "FailedDeleteSyncAttempts" : 1,
            "LastSuccessSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "AllowSharedSearch" : true,
            "LastFailureDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "NextSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "SynchronizationIntervalMinutes" : 890262545,
            "LastDirectorySyncTaskId" : "LastDirectorySyncTaskId"
          },
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "SessionAccessProperties" : {
            "RemoteDesktopSessionPort" : 21975,
            "AllowSessionRequests" : true,
            "TelnetSessionPort" : 20275,
            "SshSessionPort" : 43935
          },
          "AllowSessionRequests" : true,
          "AssetDiscoveryJobName" : "AssetDiscoveryJobName",
          "PlatformDisplayName" : "PlatformDisplayName",
          "DeletedByUserDisplayName" : "DeletedByUserDisplayName",
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "SshKeyProfile" : {
            "Id" : 6,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 3,
            "Name" : "Name"
          },
          "Id" : 0,
          "DeletedDate" : "2000-01-23T04:56:07.000+00:00",
          "PlatformType" : "Unknown",
          "DeletedByUserId" : 5
        }
      },
      "DeletedAssetAccount" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the account (Read-only)",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the account",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the account (required for ACF2-Ldap)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Name of the domain this object is from. Required if this is an object to import from a directory.",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "A short description of the account.",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "DeletedDate" : {
            "type" : "string",
            "description" : "Date this entity was deleted (Read-only)",
            "format" : "date-time"
          },
          "DeletedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that deleted this entity (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "DeletedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that deleted this entity (Read-only)",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "IsServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account is a service account or not (Read-only)"
          },
          "SharedServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account can be used as a service account for other assets (only valid for directory accounts)"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryAccountProperties"
          },
          "Asset" : {
            "$ref" : "#/components/schemas/AccountAssetProperties"
          },
          "PasswordProfile" : {
            "$ref" : "#/components/schemas/AccountProfileProperties"
          },
          "SshKeyProfile" : {
            "$ref" : "#/components/schemas/AccountSshKeyProfileProperties"
          },
          "RequestProperties" : {
            "$ref" : "#/components/schemas/AccountRequestProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AccountPlatformProperties"
          },
          "SyncGroup" : {
            "$ref" : "#/components/schemas/AccountSyncGroupProperties"
          },
          "SshKeySyncGroup" : {
            "$ref" : "#/components/schemas/AccountSshKeySyncGroupProperties"
          },
          "DiscoveredProperties" : {
            "$ref" : "#/components/schemas/DiscoveredAccountProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an remote asset account",
        "example" : {
          "IsServiceAccount" : true,
          "Description" : "Description",
          "Platform" : {
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "IsAcctNameCaseSensitive" : true,
            "PlatformType" : "Unknown",
            "SupportsSessionManagement" : true
          },
          "DiscoveredProperties" : {
            "AccountDiscoveryScheduleId" : 9,
            "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
            "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
            "DiscoveredUserId" : "DiscoveredUserId",
            "DiscoveredGroups" : [ {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ]
          },
          "DistinguishedName" : "DistinguishedName",
          "DomainName" : "DomainName",
          "DirectoryProperties" : {
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName"
          },
          "RequestProperties" : {
            "AllowPasswordRequest" : true,
            "AllowSshKeyRequest" : true,
            "AllowSessionRequest" : true
          },
          "SharedServiceAccount" : true,
          "Name" : "Name",
          "PasswordProfile" : {
            "Id" : 5,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 5,
            "Name" : "Name"
          },
          "CreatedByUserId" : 6,
          "DeletedByUserDisplayName" : "DeletedByUserDisplayName",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "SshKeyProfile" : {
            "Id" : 2,
            "EffectiveName" : "EffectiveName",
            "EffectiveId" : 7,
            "Name" : "Name"
          },
          "SshKeySyncGroup" : {
            "Priority" : 7,
            "Id" : 4,
            "Disabled" : true,
            "Name" : "Name"
          },
          "Asset" : {
            "AssetPartitionId" : 6,
            "AssetPartitionName" : "AssetPartitionName",
            "NetworkAddress" : "NetworkAddress",
            "Id" : 3,
            "Name" : "Name"
          },
          "Id" : 0,
          "DeletedDate" : "2000-01-23T04:56:07.000+00:00",
          "Disabled" : true,
          "DeletedByUserId" : 1,
          "SyncGroup" : {
            "Priority" : 2,
            "Id" : 3,
            "Disabled" : true,
            "Name" : "Name"
          }
        }
      },
      "DeletedEntityType" : {
        "type" : "string",
        "description" : "Type of entity that has been soft-deleted",
        "format" : "string",
        "enum" : [ "Assets", "Accounts", "Users" ]
      },
      "DeletedUser" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The user's unique id.  This is a system-assigned value that is generated when a user is first created. (Read-only)",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "Friendly identifier of the user's identity in Safeguard.  Must be unique per identity provider.",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of this user",
            "nullable" : true
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The user's display name (Read-only)",
            "nullable" : true
          },
          "LastName" : {
            "type" : "string",
            "description" : "The user's last name. No double quotes.",
            "nullable" : true
          },
          "FirstName" : {
            "type" : "string",
            "description" : "The user's first name. No double quotes.",
            "nullable" : true
          },
          "EmailAddress" : {
            "type" : "string",
            "description" : "The user's email address.",
            "nullable" : true
          },
          "WorkPhone" : {
            "type" : "string",
            "description" : "The user's work phone number.",
            "nullable" : true
          },
          "MobilePhone" : {
            "type" : "string",
            "description" : "The user's mobile phone number.",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the user is disabled. Read-only for directory users \r\nfor which this will be synchronized with the directory."
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The id of the user's timezone.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the user's timezone (Read-only)",
            "nullable" : true
          },
          "TimeZoneIanaName" : {
            "type" : "string",
            "description" : "The IANA name of the user's timezone (Read-only)",
            "nullable" : true
          },
          "IsPartitionOwner" : {
            "type" : "boolean",
            "description" : "Whether this user owns any partitions (Read-only)"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "PrimaryAuthenticationProvider" : {
            "$ref" : "#/components/schemas/UserPrimaryAuthenticationProvider"
          },
          "SecondaryAuthenticationProvider" : {
            "$ref" : "#/components/schemas/UserSecondaryAuthenticationProvider"
          },
          "IdentityProvider" : {
            "$ref" : "#/components/schemas/UserIdentityProvider"
          },
          "Locked" : {
            "type" : "boolean",
            "description" : "A read-only flag indicating that the user's account is locked.  A locked user account may be unlocked by an administrator. (Read-only)"
          },
          "PasswordNeverExpires" : {
            "type" : "boolean",
            "description" : "A flag indicating that the user's password never expires. Only meaningful for users whose PrimaryAuthenticationType is 'loc'."
          },
          "Base64PhotoData" : {
            "type" : "string",
            "description" : "Binary photo data. Base64 encoded.  Limited to 64 KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image.",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a built-in user that cannot be modified (Read-only)"
          },
          "LastLoginDate" : {
            "type" : "string",
            "description" : "Date and Time when the user last successfully logged in (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "DeletedDate" : {
            "type" : "string",
            "description" : "Date this entity was deleted (Read-only)",
            "format" : "date-time"
          },
          "DeletedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that deleted this entity (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "DeletedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that deleted this entity (Read-only)",
            "nullable" : true
          },
          "RequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must authenticate with a client certificate.  If they attempt to login with a username and\r\npassword, for example, if they are using their Active Directory account, access will be denied. Cannot be disabled if enforced\r\nby Active Directory."
          },
          "DirectoryRequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If this is an AD user then this will represent the 'Require Smart Card' attribute of the user in AD. If this is true then \r\nRequireCertificateAuthentication will also be set to true"
          },
          "AllowPersonalAccounts" : {
            "type" : "boolean",
            "description" : "If the user is able to create the personal accounts"
          },
          "ChangePasswordAtNextLogin" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must change their password at their\r\nnext login."
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a deleted safeguard user.",
        "example" : {
          "Description" : "Description",
          "TimeZoneIanaName" : "TimeZoneIanaName",
          "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
          "PrimaryAuthenticationProvider" : {
            "TypeReferenceName" : "Unknown",
            "Id" : 9,
            "Identity" : "Identity",
            "Name" : "Name"
          },
          "MobilePhone" : "MobilePhone",
          "ChangePasswordAtNextLogin" : true,
          "Name" : "Name",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "Locked" : true,
          "CreatedByUserId" : 6,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "DisplayName" : "DisplayName",
          "Base64PhotoData" : "Base64PhotoData",
          "Disabled" : true,
          "IsPartitionOwner" : true,
          "WorkPhone" : "WorkPhone",
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "PasswordNeverExpires" : true,
          "FirstName" : "FirstName",
          "IdentityProvider" : {
            "TypeReferenceName" : null,
            "Id" : 2,
            "Name" : "Name"
          },
          "EmailAddress" : "EmailAddress",
          "RequireCertificateAuthentication" : true,
          "SecondaryAuthenticationProvider" : {
            "TypeReferenceName" : null,
            "Id" : 3,
            "Identity" : "Identity",
            "Name" : "Name"
          },
          "DeletedByUserDisplayName" : "DeletedByUserDisplayName",
          "DirectoryRequireCertificateAuthentication" : true,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "LastName" : "LastName",
          "DeletedDate" : "2000-01-23T04:56:07.000+00:00",
          "DeletedByUserId" : 1,
          "AllowPersonalAccounts" : true,
          "IsSystemOwned" : true
        }
      },
      "DenyRequest" : {
        "required" : [ "RequestId" ],
        "type" : "object",
        "properties" : {
          "RequestId" : {
            "type" : "string",
            "description" : "Unique ID of the access request to deny"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Comment made by approver to describe denial",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Information for denying a request",
        "example" : {
          "Comment" : "Comment",
          "RequestId" : "RequestId"
        }
      },
      "DeviceClass" : {
        "type" : "string",
        "description" : "The of device represented by a platform",
        "format" : "string",
        "enum" : [ "Unknown", "Application", "Database", "Directory", "NetworkDevice", "Server", "SessionAccess", "Custom", "StarlingConnect" ]
      },
      "DirectoryAccountDiscoveryProperties" : {
        "type" : "object",
        "properties" : {
          "RuleType" : {
            "$ref" : "#/components/schemas/DirectoryAccountDiscoveryRuleType"
          },
          "PropertyConstraintProperties" : {
            "$ref" : "#/components/schemas/DirectoryPropertyConstraintProperties"
          },
          "SearchBase" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "AD search base for discovering accounts",
            "nullable" : true
          },
          "SearchScope" : {
            "$ref" : "#/components/schemas/DiscoverySearchScope"
          },
          "SearchName" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name to search for 'Name' RuleType",
            "nullable" : true
          },
          "SearchNameType" : {
            "$ref" : "#/components/schemas/SearchNameType"
          },
          "LdapFilter" : {
            "maximum" : 1024,
            "minimum" : 1,
            "maxLength" : 1024,
            "minLength" : 1,
            "type" : "string",
            "description" : "Custom LDAP filter to search for 'LdapFilter' RuleType",
            "nullable" : true
          },
          "Groups" : {
            "type" : "array",
            "description" : "List of group distinguishedNames for searching membership for 'Group' RuleType",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PropertyConstraintProperties" : {
            "NameFilter" : "NameFilter",
            "PrimaryGidFilter" : [ "PrimaryGidFilter", "PrimaryGidFilter" ],
            "RidFilter" : [ "RidFilter", "RidFilter" ],
            "GroupFilter" : "GroupFilter",
            "UidFilter" : [ "UidFilter", "UidFilter" ],
            "GidFilter" : [ "GidFilter", "GidFilter" ]
          },
          "SearchName" : "SearchName",
          "Groups" : [ "Groups", "Groups" ],
          "SearchScope" : "OneLevel",
          "SearchBase" : "SearchBase",
          "SearchNameType" : "StartsWith",
          "RuleType" : "Name",
          "LdapFilter" : "LdapFilter"
        }
      },
      "DirectoryAccountDiscoveryRuleType" : {
        "type" : "string",
        "description" : "Type of directory account discovery filter",
        "format" : "string",
        "enum" : [ "Name", "Group", "PropertyConstraint", "LdapFilter", "FindAll" ]
      },
      "DirectoryAccountProperties" : {
        "type" : "object",
        "properties" : {
          "NetbiosName" : {
            "type" : "string",
            "description" : "Netbios name of the domain this object is from (Read-only)",
            "nullable" : true
          },
          "ObjectGuid" : {
            "type" : "string",
            "description" : "Unique ID of the object in the directory (Read-only)",
            "nullable" : true
          },
          "ObjectSid" : {
            "type" : "string",
            "description" : "Security ID of the object in the directory (Active Directory only) (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Properties mapping the entity to an account in a directory",
        "example" : {
          "ObjectSid" : "ObjectSid",
          "ObjectGuid" : "ObjectGuid",
          "NetbiosName" : "NetbiosName"
        }
      },
      "DirectoryAssetProperties" : {
        "type" : "object",
        "properties" : {
          "ForestRootDomain" : {
            "type" : "string",
            "description" : "The name of the forest root domain (Read-only)",
            "nullable" : true
          },
          "DomainName" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Restrict this asset to a specific domain. This cannot be modified to exclude managed accounts from this asset. Only applicable to Active Directory.",
            "nullable" : true
          },
          "AllowSharedSearch" : {
            "type" : "boolean",
            "description" : "Whether this directory asset is visible to and can be used for searches by any partition owner. Can be used in asset discovery."
          },
          "UsePasswordHash" : {
            "type" : "boolean",
            "description" : "Whether this directory asset manages password hashing itself."
          },
          "SynchronizationIntervalMinutes" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently data imported from this directory should be synchronized with changes made in AD (in minutes)",
            "format" : "int32",
            "nullable" : true,
            "default" : 15
          },
          "DeleteSyncIntervalMinutes" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently this directory should be checked for deleted objects in AD (in minutes)",
            "format" : "int32",
            "nullable" : true,
            "default" : 1440
          },
          "Domains" : {
            "type" : "array",
            "description" : "List of available domains that can be searched from this directory. This will be discovered using connection properties (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetDomainInfo"
            }
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          },
          "LastSynchronizedDate" : {
            "type" : "string",
            "description" : "The time this directory was last synchronized and account discovery was ran (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSynchronizedDate" : {
            "type" : "string",
            "description" : "The time this directory last successfully synchronized (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSynchronizedDate" : {
            "type" : "string",
            "description" : "The time this directory last failed to synchronize (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedSyncAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed sync attempts since last success (Read-only)",
            "format" : "int32"
          },
          "LastDirectorySyncTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last directory sync (Read-only)",
            "nullable" : true
          },
          "NextSynchronizedDate" : {
            "type" : "string",
            "description" : "The next time this directory will synchronize and run account discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastDeleteSyncDate" : {
            "type" : "string",
            "description" : "The last time the directory was last checked for deleted objects (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessDeleteSyncDate" : {
            "type" : "string",
            "description" : "The time this directory last successfully synchronized deletions (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureDeleteSyncDate" : {
            "type" : "string",
            "description" : "The time this directory last failed to synchronize deletions (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedDeleteSyncAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed delete sync attempts since last success (Read-only)",
            "format" : "int32"
          },
          "LastDirectoryDeleteSyncTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last delete directory sync (Read-only)",
            "nullable" : true
          },
          "NextDeleteSyncDate" : {
            "type" : "string",
            "description" : "The time this directory will synchronize deletions (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "SchemaProperties" : {
            "$ref" : "#/components/schemas/AssetLdapSchema"
          }
        },
        "additionalProperties" : false,
        "description" : "Properties mapping the entity to an object in a directory",
        "example" : {
          "FailedSyncAttempts" : 1,
          "LastDirectoryDeleteSyncTaskId" : "LastDirectoryDeleteSyncTaskId",
          "LastDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "DomainName" : "DomainName",
          "LastFailureSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "NextDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "ForestRootDomain" : "ForestRootDomain",
          "DomainControllers" : [ {
            "ServerType" : "DomainController",
            "IsWritable" : true,
            "NetworkAddress" : "NetworkAddress",
            "DomainName" : "DomainName"
          }, {
            "ServerType" : "DomainController",
            "IsWritable" : true,
            "NetworkAddress" : "NetworkAddress",
            "DomainName" : "DomainName"
          } ],
          "UsePasswordHash" : true,
          "SchemaProperties" : {
            "UserProperties" : {
              "AltLoginNameAttribute" : "AltLoginNameAttribute",
              "UserNameAttribute" : "UserNameAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "UserClassType" : [ "UserClassType", "UserClassType" ],
              "PasswordAttribute" : "PasswordAttribute",
              "MemberOfAttribute" : "MemberOfAttribute"
            },
            "ComputerProperties" : {
              "ComputerClassType" : [ "ComputerClassType", "ComputerClassType" ],
              "NetworkAddressAttribute" : "NetworkAddressAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "OperatingSystemAttribute" : "OperatingSystemAttribute",
              "OperatingSystemVersionAttribute" : "OperatingSystemVersionAttribute",
              "NameAttribute" : "NameAttribute",
              "MemberOfAttribute" : "MemberOfAttribute"
            },
            "GroupProperties" : {
              "MemberAttribute" : "MemberAttribute",
              "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
              "NameAttribute" : "NameAttribute"
            }
          },
          "Domains" : [ {
            "DomainName" : "DomainName",
            "DomainUniqueId" : "DomainUniqueId",
            "NetBiosName" : "NetBiosName",
            "NamingContext" : "NamingContext"
          }, {
            "DomainName" : "DomainName",
            "DomainUniqueId" : "DomainUniqueId",
            "NetBiosName" : "NetBiosName",
            "NamingContext" : "NamingContext"
          } ],
          "LastSuccessDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "DeleteSyncIntervalMinutes" : 1586191969,
          "FailedDeleteSyncAttempts" : 1,
          "LastSuccessSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "AllowSharedSearch" : true,
          "LastFailureDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "NextSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "SynchronizationIntervalMinutes" : 890262545,
          "LastDirectorySyncTaskId" : "LastDirectorySyncTaskId"
        }
      },
      "DirectoryConnectionProperties" : {
        "type" : "object",
        "properties" : {
          "UseSslEncryption" : {
            "type" : "boolean",
            "description" : "Whether to encrypt the connection with SSL",
            "nullable" : true,
            "default" : true
          },
          "VerifySslCertificate" : {
            "type" : "boolean",
            "description" : "Verify SSL certificate if using SSL. For an LDAP Identity Provider, if SSL is being used, then this\r\nproperty will automatically be set to true.",
            "default" : true
          },
          "ServiceAccountUniqueObjectId" : {
            "type" : "string",
            "description" : "Unique object ID of service account. Directory accounts only. (Read-only)",
            "nullable" : true
          },
          "ServiceAccountSecurityId" : {
            "type" : "string",
            "description" : "Security ID of service account. Directory accounts only. (Read-only)",
            "nullable" : true
          },
          "ServiceAccountId" : {
            "type" : "integer",
            "description" : "Database ID of an asset account for connecting to the asset. Cannot be specified simultaneously with ServiceAccountName.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The name of an account that is not being managed for connecting to the asset. Cannot be specified simultaneously with ServiceAccountId.",
            "nullable" : true
          },
          "EffectiveServiceAccountName" : {
            "type" : "string",
            "description" : "The name of the account for connecting to the asset whether the account is managed or not (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDomainName" : {
            "type" : "string",
            "description" : "The domain name of the service account if the task uses a Directory\r\nor DirectoryAccount (Read-only)",
            "nullable" : true
          },
          "ServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "EffectiveServiceAccountDistinguishedName" : {
            "type" : "string",
            "description" : "Effective distinguished name of service account (required for OpenLdap)",
            "nullable" : true
          },
          "ServiceAccountCredentialType" : {
            "$ref" : "#/components/schemas/ServiceAccountCredentialType"
          },
          "ServiceAccountPassword" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "If ServiceAccountId is not specified then the service account password may be set via this property. (write-only)",
            "nullable" : true
          },
          "ServiceAccountHasPassword" : {
            "type" : "boolean",
            "description" : "Whether the service account has a password set or not (Read-only)"
          },
          "ServiceAccountSshKey" : {
            "$ref" : "#/components/schemas/SystemSshKey"
          },
          "ServiceAccountHasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the service account has an SSH key set or not (Read-only)"
          },
          "Port" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used to connect to the system",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetId" : {
            "type" : "integer",
            "description" : "The database ID of the asset the service account belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountAssetName" : {
            "type" : "string",
            "description" : "The name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountAssetPlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset the service account belongs to (Read-only)",
            "format" : "int32"
          },
          "ServiceAccountAssetPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "ServiceAccountAssetPlatformDisplayName" : {
            "type" : "string",
            "description" : "The platform display name of the asset the service account belongs to (Read-only)",
            "nullable" : true
          },
          "ServiceAccountNetbiosName" : {
            "type" : "string",
            "description" : "The netbios name of the service account (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration for connecting to a directory system",
        "example" : {
          "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
          "ServiceAccountHasSshKey" : true,
          "ServiceAccountDomainName" : "ServiceAccountDomainName",
          "UseSslEncryption" : true,
          "Port" : 13285,
          "ServiceAccountAssetPlatformType" : "Unknown",
          "ServiceAccountName" : "ServiceAccountName",
          "ServiceAccountSshKey" : {
            "Comment" : "Comment",
            "Fingerprint" : "Fingerprint",
            "PrivateKey" : "PrivateKey",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "Passphrase" : "Passphrase",
            "KeyLength" : 4884
          },
          "ServiceAccountId" : 3,
          "ServiceAccountAssetName" : "ServiceAccountAssetName",
          "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
          "VerifySslCertificate" : true,
          "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
          "ServiceAccountAssetPlatformId" : 7,
          "ServiceAccountAssetId" : 4,
          "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
          "ServiceAccountPassword" : "ServiceAccountPassword",
          "ServiceAccountCredentialType" : "None",
          "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
          "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
          "ServiceAccountHasPassword" : true,
          "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
        }
      },
      "DirectoryDiscoveryProperties" : {
        "type" : "object",
        "properties" : {
          "DirectoryId" : {
            "type" : "integer",
            "description" : "The directory this job belongs to. Required with 'Directory' discovery type.",
            "format" : "int32",
            "nullable" : true
          },
          "DirectoryName" : {
            "type" : "string",
            "description" : "Name of the directory this job belongs to (Read-only)",
            "nullable" : true
          },
          "DirectoryNetworkAddress" : {
            "type" : "string",
            "description" : "NetworkAddress of the directory this job belongs to (Read-only)",
            "nullable" : true
          },
          "DirectoryPlatformId" : {
            "type" : "integer",
            "description" : "Platform ID of the directory this job belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "DirectoryPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "DirectoryPlatformDisplayName" : {
            "type" : "string",
            "description" : "Platform display name of the directory this job belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Properties used when using Directory DiscoveryType",
        "example" : {
          "DirectoryId" : 5,
          "DirectoryPlatformDisplayName" : "DirectoryPlatformDisplayName",
          "DirectoryPlatformType" : "Unknown",
          "DirectoryPlatformId" : 5,
          "DirectoryNetworkAddress" : "DirectoryNetworkAddress",
          "DirectoryName" : "DirectoryName"
        }
      },
      "DirectoryGroupSyncProperties" : {
        "type" : "object",
        "properties" : {
          "PrimaryAuthenticationProviderId" : {
            "type" : "integer",
            "description" : "Specify the primary authentication provider that all members will use to authenticate when accessing\r\n            Safeguard.  Note, this will only be applied to new users being added to Safeguard at the time the group is saved.\r\n            That is, if a member of a directory group already has a corresponding Safeguard user, then that user's\r\n            authentication settings will not change.  This behavior can be overridden by calling the /UserGroups/{id}/SynchronizeDirectoryGroupAndUpdateAuthenticationProvidersOnExistingUsers\r\n            API method.",
            "format" : "int32",
            "nullable" : true
          },
          "PrimaryAuthenticationProviderTypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "PrimaryAuthenticationProviderName" : {
            "type" : "string",
            "description" : "The friendly display name of the specified primary authentication provider.  (Read-only)",
            "nullable" : true
          },
          "RequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must authenticate with a client certificate. If they attempt to login\r\n            with a username and password, for example, if they are using their Active Directory account, access will be denied.\r\n            Cannot be disabled if enforced by Active Directory.  This is only applicable when Active Directory is being used\r\n            to authenticate a user."
          },
          "SecondaryAuthenticationProviderId" : {
            "type" : "integer",
            "description" : "Specify the secondary authentication provider that all members will use when authenticating against\r\n            Safeguard.  Note, this will only be applied to new users being added to Safeguard at the time the group is saved.\r\n            That is, if a member of a directory group already has a corresponding Safeguard user, then that user's\r\n            authentication settings will not change.  This behavior can be overridden by calling the /UserGroups/{id}/SynchronizeDirectoryGroupAndUpdateAuthenticationProvidersOnExistingUsers\r\n            API method.",
            "format" : "int32",
            "nullable" : true
          },
          "SecondaryAuthenticationProviderTypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "SecondaryAuthenticationProviderName" : {
            "type" : "string",
            "description" : "The friendly display name of the specified secondary authentication provider.  (Read-only)",
            "nullable" : true
          },
          "LinkDirectoryAccounts" : {
            "type" : "boolean",
            "description" : "When set to {true}, if the directory user has any managed objects in the directory that also exist\r\n            as Directory Accounts in Safeguard, then those Directory Accounts in Safeguard will automatically be assigned as\r\n            a Linked Account to the user in Safeguard.  Safeguard will look at the directory user's attribute specified in the\r\n            schema attributes, for example, 'managedObjects' in Active Directory by default, to get the list of possible accounts.\r\n            This includes flattening any directory security groups or organizational units."
          },
          "AllowPersonalAccounts" : {
            "type" : "boolean",
            "description" : "When set to {true}, will let the directory user create personal accounts\r\n            in Safeguard.",
            "default" : false
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Administrative roles that each imported user of the group will be granted. e.g. GlobalAdmin, DirectoryAdmin,\r\n            Auditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "When a User Group is imported into Safeguard from a directory such as Active Directory or OpenLDAP, you can\r\n            configure certain properties of the imported users to be set based upon the value(s) of specified directory attributes\r\n            of that user.  For example, you can set the Safeguard user's primary authentication provider to be something other\r\n            than the directory itself, and then set the Safeguard user's primary authentication login name to the value of the\r\n            'employeeID' attribute in the directory.",
        "example" : {
          "SecondaryAuthenticationProviderTypeReferenceName" : null,
          "LinkDirectoryAccounts" : true,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "PrimaryAuthenticationProviderName" : "PrimaryAuthenticationProviderName",
          "PrimaryAuthenticationProviderId" : 1,
          "SecondaryAuthenticationProviderId" : 5,
          "SecondaryAuthenticationProviderName" : "SecondaryAuthenticationProviderName",
          "PrimaryAuthenticationProviderTypeReferenceName" : "Unknown",
          "RequireCertificateAuthentication" : true,
          "AllowPersonalAccounts" : false
        }
      },
      "DirectoryObjectProperties" : {
        "type" : "object",
        "properties" : {
          "DirectoryId" : {
            "type" : "integer",
            "description" : "The directory this object was imported from. Required if this is an object to import from a directory.",
            "format" : "int32",
            "nullable" : true
          },
          "DirectoryName" : {
            "type" : "string",
            "description" : "The name of the directory this object was imported from. (Read-only)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Name of the domain this object is from. Required if this is an object to import from a directory.",
            "nullable" : true
          },
          "NetbiosName" : {
            "type" : "string",
            "description" : "Netbios name of the domain this object is from (Read-only)",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the object (Read-only)",
            "nullable" : true
          },
          "ObjectGuid" : {
            "type" : "string",
            "description" : "Unique ID of the object in the directory (Read-only)",
            "nullable" : true
          },
          "ObjectSid" : {
            "type" : "string",
            "description" : "Security ID of the object in the directory (Active Directory only) (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Properties mapping the entity to an object in a directory",
        "example" : {
          "DirectoryId" : 2,
          "DomainName" : "DomainName",
          "DistinguishedName" : "DistinguishedName",
          "ObjectSid" : "ObjectSid",
          "ObjectGuid" : "ObjectGuid",
          "NetbiosName" : "NetbiosName",
          "DirectoryName" : "DirectoryName"
        }
      },
      "DirectoryPropertyConstraintProperties" : {
        "type" : "object",
        "properties" : {
          "NameFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filters accounts based on the name of the account (an ANR search is performed for Active Directory). Names can be specified as a regular expression.",
            "nullable" : true
          },
          "GroupFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filter accounts based on the names of groups in the directory the account belongs to. Names can be specified as a regular expression.",
            "nullable" : true
          },
          "UidFilter" : {
            "type" : "array",
            "description" : "Filter accounts based on their uidNumber attribute (Active Directory only). IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "RidFilter" : {
            "type" : "array",
            "description" : "Filter accounts based on their Windows relative account ID (last part of objectSid attribute) (Active Directory only). IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "GidFilter" : {
            "type" : "array",
            "description" : "Filter accounts based on their gidNumber attribute (Active Directory only). IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "PrimaryGidFilter" : {
            "type" : "array",
            "description" : "Filter accounts based on their primaryGroupID attribute (Active Directory only). IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "NameFilter" : "NameFilter",
          "PrimaryGidFilter" : [ "PrimaryGidFilter", "PrimaryGidFilter" ],
          "RidFilter" : [ "RidFilter", "RidFilter" ],
          "GroupFilter" : "GroupFilter",
          "UidFilter" : [ "UidFilter", "UidFilter" ],
          "GidFilter" : [ "GidFilter", "GidFilter" ]
        }
      },
      "DirectoryProviderSearchType" : {
        "type" : "string",
        "description" : "Type of objects to search the directory provider for",
        "format" : "string",
        "enum" : [ "Users", "Groups", "Containers" ]
      },
      "DirectorySchema" : {
        "type" : "object",
        "properties" : {
          "ObjectClassName" : {
            "type" : "string",
            "description" : "The name of the schame attribute",
            "nullable" : true
          },
          "Attributes" : {
            "type" : "array",
            "description" : "Value type of attribute",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DirectorySchemaAttribute"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "A schema definition from AD",
        "example" : {
          "ObjectClassName" : "ObjectClassName",
          "Attributes" : [ {
            "AttributeSyntax" : "Unknown",
            "LdapDisplayName" : "LdapDisplayName"
          }, {
            "AttributeSyntax" : "Unknown",
            "LdapDisplayName" : "LdapDisplayName"
          } ]
        }
      },
      "DirectorySchemaAttribute" : {
        "type" : "object",
        "properties" : {
          "LdapDisplayName" : {
            "type" : "string",
            "description" : "The name of the schame attribute",
            "nullable" : true
          },
          "AttributeSyntax" : {
            "$ref" : "#/components/schemas/DirectorySchemaSyntaxType"
          }
        },
        "additionalProperties" : false,
        "description" : "Attribute that can be set on a directory entry",
        "example" : {
          "AttributeSyntax" : "Unknown",
          "LdapDisplayName" : "LdapDisplayName"
        }
      },
      "DirectorySchemaSyntaxType" : {
        "type" : "string",
        "description" : "Supported types of schema attributes",
        "format" : "string",
        "enum" : [ "Unknown", "String", "Integer" ]
      },
      "DirectorySearchType" : {
        "type" : "string",
        "description" : "Type of objects to search the directory for",
        "format" : "string",
        "enum" : [ "Users", "Groups", "Computers", "Containers" ]
      },
      "DirectoryServerType" : {
        "type" : "string",
        "description" : "The type of directory server",
        "format" : "string",
        "enum" : [ "DomainController", "GlobalCatalog" ]
      },
      "DirectoryServiceEntry" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "The Display Name for the given object",
            "nullable" : true
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a Generic Directory Service object",
        "example" : {
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "Name" : "Name"
        }
      },
      "DirectorySyncActivityLog" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that performed the activity",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory the task was executed against (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset.",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the platform of the asset (Read-only)",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network.",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The database ID of the asset partition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a directory sync task",
        "example" : {
          "AssetPartitionId" : 5,
          "ApplianceName" : "ApplianceName",
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "EventName" : "Unknown",
          "AssetName" : "AssetName",
          "Name" : "Unknown",
          "AssetPartitionName" : "AssetPartitionName",
          "PlatformDisplayName" : "PlatformDisplayName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "NetworkAddress" : "NetworkAddress",
          "UserId" : 0,
          "PlatformId" : 1,
          "Id" : "Id",
          "ApplianceId" : "ApplianceId",
          "PlatformType" : "Unknown",
          "AssetId" : 6,
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "DiscoveredAccountLog" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "Name of the discovered account",
            "nullable" : true
          },
          "DiscoveredUserId" : {
            "type" : "string",
            "description" : "Discovered ID of the account",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name of the discovered account",
            "nullable" : true
          },
          "Status" : {
            "$ref" : "#/components/schemas/DiscoveredAccountStatus"
          },
          "DiscoveredGroups" : {
            "type" : "array",
            "description" : "Discovered groups of the account",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredGroupLog"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "An account discovered as part of an account discovery task",
        "example" : {
          "Status" : "None",
          "DomainName" : "DomainName",
          "DiscoveredUserId" : "DiscoveredUserId",
          "DiscoveredGroups" : [ {
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          }, {
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          } ],
          "Name" : "Name"
        }
      },
      "DiscoveredAccountProperties" : {
        "type" : "object",
        "properties" : {
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "The unique ID of the account discovery schedule that discovered this account",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "The name of the account discovery schedule that discovered this account",
            "nullable" : true
          },
          "DiscoveredUserId" : {
            "type" : "string",
            "description" : "The User ID discovered on the target system",
            "nullable" : true
          },
          "DiscoveredDate" : {
            "type" : "string",
            "description" : "The date the account was discovered",
            "format" : "date-time",
            "nullable" : true
          },
          "DiscoveredGroups" : {
            "type" : "array",
            "description" : "The groups on the target system the user is a member of",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredGroup"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccountDiscoveryScheduleId" : 9,
          "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "DiscoveredUserId" : "DiscoveredUserId",
          "DiscoveredGroups" : [ {
            "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          }, {
            "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          } ]
        }
      },
      "DiscoveredAccountStatus" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "None", "Deleted", "Ignored", "Managed", "Disabled" ]
      },
      "DiscoveredAsset" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Asset ID if added to database",
            "format" : "int32",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the discovered asset",
            "nullable" : true,
            "x-key" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of the discovered asset",
            "nullable" : true,
            "x-key" : true
          },
          "PasswordProfile" : {
            "$ref" : "#/components/schemas/DiscoveredAssetPasswordProfileProperties"
          },
          "SshKeyProfile" : {
            "$ref" : "#/components/schemas/DiscoveredAssetSshKeyProfileProperties"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "Platform" : {
            "type" : "string",
            "description" : "Platform of the discovered asset",
            "nullable" : true,
            "x-key" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the discovered asset",
            "nullable" : true
          },
          "RelativeId" : {
            "type" : "string",
            "description" : "Relative id of the discovered asset",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of the discovered asset",
            "nullable" : true
          },
          "OperatingSystemName" : {
            "type" : "string",
            "description" : "Discovered operating system",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Database ID of Platform that was assigned to asset",
            "format" : "int32"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Platform display name that was assigned to asset",
            "nullable" : true
          },
          "OperatingSystemVersion" : {
            "type" : "string",
            "description" : "Discovered operating system version",
            "nullable" : true
          },
          "DiscoveredDate" : {
            "type" : "string",
            "description" : "The date the asset was discovered",
            "format" : "date-time"
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name where the asset was discovered",
            "nullable" : true
          },
          "Architecture" : {
            "type" : "string",
            "description" : "Architecture of the discovered asset",
            "nullable" : true
          },
          "Location" : {
            "type" : "string",
            "description" : "Location of the discovered asset",
            "nullable" : true
          },
          "TestConnectionLogId" : {
            "type" : "string",
            "description" : "Database ID of test connection task log",
            "nullable" : true
          },
          "TestConnectionState" : {
            "$ref" : "#/components/schemas/RequestState"
          },
          "TestConnectionMessage" : {
            "type" : "string",
            "description" : "Result message from test connection attempt",
            "nullable" : true
          },
          "RuleName" : {
            "type" : "string",
            "description" : "The rule that discovered this asset",
            "nullable" : true
          },
          "ComputerCategory" : {
            "type" : "string",
            "description" : "The category of the discovered asset",
            "nullable" : true
          },
          "ObjectGuid" : {
            "type" : "string",
            "description" : "The unique id of the discovered asset",
            "nullable" : true
          },
          "ObjectSid" : {
            "type" : "string",
            "description" : "The sid of the discovered asset",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "Platform" : "Platform",
          "ObjectSid" : "ObjectSid",
          "OperatingSystemVersion" : "OperatingSystemVersion",
          "Name" : "Name",
          "PasswordProfile" : {
            "Id" : 9,
            "Name" : "Name"
          },
          "NetworkAddress" : "NetworkAddress",
          "RelativeId" : "RelativeId",
          "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
          "PlatformId" : 2,
          "TestConnectionMessage" : "TestConnectionMessage",
          "RuleName" : "RuleName",
          "OperatingSystemName" : "OperatingSystemName",
          "Architecture" : "Architecture",
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "DistinguishedName" : "DistinguishedName",
          "DomainName" : "DomainName",
          "TestConnectionState" : "Unknown",
          "ComputerCategory" : "ComputerCategory",
          "ObjectGuid" : "ObjectGuid",
          "TestConnectionLogId" : "TestConnectionLogId",
          "PlatformDisplayName" : "PlatformDisplayName",
          "SshKeyProfile" : {
            "Id" : 3,
            "Name" : "Name"
          },
          "Id" : 7,
          "Location" : "Location"
        }
      },
      "DiscoveredAssetAccount" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "Name of the discovered account",
            "nullable" : true,
            "x-key" : true
          },
          "Status" : {
            "$ref" : "#/components/schemas/DiscoveredAccountStatus"
          },
          "DiscoveredUserId" : {
            "type" : "string",
            "description" : "The User ID discovered on the target system",
            "nullable" : true
          },
          "DiscoveredDate" : {
            "type" : "string",
            "description" : "The date the account was discovered",
            "format" : "date-time"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset on which this account was discovered",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset on which this account was discovered",
            "format" : "int32",
            "x-key" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database identifier for the asset partition on which this account was discovered",
            "format" : "int32",
            "x-key" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition on which this account was discovered",
            "nullable" : true
          },
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "Database Id of the account discovery schedule used to discover the account",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of account discovery schedule used to discover the account",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name where the account was discovered",
            "nullable" : true
          },
          "RuleName" : {
            "type" : "string",
            "description" : "The rule that discovered this account",
            "nullable" : true
          },
          "DiscoveredGroups" : {
            "type" : "array",
            "description" : "The groups on the target system the user is a member of",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredGroup"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Status" : "None",
          "AssetPartitionId" : 6,
          "AccountDiscoveryScheduleId" : 1,
          "DomainName" : "DomainName",
          "DiscoveredUserId" : "DiscoveredUserId",
          "DiscoveredGroups" : [ {
            "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          }, {
            "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
            "DiscoveredGroupId" : "DiscoveredGroupId",
            "DiscoveredGroupName" : "DiscoveredGroupName"
          } ],
          "AssetName" : "AssetName",
          "Name" : "Name",
          "AssetPartitionName" : "AssetPartitionName",
          "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "AssetId" : 0,
          "RuleName" : "RuleName"
        }
      },
      "DiscoveredAssetAccountBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/DiscoveredAssetAccount"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/DiscoveredAssetAccount"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "Status" : "None",
            "AssetPartitionId" : 6,
            "AccountDiscoveryScheduleId" : 1,
            "DomainName" : "DomainName",
            "DiscoveredUserId" : "DiscoveredUserId",
            "DiscoveredGroups" : [ {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ],
            "AssetName" : "AssetName",
            "Name" : "Name",
            "AssetPartitionName" : "AssetPartitionName",
            "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
            "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
            "AssetId" : 0,
            "RuleName" : "RuleName"
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "DiscoveredAssetPasswordProfileProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of profile to be used by this account",
            "format" : "int32",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the profile explicitly assigned to the account",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Password profile information for discovered asset",
        "example" : {
          "Id" : 9,
          "Name" : "Name"
        }
      },
      "DiscoveredAssetProperty" : {
        "type" : "string",
        "description" : "Asset properties that can be constrained",
        "format" : "string",
        "enum" : [ "Name", "Description", "NetworkAddress", "OperatingSystemName", "OperatingSystemVersion" ]
      },
      "DiscoveredAssetPropertyConstraintOperator" : {
        "type" : "string",
        "description" : "Type of constraint on asset property",
        "format" : "string",
        "enum" : [ "Equals", "NotEquals", "StartsWith", "EndsWith", "Contains", "DoesNotContain" ]
      },
      "DiscoveredAssetSshKeyProfileProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of SSH key profile to be used by this account",
            "format" : "int32",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the SSH Key profile explicitly assigned to the account",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "SSH key profile information for discovered asset",
        "example" : {
          "Id" : 3,
          "Name" : "Name"
        }
      },
      "DiscoveredGroup" : {
        "type" : "object",
        "properties" : {
          "DiscoveredGroupId" : {
            "type" : "string",
            "description" : "The Group ID discovered on the target system",
            "nullable" : true
          },
          "DiscoveredGroupName" : {
            "type" : "string",
            "description" : "The name of the group on the target system",
            "nullable" : true
          },
          "DiscoveredGroupDistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the group on the target system",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "The groups on the target system the user is a member of",
        "example" : {
          "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
          "DiscoveredGroupId" : "DiscoveredGroupId",
          "DiscoveredGroupName" : "DiscoveredGroupName"
        }
      },
      "DiscoveredGroupLog" : {
        "type" : "object",
        "properties" : {
          "DiscoveredGroupName" : {
            "type" : "string",
            "description" : "Name of discovered group",
            "nullable" : true
          },
          "DiscoveredGroupId" : {
            "type" : "string",
            "description" : "Discovered ID of group",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "A discovered group of an account",
        "example" : {
          "DiscoveredGroupId" : "DiscoveredGroupId",
          "DiscoveredGroupName" : "DiscoveredGroupName"
        }
      },
      "DiscoveredService" : {
        "type" : "object",
        "properties" : {
          "DiscoveredAccount" : {
            "type" : "string",
            "description" : "The account associated with the discovered service",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Asset partition id",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Asset partition name",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset on which this service was discovered",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Id of the asset on which this service was discovered",
            "format" : "int32"
          },
          "ServiceName" : {
            "type" : "string",
            "description" : "Name of the discovered service",
            "nullable" : true,
            "x-key" : true
          },
          "ServiceDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the discovered service",
            "nullable" : true
          },
          "ServiceType" : {
            "$ref" : "#/components/schemas/DiscoveredServiceType"
          },
          "IsServiceEnabled" : {
            "type" : "boolean",
            "description" : "Whether the service is enabled"
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Unique ID of dependent account",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the dependent account",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of the dependent account",
            "nullable" : true
          },
          "AccountAssetId" : {
            "type" : "integer",
            "description" : "Unique ID of asset of the dependent account",
            "format" : "int32",
            "nullable" : true
          },
          "AccountAssetName" : {
            "type" : "string",
            "description" : "Name of asset of the dependent account",
            "nullable" : true
          },
          "AccountStatus" : {
            "$ref" : "#/components/schemas/DiscoveredServiceAccountStatus"
          },
          "IsDependentAccount" : {
            "type" : "boolean",
            "description" : "Is the account used by the service also a dependent account on the asset"
          },
          "IsIgnored" : {
            "type" : "boolean",
            "description" : "Whether this service should be ignored if re-discovered"
          },
          "DiscoveredDate" : {
            "type" : "string",
            "description" : "The date the service was discovered",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AssetPartitionId" : 0,
          "AccountId" : 1,
          "AccountAssetName" : "AccountAssetName",
          "IsServiceEnabled" : true,
          "IsDependentAccount" : true,
          "AccountDomainName" : "AccountDomainName",
          "DiscoveredAccount" : "DiscoveredAccount",
          "AssetName" : "AssetName",
          "ServiceDisplayName" : "ServiceDisplayName",
          "AssetPartitionName" : "AssetPartitionName",
          "AccountAssetId" : 5,
          "AccountStatus" : "None",
          "ServiceName" : "ServiceName",
          "ServiceType" : "Unknown",
          "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
          "AssetId" : 6,
          "AccountName" : "AccountName",
          "IsIgnored" : true
        }
      },
      "DiscoveredServiceAccountStatus" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "None", "Ignored", "Managed", "Disabled", "Restricted" ]
      },
      "DiscoveredServiceLog" : {
        "type" : "object",
        "properties" : {
          "DiscoveredAccount" : {
            "type" : "string",
            "description" : "Account associated with the discovered service",
            "nullable" : true
          },
          "ServiceName" : {
            "type" : "string",
            "description" : "Name of the discovered service",
            "nullable" : true
          },
          "ServiceDisplayName" : {
            "type" : "string",
            "description" : "Display name of the service",
            "nullable" : true
          },
          "ServiceType" : {
            "$ref" : "#/components/schemas/DiscoveredServiceType"
          },
          "IsServiceEnabled" : {
            "type" : "boolean",
            "description" : "Whether the discovered service is enabled"
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Unique ID of managed account associated with account of discovered service",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of managed account associated with account of discovered service",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of managed account associated with account of discovered service",
            "nullable" : true
          },
          "AccountAssetId" : {
            "type" : "integer",
            "description" : "Asset ID of managed account associated with account of discovered service",
            "format" : "int32",
            "nullable" : true
          },
          "AccountAssetName" : {
            "type" : "string",
            "description" : "Asset name of managed account associated with account of discovered service",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "A service discovered as part of a service discovery task",
        "example" : {
          "AccountAssetId" : 9,
          "AccountId" : 7,
          "ServiceName" : "ServiceName",
          "ServiceType" : "Unknown",
          "AccountAssetName" : "AccountAssetName",
          "IsServiceEnabled" : true,
          "AccountDomainName" : "AccountDomainName",
          "DiscoveredAccount" : "DiscoveredAccount",
          "ServiceDisplayName" : "ServiceDisplayName",
          "AccountName" : "AccountName"
        }
      },
      "DiscoveredServiceType" : {
        "type" : "string",
        "description" : "Type of discovered service",
        "format" : "string",
        "enum" : [ "Unknown", "Service", "Task", "ComPlusApp", "IisAppPool" ]
      },
      "DiscoveredSshKey" : {
        "type" : "object",
        "properties" : {
          "DiscoveredDate" : {
            "type" : "string",
            "description" : "The date the ssh key was discovered",
            "format" : "date-time"
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account for which this ssh key was discovered",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of the account for which this ssh key was discovered",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Database ID of the account for which this ssh key was discovered",
            "format" : "int32",
            "x-key" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset on which this ssh key was discovered",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset on which this ssh key was discovered",
            "format" : "int32",
            "x-key" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database identifier for the asset partition on which this ssh key was discovered",
            "format" : "int32",
            "x-key" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition on which this ssh key was discovered",
            "nullable" : true
          },
          "SshKeyProfileId" : {
            "type" : "integer",
            "description" : "Database Id of the profile used to discover the ssh key",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeyProfileName" : {
            "type" : "string",
            "description" : "Name of profile used to discover the ssh key",
            "nullable" : true
          },
          "SshKeyDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "Database Id of the ssh key discovery schedule used to discover the ssh key",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeyDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of ssh key discovery schedule used to discover the ssh key",
            "nullable" : true
          },
          "PublicKey" : {
            "type" : "string",
            "description" : "Public key represented in base64",
            "nullable" : true
          },
          "Comment" : {
            "type" : "string",
            "description" : "Comment associated with key",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH key (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH key. (Read-only)",
            "nullable" : true
          },
          "KeyType" : {
            "$ref" : "#/components/schemas/SshKeyType"
          },
          "Options" : {
            "type" : "string",
            "description" : "Options associated with key",
            "nullable" : true
          },
          "KeyLength" : {
            "type" : "integer",
            "description" : "Length of SSH key",
            "format" : "int32"
          },
          "AccountStatus" : {
            "$ref" : "#/components/schemas/DiscoveredAccountStatus"
          },
          "IsManaged" : {
            "type" : "boolean",
            "description" : "Whether the private key is managed by Safeguard"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AssetPartitionId" : 1,
          "SshKeyProfileName" : "SshKeyProfileName",
          "Comment" : "Comment",
          "Options" : "Options",
          "Fingerprint" : "Fingerprint",
          "AccountId" : 0,
          "FingerprintSha256" : "FingerprintSha256",
          "KeyType" : "Unknown",
          "PublicKey" : "PublicKey",
          "SshKeyProfileId" : 5,
          "AccountDomainName" : "AccountDomainName",
          "KeyLength" : 2,
          "AssetName" : "AssetName",
          "AssetPartitionName" : "AssetPartitionName",
          "AccountStatus" : "None",
          "SshKeyDiscoveryScheduleId" : 5,
          "SshKeyDiscoveryScheduleName" : "SshKeyDiscoveryScheduleName",
          "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
          "IsManaged" : true,
          "AssetId" : 6,
          "AccountName" : "AccountName"
        }
      },
      "DiscoveredSshKeyLog" : {
        "type" : "object",
        "properties" : {
          "PublicKey" : {
            "type" : "string",
            "description" : "Public key represented in base64",
            "nullable" : true
          },
          "Comment" : {
            "type" : "string",
            "description" : "Comment associated with key",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH key (Read-only)",
            "nullable" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH key (Read-only)",
            "nullable" : true
          },
          "KeyType" : {
            "$ref" : "#/components/schemas/SshKeyType"
          },
          "Options" : {
            "type" : "string",
            "description" : "Options associated with key",
            "nullable" : true
          },
          "KeyLength" : {
            "type" : "integer",
            "description" : "Length of SSH key",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "An SSH key discovered as part of an SSH key discovery task",
        "example" : {
          "Comment" : "Comment",
          "Options" : "Options",
          "Fingerprint" : "Fingerprint",
          "FingerprintSha256" : "FingerprintSha256",
          "KeyType" : "Unknown",
          "PublicKey" : "PublicKey",
          "KeyLength" : 9
        }
      },
      "DiscoverSshHostKeyParameters" : {
        "required" : [ "AssetName", "NetworkAddress" ],
        "type" : "object",
        "properties" : {
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the system",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset to test the connection with"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network."
          },
          "Port" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port used by SSH to login to the machine",
            "format" : "int32",
            "nullable" : true
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false
      },
      "DiscoverySearchScope" : {
        "type" : "string",
        "description" : "How far to search the directory",
        "format" : "string",
        "enum" : [ "OneLevel", "SubTree" ]
      },
      "DomainController" : {
        "required" : [ "NetworkAddress" ],
        "type" : "object",
        "properties" : {
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network"
          },
          "DomainName" : {
            "type" : "string",
            "description" : "The domain that is managed",
            "nullable" : true
          },
          "IsWritable" : {
            "type" : "boolean",
            "description" : "Whether this is a read-only domain controller or not"
          },
          "ServerType" : {
            "$ref" : "#/components/schemas/DirectoryServerType"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a directory domain controller",
        "example" : {
          "ServerType" : "DomainController",
          "IsWritable" : true,
          "NetworkAddress" : "NetworkAddress",
          "DomainName" : "DomainName"
        }
      },
      "DomainInfo" : {
        "type" : "object",
        "properties" : {
          "DomainName" : {
            "type" : "string",
            "description" : "Name of the domain",
            "nullable" : true
          },
          "NetBiosName" : {
            "type" : "string",
            "description" : "Netbios name of the domain",
            "nullable" : true
          },
          "DomainUniqueId" : {
            "type" : "string",
            "description" : "Sid of the Domain",
            "nullable" : true
          },
          "NamingContext" : {
            "type" : "string",
            "description" : "Default Naming Context for the Domain",
            "nullable" : true
          },
          "IsVisible" : {
            "type" : "boolean",
            "description" : "Whether this domain should be visible in the UI for authentication and directory searches.",
            "default" : true
          },
          "IsForestRoot" : {
            "type" : "boolean",
            "description" : "Determines if this domain is also the forest root domain of an Active Directory forest.  Not applicable for LDAP\r\nproviders.  (Read-only)"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents information about available domains that can be searched in an Directory",
        "example" : {
          "DomainName" : "DomainName",
          "DomainUniqueId" : "DomainUniqueId",
          "NetBiosName" : "NetBiosName",
          "NamingContext" : "NamingContext",
          "IsVisible" : true,
          "IsForestRoot" : true
        }
      },
      "DynamicGroupingRuleTestResult" : {
        "type" : "object",
        "properties" : {
          "ObjectId" : {
            "type" : "integer",
            "description" : "The Id of the object",
            "format" : "int32"
          },
          "ObjectName" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "The name of the object",
            "nullable" : true
          },
          "GroupingRuleAction" : {
            "$ref" : "#/components/schemas/GroupingRuleActionResult"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Asset Id, intent is to clarify when we have multiple accounts with the same name, which one.",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Asset Name, intent is to clarify when we have multiple asset accounts with the same name, which one.",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain Name, intent is to clarify when we have multiple accounts with the same name, which one.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "GroupingRuleAction" : "AddToGroup",
          "ObjectId" : 0,
          "DomainName" : "DomainName",
          "AssetId" : 6,
          "AssetName" : "AssetName",
          "ObjectName" : "ObjectName"
        }
      },
      "DynamicTaggingRuleTestResult" : {
        "type" : "object",
        "properties" : {
          "ObjectId" : {
            "type" : "integer",
            "description" : "The Id of the object (Asset, AssetAccount or DirectoryAccount)",
            "format" : "int32"
          },
          "ObjectName" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "The name of the object (Asset, AssetAccount or DirectoryAccount)",
            "nullable" : true
          },
          "TaggingRuleAction" : {
            "$ref" : "#/components/schemas/TaggingRuleActionResult"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Asset Id, intent is to clarify when we have multiple accounts with the same name, which one.",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Asset Name, intent is to clarify when we have multiple asset accounts with the same name, which one.",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain Name, intent is to clarify when we have multiple accounts with the same name, which one.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "The Asset, AssetAccount or DirectoryAccount and how it would be affected by the rule.",
        "example" : {
          "ObjectId" : 0,
          "TaggingRuleAction" : "AddTag",
          "DomainName" : "DomainName",
          "AssetId" : 6,
          "AssetName" : "AssetName",
          "ObjectName" : "ObjectName"
        }
      },
      "EffectiveIdentity" : {
        "type" : "object",
        "properties" : {
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name of the Identity (Read-only)",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the Identity (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "IdentityProviderId" : {
            "type" : "integer",
            "description" : "Database ID of the identity provider (Read-only)",
            "format" : "int32"
          },
          "IdentityProviderName" : {
            "type" : "string",
            "description" : "Name of the identity provider (Read-only)",
            "nullable" : true
          },
          "IdentityProviderTypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this identity is owned by the system and cannot be deleted (Read-only)"
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the Identity (Read-only)",
            "nullable" : true
          },
          "PrincipalKind" : {
            "$ref" : "#/components/schemas/PrincipalKind"
          },
          "EmailAddress" : {
            "type" : "string",
            "description" : "Email address of the Identity if applicable (Read-only)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name of the Identity (Read-only)",
            "nullable" : true
          },
          "FullDisplayName" : {
            "type" : "string",
            "description" : "Full display name of the Identity (Read-only)",
            "nullable" : true,
            "readOnly" : true
          },
          "Direct" : {
            "type" : "boolean",
            "description" : "Whether this identity has direct access to the resource."
          },
          "ViaTags" : {
            "type" : "array",
            "description" : "A list of PartitionTags the identity is a part of that grants the identity access to the resource.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PartitionTag"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an Identity.\r\nThe Identity is either a group or a user.",
        "example" : {
          "IdentityProviderId" : 6,
          "ViaTags" : [ {
            "AssetPartitionId" : 5,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetAccountTaggingRule" : null,
            "Description" : "Description",
            "AssetTaggingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Id" : 1,
            "Name" : "Name"
          }, {
            "AssetPartitionId" : 5,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetAccountTaggingRule" : null,
            "Description" : "Description",
            "AssetTaggingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Id" : 1,
            "Name" : "Name"
          } ],
          "DomainName" : "DomainName",
          "IdentityProviderName" : "IdentityProviderName",
          "EmailAddress" : "EmailAddress",
          "Name" : "Name",
          "Direct" : true,
          "PrincipalKind" : "Unknown",
          "FullDisplayName" : "FullDisplayName",
          "DisplayName" : "DisplayName",
          "Id" : 0,
          "IdentityProviderTypeReferenceName" : "Unknown",
          "IsSystemOwned" : true
        }
      },
      "EmailClientConfig" : {
        "type" : "object",
        "properties" : {
          "ServerAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "IP address or FQDN of the email server. Leave blank to disable email client. If using an IP address enclose it in brackets (e.g. [1.2.3.4].)",
            "nullable" : true
          },
          "PortNumber" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "TCP port number for the email service",
            "format" : "int32",
            "default" : 25
          },
          "SenderEmail" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "Email address used as the From address for all email originating from the appliance. Required when an email server address is configured.",
            "nullable" : true
          },
          "RequireTlsFlag" : {
            "type" : "boolean",
            "description" : "Determines whether TLS is required for connection between the STMP client and server (STARTTLS)",
            "default" : true
          },
          "RequireSmtpsFlag" : {
            "type" : "boolean",
            "description" : "Determines whether SMTPS is required by the SMTP server to proceed with TLS encrypted connection.",
            "default" : false
          },
          "VerifySslCertificate" : {
            "type" : "boolean",
            "description" : "Determines whether the server certificate needs validation when RequireTlsFlag is set to true",
            "default" : true
          },
          "RequireUserAuthentication" : {
            "type" : "boolean",
            "description" : "Determines whether the SMTP server requires account/password authentication",
            "default" : false
          },
          "UseClientCertificate" : {
            "type" : "boolean",
            "description" : "Indicate if the client certificate is required for the connection to remote SMTP server",
            "default" : false
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/EmailClientConfigConnectionProperties"
          },
          "UpdatedDate" : {
            "type" : "string",
            "description" : "Date this entity was updated (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "UpdatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that updated this entity (Read-only)",
            "format" : "int32"
          },
          "UpdatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that updated this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the email client configuration on the appliance.",
        "example" : {
          "RequireSmtpsFlag" : false,
          "UseClientCertificate" : false,
          "UpdatedDate" : "2000-01-23T04:56:07.000+00:00",
          "RequireUserAuthentication" : false,
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "ServiceAccountName" : "ServiceAccountName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountId" : 6
          },
          "ServerAddress" : "ServerAddress",
          "RequireTlsFlag" : true,
          "PortNumber" : 5249,
          "SenderEmail" : "SenderEmail",
          "UpdatedByUserId" : 1,
          "VerifySslCertificate" : true,
          "UpdatedByUserDisplayName" : "UpdatedByUserDisplayName"
        }
      },
      "EmailClientConfigConnectionProperties" : {
        "type" : "object",
        "properties" : {
          "ServiceAccountId" : {
            "type" : "integer",
            "description" : "Database ID of an asset account for connecting to the asset. Overrides ServiceAccountName.",
            "format" : "int32",
            "nullable" : true
          },
          "ServiceAccountName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The name of an account for connecting to the SMTP server.",
            "nullable" : true
          },
          "ServiceAccountDomainName" : {
            "type" : "string",
            "description" : "The domain name of the service account if the SMTP authentication uses a Directory Account (Read-only)",
            "nullable" : true
          },
          "ServiceAccountPassword" : {
            "maximum" : 128,
            "maxLength" : 128,
            "type" : "string",
            "description" : "Service account password may be set via this property. (write-only)",
            "nullable" : true
          },
          "EffectiveServiceAccountName" : {
            "type" : "string",
            "description" : "The effective service account name (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the email client configuration on the appliance.",
        "example" : {
          "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
          "ServiceAccountDomainName" : "ServiceAccountDomainName",
          "ServiceAccountName" : "ServiceAccountName",
          "ServiceAccountPassword" : "ServiceAccountPassword",
          "ServiceAccountId" : 6
        }
      },
      "EmailTemplate" : {
        "required" : [ "BodyTemplate", "SubjectTemplate" ],
        "type" : "object",
        "properties" : {
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "ReplyToEmail" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "The Reply-To address to use when generating email notifications from this template.",
            "nullable" : true
          },
          "SubjectTemplate" : {
            "maximum" : 1024,
            "maxLength" : 1024,
            "type" : "string",
            "description" : "The subject line template. Mustache-style tags are supported for insertion of event property data. See also Event for definitions of event property data.",
            "default" : ""
          },
          "BodyTemplate" : {
            "maximum" : 14500,
            "maxLength" : 14500,
            "type" : "string",
            "description" : "The body template. Mustache-style tags are supported for insertion of event property data. See also Event for definitions of event property data.",
            "default" : ""
          },
          "IsModified" : {
            "type" : "boolean",
            "description" : "Mark this email template as modified, typically BodyTemplate or SubjectTemplate, and is used for (Read-only)."
          },
          "Event" : {
            "$ref" : "#/components/schemas/Event"
          }
        },
        "additionalProperties" : false,
        "description" : "Template used when generating email-oriented event notifications",
        "example" : {
          "ReplyToEmail" : "ReplyToEmail",
          "SubjectTemplate" : "SubjectTemplate",
          "Event" : {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : null,
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : "Unknown",
            "Obsolete" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "AsyncBroadcastFlag" : true,
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          },
          "IsModified" : true,
          "EventName" : "Unknown",
          "BodyTemplate" : "BodyTemplate"
        }
      },
      "EnrollNewClusterMember" : {
        "required" : [ "AuthenticationToken", "Hostname" ],
        "type" : "object",
        "properties" : {
          "Hostname" : {
            "type" : "string",
            "description" : "The hostname of the target appliance to enroll"
          },
          "AuthenticationToken" : {
            "type" : "string",
            "description" : "OAuth Token representing the user that is performing enrollment"
          }
        },
        "additionalProperties" : false
      },
      "EntitlementReportTypes" : {
        "type" : "string",
        "description" : "Types of entitlement reports",
        "format" : "string",
        "enum" : [ "AccountEntitlement", "AssetEntitlement", "UserEntitlement" ]
      },
      "Entry" : {
        "type" : "object",
        "properties" : {
          "Recorded" : {
            "type" : "string",
            "description" : "The date and time the entry was recorded, UTC",
            "format" : "date-time"
          },
          "Level" : {
            "$ref" : "#/components/schemas/EntryLevel"
          },
          "Event" : {
            "type" : "string",
            "description" : "The recorded message",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "A single entry from a task log",
        "example" : {
          "Recorded" : "2000-01-23T04:56:07.000+00:00",
          "Event" : "Event",
          "Level" : "Verbose"
        }
      },
      "EntryLevel" : {
        "type" : "string",
        "description" : "The level/type of log entry",
        "format" : "string",
        "enum" : [ "Verbose", "Debug", "Information", "Warning", "Error", "Fatal" ]
      },
      "Event" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name of the event (Read-only)",
            "nullable" : true
          },
          "CategoryDisplayName" : {
            "type" : "string",
            "description" : "Category display name of the event (Read-only)",
            "nullable" : true
          },
          "ActivityLogFlag" : {
            "type" : "boolean",
            "description" : "Does the event support the ActivityLog? (Read-only)"
          },
          "AsyncBroadcastFlag" : {
            "type" : "boolean",
            "description" : "Does the event support async broadcast notification to connected users? (Read-only) Mutually exclusive with\r\nAsyncUcastFlag and AsyncMcastFlag"
          },
          "AsyncMulticastFlag" : {
            "type" : "boolean",
            "description" : "Does the event support async multicast notifications to connected users? (Read-only) Mutually exclusive with\r\nAsyncUcastFlag and AsyncBcastFlag"
          },
          "AsyncUnicastFlag" : {
            "type" : "boolean",
            "description" : "Does the event support async unicast notification to connected users? (Read-only) Mutually exclusive with\r\nAsyncBcastFlag and AsyncMcastFlag"
          },
          "Category" : {
            "$ref" : "#/components/schemas/EventCategory"
          },
          "Description" : {
            "type" : "string",
            "description" : "Brief description of the event (Read-only)",
            "nullable" : true
          },
          "EmailFlag" : {
            "type" : "boolean",
            "description" : "Does the event support email notification? (Read-only)"
          },
          "Level" : {
            "$ref" : "#/components/schemas/EventLevel"
          },
          "IsObjectAware" : {
            "type" : "boolean",
            "description" : "Whether this event supports object specific subscriptions (Read-only)"
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/EventObjectType"
          },
          "Obsolete" : {
            "type" : "boolean",
            "description" : "Is this event obsolete? (Read-only)"
          },
          "SnmpFlag" : {
            "type" : "boolean",
            "description" : "Does the event support SNMP trap notification? (Read-only)"
          },
          "SyslogFlag" : {
            "type" : "boolean",
            "description" : "Does the event support syslog logging? (Read-only)"
          },
          "AllowedAdminRoles" : {
            "type" : "array",
            "description" : "Which admin roles can subscribe to this event (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "AllowPartitionOwner" : {
            "type" : "boolean",
            "description" : "Whether a partition owner can subscribe to this event (Read-only)"
          },
          "Properties" : {
            "type" : "array",
            "description" : "List of event data properties (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventProperty"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "An appliance or application event definition",
        "example" : {
          "ActivityLogFlag" : true,
          "AllowedAdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "Category" : "Unknown",
          "Description" : "Description",
          "SyslogFlag" : true,
          "EmailFlag" : true,
          "Properties" : [ {
            "Description" : "Description",
            "IsCommon" : true,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "IsCommon" : true,
            "Name" : "Name"
          } ],
          "Name" : null,
          "AllowPartitionOwner" : true,
          "AsyncUnicastFlag" : true,
          "SnmpFlag" : true,
          "ObjectType" : "Unknown",
          "Obsolete" : true,
          "CategoryDisplayName" : "CategoryDisplayName",
          "AsyncBroadcastFlag" : true,
          "DisplayName" : "DisplayName",
          "IsObjectAware" : true,
          "Level" : "Debug",
          "AsyncMulticastFlag" : true
        }
      },
      "EventCategory" : {
        "type" : "string",
        "description" : "Categories of information provided by events",
        "format" : "string",
        "enum" : [ "Unknown", "ApplianceHistory", "AccessRequest", "UserAuthentication", "ObjectHistory", "PasswordManagement", "BackupRestore", "Patching", "Maintenance", "License", "AssetDiscovery", "Clustering", "FileReplication", "DirectorySync", "ServiceDiscovery", "AccountDiscovery", "SshKeyDiscovery", "Archive" ]
      },
      "EventLevel" : {
        "type" : "string",
        "description" : "The level of severity of the event. Specifically for OS events.",
        "format" : "string",
        "enum" : [ "Debug", "Info", "Warn", "Error", "None" ]
      },
      "EventName" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Test", "ApplianceRestarted", "EmailNotificationFailed", "SslProtocolsUpdated", "SystemTimeUpdated", "NetworkInterfaceUpdated", "DnsSuffixesUpdated", "SessionModuleConfigUpdated", "SessionModuleActionPerformed", "NtpClientDisabled", "NtpClientEnabled", "NtpErrorDetected", "RaidErrorDetected", "BmcConfigurationUpdated", "BmcAdminPasswordUpdated", "ServerCertificateSignatureRequestCreated", "ServerCertificateSignatureRequestDeleted", "NtpClientSynced", "AuditLogSigningCertificateUpdated", "TrustedCertificateAdded", "TrustedCertificateRemoved", "AutomationAgentRescheduled", "AutomationAgentDisabled", "AutomationAgentEnabled", "LicenseDeleted", "LicenseExpiringSoon", "LicenseExpired", "LicenseUpdated", "FactoryResetAppliance", "ApplianceUpdated", "DiskUsageWarning", "DailyMessageUpdated", "SupportBundleCreated", "RebootAppliance", "ShutdownAppliance", "QuarantineAppliance", "OperationalModeAppliance", "LicenseStaged", "NetworkDiagnosticsTestRun", "PatchStaged", "PatchUnstaged", "ActivatePrimaryAppliance", "SettingUpdated", "EmailTemplateUpdated", "ApplianceBackupStarted", "ApplianceBackupCompleted", "ApplianceRestoreStarted", "ApplianceRestoreCompleted", "ApplianceBackupFailed", "ApplianceRestoreFailed", "ApplianceBackupDeleted", "ApplianceBackupUploaded", "UserPreferenceUpdated", "UserPreferenceDeleted", "MaintenanceScheduleUpdated", "ArchiveTaskSucceeded", "ArchiveTaskFailed", "ClusterMemberChanged", "ClusterReplicaEnrollmentStarted", "ClusterReplicaEnrollmentCompleted", "ClusterReplicaRemovalStarted", "ClusterReplicaRemovalCompleted", "ClusterFailoverStarted", "ClusterFailoverCompleted", "ClusterPrimaryQuorumLost", "ClusterPrimaryQuorumRestored", "ClusterAbandoned", "SchedulerJobSucceeded", "SchedulerJobFailed", "ApplianceStateChanged", "EmailTemplateCreated", "ClusterLocked", "ClusterUnlocked", "ArchiveTaskStarted", "PatchStarted", "PatchCompleted", "PatchFailed", "ServerCertificateAdded", "ServerCertificateRemoved", "SslCertificateUpdated", "ServicesConfigUpdated", "ApplianceSick", "ApplianceHealthy", "SynchronizingDataStarted", "SynchronizingDataCompleted", "SynchronizingAuditLogsStarted", "SynchronizingAuditLogsCompleted", "AuditLogPurged", "NtpClientResetToLocalClock", "InitialSetupCompleted", "OperatingSystemLicenseFailed", "ScheduledPlatformTasksCompleted", "NtpDriftDetected", "ClusterResetStarted", "ClusterResetCompleted", "ClusterReplicaQuorumLost", "ClusterReplicaQuorumRestored", "ClusterReplicaDisconnected", "ClusterReplicaConnected", "ClusterPatchStarted", "ClusterPatchCompleted", "ClusterReintegrateStarted", "ClusterReintegrateCompleted", "ClusterIsolateStarted", "ClusterIsolateCompleted", "Fido2AuthenticatorUpdated", "Fido2AuthenticatorDeleted", "ApplianceBackupUploadFailed", "SyslogClientCertificateUpdated", "ServiceDebugUpdated", "EmailClientAuthenticationCertificateUpdated", "EmailClientConfigSendTestEmail", "NetworkInterfaceCreated", "NetworkInterfaceDeleted", "StrictCrlCheckingUpdated", "DeletedUnarchivedBackup", "ApprovalEscalation", "AccessRequestPendingApproval", "AccessRequestApproved", "AccessRequestAutoApproved", "AccessRequestCancelled", "AccessRequestCreated", "AccessRequestDenied", "AccessRequestExpired", "EmergencyAccessGranted", "ReviewEscalation", "ReviewNeeded", "AccessRequestAvailable", "AccessRequestApprovalReceived", "AccessRequestReviewComplete", "AccessRequestAcknowledged", "AccessRequestAdminPendingApproval", "AccessRequestPendingAccountRestored", "AccessRequestAdminReviewNeeded", "AccessRequestPasswordResetByPassed", "AccessRequestClosed", "AccessRequestCheckedIn", "PasswordReleased", "AssetPasswordHistoryReleased", "AccessRequestReviewed", "AccessRequestRevoked", "AccessRequestRestricted", "PasswordWasReset", "AccessRequestSessionInitialized", "AccessRequestSessionTerminated", "AccessRequestSessionAuthenticated", "AccessRequestSessionAuthorized", "AccessRequestSessionPasswordCheckedOut", "AccessRequestSessionConnected", "AccessRequestSessionFailure", "AccessRequestSessionCommand", "AccessRequestSessionPlaybackInitialized", "AccessRequestSessionLog", "AccountWasRestored", "AccountWasSuspended", "AccountSshKeyHistoryReleased", "SshKeyReleased", "SshKeyWasReset", "AccessRequestSshKeyResetBypassed", "AccessRequestSessionSshKeyCheckedOut", "UserAuthenticated", "UserAuthenticationFailed", "UserLoggedOut", "InactiveUserLoggedOut", "AccountGroupCreated", "AccountGroupDeleted", "AccountGroupMembershipUpdated", "AccountGroupUpdated", "UserGroupCreated", "UserGroupDeleted", "UserGroupMembershipUpdated", "UserGroupUpdated", "AssetAccountCreated", "AssetAccountDeleted", "AssetAccountUpdated", "AssetCreated", "AssetDeleted", "AssetUpdated", "ManagedNetworkCreated", "ManagedNetworkUpdated", "ManagedNetworkDeleted", "RoleCreated", "RoleDeleted", "RoleMembershipUpdated", "RolePrioritiesUpdated", "RoleUpdated", "UserCreated", "UserDeleted", "UserUpdated", "AssetPartitionCreated", "AssetPartitionUpdated", "AssetPartitionDeleted", "AssetPartitionOwnersUpdated", "AccessPolicyCreated", "AccessPolicyDeleted", "AccessPolicyUpdated", "ManagedNetworkMembersUpdated", "AssetDependencyUpdated", "PolicyPrioritiesUpdated", "EventSubscriberNotificationEnabled", "EventSubscriberNotificationDisabled", "UserRoleMembershipUpdated", "PolicyScopeItemsUpdated", "RoleExpirationWarning", "RoleExpired", "PolicyExpirationWarning", "PolicyExpired", "IdentityProviderCreated", "IdentityProviderDeleted", "IdentityProviderUpdated", "EventSubscriberCreated", "EventSubscriberDeleted", "EventSubscriberUpdated", "EventSubscriptionsUpdated", "UserGroupRoleMembershipUpdated", "UserLockedOut", "UserUnlocked", "PlatformCreated", "PlatformUpdated", "PlatformDeleted", "PolicyInvalid", "UserPhotoUpdated", "UserPhotoDeleted", "PlatformScriptUpdated", "PlatformScriptDeleted", "ReasonCodeCreated", "ReasonCodeDeleted", "ReasonCodeUpdated", "UserPasswordRuleCreated", "UserPasswordRuleUpdated", "DirectoryGroupCreated", "DirectoryGroupDeleted", "DirectoryGroupMembershipUpdated", "DirectoryGroupUpdated", "PolicyAccountCreated", "PolicyAccountDeleted", "PolicyAccountUpdated", "UserPasswordUpdated", "UserRequestFavoriteCreated", "UserRequestFavoriteUpdated", "UserRequestFavoriteDeleted", "AssetAccountPasswordUpdated", "DirectoryAssetSyncSucceeded", "DirectoryAssetSyncFailed", "DirectoryAssetDeleteSyncSucceeded", "DirectoryAssetDeleteSyncFailed", "AssetPartitionAssetRelationshipAdded", "AssetPartitionAssetRelationshipRemoved", "OwnerAssetRelationshipAdded", "OwnerAssetRelationshipRemoved", "SshKeyCreated", "SshKeyUpdated", "SshKeyDeleted", "AssetAssetAccountRelationshipAdded", "AssetAssetAccountRelationshipRemoved", "DiscoveredAccountUpdated", "DiscoveredAssetUpdated", "AssetPartitionAssetAccountRelationshipAdded", "AssetPartitionAssetAccountRelationshipRemoved", "OwnerAssetAccountRelationshipAdded", "OwnerAssetAccountRelationshipRemoved", "DirectoryAssetSyncStarted", "DirectoryAssetDeleteSyncStarted", "ReviewerAccessPolicyRelationshipAdded", "ReviewerAccessPolicyRelationshipRemoved", "ReasonCodeAccessPolicyRelationshipAdded", "ReasonCodeAccessPolicyRelationshipRemoved", "RoleAccessPolicyRelationshipAdded", "RoleAccessPolicyRelationshipRemoved", "DirectoryProviderSyncSucceeded", "DirectoryProviderSyncFailed", "DirectoryProviderDeleteSyncSucceeded", "DirectoryProviderDeleteSyncFailed", "DirectoryProviderSyncStarted", "DirectoryProviderDeleteSyncStarted", "PrimaryIdentityUserRelationshipAdded", "PrimaryIdentityUserRelationshipRemoved", "SecondaryIdentityUserRelationshipAdded", "SecondaryIdentityUserRelationshipRemoved", "ServiceAccountAssetRelationshipAdded", "ServiceAccountAssetRelationshipRemoved", "AssetAccountSshKeyUpdated", "AssetAccountSshKeyDeleted", "AssetSshHostKeyAdded", "AssetSshHostKeyRemoved", "AssetSshHostKeyUpdated", "ArchiveServerCreated", "ArchiveServerDeleted", "ArchiveServerUpdated", "ArchiveServerSshHostKeyAdded", "ArchiveServerSshHostKeyRemoved", "ArchiveServerSshHostKeyUpdated", "PasswordProfileCreated", "PasswordProfileUpdated", "PasswordProfileDeleted", "PasswordCheckScheduleCreated", "PasswordCheckScheduleUpdated", "PasswordCheckScheduleDeleted", "PasswordChangeScheduleCreated", "PasswordChangeScheduleUpdated", "PasswordChangeScheduleDeleted", "AccountPasswordRuleCreated", "AccountPasswordRuleUpdated", "AccountPasswordRuleDeleted", "PasswordProfilePartitionRelationshipAdded", "PasswordProfilePartitionRelationshipRemoved", "PasswordSyncGroupCreated", "PasswordSyncGroupUpdated", "PasswordProfileAccountRelationshipAdded", "PasswordProfileAccountRelationshipRemoved", "PasswordSyncGroupDeleted", "PasswordSyncGroupMembershipUpdated", "PasswordProfileAssetRelationshipAdded", "PasswordProfileAssetRelationshipRemoved", "PasswordProfileCheckScheduleRelationshipAdded", "PasswordProfileCheckScheduleRelationshipRemoved", "PasswordProfileChangeScheduleRelationshipAdded", "PasswordProfileChangeScheduleRelationshipRemoved", "PasswordProfilePasswordRuleRelationshipAdded", "PasswordProfilePasswordRuleRelationshipRemoved", "AssetUndeleted", "AssetAccountUndeleted", "AccountDiscoveryScheduleCreated", "AccountDiscoveryScheduleUpdated", "AccountDiscoveryScheduleDeleted", "AssetDiscoveryJobCreated", "AssetDiscoveryJobUpdated", "AssetDiscoveryJobDeleted", "UserUndeleted", "AssetDisabled", "AssetEnabled", "AssetAccountDisabled", "AssetAccountEnabled", "PolicyAccountDisabled", "PolicyAccountEnabled", "PasswordSyncGroupDisabled", "PasswordSyncGroupEnabled", "LinkedAccountUserRelationshipAdded", "LinkedAccountUserRelationshipRemoved", "TicketSystemCreated", "TicketSystemDeleted", "TicketSystemUpdated", "LoginMessageUpdated", "EmailClientConfigUpdated", "BackupProtectionSettingsUpdated", "AssetGroupCreated", "AssetGroupDeleted", "AssetGroupUpdated", "AssetGroupMembershipUpdated", "PolicyAssetCreated", "PolicyAssetDeleted", "PolicyAssetUpdated", "PolicyAssetDisabled", "PolicyAssetEnabled", "UserLinkedAccountRelationshipAdded", "UserLinkedAccountRelationshipRemoved", "UserRequestFavoriteMembershipUpdated", "SessionSshHostKeyUpdated", "ScheduledAuditLogReportCreated", "ScheduledAuditLogReportUpdated", "ScheduledAuditLogReportDeleted", "PartitionTagCreated", "PartitionTagUpdated", "PartitionTagDeleted", "AssetAccountTagUpdated", "AssetTagUpdated", "StarlingSubscriptionCreated", "StarlingSubscriptionDeleted", "StarlingSubscriptionUpdated", "SshKeySyncGroupCreated", "SshKeySyncGroupUpdated", "SshKeySyncGroupDeleted", "SshKeySyncGroupMembershipUpdated", "SshKeySyncGroupDisabled", "SshKeySyncGroupEnabled", "RelayProxyConfigCreated", "RelayProxyConfigDeleted", "RelayProxyConfigUpdated", "DirectoryGroupSyncComplete", "A2AServiceEnabled", "A2AServiceDisabled", "SshKeyProfileCreated", "SshKeyProfileUpdated", "SshKeyProfileDeleted", "SshKeyCheckScheduleCreated", "SshKeyCheckScheduleUpdated", "SshKeyCheckScheduleDeleted", "SshKeyChangeScheduleCreated", "SshKeyChangeScheduleUpdated", "SshKeyChangeScheduleDeleted", "SshKeyDiscoveryScheduleCreated", "SshKeyDiscoveryScheduleUpdated", "SshKeyDiscoveryScheduleDeleted", "SshKeyProfilePartitionRelationshipAdded", "SshKeyProfilePartitionRelationshipRemoved", "SshKeyProfileAccountRelationshipAdded", "SshKeyProfileAccountRelationshipRemoved", "SshKeyProfileAssetRelationshipAdded", "SshKeyProfileAssetRelationshipRemoved", "SshKeyProfileOwnerRelationshipAdded", "SshKeyProfileOwnerRelationshipRemoved", "SshKeyCheckScheduleRelationshipAdded", "SshKeyCheckScheduleRelationshipRemoved", "SshKeyChangeScheduleRelationshipAdded", "SshKeyChangeScheduleRelationshipRemoved", "SshKeyDiscoveryScheduleRelationshipAdded", "SshKeyDiscoveryScheduleRelationshipRemoved", "SyslogServerCreated", "SyslogServerDeleted", "SyslogServerUpdated", "AuthenticationProviderUpdated", "PasswordResetNeeded", "PasswordCheckFailed", "PasswordCheckMismatch", "PasswordChangeFailed", "PasswordCheckSucceeded", "PasswordChangeSucceeded", "SshKeyInstallFailed", "SshKeyInstallSucceeded", "SshKeyChangeFailed", "SshKeyChangeSucceeded", "SshHostKeyMismatch", "DependentAssetUpdateFailed", "DependentAssetUpdateSucceeded", "TestConnectionFailed", "TestConnectionSucceeded", "TestConnectionStarted", "PasswordCheckStarted", "PasswordChangeStarted", "SshKeyInstallStarted", "SshKeyChangeStarted", "DependentAssetUpdateStarted", "AccountDiscoveryStarted", "AccountDiscoverySucceeded", "AccountDiscoveryFailed", "SuspendAccountStarted", "SuspendAccountSucceeded", "SuspendAccountFailed", "RestoreAccountStarted", "RestoreAccountSucceeded", "RestoreAccountFailed", "DiscoverSshHostKeyStarted", "DiscoverSshHostKeySucceeded", "DiscoverSshHostKeyFailed", "SyncAccountsStarted", "SyncAccountsSucceeded", "SyncAccountsFailed", "ServiceDiscoveryStarted", "ServiceDiscoverySucceeded", "ServiceDiscoveryFailed", "SshKeySyncAccountsStarted", "SshKeySyncAccountsSucceeded", "SshKeySyncAccountsFailed", "SshKeyCheckFailed", "SshKeyCheckSucceeded", "SshKeyCheckStarted", "SshKeyDiscoveryFailed", "SshKeyDiscoverySucceeded", "SshKeyDiscoveryStarted", "SshKeyCheckMismatch", "SshKeyResetNeeded", "PurgeSettingsUpdated", "AssetPurged", "AssetAccountPurged", "UserPurged", "ReplicatedFileChanged", "MaintenanceModeStarting", "MaintenanceModeFailed", "MaintenanceModeCompleted", "AssetDiscoveryStarted", "AssetDiscoverySucceeded", "AssetDiscoveryFailed", "TestAssetDiscoveryStarted", "TestAssetDiscoverySucceeded", "TestAssetDiscoveryFailed", "PatchDistributionStarted", "PatchDistributionCompleted", "PatchDistributionCancelRequested", "PatchDistributionCanceled", "RegistrationCreated", "RegistrationUpdated", "RegistrationDeleted", "CredentialReleasedToApplication", "SessionModuleConnectionCreated", "SessionModuleConnectionUpdated", "SessionModuleConnectionDeleted", "SessionModuleRestoreFailed", "DiagnosticPackageStageSucceeded", "DiagnosticPackageStageFailed", "DiagnosticPackageExecutionStarted", "DiagnosticPackageExecutionSucceeded", "DiagnosticPackageExecutionFailed", "DiagnosticPackageExecutionCanceled", "DiagnosticPackageDeleted", "StarlingRegisteredConnectorCreated", "StarlingRegisteredConnectorUpdated", "StarlingRegisteredConnectorDeleted", "AccessRequestBrokerUpdated", "AuditLogStreamServiceUpdated", "PersonalAccountCreated", "PersonalAccountUpdated", "PersonalAccountDeleted", "PersonalAccountExpirationWarning", "PersonalAccountPasswordUpdated", "PersonalAccountPasswordReleased", "PersonalAccountSharedWith", "PersonalAccountSharedWithRemoved", "PersonalAccountPasswordHistoryReleased", "AuditLogMaintenanceUpdated", "ApplianceBackupDownloaded", "PatchUploadFailed", "TrustedCertificateUploadFailed", "ServerCertificateUploadFailed", "AuditLogSigningCertificateUploadFailed", "SshAlgorithmsUpdated", "AssetOwnersUpdated", "AssetAccountOwnersUpdated", "ApplianceOutOfMemory", "VMCompatibleBackupAuthorizationUpdated", "ChallengeResponse", "ChallengeRequested", "SshKeyRevokeFailed", "SshKeyRevokeSucceeded", "SshKeyRevokeStarted", "RetrieveSshHostKeyStarted", "RetrieveSshHostKeySucceeded", "RetrieveSshHostKeyFailed", "ExternalHsmEnabled", "ExternalHsmDisabled", "ExternalHsmUpdated", "ExternalHsmVerificationSucceeded", "ExternalHsmVerificationFailed", "ExternalHsmClientCertificateAdded", "ExternalHsmClientCertificateUpdated", "ExternalHsmClientCertificateDeleted", "ExternalHsmServerCertificateAdded", "ExternalHsmServerCertificateDeleted", "CloudAssistantUserAdded", "CloudAssistantUserRemoved", "StaAccepted", "ApplianceMemoryLow", "StaAcceptanceReset" ]
      },
      "EventObjectType" : {
        "type" : "string",
        "description" : "Types of objects whose events can be subscribed to",
        "format" : "string",
        "enum" : [ "Unknown", "AccountGroup", "Asset", "AssetAccount", "User", "UserGroup", "Role", "IdentityProvider", "AccessPolicy", "AssetPartition", "Directory", "ArchiveServer", "PartitionProfile", "PartitionAccountPasswordRule", "PartitionProfileCheckSchedule", "PartitionProfileChangeSchedule", "AccountDiscoverySchedule", "ReasonCode", "TicketSystem", "AssetGroup", "PartitionTag", "PartitionTaggingRule", "DynamicGroupingRule", "StarlingSubscription", "Registration", "PartitionProfileSyncGroup", "SessionModuleConnection", "A2AService", "UserPersonalAccount", "PersonalAccount", "SshKeySyncGroup", "StarlingRegisteredConnector", "AuthenticationProvider" ]
      },
      "EventProperty" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "type" : "string",
            "description" : "Property description (Read-only)",
            "nullable" : true
          },
          "IsCommon" : {
            "type" : "boolean",
            "description" : "A flag indicating whether this is a common property (true) or an event-specific property (false) (Read-only)"
          },
          "Name" : {
            "type" : "string",
            "description" : "Property name (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "IsCommon" : true,
          "Name" : "Name"
        }
      },
      "EventSubscriber" : {
        "required" : [ "Type" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique key of the subscriber.",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber description",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/EventSubscriberType"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Database ID of user to send notification to (defaults to calling user). Required for EventSubscriberType of Signalr. Supported by EventSubscriberType of Email.",
            "format" : "int32",
            "nullable" : true
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of user to send notification to (Read-only)",
            "nullable" : true
          },
          "UserEmailAddress" : {
            "type" : "string",
            "description" : "Email address user to send notification to (Read-only)",
            "nullable" : true
          },
          "EmailAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber email address. Supported by EventSubscriberType of Email. Cannot be specified with UserId.",
            "nullable" : true
          },
          "SyslogProperties" : {
            "$ref" : "#/components/schemas/SyslogSubscriberProperties"
          },
          "SnmpProperties" : {
            "$ref" : "#/components/schemas/SnmpSubscriberProperties"
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/EventObjectType"
          },
          "ObjectId" : {
            "type" : "integer",
            "description" : "Id of the object to subscribe to",
            "format" : "int32",
            "nullable" : true
          },
          "IsApplianceShared" : {
            "type" : "boolean",
            "description" : "Whether this event subscriber is manageable by all appliance admins.\r\nThe property is read-only for all users except the user that originally created the subscriber."
          },
          "SubscribeToAllEvents" : {
            "type" : "boolean",
            "description" : "Will automatically subscribe to all events allowed by the user's permissions"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a built-in event subscriber that cannot be modified (Read-only)"
          },
          "PartitionOwnerIsSubscribed" : {
            "type" : "boolean",
            "description" : "Whether partition owners are subscribed. If there are no explicit partition owners then users with the AssetAdmin role will be notified. (Read-only)"
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Users with these administrative roles are subscribed. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "WorkflowUserIsSubscribed" : {
            "type" : "boolean",
            "description" : "Whether workflow users are subscribed (Read-only)"
          },
          "Subscriptions" : {
            "type" : "array",
            "description" : "Events that are subscribed to",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventSubscription"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "ObjectId" : 7,
          "Subscriptions" : [ {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ null, null ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : "Unknown",
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : null,
            "Obsolete" : true,
            "AsyncBroadcastFlag" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          }, {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ null, null ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : "Unknown",
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : null,
            "Obsolete" : true,
            "AsyncBroadcastFlag" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          } ],
          "UserEmailAddress" : "UserEmailAddress",
          "EmailAddress" : "EmailAddress",
          "ObjectType" : "Unknown",
          "Type" : "Unknown",
          "CreatedByUserId" : 9,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "PartitionOwnerIsSubscribed" : true,
          "UserId" : 6,
          "SnmpProperties" : {
            "EngineId" : "EngineId",
            "EncryptionType" : "None",
            "NetworkAddress" : "NetworkAddress",
            "Version" : 1,
            "AuthenticationPassword" : "AuthenticationPassword",
            "HasAuthenticationPassword" : true,
            "Port" : 5,
            "AuthenticationUserName" : "AuthenticationUserName",
            "EncryptionPassword" : "EncryptionPassword",
            "HasEncryptionPassword" : true,
            "Community" : "public",
            "AuthenticationType" : "None"
          },
          "SubscribeToAllEvents" : true,
          "SyslogProperties" : {
            "LogFormat" : "CEF",
            "UseClientCertificate" : false,
            "TcpFraming" : "OctetCounting",
            "NetworkAddress" : "NetworkAddress",
            "UseSslEncryption" : false,
            "Port" : 19536,
            "SyslogServerId" : 1,
            "SyslogServerName" : "SyslogServerName",
            "Facility" : "Kernel",
            "Protocol" : "LegacyUdp",
            "VerifySslCertificate" : false,
            "KeyPrefix" : "KeyPrefix"
          },
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "UserDisplayName" : "UserDisplayName",
          "IsApplianceShared" : true,
          "WorkflowUserIsSubscribed" : true,
          "IsSystemOwned" : true
        }
      },
      "EventSubscriberType" : {
        "type" : "string",
        "description" : "Represents the subscriber type",
        "format" : "string",
        "enum" : [ "Unknown", "Email", "Snmp", "Signalr", "Syslog" ]
      },
      "EventSubscriberUser" : {
        "required" : [ "Type" ],
        "type" : "object",
        "properties" : {
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this event subscriber is disabled for the current user"
          },
          "Id" : {
            "type" : "integer",
            "description" : "Unique key of the subscriber.",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber description",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/EventSubscriberType"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Database ID of user to send notification to (defaults to calling user). Required for EventSubscriberType of Signalr. Supported by EventSubscriberType of Email.",
            "format" : "int32",
            "nullable" : true
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of user to send notification to (Read-only)",
            "nullable" : true
          },
          "UserEmailAddress" : {
            "type" : "string",
            "description" : "Email address user to send notification to (Read-only)",
            "nullable" : true
          },
          "EmailAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber email address. Supported by EventSubscriberType of Email. Cannot be specified with UserId.",
            "nullable" : true
          },
          "SyslogProperties" : {
            "$ref" : "#/components/schemas/SyslogSubscriberProperties"
          },
          "SnmpProperties" : {
            "$ref" : "#/components/schemas/SnmpSubscriberProperties"
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/EventObjectType"
          },
          "ObjectId" : {
            "type" : "integer",
            "description" : "Id of the object to subscribe to",
            "format" : "int32",
            "nullable" : true
          },
          "IsApplianceShared" : {
            "type" : "boolean",
            "description" : "Whether this event subscriber is manageable by all appliance admins.\r\nThe property is read-only for all users except the user that originally created the subscriber."
          },
          "SubscribeToAllEvents" : {
            "type" : "boolean",
            "description" : "Will automatically subscribe to all events allowed by the user's permissions"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a built-in event subscriber that cannot be modified (Read-only)"
          },
          "PartitionOwnerIsSubscribed" : {
            "type" : "boolean",
            "description" : "Whether partition owners are subscribed. If there are no explicit partition owners then users with the AssetAdmin role will be notified. (Read-only)"
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Users with these administrative roles are subscribed. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "WorkflowUserIsSubscribed" : {
            "type" : "boolean",
            "description" : "Whether workflow users are subscribed (Read-only)"
          },
          "Subscriptions" : {
            "type" : "array",
            "description" : "Events that are subscribed to",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventSubscription"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "ObjectId" : 1,
          "Subscriptions" : [ {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ null, null ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : "Unknown",
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : null,
            "Obsolete" : true,
            "AsyncBroadcastFlag" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          }, {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ null, null ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : "Unknown",
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : null,
            "Obsolete" : true,
            "AsyncBroadcastFlag" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          } ],
          "UserEmailAddress" : "UserEmailAddress",
          "EmailAddress" : "EmailAddress",
          "ObjectType" : "Unknown",
          "Type" : "Unknown",
          "CreatedByUserId" : 5,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "PartitionOwnerIsSubscribed" : true,
          "UserId" : 6,
          "SnmpProperties" : {
            "EngineId" : "EngineId",
            "EncryptionType" : "None",
            "NetworkAddress" : "NetworkAddress",
            "Version" : 1,
            "AuthenticationPassword" : "AuthenticationPassword",
            "HasAuthenticationPassword" : true,
            "Port" : 5,
            "AuthenticationUserName" : "AuthenticationUserName",
            "EncryptionPassword" : "EncryptionPassword",
            "HasEncryptionPassword" : true,
            "Community" : "public",
            "AuthenticationType" : "None"
          },
          "SubscribeToAllEvents" : true,
          "SyslogProperties" : {
            "LogFormat" : "CEF",
            "UseClientCertificate" : false,
            "TcpFraming" : "OctetCounting",
            "NetworkAddress" : "NetworkAddress",
            "UseSslEncryption" : false,
            "Port" : 19536,
            "SyslogServerId" : 1,
            "SyslogServerName" : "SyslogServerName",
            "Facility" : "Kernel",
            "Protocol" : "LegacyUdp",
            "VerifySslCertificate" : false,
            "KeyPrefix" : "KeyPrefix"
          },
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Disabled" : true,
          "UserDisplayName" : "UserDisplayName",
          "IsApplianceShared" : true,
          "WorkflowUserIsSubscribed" : true,
          "IsSystemOwned" : true
        }
      },
      "EventSubscription" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "ActivityLogFlag" : {
            "type" : "boolean",
            "description" : "Does the event support the ActivityLog? (Read-only)"
          },
          "AsyncBroadcastFlag" : {
            "type" : "boolean",
            "description" : "Does the event support async broadcast notification to connected users? (Read-only) Mutually exclusive with\r\nAsyncUcastFlag and AsyncMcastFlag"
          },
          "AsyncMulticastFlag" : {
            "type" : "boolean",
            "description" : "Does the event support async multicast notifications to connected users? (Read-only) Mutually exclusive with\r\nAsyncUcastFlag and AsyncBcastFlag"
          },
          "AsyncUnicastFlag" : {
            "type" : "boolean",
            "description" : "Does the event support async unicast notification to connected users? (Read-only) Mutually exclusive with\r\nAsyncBcastFlag and AsyncMcastFlag"
          },
          "Category" : {
            "$ref" : "#/components/schemas/EventCategory"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name of the event (Read-only)",
            "nullable" : true
          },
          "CategoryDisplayName" : {
            "type" : "string",
            "description" : "Category displayname of the event (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Brief description of the event (Read-only)",
            "nullable" : true
          },
          "EmailFlag" : {
            "type" : "boolean",
            "description" : "Does the event support email notification? (Read-only)"
          },
          "Level" : {
            "$ref" : "#/components/schemas/EventLevel"
          },
          "Name" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "Obsolete" : {
            "type" : "boolean",
            "description" : "Is this event obsolete? (Read-only)"
          },
          "SnmpFlag" : {
            "type" : "boolean",
            "description" : "Does the event support SNMP trap notification? (Read-only)"
          },
          "SyslogFlag" : {
            "type" : "boolean",
            "description" : "Does the event support syslog logging? (Read-only)"
          },
          "IsObjectAware" : {
            "type" : "boolean",
            "description" : "Whether this event supports object specific subscriptions (Read-only)"
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/EventObjectType"
          },
          "AllowedAdminRoles" : {
            "type" : "array",
            "description" : "Which admin roles can subscribe to this event (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "AllowPartitionOwner" : {
            "type" : "boolean",
            "description" : "Whether a partition owner can subscribe to this event (Read-only)"
          },
          "Properties" : {
            "type" : "array",
            "description" : "List of event data properties (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventProperty"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ActivityLogFlag" : true,
          "AllowedAdminRoles" : [ null, null ],
          "Category" : "Unknown",
          "Description" : "Description",
          "SyslogFlag" : true,
          "EmailFlag" : true,
          "Properties" : [ {
            "Description" : "Description",
            "IsCommon" : true,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "IsCommon" : true,
            "Name" : "Name"
          } ],
          "Name" : "Unknown",
          "AllowPartitionOwner" : true,
          "AsyncUnicastFlag" : true,
          "SnmpFlag" : true,
          "ObjectType" : null,
          "Obsolete" : true,
          "AsyncBroadcastFlag" : true,
          "CategoryDisplayName" : "CategoryDisplayName",
          "DisplayName" : "DisplayName",
          "IsObjectAware" : true,
          "Level" : "Debug",
          "AsyncMulticastFlag" : true
        }
      },
      "Fido2Authenticator" : {
        "type" : "object",
        "properties" : {
          "CredentialId" : {
            "type" : "string",
            "description" : "The unique identifier for this authenticator against this site and user.  It will be set when the authenticator\r\n            is first registered, then never changed.",
            "nullable" : true
          },
          "DateRegistered" : {
            "type" : "string",
            "description" : "When the authenticator was first registered in our system.  Afterwards, this value should never change.",
            "format" : "date-time"
          },
          "DateLastAuthenticated" : {
            "type" : "string",
            "description" : "Updated every time the authenticator is used when logging in.",
            "format" : "date-time",
            "nullable" : true
          },
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "A user supplied, friendly name, given to the authenticator after it has been registered in the system.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Details about an individual FIDO2 authenticator (or 'token' or 'security key') that has been registered with our\r\n            system.  A user can, and should, have at least two authenticators registered and associated with their account at all times\r\n            in case they ever loose or break one, they will have a backup.",
        "example" : {
          "CredentialId" : "CredentialId",
          "DateRegistered" : "2000-01-23T04:56:07.000+00:00",
          "DateLastAuthenticated" : "2000-01-23T04:56:07.000+00:00",
          "Name" : "Name"
        }
      },
      "GroupAssetSchemaDescriptors" : {
        "type" : "object",
        "properties" : {
          "GroupClassTypeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "MemberAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "NameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          }
        },
        "additionalProperties" : false,
        "description" : "Descriptors for group schema properties",
        "example" : {
          "MemberAttributeDescriptor" : null,
          "NameAttributeDescriptor" : null,
          "GroupClassTypeDescriptor" : null
        }
      },
      "GroupAssetSchemaProperties" : {
        "type" : "object",
        "properties" : {
          "GroupClassType" : {
            "type" : "array",
            "description" : "LDAP objects that have all of the specified objectClass types will be treated as groups.\r\nThese objectClass types will also be used to validate the attributes mapped to group properties.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MemberAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of group name schema attribute",
            "nullable" : true
          },
          "NameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of group name schema attribute (",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Directory attribute mappings for groups",
        "example" : {
          "MemberAttribute" : "MemberAttribute",
          "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
          "NameAttribute" : "NameAttribute"
        }
      },
      "GroupingRuleActionResult" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "AddToGroup", "RemoveFromGroup", "AlreadyInGroup", "AlreadyNotInGroup" ]
      },
      "GroupPolicies" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the policy",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the policy",
            "nullable" : true
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "Database ID of the role the policy belongs to",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of the role the policy belongs to",
            "nullable" : true
          },
          "PolicyAccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts assigned to the policy",
            "format" : "int32"
          },
          "PolicyAccountGroupCount" : {
            "type" : "integer",
            "description" : "Number of account groups assigned to the policy",
            "format" : "int32"
          },
          "PolicyAssetCount" : {
            "type" : "integer",
            "description" : "Number of assets assigned to the policy",
            "format" : "int32"
          },
          "PolicyAssetGroupCount" : {
            "type" : "integer",
            "description" : "Number of asset groups assigned to the policy",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a policy that an asset/account group is assigned to",
        "example" : {
          "PolicyAccountCount" : 1,
          "RoleName" : "RoleName",
          "PolicyAccountGroupCount" : 5,
          "PolicyAssetCount" : 5,
          "Id" : 0,
          "RoleId" : 6,
          "PolicyAssetGroupCount" : 2,
          "Name" : "Name"
        }
      },
      "GroupSchemaDescriptors" : {
        "type" : "object",
        "properties" : {
          "GroupClassTypeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "MemberAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "NameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DescriptionAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          }
        },
        "additionalProperties" : false,
        "description" : "Descriptors for group schema properties",
        "example" : {
          "MemberAttributeDescriptor" : null,
          "NameAttributeDescriptor" : null,
          "DescriptionAttributeDescriptor" : null,
          "GroupClassTypeDescriptor" : null
        }
      },
      "GroupSchemaProperties" : {
        "type" : "object",
        "properties" : {
          "GroupClassType" : {
            "type" : "array",
            "description" : "LDAP objects that have all of the specified objectClass types will be treated as groups.\r\nThese objectClass types will also be used to validate the attributes mapped to group properties.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MemberAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of group name schema attribute",
            "nullable" : true
          },
          "NameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of group name schema attribute (",
            "nullable" : true
          },
          "DescriptionAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of description schema attribute",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Directory attribute mappings for groups",
        "example" : {
          "MemberAttribute" : "MemberAttribute",
          "DescriptionAttribute" : "DescriptionAttribute",
          "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
          "NameAttribute" : "NameAttribute"
        }
      },
      "HardwareSecurityModuleClientCertificate" : {
        "type" : "object",
        "properties" : {
          "ClientPem" : {
            "type" : "string",
            "nullable" : true
          },
          "ClientKey" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "HardwareSecurityModuleConfiguration" : {
        "type" : "object",
        "properties" : {
          "IniFile" : {
            "maximum" : 15000,
            "maxLength" : 15000,
            "type" : "string",
            "description" : "The hardware security module configuration file (crystoki.ini).",
            "nullable" : true
          },
          "CryptoOfficerPassword" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The crypo officer password to be used when integrating with a hardware security module.",
            "nullable" : true
          },
          "PartitionLabel" : {
            "maximum" : 32,
            "maxLength" : 32,
            "type" : "string",
            "description" : "The partition label to be used when integrating with a hardware security module.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "IniFile" : "IniFile",
          "PartitionLabel" : "PartitionLabel",
          "CryptoOfficerPassword" : "CryptoOfficerPassword"
        }
      },
      "HardwareSecurityModuleStatus" : {
        "type" : "object",
        "properties" : {
          "LastAccessDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "Enabled" : {
            "type" : "boolean"
          },
          "Configuration" : {
            "$ref" : "#/components/schemas/HardwareSecurityModuleConfiguration"
          },
          "HealthStatus" : {
            "type" : "string",
            "nullable" : true
          },
          "MasterKeyLabel" : {
            "type" : "string",
            "nullable" : true
          },
          "TransitionToErrorState" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Configuration" : {
            "IniFile" : "IniFile",
            "PartitionLabel" : "PartitionLabel",
            "CryptoOfficerPassword" : "CryptoOfficerPassword"
          },
          "TransitionToErrorState" : true,
          "MasterKeyLabel" : "MasterKeyLabel",
          "HealthStatus" : "HealthStatus",
          "Enabled" : true,
          "LastAccessDate" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "HealthDetail" : {
        "type" : "object",
        "properties" : {
          "Error" : {
            "type" : "string",
            "nullable" : true
          },
          "Status" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "ErrorCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ErrorDetail" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Status" : "Unknown",
          "ErrorDetail" : "ErrorDetail",
          "Error" : "Error",
          "ErrorCode" : 0
        }
      },
      "HealthStatus" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Healthy", "Feeble", "Sick", "External" ]
      },
      "HourlyRestrictionProperties" : {
        "type" : "object",
        "properties" : {
          "EnableHourlyRestrictions" : {
            "type" : "boolean",
            "description" : "Whether time restrictions are to be enforced. If false, the policy/role is always valid.",
            "default" : false
          },
          "MondayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Monday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "TuesdayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Tuesday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "WednesdayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Wednesday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "ThursdayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Thursday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "FridayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Friday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "SaturdayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Saturday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "SundayValidHours" : {
            "type" : "array",
            "description" : "List of hours on Sunday when the policy/role is active where 0 represents 12:00 AM and 23 represents 11:00 PM.",
            "nullable" : true,
            "items" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Settings controlling when the policy/role will be effective",
        "example" : {
          "EnableHourlyRestrictions" : false,
          "ThursdayValidHours" : [ 6, 6 ],
          "WednesdayValidHours" : [ 0, 0 ],
          "SaturdayValidHours" : [ 1, 1 ],
          "TuesdayValidHours" : [ 4, 4 ],
          "MondayValidHours" : [ 3, 3 ],
          "FridayValidHours" : [ 4, 4 ],
          "SundayValidHours" : [ 4, 4 ]
        }
      },
      "HttpStatusCode" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Continue", "SwitchingProtocols", "Processing", "EarlyHints", "OK", "Created", "Accepted", "NonAuthoritativeInformation", "NoContent", "ResetContent", "PartialContent", "MultiStatus", "AlreadyReported", "IMUsed", "MultipleChoices", "Ambiguous", "MovedPermanently", "Moved", "Found", "Redirect", "SeeOther", "RedirectMethod", "NotModified", "UseProxy", "Unused", "TemporaryRedirect", "RedirectKeepVerb", "PermanentRedirect", "BadRequest", "Unauthorized", "PaymentRequired", "Forbidden", "NotFound", "MethodNotAllowed", "NotAcceptable", "ProxyAuthenticationRequired", "RequestTimeout", "Conflict", "Gone", "LengthRequired", "PreconditionFailed", "RequestEntityTooLarge", "RequestUriTooLong", "UnsupportedMediaType", "RequestedRangeNotSatisfiable", "ExpectationFailed", "MisdirectedRequest", "UnprocessableEntity", "Locked", "FailedDependency", "UpgradeRequired", "PreconditionRequired", "TooManyRequests", "RequestHeaderFieldsTooLarge", "UnavailableForLegalReasons", "InternalServerError", "NotImplemented", "BadGateway", "ServiceUnavailable", "GatewayTimeout", "HttpVersionNotSupported", "VariantAlsoNegotiates", "InsufficientStorage", "LoopDetected", "NotExtended", "NetworkAuthenticationRequired" ]
      },
      "Identity" : {
        "type" : "object",
        "properties" : {
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name of the Identity (Read-only)",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the Identity (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "IdentityProviderId" : {
            "type" : "integer",
            "description" : "Database ID of the identity provider (Read-only)",
            "format" : "int32"
          },
          "IdentityProviderName" : {
            "type" : "string",
            "description" : "Name of the identity provider (Read-only)",
            "nullable" : true
          },
          "IdentityProviderTypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this identity is owned by the system and cannot be deleted (Read-only)"
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the Identity (Read-only)",
            "nullable" : true
          },
          "PrincipalKind" : {
            "$ref" : "#/components/schemas/PrincipalKind"
          },
          "EmailAddress" : {
            "type" : "string",
            "description" : "Email address of the Identity if applicable (Read-only)",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name of the Identity (Read-only)",
            "nullable" : true
          },
          "FullDisplayName" : {
            "type" : "string",
            "description" : "Full display name of the Identity (Read-only)",
            "nullable" : true,
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an Identity.\r\nThe Identity is either a group or a user.",
        "example" : {
          "IdentityProviderId" : 4,
          "PrincipalKind" : null,
          "FullDisplayName" : "FullDisplayName",
          "DomainName" : "DomainName",
          "DisplayName" : "DisplayName",
          "IdentityProviderName" : "IdentityProviderName",
          "Id" : 0,
          "IdentityProviderTypeReferenceName" : null,
          "EmailAddress" : "EmailAddress",
          "IsSystemOwned" : true,
          "Name" : "Name"
        }
      },
      "IdentityProvider" : {
        "required" : [ "Name", "TypeReferenceName" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The identity provider's unique id.  This is a system-assigned value that is generated when an identity provider is first configured. (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "Name" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "The name of the identity provider.  This value will be user-visible on login dialogs and must be unique across all identity providers."
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The description of the identity provider.",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the provider if this is an Ldap directory (Read-only)",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "If this provider is system owned then it cannot be modified. (Read-only)"
          },
          "IsDirectory" : {
            "type" : "boolean",
            "description" : "If this provider represents a directory. (Read-only)"
          },
          "RstsProviderId" : {
            "type" : "string",
            "description" : "The RSTS provider id, if this provider supports authentication. This value is for information only and is not normally needed. (Read-only)",
            "nullable" : true
          },
          "RstsProviderScope" : {
            "type" : "string",
            "description" : "The RSTS provider scope, if this provider supports authentication. This value is for information only and is not normally needed. (Read-only)",
            "nullable" : true
          },
          "StarlingProperties" : {
            "$ref" : "#/components/schemas/IdentityProviderStarlingProperties"
          },
          "RadiusProperties" : {
            "$ref" : "#/components/schemas/IdentityProviderConfigRadiusProperties"
          },
          "ExternalFederationProperties" : {
            "$ref" : "#/components/schemas/IdentityProviderConfigExternalFederationProperties"
          },
          "Fido2Properties" : {
            "$ref" : "#/components/schemas/IdentityProviderConfigFido2Properties"
          },
          "OneLoginMfaProperties" : {
            "$ref" : "#/components/schemas/IdentityProviderConfigOneLoginMfaProperties"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/IdentityProviderDirectoryProperties"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an identity provider. Almost all identity providers are also implicitly authentication providers (depending on\r\nthe IdentityProviderType: AllowPrimaryAuthFlag and AllowSecondaryAuthFlag values).",
        "example" : {
          "RstsProviderId" : "RstsProviderId",
          "Fido2Properties" : {
            "DomainSuffix" : "DomainSuffix"
          },
          "Description" : "Description",
          "IsDirectory" : true,
          "DirectoryProperties" : {
            "FailedSyncAttempts" : 7,
            "LastDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "ConnectionProperties" : {
              "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
              "ServiceAccountHasSshKey" : true,
              "ServiceAccountDomainName" : "ServiceAccountDomainName",
              "UseSslEncryption" : true,
              "Port" : 13285,
              "ServiceAccountAssetPlatformType" : "Unknown",
              "ServiceAccountName" : "ServiceAccountName",
              "ServiceAccountSshKey" : {
                "Comment" : "Comment",
                "Fingerprint" : "Fingerprint",
                "PrivateKey" : "PrivateKey",
                "FingerprintSha256" : "FingerprintSha256",
                "KeyType" : "Unknown",
                "PublicKey" : "PublicKey",
                "Passphrase" : "Passphrase",
                "KeyLength" : 4884
              },
              "ServiceAccountId" : 3,
              "ServiceAccountAssetName" : "ServiceAccountAssetName",
              "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
              "VerifySslCertificate" : true,
              "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
              "ServiceAccountAssetPlatformId" : 7,
              "ServiceAccountAssetId" : 4,
              "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
              "ServiceAccountPassword" : "ServiceAccountPassword",
              "ServiceAccountCredentialType" : "None",
              "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
              "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
              "ServiceAccountHasPassword" : true,
              "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
            },
            "NextDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "ForestRootDomain" : "ForestRootDomain",
            "DomainControllers" : [ {
              "ServerType" : "DomainController",
              "IsWritable" : true,
              "NetworkAddress" : "NetworkAddress",
              "DomainName" : "DomainName"
            }, {
              "ServerType" : "DomainController",
              "IsWritable" : true,
              "NetworkAddress" : "NetworkAddress",
              "DomainName" : "DomainName"
            } ],
            "SchemaProperties" : {
              "UserProperties" : {
                "DirectoryGroupSyncAttributeForManagedObjects" : "DirectoryGroupSyncAttributeForManagedObjects",
                "FirstNameAttribute" : "FirstNameAttribute",
                "DirectoryGroupSyncAttributeForExternalFederationAuthentication" : "DirectoryGroupSyncAttributeForExternalFederationAuthentication",
                "PhoneAttribute" : "PhoneAttribute",
                "DirectoryGroupSyncAttributeForRadiusAuthentication" : "DirectoryGroupSyncAttributeForRadiusAuthentication",
                "UserNameAttribute" : "UserNameAttribute",
                "MobileAttribute" : "MobileAttribute",
                "DescriptionAttribute" : "DescriptionAttribute",
                "LastNameAttribute" : "LastNameAttribute",
                "UserClassType" : [ "UserClassType", "UserClassType" ],
                "MailAttribute" : "MailAttribute"
              },
              "GroupProperties" : {
                "MemberAttribute" : "MemberAttribute",
                "DescriptionAttribute" : "DescriptionAttribute",
                "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
                "NameAttribute" : "NameAttribute"
              }
            },
            "LastSuccessDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "Domains" : [ {
              "DomainName" : "DomainName",
              "DomainUniqueId" : "DomainUniqueId",
              "NetBiosName" : "NetBiosName",
              "NamingContext" : "NamingContext",
              "IsVisible" : true,
              "IsForestRoot" : true
            }, {
              "DomainName" : "DomainName",
              "DomainUniqueId" : "DomainUniqueId",
              "NetBiosName" : "NetBiosName",
              "NamingContext" : "NamingContext",
              "IsVisible" : true,
              "IsForestRoot" : true
            } ],
            "DeleteSyncIntervalMinutes" : 494379917,
            "FailedDeleteSyncAttempts" : 9,
            "LastSuccessSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "NextSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
            "SynchronizationIntervalMinutes" : 1210617418
          },
          "TypeReferenceName" : "Unknown",
          "RadiusProperties" : {
            "SharedSecret" : "SharedSecret",
            "Timeout" : 44,
            "Retries" : 5,
            "PreAuthenticateForChallengeResponse" : false,
            "ServerAddress2" : "ServerAddress2",
            "ServerAddress1" : "ServerAddress1",
            "AlwaysMaskUserInput" : false,
            "ServerPort" : 39501
          },
          "ExternalFederationProperties" : {
            "NameIDFormat" : "NameIDFormat",
            "FederationMetadata" : "FederationMetadata",
            "RequireAuthentication" : true,
            "AuthnContextComparison" : "Exact",
            "Realm" : "Realm",
            "AuthnContextClasses" : "AuthnContextClasses",
            "ApplicationIdOverride" : "ApplicationIdOverride"
          },
          "Name" : "Name",
          "CreatedByUserId" : 1,
          "NetworkAddress" : "NetworkAddress",
          "RstsProviderScope" : "RstsProviderScope",
          "OneLoginMfaProperties" : {
            "DnsHostName" : "DnsHostName",
            "ClientSecret" : "ClientSecret",
            "ClientId" : "ClientId"
          },
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "StarlingProperties" : {
            "HasApiKey" : true
          },
          "IsSystemOwned" : true
        }
      },
      "IdentityProviderConfigExternalFederationProperties" : {
        "type" : "object",
        "properties" : {
          "Realm" : {
            "maximum" : 16777216,
            "maxLength" : 16777216,
            "type" : "string",
            "description" : "The DNS suffix name(s) for which the Pangaea.Data.Transfer.V2.Users.IdentityProviderConfigExternalFederationProperties.FederationMetadata is applicable to.  This value needs to match\r\n            the email address suffix of a user that intends to be authenticated. If the federated authentication supports more than\r\n            one realm, enter each realm separated by a space, comma, or new line.",
            "nullable" : true
          },
          "FederationMetadata" : {
            "maximum" : 16777216,
            "maxLength" : 16777216,
            "type" : "string",
            "description" : "The complete federation metadata Xml of the Identity Provider STS that a user will be redirected to for\r\n            authentication.",
            "nullable" : true
          },
          "AuthnContextClasses" : {
            "maximum" : 2048,
            "maxLength" : 2048,
            "type" : "string",
            "description" : "The {RequestedAuthnContext} in a SAML2 request, asking the IdP to authenticate the user with\r\n            a specified authentication mechanism. For example, {urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport}.\r\n            If specified, use one or more of the allowed context class URIs from the saml-authn-context-2.0-os.pdf\r\n            (https://docs.oasis-open.org/security/saml/v2.0/saml-authn-context-2.0-os.pdf), section 3.4 Schemas.\r\n            Specify multiple values by separating the strings with a space or comma.",
            "nullable" : true
          },
          "AuthnContextComparison" : {
            "$ref" : "#/components/schemas/AuthnContextComparison"
          },
          "NameIDFormat" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The {Format} attribute of the {NameID} element within the {Issuer} element of a\r\n            SAML2 AuthnRequest. For example, {urn:oasis:names:tc:SAML:2.0:nameid-format:entity}. If specified,\r\n            use one of the allowed name identifier format identifiers as listed in section 8.3 of Assertions and\r\n            Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0 – Errata Composite.",
            "nullable" : true
          },
          "RequireAuthentication" : {
            "type" : "boolean",
            "description" : "Controls the {ForceAuthn} attribute of a SAML2 AuthnRequest. When set to true, the user\r\n            will be required to reenter their credentials on the external federation site, even if they are already\r\n            logged in, thus negating any single sign-on benefits, but may be considered more secure.\r\n            \r\n            If not specified/included in the request when creating a new instance, the default value will be true.",
            "default" : true
          },
          "ApplicationIdOverride" : {
            "type" : "string",
            "description" : "Override the {Issuer} name value sent in a SAML2 AuthnRequest.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "When the TypeReferenceName property is \"ExternalFederation\", this provides additional configuration values\r\n            specific to that type.",
        "example" : {
          "NameIDFormat" : "NameIDFormat",
          "FederationMetadata" : "FederationMetadata",
          "RequireAuthentication" : true,
          "AuthnContextComparison" : "Exact",
          "Realm" : "Realm",
          "AuthnContextClasses" : "AuthnContextClasses",
          "ApplicationIdOverride" : "ApplicationIdOverride"
        }
      },
      "IdentityProviderConfigFido2Properties" : {
        "type" : "object",
        "properties" : {
          "DomainSuffix" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "A valid domain string that identifies the WebAuthn Relying Party on whose behalf a given registration\r\n            or authentication ceremony is being performed.  A public key credential can only be used for authentication\r\n            with the same entity (as identified by this value) it was registered with.  However, this value may be just a\r\n            valid registrable domain suffix of what appears in the user's browser when registering.  For example, you may\r\n            enter just \"contoso.com\" here, which would allow you to register against a server at https://www.contoso.com,\r\n            or https://node1.contoso.com, and later use the same authenticator security key to authenticate at either of\r\n            those locations.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "When the TypeReferenceName property is \"Fido2\", this provides additional FIDO2-specific\r\n            configuration values.",
        "example" : {
          "DomainSuffix" : "DomainSuffix"
        }
      },
      "IdentityProviderConfigOneLoginMfaProperties" : {
        "type" : "object",
        "properties" : {
          "DnsHostName" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The full DNS host name of the OneLogin subscription. Typically this will be <subdomain>.onelogin.com.\r\nWhere <subdomain> is the name chosen by you when first signing up.",
            "nullable" : true
          },
          "ClientId" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The Client ID of your OneLogin API Credential pair. Obtained by creating API Credentials on your\r\nOneLogin administration site. The credential must be given the \"Manage All\" scope/permission.",
            "nullable" : true
          },
          "ClientSecret" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The Client Secret of your OneLogin API Credential pair. Obtained by creating API Credentials on\r\nyour OneLogin administration site. The credential must be given the \"Manage All\" scope/permission.\r\nThis value is considered write-only and cannot be obtained after being set.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "When the TypeReferenceName property is \"OneLoginMfa\", this provides additional configuration\r\nvalues specific to that provider type.",
        "example" : {
          "DnsHostName" : "DnsHostName",
          "ClientSecret" : "ClientSecret",
          "ClientId" : "ClientId"
        }
      },
      "IdentityProviderConfigRadiusProperties" : {
        "type" : "object",
        "properties" : {
          "ServerAddress1" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The IP address or FQDN of the primary RADIUS server. (required for radius providers)",
            "nullable" : true
          },
          "ServerAddress2" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The IP address or FQDN of the backup RADIUS server.",
            "nullable" : true
          },
          "ServerPort" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The port number to use for connections to the RADIUS servers.  (required for radius providers)",
            "format" : "int32",
            "nullable" : true
          },
          "SharedSecret" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The shared secret used to hash RADIUS user passwords. This value is typically provided by a RADIUS system administrator.  (required for radius providers)",
            "nullable" : true
          },
          "Timeout" : {
            "maximum" : 300,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The time (specified in seconds) to wait for a response from the RADIUS server before retrying.",
            "format" : "int32",
            "nullable" : true,
            "default" : 3
          },
          "Retries" : {
            "maximum" : 10,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of times to retry RADIUS server requests before giving up.",
            "format" : "int32",
            "nullable" : true,
            "default" : 2
          },
          "PreAuthenticateForChallengeResponse" : {
            "type" : "boolean",
            "description" : "Indicates whether an Access-Request call containing only the User-Name should be sent to the RADIUS server\r\n            prior to the user's authentication attempt.  This is done to inform the RADIUS server of the user's identity so it\r\n            can possibly begin the authentication process by starting a challenge/response cycle.  This may be required to seed\r\n            the user's state data.  In addition, the RADIUS server's response may include a login message that is to be displayed,\r\n            which is specific to that user.  Note, if the RADIUS server is not configured to respond with an Access-Challenge,\r\n            then this will cause the log in to fail and the user will be unable to proceed.",
            "nullable" : true,
            "default" : false
          },
          "AlwaysMaskUserInput" : {
            "type" : "boolean",
            "description" : "If enabled, the text box that the user enters their one-time password, or other challenge required by the\r\n            RADIUS server, will always be a password style text box in which the user's input is masked, i.e. appears as a series\r\n            of dots, not as clear text.  This may be desired when the challenge is not just a one-time password, but also contains\r\n            the user's PIN.  This will prevent any passer-by from seeing the private information.  Note, however, that when this\r\n            setting is enabled, it will also override the Prompt attribute of the RADIUS server's Access-Challenge response, such\r\n            that the user's input will always be masked.",
            "nullable" : true,
            "default" : false
          }
        },
        "additionalProperties" : false,
        "description" : "When the TypeReferenceName property is \"Radius\", this provides additional RADIUS-specific\r\nconfiguration values.",
        "example" : {
          "SharedSecret" : "SharedSecret",
          "Timeout" : 44,
          "Retries" : 5,
          "PreAuthenticateForChallengeResponse" : false,
          "ServerAddress2" : "ServerAddress2",
          "ServerAddress1" : "ServerAddress1",
          "AlwaysMaskUserInput" : false,
          "ServerPort" : 39501
        }
      },
      "IdentityProviderDirectoryProperties" : {
        "required" : [ "ConnectionProperties" ],
        "type" : "object",
        "properties" : {
          "ForestRootDomain" : {
            "type" : "string",
            "description" : "The name of the forest root domain (Read-only)",
            "nullable" : true
          },
          "SynchronizationIntervalMinutes" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently data imported from this direcory should be synchronized with changes made in AD (in minutes)",
            "format" : "int32",
            "nullable" : true,
            "default" : 15
          },
          "LastSynchronizedDate" : {
            "type" : "string",
            "description" : "The time this directory was last synchronized and account discovery was run (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "NextSynchronizedDate" : {
            "type" : "string",
            "description" : "The next time this directory will synchronize and run account discovery (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "DeleteSyncIntervalMinutes" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently this directory should be checked for deleted objects in AD (in minutes)",
            "format" : "int32",
            "nullable" : true,
            "default" : 1440
          },
          "LastDeleteSyncDate" : {
            "type" : "string",
            "description" : "The last time the directory was last checked for deleted objects (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "NextDeleteSyncDate" : {
            "type" : "string",
            "description" : "The time this directory will synchronize deletions (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSynchronizedDate" : {
            "type" : "string",
            "description" : "The time this directory was last successfully synchronized (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSynchronizedDate" : {
            "type" : "string",
            "description" : "The time this directory last failed to synchronize (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedSyncAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed sync attempts since last success (Read-only)",
            "format" : "int32"
          },
          "LastSuccessDeleteSyncDate" : {
            "type" : "string",
            "description" : "The time this directory was last successfully synchronized deletions (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureDeleteSyncDate" : {
            "type" : "string",
            "description" : "The time this directory last failed to synchronize deletions (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "FailedDeleteSyncAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed delete sync attempts since last success (Read-only)",
            "format" : "int32"
          },
          "Domains" : {
            "type" : "array",
            "description" : "List of available domains that can be search from IdentityProviders representing a directory (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainInfo"
            }
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          },
          "SchemaProperties" : {
            "$ref" : "#/components/schemas/IdentityProviderLdapSchema"
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/DirectoryConnectionProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration settings for when the TypeReferenceName property is 'ActiveDirectory' or 'Ldap'",
        "example" : {
          "FailedSyncAttempts" : 7,
          "LastDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountHasSshKey" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "Port" : 13285,
            "ServiceAccountAssetPlatformType" : "Unknown",
            "ServiceAccountName" : "ServiceAccountName",
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 3,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "VerifySslCertificate" : true,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "ServiceAccountAssetPlatformId" : 7,
            "ServiceAccountAssetId" : 4,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "NextDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "ForestRootDomain" : "ForestRootDomain",
          "DomainControllers" : [ {
            "ServerType" : "DomainController",
            "IsWritable" : true,
            "NetworkAddress" : "NetworkAddress",
            "DomainName" : "DomainName"
          }, {
            "ServerType" : "DomainController",
            "IsWritable" : true,
            "NetworkAddress" : "NetworkAddress",
            "DomainName" : "DomainName"
          } ],
          "SchemaProperties" : {
            "UserProperties" : {
              "DirectoryGroupSyncAttributeForManagedObjects" : "DirectoryGroupSyncAttributeForManagedObjects",
              "FirstNameAttribute" : "FirstNameAttribute",
              "DirectoryGroupSyncAttributeForExternalFederationAuthentication" : "DirectoryGroupSyncAttributeForExternalFederationAuthentication",
              "PhoneAttribute" : "PhoneAttribute",
              "DirectoryGroupSyncAttributeForRadiusAuthentication" : "DirectoryGroupSyncAttributeForRadiusAuthentication",
              "UserNameAttribute" : "UserNameAttribute",
              "MobileAttribute" : "MobileAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "LastNameAttribute" : "LastNameAttribute",
              "UserClassType" : [ "UserClassType", "UserClassType" ],
              "MailAttribute" : "MailAttribute"
            },
            "GroupProperties" : {
              "MemberAttribute" : "MemberAttribute",
              "DescriptionAttribute" : "DescriptionAttribute",
              "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
              "NameAttribute" : "NameAttribute"
            }
          },
          "LastSuccessDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "Domains" : [ {
            "DomainName" : "DomainName",
            "DomainUniqueId" : "DomainUniqueId",
            "NetBiosName" : "NetBiosName",
            "NamingContext" : "NamingContext",
            "IsVisible" : true,
            "IsForestRoot" : true
          }, {
            "DomainName" : "DomainName",
            "DomainUniqueId" : "DomainUniqueId",
            "NetBiosName" : "NetBiosName",
            "NamingContext" : "NamingContext",
            "IsVisible" : true,
            "IsForestRoot" : true
          } ],
          "DeleteSyncIntervalMinutes" : 494379917,
          "FailedDeleteSyncAttempts" : 9,
          "LastSuccessSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureDeleteSyncDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "NextSynchronizedDate" : "2000-01-23T04:56:07.000+00:00",
          "SynchronizationIntervalMinutes" : 1210617418
        }
      },
      "IdentityProviderLdapSchema" : {
        "type" : "object",
        "properties" : {
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserProviderSchemaProperties"
          },
          "GroupProperties" : {
            "$ref" : "#/components/schemas/GroupSchemaProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Directory property mappings used when importing and synchronizing entities",
        "example" : {
          "UserProperties" : {
            "DirectoryGroupSyncAttributeForManagedObjects" : "DirectoryGroupSyncAttributeForManagedObjects",
            "FirstNameAttribute" : "FirstNameAttribute",
            "DirectoryGroupSyncAttributeForExternalFederationAuthentication" : "DirectoryGroupSyncAttributeForExternalFederationAuthentication",
            "PhoneAttribute" : "PhoneAttribute",
            "DirectoryGroupSyncAttributeForRadiusAuthentication" : "DirectoryGroupSyncAttributeForRadiusAuthentication",
            "UserNameAttribute" : "UserNameAttribute",
            "MobileAttribute" : "MobileAttribute",
            "DescriptionAttribute" : "DescriptionAttribute",
            "LastNameAttribute" : "LastNameAttribute",
            "UserClassType" : [ "UserClassType", "UserClassType" ],
            "MailAttribute" : "MailAttribute"
          },
          "GroupProperties" : {
            "MemberAttribute" : "MemberAttribute",
            "DescriptionAttribute" : "DescriptionAttribute",
            "GroupClassType" : [ "GroupClassType", "GroupClassType" ],
            "NameAttribute" : "NameAttribute"
          }
        }
      },
      "IdentityProviderSchemaParameters" : {
        "type" : "object",
        "properties" : {
          "DirectoryId" : {
            "type" : "integer",
            "description" : "Use service account credentials from specified directory provider",
            "format" : "int32",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "The network address of the server the directory resides on (not required for Active Directory)",
            "nullable" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/DirectoryConnectionProperties"
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Credential parameters for directory schema discovery"
      },
      "IdentityProviderStarlingProperties" : {
        "type" : "object",
        "properties" : {
          "HasApiKey" : {
            "type" : "boolean",
            "description" : "Flag indicating whether there is an API key associated with this identity provider (Read-only)"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "HasApiKey" : true
        }
      },
      "IdentityProviderType" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "The name of the identity provider type. (Read-only)",
            "nullable" : true
          },
          "ReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "AllowPrimaryAuthFlag" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not this identity provider type supports primary authentication. (Read-only)"
          },
          "AllowSecondaryAuthFlag" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not this identity provider type supports secondary authentication. (Read-only)"
          },
          "AllowMultipleConfigsFlag" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not multiple identity providers of this type may be configured. (Read-only)"
          },
          "DefaultServerPort" : {
            "type" : "integer",
            "description" : "When given, provides the default server port number for the identity provider configuration. (Read-only)",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the read-only property values of a supported identity provider",
        "example" : {
          "AllowSecondaryAuthFlag" : true,
          "AllowMultipleConfigsFlag" : true,
          "DefaultServerPort" : 0,
          "AllowPrimaryAuthFlag" : true,
          "ReferenceName" : "Unknown",
          "Name" : "Name"
        }
      },
      "IdentityProviderTypeReferenceName" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Local", "Certificate", "ActiveDirectory", "Radius", "RadiusAsPrimary", "Ldap", "ExternalFederation", "Fido2", "OtherDirectory", "StarlingDirectory", "OneLoginMfa" ]
      },
      "InitiateSessionParameters" : {
        "type" : "object",
        "properties" : {
          "SessionAccessAccountName" : {
            "type" : "string",
            "description" : "Name of session access account if using user-supplied credentials",
            "nullable" : true
          },
          "SessionAccessAccountDomainName" : {
            "type" : "string",
            "description" : "DomainName of session access account if using user-supplied credentials",
            "nullable" : true
          },
          "SessionAccessAccountPassword" : {
            "type" : "string",
            "description" : "Password of session access account if using user-supplied credentials",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters for initiating a session for an access request"
      },
      "InstallSshKeyParameters" : {
        "type" : "object",
        "properties" : {
          "SshKeyToInstall" : {
            "$ref" : "#/components/schemas/AccountSshKey"
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false
      },
      "LicensableModule" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "PasswordManagement", "SessionManagement", "SecretsBroker" ]
      },
      "LicenseClass" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "System", "Desktop" ]
      },
      "LicenseFile" : {
        "type" : "object",
        "properties" : {
          "Base64Data" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "LicenseHistoryLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Database ID of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "Time the change occurred (Read-only)",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Unique id of the user that caused the change (Read-only).",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "OperationType" : {
            "$ref" : "#/components/schemas/OperationType"
          },
          "Status" : {
            "$ref" : "#/components/schemas/LicenseStatus"
          },
          "Type" : {
            "$ref" : "#/components/schemas/LicenseType"
          },
          "Key" : {
            "type" : "string",
            "description" : "The license key.",
            "nullable" : true
          },
          "IsEnterprise" : {
            "type" : "boolean",
            "description" : "Is this an enterprise license."
          },
          "IsValid" : {
            "type" : "boolean",
            "description" : "Is the license valid."
          },
          "Module" : {
            "$ref" : "#/components/schemas/LicensableModule"
          },
          "Expires" : {
            "type" : "string",
            "description" : "The date and time that the license expires, or null\r\nif the license is a perpetual license.",
            "format" : "date-time",
            "nullable" : true
          },
          "DaysRemaining" : {
            "type" : "integer",
            "description" : "The number of days remaining until the license expires, or\r\nnull if the license is perpetual. Will be negative if the\r\nlicense is already expired.",
            "format" : "int32",
            "nullable" : true,
            "readOnly" : true
          },
          "InstallByDate" : {
            "type" : "string",
            "description" : "For a trial license, the date by which it must be installed.\r\nIf no start-by date is present, this will return null.",
            "format" : "date-time",
            "nullable" : true
          },
          "TrialDays" : {
            "type" : "integer",
            "description" : "For a trial license, the number of days following installation that\r\nthe license remains valid. Null if not present.",
            "format" : "int64",
            "nullable" : true
          },
          "IsExpired" : {
            "type" : "boolean",
            "description" : "Is the license expired."
          },
          "PasswordManagementLicense" : {
            "$ref" : "#/components/schemas/PasswordManagementLicense"
          },
          "SecretsBrokerLicense" : {
            "$ref" : "#/components/schemas/SecretsBrokerLicense"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a change to the appliance licenses",
        "example" : {
          "Status" : "None",
          "DaysRemaining" : 6,
          "IsExpired" : true,
          "ApplianceName" : "ApplianceName",
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "EventName" : "Unknown",
          "InstallByDate" : "2000-01-23T04:56:07.000+00:00",
          "TrialDays" : 1,
          "SecretsBrokerLicense" : {
            "SecretsUsed" : 7,
            "MaxSecrets" : 4
          },
          "Type" : "Unknown",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 0,
          "IsEnterprise" : true,
          "PasswordManagementLicense" : {
            "MaxUsers" : 5,
            "SystemsUsed" : 2,
            "Version" : 5,
            "MaxDesktops" : 7,
            "Model" : "User",
            "MaxSystems" : 3,
            "DesktopsUsed" : 9,
            "UsersUsed" : 2
          },
          "Id" : "Id",
          "ApplianceId" : "ApplianceId",
          "OperationType" : "Create",
          "Expires" : "2000-01-23T04:56:07.000+00:00",
          "Module" : "PasswordManagement",
          "Key" : "Key",
          "IsValid" : true
        }
      },
      "LicenseStatus" : {
        "type" : "string",
        "description" : "Possible installation states of a license.",
        "format" : "string",
        "enum" : [ "None", "Staged", "Installed" ]
      },
      "LicenseSummary" : {
        "type" : "object",
        "properties" : {
          "Type" : {
            "$ref" : "#/components/schemas/LicenseType"
          },
          "Module" : {
            "$ref" : "#/components/schemas/LicensableModule"
          },
          "IsValid" : {
            "type" : "boolean",
            "description" : "Is the license currently valid. This will be false if the license\r\nhas expired."
          },
          "Expires" : {
            "type" : "string",
            "description" : "The date that this license expires, or null\r\nif it is perpetual.",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Type" : "Unknown",
          "Expires" : "2000-01-23T04:56:07.000+00:00",
          "Module" : "PasswordManagement",
          "IsValid" : true
        }
      },
      "LicenseType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Trial", "Term", "Perpetual" ]
      },
      "ListOperation" : {
        "type" : "string",
        "description" : "Type of operation to perform on a list",
        "format" : "string",
        "enum" : [ "Add", "Remove" ]
      },
      "LoginActivityLog" : {
        "type" : "object",
        "properties" : {
          "LogId" : {
            "type" : "string",
            "description" : "The unique id of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "Time of authentication",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Unique id of the user that authenticated.",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance to which user authenticated",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance to which user authenticated",
            "nullable" : true
          },
          "ErrorType" : {
            "$ref" : "#/components/schemas/AuthenticationErrorType"
          },
          "PrimaryAuthenticationProviderId" : {
            "type" : "integer",
            "description" : "The id of the user's primary authentication provider.",
            "format" : "int32"
          },
          "PrimaryAuthenticationProviderName" : {
            "type" : "string",
            "description" : "The name of the user's primary authentication provider",
            "nullable" : true
          },
          "SecondaryAuthenticationProviderId" : {
            "type" : "integer",
            "description" : "The id of the user's secondary authentication provider.  If this property is not set then the user is not subject to secondary authentication.",
            "format" : "int32",
            "nullable" : true
          },
          "SecondaryAuthenticationProviderName" : {
            "type" : "string",
            "description" : "The name of the user's secondary authentication provider. (Read-only)",
            "nullable" : true
          },
          "Reason" : {
            "type" : "string",
            "description" : "Reason for failure",
            "nullable" : true
          },
          "LoginTime" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "LoginDuration" : {
            "$ref" : "#/components/schemas/TimeInterval"
          }
        },
        "additionalProperties" : false,
        "description" : "User authentication events",
        "example" : {
          "LoginTime" : "2000-01-23T04:56:07.000+00:00",
          "ApplianceName" : "ApplianceName",
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "SecondaryAuthenticationProviderId" : 1,
          "SecondaryAuthenticationProviderName" : "SecondaryAuthenticationProviderName",
          "EventName" : "Unknown",
          "LoginDuration" : {
            "TotalMilliseconds" : 3.616076749251911,
            "Hours" : 5,
            "Days" : 5,
            "Seconds" : 9,
            "Milliseconds" : 2,
            "Minutes" : 7
          },
          "Reason" : "Reason",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "PrimaryAuthenticationProviderName" : "PrimaryAuthenticationProviderName",
          "ErrorType" : "NoError",
          "UserId" : 0,
          "PrimaryAuthenticationProviderId" : 6,
          "ApplianceId" : "ApplianceId",
          "LogId" : "LogId"
        }
      },
      "LoginMessage" : {
        "type" : "object",
        "properties" : {
          "Message" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "nullable" : true
          },
          "UpdatedDate" : {
            "type" : "string",
            "description" : "Date this entity was updated (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "UpdatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that updated this entity (Read-only)",
            "format" : "int32"
          },
          "UpdatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that updated this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a Login Message.",
        "example" : {
          "Message" : "Message",
          "UpdatedDate" : "2000-01-23T04:56:07.000+00:00",
          "UpdatedByUserId" : 0,
          "UpdatedByUserDisplayName" : "UpdatedByUserDisplayName"
        }
      },
      "LoginResponse" : {
        "type" : "object",
        "properties" : {
          "Status" : {
            "$ref" : "#/components/schemas/LoginResponseStatus"
          },
          "UserToken" : {
            "type" : "string",
            "description" : "Upon successful authorization, a new access token will be granted that is to be used for all future API\r\n            requests by the client application.  Currently, the lifetime of this token is one day.",
            "nullable" : true
          },
          "PrimaryProviderId" : {
            "type" : "string",
            "description" : "If the <i>access token</i> from the STS represents a user that requires two-factor authentication, then the\r\n            client application will have to redirect the user back to the STS, requesting that factor of authentication.  This\r\n            property will contain what directory service provider the user initially authenticated against.  It will need to be\r\n            included in the redirect back to the STS.",
            "nullable" : true
          },
          "SecondaryProviderId" : {
            "type" : "string",
            "description" : "If the <i>access token</i> from the STS represents a user that requires two-factor authentication, then the\r\n            client application will have to redirect the user back to the STS, requesting that factor of authentication.  This\r\n            property will contain what directory service provider the user needs for two-factor authentication.  It will need to be\r\n            included in the redirect back to the STS.",
            "nullable" : true
          },
          "WebClientInactivityTimeout" : {
            "type" : "integer",
            "description" : "This is the amount of time in minutes the web client can sit idle before its session will time out.",
            "format" : "int32"
          },
          "DesktopClientInactivityTimeout" : {
            "type" : "integer",
            "description" : "This is the amount of time in minutes the desktop client can sit idle before its session will time out.",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Used by client applications to exchange an STS token for a Safeguard user token that will then be used by the\r\n            application for all future API requests.  A client application should make a request to the <i>/service/core/v2/Token/LoginResponse</i>\r\n            end point, passing the <i>access token</i> they got from the STS.  Authorization will be performed on the authenticated user\r\n            and if successful, this Pangaea.Data.Transfer.V2.Users.LoginResponse object will be returned with a new token value in\r\n            Pangaea.Data.Transfer.V2.Users.LoginResponse.UserToken.",
        "example" : {
          "Status" : "Success",
          "PrimaryProviderId" : "PrimaryProviderId",
          "DesktopClientInactivityTimeout" : 6,
          "SecondaryProviderId" : "SecondaryProviderId",
          "WebClientInactivityTimeout" : 0,
          "UserToken" : "UserToken"
        }
      },
      "LoginResponseRequestData" : {
        "type" : "object",
        "properties" : {
          "StsAccessToken" : {
            "type" : "string",
            "description" : "The access token obtained from the STS that the client application intends to exchange for a Safeguard token.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "When a client application makes a request to the <i>/service/core/v2/Token/LoginResponse</i> end point, they\r\n            should post this object.  Currently, we have only one property, so it could be a single parameter, but this will allow for\r\n            future updates without necessarily breaking the clients."
      },
      "LoginResponseStatus" : {
        "type" : "string",
        "description" : "The <i>/service/core/v2/Token/LoginResponse</i> end point will return a Pangaea.Data.Transfer.V2.Users.LoginResponse object with\r\n            a Pangaea.Data.Transfer.V2.Users.LoginResponse.Status of one of these values indicating to the client application what it should do next.",
        "format" : "string",
        "enum" : [ "Success", "Needs2FA" ]
      },
      "ManagedDiscoveredAssetAccountBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/AssetAccount"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/DiscoveredAssetAccount"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "Description" : "Description",
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "Name" : "Name",
            "PasswordProfile" : {
              "Id" : 5,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 5,
              "Name" : "Name"
            },
            "CreatedByUserId" : 6,
            "TaskProperties" : {
              "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedRestoreAccountAttempts" : 5,
              "NextSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSshKeyRevokeAttempts" : 1,
              "NextSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuspendAccountTaskId" : "LastSuspendAccountTaskId",
              "LastFailurePasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyDiscoveryTaskId" : "LastSshKeyDiscoveryTaskId",
              "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
              "NextSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedPasswordChangeAttempts" : 1,
              "FailedSshKeyChangeAttempts" : 6,
              "FailedPasswordCheckAttempts" : 1,
              "LastRestoreAccountTaskId" : "LastRestoreAccountTaskId",
              "LastSuccessPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordCheckTaskId" : "LastPasswordCheckTaskId",
              "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
              "LastSuccessSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSuspendAccountAttempts" : 4,
              "LastFailureSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyRevokeTaskId" : "LastSshKeyRevokeTaskId",
              "HasAccountTaskFailure" : true,
              "NextPasswordCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSshKeyCheckAttempts" : 1,
              "NextRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyDiscoveryDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyCheckTaskId" : "LastSshKeyCheckTaskId",
              "LastSuccessSshKeyCheckDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessSshKeyRevokeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "FailedSshKeyDiscoveryAttempts" : 7,
              "LastSuccessSuspendAccountDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureRestoreAccountDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "SshKeySyncGroup" : {
              "Priority" : 7,
              "Id" : 4,
              "Disabled" : true,
              "Name" : "Name"
            },
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "Disabled" : true,
            "SyncGroup" : {
              "Priority" : 2,
              "Id" : 3,
              "Disabled" : true,
              "Name" : "Name"
            },
            "Tags" : [ {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "AdminAssigned" : true,
              "Id" : 1,
              "Name" : "Name"
            } ],
            "IsServiceAccount" : true,
            "DiscoveredProperties" : {
              "AccountDiscoveryScheduleId" : 9,
              "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
              "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
              "DiscoveredUserId" : "DiscoveredUserId",
              "DiscoveredGroups" : [ {
                "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
                "DiscoveredGroupId" : "DiscoveredGroupId",
                "DiscoveredGroupName" : "DiscoveredGroupName"
              }, {
                "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
                "DiscoveredGroupId" : "DiscoveredGroupId",
                "DiscoveredGroupName" : "DiscoveredGroupName"
              } ]
            },
            "DistinguishedName" : "DistinguishedName",
            "DomainName" : "DomainName",
            "DirectoryProperties" : {
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName"
            },
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "SharedServiceAccount" : true,
            "HasSshKey" : true,
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "SshKeyProfile" : {
              "Id" : 2,
              "EffectiveName" : "EffectiveName",
              "EffectiveId" : 7,
              "Name" : "Name"
            },
            "Id" : 0,
            "HasPassword" : true
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : {
            "Status" : "None",
            "AssetPartitionId" : 6,
            "AccountDiscoveryScheduleId" : 1,
            "DomainName" : "DomainName",
            "DiscoveredUserId" : "DiscoveredUserId",
            "DiscoveredGroups" : [ {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            }, {
              "DiscoveredGroupDistinguishedName" : "DiscoveredGroupDistinguishedName",
              "DiscoveredGroupId" : "DiscoveredGroupId",
              "DiscoveredGroupName" : "DiscoveredGroupName"
            } ],
            "AssetName" : "AssetName",
            "Name" : "Name",
            "AssetPartitionName" : "AssetPartitionName",
            "DiscoveredDate" : "2000-01-23T04:56:07.000+00:00",
            "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
            "AssetId" : 0,
            "RuleName" : "RuleName"
          },
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "ManagedNetwork" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique database ID of this entity",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this entity"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this entity",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a system owned entity. If true, entity cannot be modified or deleted."
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "Subnets" : {
            "type" : "array",
            "description" : "Set of subnets managed by this entity. A subnet may not be assigned\r\nto multiple managed networks though overlapping subnets are allowed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NetworkSubnet"
            }
          },
          "Members" : {
            "type" : "array",
            "description" : "Set of network members that are assigned to managed this network",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NetworkMember"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a set of network subnets that are used to associate assets with appliances that will\r\nprovide services to those assets e.g., password check/change and access request sessions. This association\r\nis automatically assigned based on IP address but can be manually overridden by the user.",
        "example" : {
          "CreatedByUserId" : 6,
          "Subnets" : [ {
            "NetworkAddress" : "NetworkAddress",
            "NetworkPrefixLength" : 1,
            "AddressFamily" : "Ipv4"
          }, {
            "NetworkAddress" : "NetworkAddress",
            "NetworkPrefixLength" : 1,
            "AddressFamily" : "Ipv4"
          } ],
          "Description" : "Description",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Members" : [ {
            "HostDnsSuffix" : "HostDnsSuffix",
            "IsSessionMember" : true,
            "SessionMemberStatus" : "Unknown",
            "SyncStatus" : "SyncStatus",
            "SessionMemberRoles" : [ "SessionMemberRoles", "SessionMemberRoles" ],
            "Id" : "Id",
            "Ipv6Address" : "Ipv6Address",
            "Name" : "Name",
            "Ipv4Address" : "Ipv4Address"
          }, {
            "HostDnsSuffix" : "HostDnsSuffix",
            "IsSessionMember" : true,
            "SessionMemberStatus" : "Unknown",
            "SyncStatus" : "SyncStatus",
            "SessionMemberRoles" : [ "SessionMemberRoles", "SessionMemberRoles" ],
            "Id" : "Id",
            "Ipv6Address" : "Ipv6Address",
            "Name" : "Name",
            "Ipv4Address" : "Ipv4Address"
          } ],
          "Name" : "Name",
          "IsSystemOwned" : true
        }
      },
      "Me" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Friendly identifier of the user's identity in Safeguard.  Must be unique per identity provider.",
            "nullable" : true
          },
          "PrimaryAuthenticationProvider" : {
            "$ref" : "#/components/schemas/MeAuthenticationProvider"
          },
          "Preferences" : {
            "type" : "array",
            "description" : "The current user's preferences (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/UserPreference"
            }
          },
          "Fido2Authenticators" : {
            "type" : "array",
            "description" : "The current user's FIDO2 authenticators that they have registered (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Fido2Authenticator"
            }
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "Id" : {
            "type" : "integer",
            "description" : "The user's unique id.  This is a system-assigned value that is generated when a user is first created. (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this user",
            "nullable" : true
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The user's display name (Read-only)",
            "nullable" : true
          },
          "LastName" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The user's last name. No double quotes.",
            "nullable" : true
          },
          "FirstName" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The user's first name. No double quotes.",
            "nullable" : true
          },
          "EmailAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The user's email address.",
            "nullable" : true
          },
          "WorkPhone" : {
            "maximum" : 30,
            "maxLength" : 30,
            "type" : "string",
            "description" : "The user's work phone number.",
            "nullable" : true
          },
          "MobilePhone" : {
            "maximum" : 30,
            "maxLength" : 30,
            "type" : "string",
            "description" : "The user's mobile phone number.",
            "nullable" : true
          },
          "SecondaryAuthenticationProvider" : {
            "$ref" : "#/components/schemas/UserSecondaryAuthenticationProvider"
          },
          "IdentityProvider" : {
            "$ref" : "#/components/schemas/UserIdentityProvider"
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the user is disabled. Read-only for directory users \r\nfor which this will be synchronized with the directory.",
            "default" : false
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The id of the user's timezone.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the user's timezone (Read-only)",
            "nullable" : true
          },
          "TimeZoneIanaName" : {
            "type" : "string",
            "description" : "The IANA name of the user's timezone (Read-only)",
            "nullable" : true
          },
          "IsPartitionOwner" : {
            "type" : "boolean",
            "description" : "Whether this user owns any partitions (Read-only)"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "CloudAssistantApproveEnabled" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "CloudAssistantRecipientId" : {
            "type" : "string",
            "nullable" : true
          },
          "AllowPersonalAccounts" : {
            "type" : "boolean",
            "description" : "If the user is able to create the personal accounts",
            "default" : false
          },
          "Locked" : {
            "type" : "boolean",
            "description" : "A read-only flag indicating that the user's account is locked.  A locked user account may be unlocked by an administrator. (Read-only)",
            "default" : false
          },
          "PasswordNeverExpires" : {
            "type" : "boolean",
            "description" : "A flag indicating that the user's password never expires. Only meaningful for users whose PrimaryAuthenticationType is 'Local'.",
            "default" : false
          },
          "ChangePasswordAtNextLogin" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must change their password at their next login.  Only meaningful for users whose PrimaryAuthenticationType is 'Local'.",
            "default" : false
          },
          "Base64PhotoData" : {
            "type" : "string",
            "description" : "Binary photo data. Base64 encoded.  Limited to 64 KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image.",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a built-in user that cannot be modified (Read-only)"
          },
          "LastLoginDate" : {
            "type" : "string",
            "description" : "Date and Time when the user last successfully logged in (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "RequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must authenticate with a client certificate.  If they attempt to login with a username and\r\npassword, for example, if they are using their Active Directory account, access will be denied. Cannot be disabled if enforced\r\nby Active Directory.",
            "default" : false
          },
          "DirectoryRequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If this is an AD user then this will represent the 'Require Smart Card' attribute of the user in AD. If this is true then \r\nRequireCertificateAuthentication will also be set to true",
            "default" : false
          },
          "LinkedAccountsCount" : {
            "type" : "integer",
            "description" : "The number of policy accounts linked to the user (Read-only)",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the currently authenticated user",
        "example" : {
          "LinkedAccountsCount" : 5,
          "Description" : "Description",
          "TimeZoneIanaName" : "TimeZoneIanaName",
          "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
          "Fido2Authenticators" : [ {
            "CredentialId" : "CredentialId",
            "DateRegistered" : "2000-01-23T04:56:07.000+00:00",
            "DateLastAuthenticated" : "2000-01-23T04:56:07.000+00:00",
            "Name" : "Name"
          }, {
            "CredentialId" : "CredentialId",
            "DateRegistered" : "2000-01-23T04:56:07.000+00:00",
            "DateLastAuthenticated" : "2000-01-23T04:56:07.000+00:00",
            "Name" : "Name"
          } ],
          "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
          "PrimaryAuthenticationProvider" : {
            "TypeReferenceName" : "Unknown",
            "Id" : 0,
            "Identity" : "Identity",
            "Name" : "Name"
          },
          "MobilePhone" : "MobilePhone",
          "ChangePasswordAtNextLogin" : false,
          "Name" : "Name",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "Locked" : false,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "CreatedByUserId" : 1,
          "DisplayName" : "DisplayName",
          "Base64PhotoData" : "Base64PhotoData",
          "Preferences" : [ {
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "Disabled" : false,
          "IsPartitionOwner" : true,
          "WorkPhone" : "WorkPhone",
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "PasswordNeverExpires" : false,
          "FirstName" : "FirstName",
          "IdentityProvider" : {
            "TypeReferenceName" : null,
            "Id" : 2,
            "Name" : "Name"
          },
          "EmailAddress" : "EmailAddress",
          "RequireCertificateAuthentication" : false,
          "SecondaryAuthenticationProvider" : {
            "TypeReferenceName" : null,
            "Id" : 3,
            "Identity" : "Identity",
            "Name" : "Name"
          },
          "DirectoryRequireCertificateAuthentication" : false,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "CloudAssistantApproveEnabled" : true,
          "Id" : 6,
          "LastName" : "LastName",
          "AllowPersonalAccounts" : false,
          "IsSystemOwned" : true
        }
      },
      "MeAuthenticationProvider" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The id of the user's primary authentication provider.",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the user's primary authentication provider (Read-only)",
            "nullable" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "Identity" : {
            "type" : "string",
            "description" : "The value required to authenticate the user against the specified authentication provider.  Often this will be\r\nwhat the user enters when logging in.  However, for some providers such as External Federation, it needs to match\r\nthe provider's Name Claim that is returned.  This value must be unique per authentication provider.  For Active\r\nDirectory and LDAP, you may specify the 'samAccountName' or 'Username' attribute when creating a user, but the\r\nvalue will be overwritten with the 'objectGUID' or 'entryUuid', respectively.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Authentication provider information for Me",
        "example" : {
          "TypeReferenceName" : "Unknown",
          "Id" : 0,
          "Identity" : "Identity",
          "Name" : "Name"
        }
      },
      "MeEntitlement" : {
        "type" : "object",
        "properties" : {
          "Account" : {
            "$ref" : "#/components/schemas/MeEntitlementAccount"
          },
          "Asset" : {
            "$ref" : "#/components/schemas/MeEntitlementAsset"
          },
          "Policy" : {
            "$ref" : "#/components/schemas/MeEntitlementPolicy"
          },
          "ActiveRequests" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ActiveRequest"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Policy" : {
            "AccessRequestProperties" : {
              "AccessRequestType" : "Password",
              "ChangeSshKeyAfterCheckin" : true,
              "AllowLinkedAccountPasswordAccess" : false,
              "SessionAccessAccountType" : "None",
              "LinkedAccountScopeFiltering" : false,
              "AllowSessionPasswordRelease" : false,
              "UseAltLoginName" : false,
              "SessionAccessAccounts" : [ {
                "IsServiceAccount" : true,
                "Description" : "Description",
                "Platform" : {
                  "PlatformFamily" : "None",
                  "DisplayName" : "DisplayName",
                  "Id" : 6,
                  "IsAcctNameCaseSensitive" : true,
                  "PlatformType" : "Unknown",
                  "SupportsSessionManagement" : true
                },
                "DomainName" : "DomainName",
                "DistinguishedName" : "DistinguishedName",
                "LinkedUsersCount" : 9,
                "RequestProperties" : {
                  "AllowPasswordRequest" : true,
                  "AllowSshKeyRequest" : true,
                  "AllowSessionRequest" : true
                },
                "AccountType" : "Asset",
                "Name" : "Name",
                "NotifyOwnersOnly" : true,
                "HasSshKey" : true,
                "SuspendAccountWhenCheckedIn" : true,
                "AltLoginName" : "AltLoginName",
                "Asset" : {
                  "AssetPartitionId" : 6,
                  "AssetPartitionName" : "AssetPartitionName",
                  "NetworkAddress" : "NetworkAddress",
                  "Id" : 3,
                  "Name" : "Name"
                },
                "NetBiosName" : "NetBiosName",
                "Id" : 8,
                "Disabled" : true,
                "HasPassword" : true
              }, {
                "IsServiceAccount" : true,
                "Description" : "Description",
                "Platform" : {
                  "PlatformFamily" : "None",
                  "DisplayName" : "DisplayName",
                  "Id" : 6,
                  "IsAcctNameCaseSensitive" : true,
                  "PlatformType" : "Unknown",
                  "SupportsSessionManagement" : true
                },
                "DomainName" : "DomainName",
                "DistinguishedName" : "DistinguishedName",
                "LinkedUsersCount" : 9,
                "RequestProperties" : {
                  "AllowPasswordRequest" : true,
                  "AllowSshKeyRequest" : true,
                  "AllowSessionRequest" : true
                },
                "AccountType" : "Asset",
                "Name" : "Name",
                "NotifyOwnersOnly" : true,
                "HasSshKey" : true,
                "SuspendAccountWhenCheckedIn" : true,
                "AltLoginName" : "AltLoginName",
                "Asset" : {
                  "AssetPartitionId" : 6,
                  "AssetPartitionName" : "AssetPartitionName",
                  "NetworkAddress" : "NetworkAddress",
                  "Id" : 3,
                  "Name" : "Name"
                },
                "NetBiosName" : "NetBiosName",
                "Id" : 8,
                "Disabled" : true,
                "HasPassword" : true
              } ],
              "AllowSessionSshKeyRelease" : false,
              "TerminateExpiredSessions" : false,
              "MaximumSimultaneousReleases" : 66,
              "ChangePasswordAfterCheckin" : true,
              "PassphraseProtectSshKey" : true,
              "AllowSimultaneousAccess" : false
            },
            "RolePriority" : 2,
            "EffectiveHourlyRestrictionProperties" : {
              "EnableHourlyRestrictions" : false,
              "ThursdayValidHours" : [ 6, 6 ],
              "WednesdayValidHours" : [ 0, 0 ],
              "SaturdayValidHours" : [ 1, 1 ],
              "TuesdayValidHours" : [ 4, 4 ],
              "MondayValidHours" : [ 3, 3 ],
              "FridayValidHours" : [ 4, 4 ],
              "SundayValidHours" : [ 4, 4 ]
            },
            "Priority" : 5,
            "EmergencyAccessProperties" : {
              "IgnoreHourlyRestrictions" : true,
              "AllowEmergencyAccess" : false
            },
            "EffectiveExpirationDate" : "2000-01-23T04:56:07.000+00:00",
            "RequesterProperties" : {
              "RequireServiceTicket" : false,
              "DefaultReleaseDurationMinutes" : 43,
              "DefaultReleaseDurationDays" : 6,
              "DefaultReleaseDurationHours" : 9,
              "MaximumReleaseDurationMinutes" : 8,
              "AllowCustomDuration" : false,
              "MaximumReleaseDurationDays" : 3,
              "RequireReasonComment" : false,
              "MaximumReleaseDurationHours" : 2,
              "RequireReasonCode" : false
            },
            "Id" : 5,
            "Name" : "Name",
            "ReasonCodes" : [ {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "Id" : 8,
              "Name" : "Name"
            } ]
          },
          "Account" : {
            "Description" : "Description",
            "DomainName" : "DomainName",
            "AllowSshKeyRequest" : true,
            "AssetName" : "AssetName",
            "Name" : "Name",
            "AllowSessionRequest" : true,
            "AllowPasswordRequest" : true,
            "AssetNetworkAddress" : "AssetNetworkAddress",
            "HasSshKey" : true,
            "Id" : 0,
            "Disabled" : true,
            "HasPassword" : true,
            "AssetId" : 6
          },
          "ActiveRequests" : [ {
            "AccessRequestType" : "Password",
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestId" : "RequestId",
            "State" : "New",
            "IsEmergency" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "AccessRequestType" : "Password",
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestId" : "RequestId",
            "State" : "New",
            "IsEmergency" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "Asset" : {
            "PlatformDisplayName" : "PlatformDisplayName",
            "Description" : "Description",
            "NetworkAddress" : "NetworkAddress",
            "DomainName" : "DomainName",
            "Id" : 1,
            "PlatformType" : "Unknown",
            "Name" : "Name"
          }
        }
      },
      "MeEntitlementAccount" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "nullable" : true
          },
          "HasPassword" : {
            "type" : "boolean"
          },
          "HasSshKey" : {
            "type" : "boolean"
          },
          "Disabled" : {
            "type" : "boolean"
          },
          "AssetId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "AllowPasswordRequest" : {
            "type" : "boolean"
          },
          "AllowSessionRequest" : {
            "type" : "boolean"
          },
          "AllowSshKeyRequest" : {
            "type" : "boolean"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "DomainName" : "DomainName",
          "AllowSshKeyRequest" : true,
          "AssetName" : "AssetName",
          "Name" : "Name",
          "AllowSessionRequest" : true,
          "AllowPasswordRequest" : true,
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "HasSshKey" : true,
          "Id" : 0,
          "Disabled" : true,
          "HasPassword" : true,
          "AssetId" : 6
        }
      },
      "MeEntitlementAsset" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "nullable" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "nullable" : true
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "nullable" : true
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PlatformDisplayName" : "PlatformDisplayName",
          "Description" : "Description",
          "NetworkAddress" : "NetworkAddress",
          "DomainName" : "DomainName",
          "Id" : 1,
          "PlatformType" : "Unknown",
          "Name" : "Name"
        }
      },
      "MeEntitlementPolicy" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "nullable" : true
          },
          "Priority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "RolePriority" : {
            "type" : "integer",
            "format" : "int32"
          },
          "RequesterProperties" : {
            "$ref" : "#/components/schemas/PolicyRequesterProperties"
          },
          "EmergencyAccessProperties" : {
            "$ref" : "#/components/schemas/PolicyEmergencyAccessProperties"
          },
          "AccessRequestProperties" : {
            "$ref" : "#/components/schemas/AccessRequestProperties"
          },
          "EffectiveExpirationDate" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "EffectiveHourlyRestrictionProperties" : {
            "$ref" : "#/components/schemas/HourlyRestrictionProperties"
          },
          "ReasonCodes" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ReasonCode"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccessRequestProperties" : {
            "AccessRequestType" : "Password",
            "ChangeSshKeyAfterCheckin" : true,
            "AllowLinkedAccountPasswordAccess" : false,
            "SessionAccessAccountType" : "None",
            "LinkedAccountScopeFiltering" : false,
            "AllowSessionPasswordRelease" : false,
            "UseAltLoginName" : false,
            "SessionAccessAccounts" : [ {
              "IsServiceAccount" : true,
              "Description" : "Description",
              "Platform" : {
                "PlatformFamily" : "None",
                "DisplayName" : "DisplayName",
                "Id" : 6,
                "IsAcctNameCaseSensitive" : true,
                "PlatformType" : "Unknown",
                "SupportsSessionManagement" : true
              },
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "LinkedUsersCount" : 9,
              "RequestProperties" : {
                "AllowPasswordRequest" : true,
                "AllowSshKeyRequest" : true,
                "AllowSessionRequest" : true
              },
              "AccountType" : "Asset",
              "Name" : "Name",
              "NotifyOwnersOnly" : true,
              "HasSshKey" : true,
              "SuspendAccountWhenCheckedIn" : true,
              "AltLoginName" : "AltLoginName",
              "Asset" : {
                "AssetPartitionId" : 6,
                "AssetPartitionName" : "AssetPartitionName",
                "NetworkAddress" : "NetworkAddress",
                "Id" : 3,
                "Name" : "Name"
              },
              "NetBiosName" : "NetBiosName",
              "Id" : 8,
              "Disabled" : true,
              "HasPassword" : true
            }, {
              "IsServiceAccount" : true,
              "Description" : "Description",
              "Platform" : {
                "PlatformFamily" : "None",
                "DisplayName" : "DisplayName",
                "Id" : 6,
                "IsAcctNameCaseSensitive" : true,
                "PlatformType" : "Unknown",
                "SupportsSessionManagement" : true
              },
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "LinkedUsersCount" : 9,
              "RequestProperties" : {
                "AllowPasswordRequest" : true,
                "AllowSshKeyRequest" : true,
                "AllowSessionRequest" : true
              },
              "AccountType" : "Asset",
              "Name" : "Name",
              "NotifyOwnersOnly" : true,
              "HasSshKey" : true,
              "SuspendAccountWhenCheckedIn" : true,
              "AltLoginName" : "AltLoginName",
              "Asset" : {
                "AssetPartitionId" : 6,
                "AssetPartitionName" : "AssetPartitionName",
                "NetworkAddress" : "NetworkAddress",
                "Id" : 3,
                "Name" : "Name"
              },
              "NetBiosName" : "NetBiosName",
              "Id" : 8,
              "Disabled" : true,
              "HasPassword" : true
            } ],
            "AllowSessionSshKeyRelease" : false,
            "TerminateExpiredSessions" : false,
            "MaximumSimultaneousReleases" : 66,
            "ChangePasswordAfterCheckin" : true,
            "PassphraseProtectSshKey" : true,
            "AllowSimultaneousAccess" : false
          },
          "RolePriority" : 2,
          "EffectiveHourlyRestrictionProperties" : {
            "EnableHourlyRestrictions" : false,
            "ThursdayValidHours" : [ 6, 6 ],
            "WednesdayValidHours" : [ 0, 0 ],
            "SaturdayValidHours" : [ 1, 1 ],
            "TuesdayValidHours" : [ 4, 4 ],
            "MondayValidHours" : [ 3, 3 ],
            "FridayValidHours" : [ 4, 4 ],
            "SundayValidHours" : [ 4, 4 ]
          },
          "Priority" : 5,
          "EmergencyAccessProperties" : {
            "IgnoreHourlyRestrictions" : true,
            "AllowEmergencyAccess" : false
          },
          "EffectiveExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "RequesterProperties" : {
            "RequireServiceTicket" : false,
            "DefaultReleaseDurationMinutes" : 43,
            "DefaultReleaseDurationDays" : 6,
            "DefaultReleaseDurationHours" : 9,
            "MaximumReleaseDurationMinutes" : 8,
            "AllowCustomDuration" : false,
            "MaximumReleaseDurationDays" : 3,
            "RequireReasonComment" : false,
            "MaximumReleaseDurationHours" : 2,
            "RequireReasonCode" : false
          },
          "Id" : 5,
          "Name" : "Name",
          "ReasonCodes" : [ {
            "Description" : "Description",
            "Id" : 8,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "Id" : 8,
            "Name" : "Name"
          } ]
        }
      },
      "MonthlyScheduleType" : {
        "type" : "string",
        "description" : "The type of monthly schedule to run on",
        "format" : "string",
        "enum" : [ "DayOfMonth", "DayOfWeekOfMonth" ]
      },
      "MyEventSubscriber" : {
        "required" : [ "Type" ],
        "type" : "object",
        "properties" : {
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this event subscriber is disabled for the current user"
          },
          "Id" : {
            "type" : "integer",
            "description" : "Unique key of the subscriber.",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber description",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/EventSubscriberType"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Database ID of user to send notification to (defaults to calling user). Required for EventSubscriberType of Signalr. Supported by EventSubscriberType of Email.",
            "format" : "int32",
            "nullable" : true
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of user to send notification to (Read-only)",
            "nullable" : true
          },
          "UserEmailAddress" : {
            "type" : "string",
            "description" : "Email address user to send notification to (Read-only)",
            "nullable" : true
          },
          "EmailAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber email address. Supported by EventSubscriberType of Email. Cannot be specified with UserId.",
            "nullable" : true
          },
          "SyslogProperties" : {
            "$ref" : "#/components/schemas/SyslogSubscriberProperties"
          },
          "SnmpProperties" : {
            "$ref" : "#/components/schemas/SnmpSubscriberProperties"
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/EventObjectType"
          },
          "ObjectId" : {
            "type" : "integer",
            "description" : "Id of the object to subscribe to",
            "format" : "int32",
            "nullable" : true
          },
          "IsApplianceShared" : {
            "type" : "boolean",
            "description" : "Whether this event subscriber is manageable by all appliance admins.\r\nThe property is read-only for all users except the user that originally created the subscriber."
          },
          "SubscribeToAllEvents" : {
            "type" : "boolean",
            "description" : "Will automatically subscribe to all events allowed by the user's permissions"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a built-in event subscriber that cannot be modified (Read-only)"
          },
          "PartitionOwnerIsSubscribed" : {
            "type" : "boolean",
            "description" : "Whether partition owners are subscribed. If there are no explicit partition owners then users with the AssetAdmin role will be notified. (Read-only)"
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Users with these administrative roles are subscribed. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "WorkflowUserIsSubscribed" : {
            "type" : "boolean",
            "description" : "Whether workflow users are subscribed (Read-only)"
          },
          "Subscriptions" : {
            "type" : "array",
            "description" : "Events that are subscribed to",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventSubscription"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "ObjectId" : 1,
          "Subscriptions" : [ {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ null, null ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : "Unknown",
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : null,
            "Obsolete" : true,
            "AsyncBroadcastFlag" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          }, {
            "ActivityLogFlag" : true,
            "AllowedAdminRoles" : [ null, null ],
            "Category" : "Unknown",
            "Description" : "Description",
            "SyslogFlag" : true,
            "EmailFlag" : true,
            "Properties" : [ {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            }, {
              "Description" : "Description",
              "IsCommon" : true,
              "Name" : "Name"
            } ],
            "Name" : "Unknown",
            "AllowPartitionOwner" : true,
            "AsyncUnicastFlag" : true,
            "SnmpFlag" : true,
            "ObjectType" : null,
            "Obsolete" : true,
            "AsyncBroadcastFlag" : true,
            "CategoryDisplayName" : "CategoryDisplayName",
            "DisplayName" : "DisplayName",
            "IsObjectAware" : true,
            "Level" : "Debug",
            "AsyncMulticastFlag" : true
          } ],
          "UserEmailAddress" : "UserEmailAddress",
          "EmailAddress" : "EmailAddress",
          "ObjectType" : "Unknown",
          "Type" : "Unknown",
          "CreatedByUserId" : 5,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "PartitionOwnerIsSubscribed" : true,
          "UserId" : 6,
          "SnmpProperties" : {
            "EngineId" : "EngineId",
            "EncryptionType" : "None",
            "NetworkAddress" : "NetworkAddress",
            "Version" : 1,
            "AuthenticationPassword" : "AuthenticationPassword",
            "HasAuthenticationPassword" : true,
            "Port" : 5,
            "AuthenticationUserName" : "AuthenticationUserName",
            "EncryptionPassword" : "EncryptionPassword",
            "HasEncryptionPassword" : true,
            "Community" : "public",
            "AuthenticationType" : "None"
          },
          "SubscribeToAllEvents" : true,
          "SyslogProperties" : {
            "LogFormat" : "CEF",
            "UseClientCertificate" : false,
            "TcpFraming" : "OctetCounting",
            "NetworkAddress" : "NetworkAddress",
            "UseSslEncryption" : false,
            "Port" : 19536,
            "SyslogServerId" : 1,
            "SyslogServerName" : "SyslogServerName",
            "Facility" : "Kernel",
            "Protocol" : "LegacyUdp",
            "VerifySslCertificate" : false,
            "KeyPrefix" : "KeyPrefix"
          },
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Disabled" : true,
          "UserDisplayName" : "UserDisplayName",
          "IsApplianceShared" : true,
          "WorkflowUserIsSubscribed" : true,
          "IsSystemOwned" : true
        }
      },
      "NetworkAddressFamily" : {
        "type" : "string",
        "description" : "Type of network address",
        "format" : "string",
        "enum" : [ "Ipv4", "Ipv6" ]
      },
      "NetworkDiscoveryOptions" : {
        "type" : "object",
        "properties" : {
          "OsFingerPrint" : {
            "type" : "boolean",
            "description" : "Attempt to determine operating system using the OS fingerprint. Can increase duration of discovery.",
            "default" : false
          },
          "ScanTimeout" : {
            "type" : "integer",
            "description" : "Time allowed, in seconds, for network scan to run before cancelling the task. Set to 0 to use the default of 15 minutes.",
            "format" : "int32",
            "default" : 900
          }
        },
        "additionalProperties" : false,
        "description" : "Options available with Network Type Discovery",
        "example" : {
          "ScanTimeout" : 2,
          "OsFingerPrint" : false
        }
      },
      "NetworkDiscoveryProperties" : {
        "required" : [ "ScanRules" ],
        "type" : "object",
        "properties" : {
          "ScanOptions" : {
            "$ref" : "#/components/schemas/NetworkDiscoveryOptions"
          },
          "ScanRules" : {
            "type" : "array",
            "description" : "Set of ip ranges to apply to the network asset discovery query",
            "items" : {
              "$ref" : "#/components/schemas/AssetDiscoveryNetScanRule"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Properties used when using Network DiscoveryType",
        "example" : {
          "ScanOptions" : {
            "ScanTimeout" : 2,
            "OsFingerPrint" : false
          },
          "ScanRules" : [ {
            "StartIp" : "StartIp",
            "EndIp" : "EndIp",
            "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
          }, {
            "StartIp" : "StartIp",
            "EndIp" : "EndIp",
            "ExcludeIps" : [ "ExcludeIps", "ExcludeIps" ]
          } ]
        }
      },
      "NetworkMember" : {
        "required" : [ "Id" ],
        "type" : "object",
        "properties" : {
          "SessionMemberStatus" : {
            "$ref" : "#/components/schemas/SessionMemberStatus"
          },
          "SessionMemberRoles" : {
            "type" : "array",
            "description" : "Roles assigned to the sessions member",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Id" : {
            "type" : "string",
            "description" : "The unique ID of the appliance"
          },
          "Name" : {
            "type" : "string",
            "description" : "The display name of the appliance",
            "nullable" : true
          },
          "HostDnsSuffix" : {
            "type" : "string",
            "description" : "The Host Dns Suffix of the appliance",
            "nullable" : true
          },
          "Ipv4Address" : {
            "type" : "string",
            "description" : "The IPv4 address of this appliance",
            "nullable" : true
          },
          "Ipv6Address" : {
            "type" : "string",
            "description" : "The IPv6 address of this appliance",
            "nullable" : true
          },
          "IsSessionMember" : {
            "type" : "boolean",
            "description" : "Determines if the member is a sessions appliance",
            "readOnly" : true
          },
          "SyncStatus" : {
            "type" : "string",
            "description" : "Configuration sync status to the sessions member",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an appliance that has been assigned to a managed network",
        "example" : {
          "HostDnsSuffix" : "HostDnsSuffix",
          "IsSessionMember" : true,
          "SessionMemberStatus" : "Unknown",
          "SyncStatus" : "SyncStatus",
          "SessionMemberRoles" : [ "SessionMemberRoles", "SessionMemberRoles" ],
          "Id" : "Id",
          "Ipv6Address" : "Ipv6Address",
          "Name" : "Name",
          "Ipv4Address" : "Ipv4Address"
        }
      },
      "NetworkSubnet" : {
        "required" : [ "AddressFamily", "NetworkAddress", "NetworkPrefixLength" ],
        "type" : "object",
        "properties" : {
          "AddressFamily" : {
            "$ref" : "#/components/schemas/NetworkAddressFamily"
          },
          "NetworkAddress" : {
            "maximum" : 45,
            "maxLength" : 45,
            "type" : "string",
            "description" : "Address of the network e.g., 192.168.1.0 or 2001:0db8:0123:4567:89ab:cdef:1234:5678"
          },
          "NetworkPrefixLength" : {
            "type" : "integer",
            "description" : "The length of the network prefix e.g., 24",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a network subnet in CIDR notation e.g., 192.168.1.0/24",
        "example" : {
          "NetworkAddress" : "NetworkAddress",
          "NetworkPrefixLength" : 1,
          "AddressFamily" : "Ipv4"
        }
      },
      "NewAccessRequest" : {
        "type" : "object",
        "properties" : {
          "AccountId" : {
            "type" : "integer",
            "description" : "Database ID of the account to request password for (or access account for sessions)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of asset to request access to",
            "format" : "int32"
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "IsEmergency" : {
            "type" : "boolean",
            "description" : "Whether emergency access is being requested",
            "default" : false
          },
          "ReasonCodeId" : {
            "type" : "integer",
            "description" : "Database ID of the pre-defined reason code for why the password access is needed",
            "format" : "int32",
            "nullable" : true
          },
          "ReasonComment" : {
            "maximum" : 1000,
            "maxLength" : 1000,
            "type" : "string",
            "description" : "Requester's reason of why the password access is needed",
            "nullable" : true
          },
          "RequestedDurationDays" : {
            "maximum" : 31,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of days requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.",
            "format" : "int32",
            "nullable" : true
          },
          "RequestedDurationHours" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of hours requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.",
            "format" : "int32",
            "nullable" : true
          },
          "RequestedDurationMinutes" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The number of minutes requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.",
            "format" : "int32",
            "nullable" : true
          },
          "RequestedFor" : {
            "type" : "string",
            "description" : "The UTC date-time requested for password access. {null} means \"Right Now!\"",
            "format" : "date-time",
            "nullable" : true
          },
          "TicketNumber" : {
            "type" : "string",
            "description" : "The help desk ticket number as required by policy",
            "nullable" : true
          },
          "AllowSraSessionLaunch" : {
            "type" : "boolean",
            "description" : "Whether SPP can launch an SRA session"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a request for the password of an account",
        "example" : {
          "AccessRequestType" : "Password",
          "AccountId" : 6,
          "ReasonComment" : "ReasonComment",
          "TicketNumber" : "TicketNumber",
          "RequestedDurationMinutes" : 41,
          "IsEmergency" : false,
          "AllowSraSessionLaunch" : true,
          "RequestedDurationHours" : 5,
          "AssetId" : 1,
          "RequestedFor" : "2000-01-23T04:56:07.000+00:00",
          "ReasonCodeId" : 5,
          "RequestedDurationDays" : 17
        }
      },
      "NodeConnectivityHealth" : {
        "type" : "object",
        "properties" : {
          "ApplianceId" : {
            "type" : "string",
            "nullable" : true
          },
          "AverageLatency" : {
            "$ref" : "#/components/schemas/TimeInterval"
          },
          "IsReachable" : {
            "type" : "boolean"
          },
          "MaxLatency" : {
            "$ref" : "#/components/schemas/TimeInterval"
          },
          "MinLatency" : {
            "$ref" : "#/components/schemas/TimeInterval"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "MinLatency" : null,
          "AverageLatency" : null,
          "IsReachable" : true,
          "ApplianceId" : "ApplianceId",
          "MaxLatency" : null
        }
      },
      "NodeHealth" : {
        "type" : "object",
        "properties" : {
          "ApplianceId" : {
            "type" : "string",
            "description" : "Unique hardware-specific identifier of this node",
            "nullable" : true
          },
          "AuditLog" : {
            "$ref" : "#/components/schemas/HealthDetail"
          },
          "CheckDate" : {
            "type" : "string",
            "description" : "The UTC date/time of this health check",
            "format" : "date-time"
          },
          "CheckDuration" : {
            "$ref" : "#/components/schemas/TimeInterval"
          },
          "ClusterCommunication" : {
            "$ref" : "#/components/schemas/HealthDetail"
          },
          "ClusterConnectivity" : {
            "$ref" : "#/components/schemas/ClusterConnectivityHealthDetail"
          },
          "Name" : {
            "type" : "string",
            "description" : "Appliance name of this node",
            "nullable" : true
          },
          "NetworkInformation" : {
            "$ref" : "#/components/schemas/NodeNetworkInformation"
          },
          "AccessWorkflow" : {
            "$ref" : "#/components/schemas/HealthDetail"
          },
          "PolicyData" : {
            "$ref" : "#/components/schemas/HealthDetail"
          },
          "ResourceUsage" : {
            "$ref" : "#/components/schemas/NodeResourceHealthDetail"
          },
          "SerialNumber" : {
            "type" : "string",
            "description" : "Hardware serial number of this appliance node",
            "nullable" : true
          },
          "State" : {
            "$ref" : "#/components/schemas/ApplianceState"
          },
          "UpTime" : {
            "$ref" : "#/components/schemas/TimeInterval"
          },
          "Version" : {
            "$ref" : "#/components/schemas/ProductVersion"
          },
          "SessionsModule" : {
            "$ref" : "#/components/schemas/HealthDetail"
          },
          "HardwareSecurityModule" : {
            "$ref" : "#/components/schemas/HealthDetail"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "SessionsModule" : null,
          "ResourceUsage" : {
            "Status" : null,
            "ErrorDetail" : "ErrorDetail",
            "Error" : "Error",
            "NodeResourceHealth" : {
              "ProcessorCount" : 4,
              "ProcessorPercentUsed" : 7.386282,
              "MemoryPercentFree" : 3.6160767,
              "Temperatures" : [ {
                "TemperatureCelsius" : 1.2315135,
                "ZoneName" : "ZoneName",
                "TemperatureFahrenheit" : 1.0246457,
                "TemperatureKelvin" : 1.4894159
              }, {
                "TemperatureCelsius" : 1.2315135,
                "ZoneName" : "ZoneName",
                "TemperatureFahrenheit" : 1.0246457,
                "TemperatureKelvin" : 1.4894159
              } ],
              "MemoryFreeBytes" : 9,
              "MemoryTotalBytes" : 2,
              "DiskFreeBytes" : 5,
              "DiskPercentFree" : 2.302136,
              "DiskTotalBytes" : 7
            },
            "ErrorCode" : 5
          },
          "CheckDuration" : {
            "TotalMilliseconds" : 3.616076749251911,
            "Hours" : 5,
            "Days" : 5,
            "Seconds" : 9,
            "Milliseconds" : 2,
            "Minutes" : 7
          },
          "AuditLog" : {
            "Status" : "Unknown",
            "ErrorDetail" : "ErrorDetail",
            "Error" : "Error",
            "ErrorCode" : 0
          },
          "Name" : "Name",
          "NetworkInformation" : {
            "HostDnsSuffix" : "HostDnsSuffix",
            "LinkSpeedMbps" : 1,
            "LinkPresent" : true,
            "MacAddress" : "MacAddress",
            "Ipv6Address" : "Ipv6Address",
            "Ipv4Address" : "Ipv4Address"
          },
          "ClusterConnectivity" : {
            "Status" : null,
            "ErrorDetail" : "ErrorDetail",
            "Error" : "Error",
            "ErrorCode" : 6,
            "NodeConnectivity" : [ {
              "MinLatency" : null,
              "AverageLatency" : null,
              "IsReachable" : true,
              "ApplianceId" : "ApplianceId",
              "MaxLatency" : null
            }, {
              "MinLatency" : null,
              "AverageLatency" : null,
              "IsReachable" : true,
              "ApplianceId" : "ApplianceId",
              "MaxLatency" : null
            } ]
          },
          "ClusterCommunication" : null,
          "HardwareSecurityModule" : null,
          "SerialNumber" : "SerialNumber",
          "UpTime" : null,
          "Version" : {
            "Major" : 6,
            "Revision" : 1,
            "BuildDate" : "2000-01-23T04:56:07.000+00:00",
            "BuildPlatform" : "BuildPlatform",
            "Build" : 4,
            "RsmsVersion" : "RsmsVersion",
            "OsPatchLevel" : 5,
            "Minor" : 7,
            "BuildVariant" : "BuildVariant"
          },
          "State" : "Unknown",
          "AccessWorkflow" : null,
          "PolicyData" : null,
          "CheckDate" : "2000-01-23T04:56:07.000+00:00",
          "ApplianceId" : "ApplianceId"
        }
      },
      "NodeNetworkInformation" : {
        "type" : "object",
        "properties" : {
          "Ipv4Address" : {
            "type" : "string",
            "description" : "The IPv4 network address",
            "nullable" : true
          },
          "Ipv6Address" : {
            "type" : "string",
            "description" : "The IPv6 network address",
            "nullable" : true
          },
          "LinkPresent" : {
            "type" : "boolean",
            "description" : "Whether the link is present"
          },
          "LinkSpeedMbps" : {
            "type" : "integer",
            "description" : "The speed of the network link.",
            "format" : "int32"
          },
          "MacAddress" : {
            "type" : "string",
            "description" : "MAC address of this interface",
            "nullable" : true
          },
          "HostDnsSuffix" : {
            "type" : "string",
            "description" : "Host DNS Suffix",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "HostDnsSuffix" : "HostDnsSuffix",
          "LinkSpeedMbps" : 1,
          "LinkPresent" : true,
          "MacAddress" : "MacAddress",
          "Ipv6Address" : "Ipv6Address",
          "Ipv4Address" : "Ipv4Address"
        }
      },
      "NodeResourceHealth" : {
        "type" : "object",
        "properties" : {
          "DiskFreeBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "DiskPercentFree" : {
            "type" : "number",
            "format" : "float"
          },
          "DiskTotalBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "MemoryFreeBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "MemoryPercentFree" : {
            "type" : "number",
            "format" : "float"
          },
          "MemoryTotalBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "ProcessorCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ProcessorPercentUsed" : {
            "type" : "number",
            "format" : "float"
          },
          "Temperatures" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TemperatureStatistic"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ProcessorCount" : 4,
          "ProcessorPercentUsed" : 7.386282,
          "MemoryPercentFree" : 3.6160767,
          "Temperatures" : [ {
            "TemperatureCelsius" : 1.2315135,
            "ZoneName" : "ZoneName",
            "TemperatureFahrenheit" : 1.0246457,
            "TemperatureKelvin" : 1.4894159
          }, {
            "TemperatureCelsius" : 1.2315135,
            "ZoneName" : "ZoneName",
            "TemperatureFahrenheit" : 1.0246457,
            "TemperatureKelvin" : 1.4894159
          } ],
          "MemoryFreeBytes" : 9,
          "MemoryTotalBytes" : 2,
          "DiskFreeBytes" : 5,
          "DiskPercentFree" : 2.302136,
          "DiskTotalBytes" : 7
        }
      },
      "NodeResourceHealthDetail" : {
        "type" : "object",
        "properties" : {
          "Error" : {
            "type" : "string",
            "nullable" : true
          },
          "Status" : {
            "$ref" : "#/components/schemas/HealthStatus"
          },
          "ErrorCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ErrorDetail" : {
            "type" : "string",
            "nullable" : true
          },
          "NodeResourceHealth" : {
            "$ref" : "#/components/schemas/NodeResourceHealth"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Status" : null,
          "ErrorDetail" : "ErrorDetail",
          "Error" : "Error",
          "NodeResourceHealth" : {
            "ProcessorCount" : 4,
            "ProcessorPercentUsed" : 7.386282,
            "MemoryPercentFree" : 3.6160767,
            "Temperatures" : [ {
              "TemperatureCelsius" : 1.2315135,
              "ZoneName" : "ZoneName",
              "TemperatureFahrenheit" : 1.0246457,
              "TemperatureKelvin" : 1.4894159
            }, {
              "TemperatureCelsius" : 1.2315135,
              "ZoneName" : "ZoneName",
              "TemperatureFahrenheit" : 1.0246457,
              "TemperatureKelvin" : 1.4894159
            } ],
            "MemoryFreeBytes" : 9,
            "MemoryTotalBytes" : 2,
            "DiskFreeBytes" : 5,
            "DiskPercentFree" : 2.302136,
            "DiskTotalBytes" : 7
          },
          "ErrorCode" : 5
        }
      },
      "NonAlphaNumericRestrictionType" : {
        "type" : "string",
        "description" : "How to determine which non-alphanumeric characters are valid",
        "format" : "string",
        "enum" : [ "Include", "Exclude" ]
      },
      "NotificationContact" : {
        "type" : "object",
        "properties" : {
          "ContactAddress" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "The contact adress, e.g. bob@example.com (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "ContactType" : {
            "$ref" : "#/components/schemas/NotificationContactType"
          }
        },
        "additionalProperties" : false,
        "description" : "A resource representing the contact info of people associated with different roles in the password policy",
        "example" : {
          "ContactAddress" : "ContactAddress",
          "ContactType" : "ReleaseWithoutApproval"
        }
      },
      "NotificationContactType" : {
        "type" : "string",
        "description" : "Type of notification contact",
        "format" : "string",
        "enum" : [ "ReleaseWithoutApproval", "EmergencyAccess", "ReviewEscalation", "ApprovalEscalation" ]
      },
      "ObjectChangeLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Database ID of this log entry",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "Time the change occurred (Read-only)",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Unique id of the user that caused the change (Read-only).",
            "format" : "int32"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "OperationType" : {
            "$ref" : "#/components/schemas/OperationType"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "The event display name that caused the change (Read-only)",
            "nullable" : true
          },
          "Message" : {
            "type" : "string",
            "description" : "Extra info clarifying the event (Read-only)",
            "nullable" : true
          },
          "ObjectId" : {
            "type" : "string",
            "description" : "The database ID of the object that was changed (Read-only).",
            "nullable" : true
          },
          "ObjectType" : {
            "$ref" : "#/components/schemas/ObjectType"
          },
          "ObjectName" : {
            "type" : "string",
            "description" : "The name of the object that was changed (Read-only).",
            "nullable" : true
          },
          "ParentObjectType" : {
            "$ref" : "#/components/schemas/ObjectType"
          },
          "ParentObjectId" : {
            "type" : "string",
            "description" : "The database ID of the parent of the object that was changed (Read-only).",
            "nullable" : true
          },
          "ParentObjectName" : {
            "type" : "string",
            "description" : "The name of the parent of the object that was changed (Read-only).",
            "nullable" : true
          },
          "RelatedObjectType" : {
            "$ref" : "#/components/schemas/ObjectType"
          },
          "RelatedObjectId" : {
            "type" : "string",
            "description" : "The database ID of the object relating to this change (Read-only).",
            "nullable" : true
          },
          "RelatedObjectName" : {
            "type" : "string",
            "description" : "The name of the object relating to this change (Read-only).",
            "nullable" : true
          },
          "OldValue" : {
            "type" : "string",
            "description" : "The original JSON-encoded entity values (Read-only).",
            "nullable" : true
          },
          "NewValue" : {
            "type" : "string",
            "description" : "The new JSON-encoded entity values (Read-only).",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The database ID of the related asset partition (Read-only).",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "The name of the related asset partition (Read-only).",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "The network address of the related asset (Read-only).",
            "nullable" : true
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "Changes" : {
            "type" : "array",
            "description" : "Changes made to the object for this entry",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PropertyChange"
            }
          },
          "SessionSpsNodeIpAddress" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a single event change on the server",
        "example" : {
          "ApplianceName" : "ApplianceName",
          "Message" : "Message",
          "EventDisplayName" : "EventDisplayName",
          "OldValue" : "OldValue",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "RelatedObjectType" : null,
          "SessionSpsNodeIpAddress" : "SessionSpsNodeIpAddress",
          "ParentObjectType" : null,
          "AssetPartitionName" : "AssetPartitionName",
          "ObjectType" : "NotSpecified",
          "RelatedObjectId" : "RelatedObjectId",
          "RelatedObjectName" : "RelatedObjectName",
          "ApplianceId" : "ApplianceId",
          "ParentObjectName" : "ParentObjectName",
          "AssetPartitionId" : 6,
          "Changes" : [ {
            "Type" : "Type",
            "OldValue" : "OldValue",
            "DisplayName" : "DisplayName",
            "NewValue" : "NewValue"
          }, {
            "Type" : "Type",
            "OldValue" : "OldValue",
            "DisplayName" : "DisplayName",
            "NewValue" : "NewValue"
          } ],
          "ObjectId" : "ObjectId",
          "EventName" : "Unknown",
          "ObjectName" : "ObjectName",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 0,
          "NewValue" : "NewValue",
          "Id" : "Id",
          "OperationType" : "Create",
          "ParentObjectId" : "ParentObjectId"
        }
      },
      "ObjectType" : {
        "type" : "string",
        "description" : "Object types that are supported by ActivityLog",
        "format" : "string",
        "enum" : [ "NotSpecified", "AccountGroup", "Asset", "AssetAccount", "User", "UserGroup", "Role", "IdentityProvider", "AccessPolicy", "AssetPartition", "Directory", "UserPasswordRule", "ProductLicense", "SshKey", "AssetSshHostKey", "ArchiveServer", "ArchiveServerSshHostKey", "PasswordProfile", "AssetDiscoveryJob", "AccountPasswordRule", "PasswordCheckSchedule", "PasswordChangeSchedule", "AccountDiscoverySchedule", "UserRequestFavorite", "ReasonCode", "EmailTemplate", "DailyMessage", "TicketSystem", "AssetGroup", "EmailClientConfig", "LoginMessage", "ApprovalAnywhereConfiguration", "ScheduledAuditLogReport", "SessionArchiveConfig", "ServicesConfig", "EventSubscriber", "MaintenanceSchedule", "PartitionTag", "PartitionTaggingRule", "DynamicGroupingRule", "PolicyAccount", "ManagedNetwork", "NetworkMember", "StarlingSubscription", "Registration", "RelayProxyServer", "Platform", "PasswordSyncGroup", "SessionModuleConnection", "SessionNodeState", "A2AService", "PersonalAccount", "SshKeyProfile", "SshKeyCheckSchedule", "SshKeyChangeSchedule", "SshKeyDiscoverySchedule", "SshKeySyncGroup", "AuditLogMaintenance", "BackupProtectionSettings", "SyslogServer", "StarlingRegisteredConnector", "VMCompatibleBackupAuthorizationSetting", "AuthenticationProvider" ]
      },
      "ObjectWithTag" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Id of the object",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the object",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name of the object",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/TaggingGroupingObjectType"
          },
          "IsStatic" : {
            "type" : "boolean",
            "description" : "Whether the tag was statically or dynamically assigned"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Asset Id, intent is to clarify when we have multiple asset accounts with the same name, which one.\r\nWill be null for directory accounts and redundant for assets.",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Asset Name, intent is to clarify when we have multiple asset accounts with the same name, which one.\r\nWill be null for directory accounts and redundant for assets.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Type" : "Asset",
          "DomainName" : "DomainName",
          "Id" : 0,
          "IsStatic" : true,
          "AssetId" : 6,
          "AssetName" : "AssetName",
          "Name" : "Name"
        }
      },
      "OperationType" : {
        "type" : "string",
        "description" : "Types of changes that can be maded to an object",
        "format" : "string",
        "enum" : [ "Create", "Update", "Delete", "AddMembership", "RemoveMembership", "Event", "Migrate", "Undelete", "Purge" ]
      },
      "OwnershipReportTypes" : {
        "type" : "string",
        "description" : "Types of entitlement reports",
        "format" : "string",
        "enum" : [ "User", "Asset", "Account", "Partition", "Tag" ]
      },
      "OwnershipType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Asset", "Account", "Partition", "Tag" ]
      },
      "PartitionTag" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The ID of the tag",
            "format" : "int32",
            "x-key" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The ID of the partition that this tag is associated with",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "The name of the partition that this tag is associated with",
            "nullable" : true
          },
          "Name" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "The name of the tag"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The description of the tag",
            "nullable" : true
          },
          "AssetTaggingRule" : {
            "$ref" : "#/components/schemas/TaggingGroupingRule"
          },
          "AssetAccountTaggingRule" : {
            "$ref" : "#/components/schemas/TaggingGroupingRule"
          },
          "ManagedBy" : {
            "type" : "array",
            "description" : "List of Identities that manage this asset",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AssetPartitionId" : 5,
          "AssetPartitionName" : "AssetPartitionName",
          "AssetAccountTaggingRule" : null,
          "Description" : "Description",
          "AssetTaggingRule" : {
            "RuleConditionGroup" : {
              "Children" : [ {
                "TaggingGroupingConditionGroup" : null,
                "TaggingGroupingCondition" : {
                  "CompareValue" : "CompareValue",
                  "CompareType" : "EqualTo",
                  "ObjectAttribute" : "Name"
                }
              }, {
                "TaggingGroupingConditionGroup" : null,
                "TaggingGroupingCondition" : {
                  "CompareValue" : "CompareValue",
                  "CompareType" : "EqualTo",
                  "ObjectAttribute" : "Name"
                }
              } ],
              "LogicalJoinType" : "And"
            },
            "Description" : "Description",
            "Enabled" : true
          },
          "ManagedBy" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ],
          "Id" : 1,
          "Name" : "Name"
        }
      },
      "PasswordActivityLog" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that performed the activity",
            "format" : "int32"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Name of the event",
            "nullable" : true
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory the task was executed against (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset.",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the platform of the asset (Read-only)",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network.",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Account to run this task for",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account this task is for (Read-only)",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name the account is from (Read-only)",
            "nullable" : true
          },
          "AccountNetBiosName" : {
            "type" : "string",
            "description" : "Netbios name of the domain of the account (Read-only)",
            "nullable" : true
          },
          "AccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of the account (Read-only)",
            "nullable" : true
          },
          "SyncGroupId" : {
            "type" : "integer",
            "description" : "Database ID of the sync group associated with this task (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "SyncGroupName" : {
            "type" : "string",
            "description" : "Name of the sync group associated with this task (Read-only)",
            "nullable" : true
          },
          "SshKeySyncGroupId" : {
            "type" : "integer",
            "description" : "Database ID of the SSH key sync group associated with this task (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeySyncGroupName" : {
            "type" : "string",
            "description" : "Name of the SSH key sync group associated with this task (Read-only)",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The database ID of the asset partition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "The database ID of the profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "SshKeyProfileId" : {
            "type" : "integer",
            "description" : "The database ID of the SSH key profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeyProfileName" : {
            "type" : "string",
            "description" : "Name of the SSH key profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "InstallSshKeyFingerprint" : {
            "type" : "string",
            "description" : "Thumbprint of SSH key to install",
            "nullable" : true
          },
          "SshKeyFingerprint" : {
            "type" : "string",
            "description" : "Fingerprint of SSH key to install",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters passed to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a task that may run on a remote machine",
        "example" : {
          "ProfileId" : 9,
          "ApplianceName" : "ApplianceName",
          "AccountId" : 5,
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "SyncGroupName" : "SyncGroupName",
          "ProfileName" : "ProfileName",
          "SshKeyFingerprint" : "SshKeyFingerprint",
          "CustomScriptParameters" : [ {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "SshKeyProfileId" : 3,
          "AccountDomainName" : "AccountDomainName",
          "Name" : "Unknown",
          "AssetPartitionName" : "AssetPartitionName",
          "NetworkAddress" : "NetworkAddress",
          "PlatformId" : 1,
          "InstallSshKeyFingerprint" : "InstallSshKeyFingerprint",
          "ApplianceId" : "ApplianceId",
          "AssetPartitionId" : 7,
          "SshKeyProfileName" : "SshKeyProfileName",
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "SshKeySyncGroupId" : 2,
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "SshKeySyncGroupName" : "SshKeySyncGroupName",
          "EventName" : "Unknown",
          "AccountDistinguishedName" : "AccountDistinguishedName",
          "AssetName" : "AssetName",
          "SyncGroupId" : 5,
          "PlatformDisplayName" : "PlatformDisplayName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 0,
          "Id" : "Id",
          "PlatformType" : "Unknown",
          "AssetId" : 6,
          "AccountName" : "AccountName",
          "AccountNetBiosName" : "AccountNetBiosName",
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "PasswordChangeSchedule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "AllowPasswordChangeWhenReleased" : {
            "type" : "boolean",
            "description" : "Flag allowing the password to be changed when it has been checked out. Not applicable to accounts in a password sync group."
          },
          "SuspendAccountWhenCheckedIn" : {
            "type" : "boolean",
            "description" : "Whether an account should be suspended when it is checked in. Will be restored when made available for check out."
          },
          "NotifyOwnersOnly" : {
            "type" : "boolean",
            "description" : "Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately"
          },
          "RequireCurrentPassword" : {
            "type" : "boolean",
            "description" : "Whether to allow use of the current account password when managing passwords on platforms that support it"
          },
          "RestartWindowsServiceOnPasswordChange" : {
            "type" : "boolean",
            "description" : "Flag allowing windows service to be restarted when a password is changed"
          },
          "UpdateWindowsServiceOnPasswordChange" : {
            "type" : "boolean",
            "description" : "Flag allowing windows service to be updated when a password is changed"
          },
          "UpdateWindowsTasksOnPasswordChange" : {
            "type" : "boolean",
            "description" : "Flag allowing windows tasks to be updated when a password is changed"
          },
          "UpdateComPlusOnPasswordChange" : {
            "type" : "boolean",
            "description" : "Flag allowing complus applications to be updated when a password is changed"
          },
          "UpdateIisPoolsOnPasswordChange" : {
            "type" : "boolean",
            "description" : "Flag allowing Iis Pools to be updated when a password is changed"
          },
          "RescheduleForUnscheduledPasswordUpdate" : {
            "type" : "boolean",
            "description" : "Flag allowing this schedule to be updated when a password is manually changed"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this change schedule is applied to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this change schedule is applied to (Read-only)",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a schedule used by a partition profile to change passwords",
        "example" : {
          "RescheduleForUnscheduledPasswordUpdate" : true,
          "ScheduleType" : "Never",
          "Description" : "Description",
          "StartHour" : 5,
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "UpdateComPlusOnPasswordChange" : true,
          "CreatedByUserId" : 1,
          "RepeatDayOfMonth" : 17,
          "SuspendAccountWhenCheckedIn" : true,
          "RequireCurrentPassword" : true,
          "UpdateIisPoolsOnPasswordChange" : true,
          "UpdateWindowsServiceOnPasswordChange" : true,
          "AssetPartitionId" : 0,
          "StartMinute" : 41,
          "RepeatDaysOfWeek" : [ null, null ],
          "UpdateWindowsTasksOnPasswordChange" : true,
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "RestartWindowsServiceOnPasswordChange" : true,
          "NotifyOwnersOnly" : true,
          "AllowPasswordChangeWhenReleased" : true,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 6,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "RepeatInterval" : 1280358509
        }
      },
      "PasswordCharacterRepeatMode" : {
        "type" : "string",
        "description" : "What type of restrictions to enforce for repeated characters",
        "format" : "string",
        "enum" : [ "NotSpecified", "NoConsecutiveRepeatedCharacters", "NoRepeatedCharacters", "AllowRepeatedCharacters" ]
      },
      "PasswordCharacterType" : {
        "type" : "string",
        "description" : "Represents the type of character in reference to password rules",
        "format" : "string",
        "enum" : [ "All", "AlphaNumeric", "Alphabetic" ]
      },
      "PasswordCheckSchedule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "ResetPasswordOnMismatch" : {
            "type" : "boolean",
            "description" : "Flag to reset password if a password mismatch is found. Doesn't apply to manually invoked tasks."
          },
          "NotifyOwnersOnMismatch" : {
            "type" : "boolean",
            "description" : "Flag allowing users to be notified when a mismatch is found. Doesn't apply to manually invoked tasks."
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database Identifier of this Check Schedule's associated Asset partition (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of this Check Schedule's associated Asset partition",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a schedule used by a partition profile to check passwords",
        "example" : {
          "AssetPartitionId" : 0,
          "ScheduleType" : "Never",
          "StartMinute" : 41,
          "ResetPasswordOnMismatch" : true,
          "Description" : "Description",
          "StartHour" : 5,
          "NotifyOwnersOnMismatch" : true,
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 1,
          "RepeatDayOfMonth" : 17,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 6,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "RepeatInterval" : 1280358509
        }
      },
      "PasswordManagementLicense" : {
        "type" : "object",
        "properties" : {
          "Model" : {
            "$ref" : "#/components/schemas/PasswordManagementLicenseModel"
          },
          "Version" : {
            "type" : "integer",
            "description" : "The version of SPP licensed",
            "format" : "int32"
          },
          "MaxUsers" : {
            "type" : "integer",
            "description" : "The maximum number of users permitted under this license.",
            "format" : "int32",
            "nullable" : true
          },
          "UsersUsed" : {
            "type" : "integer",
            "description" : "The number of users currently utilized.",
            "format" : "int32",
            "nullable" : true
          },
          "MaxDesktops" : {
            "type" : "integer",
            "description" : "The number of desktop devices permitted under this license.",
            "format" : "int32",
            "nullable" : true
          },
          "DesktopsUsed" : {
            "type" : "integer",
            "description" : "The number of desktop devices currently managed by the appliance.",
            "format" : "int32",
            "nullable" : true
          },
          "MaxSystems" : {
            "type" : "integer",
            "description" : "The number of server or other non-desktop devices permitted under this license.",
            "format" : "int32",
            "nullable" : true
          },
          "SystemsUsed" : {
            "type" : "integer",
            "description" : "The number of server or other non-desktop devices currently managed by the appliance.",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "A license for the password management module.",
        "example" : {
          "MaxUsers" : 5,
          "SystemsUsed" : 2,
          "Version" : 5,
          "MaxDesktops" : 7,
          "Model" : "User",
          "MaxSystems" : 3,
          "DesktopsUsed" : 9,
          "UsersUsed" : 2
        }
      },
      "PasswordManagementLicenseModel" : {
        "type" : "string",
        "description" : "Enumeration of the license models that may apply to the Password Management module.",
        "format" : "string",
        "enum" : [ "User", "Device" ]
      },
      "PasswordProfile" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the profile (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this profile"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this profile",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "AccountPasswordRuleId" : {
            "type" : "integer",
            "description" : "Database ID of the password complexity rule that will be enforced. The password rule governs the construction requirements for new password generation.",
            "format" : "int32"
          },
          "AccountPasswordRuleName" : {
            "type" : "string",
            "description" : "Name of the account password rule enforced by this profile (Read-only)",
            "nullable" : true
          },
          "CheckScheduleId" : {
            "type" : "integer",
            "description" : "Id of the Password Check Schedule",
            "format" : "int32"
          },
          "CheckScheduleName" : {
            "type" : "string",
            "description" : "Name of the Password Check Schedule",
            "nullable" : true
          },
          "ChangeScheduleId" : {
            "type" : "integer",
            "description" : "Id of the Password Change Schedule",
            "format" : "int32"
          },
          "ChangeScheduleName" : {
            "type" : "string",
            "description" : "Name of the Password Change Schedule",
            "nullable" : true
          },
          "CheckSchedule" : {
            "$ref" : "#/components/schemas/PasswordCheckSchedule"
          },
          "ChangeSchedule" : {
            "$ref" : "#/components/schemas/PasswordChangeSchedule"
          },
          "AccountPasswordRule" : {
            "$ref" : "#/components/schemas/AccountPasswordRule"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this profile belongs to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this profile belongs to (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration for managing accounts/assets in a partition",
        "example" : {
          "AssetPartitionId" : 2,
          "Description" : "Description",
          "AccountPasswordRule" : {
            "AllowedFirstCharacterType" : "All",
            "Description" : "Description",
            "AllowLowercaseCharacters" : true,
            "MaxConsecutiveNonAlphaNumericCharacters" : 32,
            "NonAlphaNumericRestrictionType" : "Include",
            "InvalidNumericCharacters" : [ "InvalidNumericCharacters", "InvalidNumericCharacters" ],
            "InvalidLowercaseCharacters" : [ "InvalidLowercaseCharacters", "InvalidLowercaseCharacters" ],
            "MinNumericCharacters" : 51,
            "Name" : "Name",
            "AssetPartitionName" : "AssetPartitionName",
            "InvalidUppercaseCharacters" : [ "InvalidUppercaseCharacters", "InvalidUppercaseCharacters" ],
            "CreatedByUserId" : 1,
            "MaxConsecutiveUppercaseCharacters" : 180,
            "AllowedLastCharacterType" : null,
            "AllowedNonAlphaNumericCharacters" : [ "AllowedNonAlphaNumericCharacters", "AllowedNonAlphaNumericCharacters" ],
            "AssetPartitionId" : 6,
            "MaxConsecutiveLowercaseCharacters" : 92,
            "MaxConsecutiveAlphabeticCharacters" : 27,
            "MaxConsecutiveNumericCharacters" : 106,
            "MinCharacters" : 145,
            "MinLowercaseCharacters" : 237,
            "AllowNonAlphaNumericCharacters" : false,
            "InvalidNonAlphaNumericCharacters" : [ "InvalidNonAlphaNumericCharacters", "InvalidNonAlphaNumericCharacters" ],
            "AllowNumericCharacters" : true,
            "MaxConsecutiveAlphaNumericCharacters" : 38,
            "RepeatedCharacterRestriction" : "NotSpecified",
            "AllowUppercaseCharacters" : true,
            "MinUppercaseCharacters" : 58,
            "MaxCharacters" : 153,
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 0,
            "MinNonAlphaNumericCharacters" : 188,
            "IsSystemOwned" : true
          },
          "ChangeScheduleName" : "ChangeScheduleName",
          "AccountPasswordRuleName" : "AccountPasswordRuleName",
          "CheckSchedule" : {
            "AssetPartitionId" : 0,
            "ScheduleType" : "Never",
            "StartMinute" : 41,
            "ResetPasswordOnMismatch" : true,
            "Description" : "Description",
            "StartHour" : 5,
            "NotifyOwnersOnMismatch" : true,
            "RepeatDaysOfWeek" : [ null, null ],
            "RepeatDayOfWeek" : "Sunday",
            "RepeatWeekOfMonth" : "First",
            "Name" : "Name",
            "TimeOfDayIntervals" : [ {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            }, {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            } ],
            "AssetPartitionName" : "AssetPartitionName",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "CreatedByUserId" : 1,
            "RepeatDayOfMonth" : 17,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 6,
            "TimeOfDayType" : "Instant",
            "RepeatMonthlyScheduleType" : "DayOfMonth",
            "RepeatInterval" : 1280358509
          },
          "Name" : "Name",
          "ChangeSchedule" : {
            "RescheduleForUnscheduledPasswordUpdate" : true,
            "ScheduleType" : "Never",
            "Description" : "Description",
            "StartHour" : 5,
            "Name" : "Name",
            "TimeOfDayIntervals" : [ {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            }, {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            } ],
            "AssetPartitionName" : "AssetPartitionName",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "UpdateComPlusOnPasswordChange" : true,
            "CreatedByUserId" : 1,
            "RepeatDayOfMonth" : 17,
            "SuspendAccountWhenCheckedIn" : true,
            "RequireCurrentPassword" : true,
            "UpdateIisPoolsOnPasswordChange" : true,
            "UpdateWindowsServiceOnPasswordChange" : true,
            "AssetPartitionId" : 0,
            "StartMinute" : 41,
            "RepeatDaysOfWeek" : [ null, null ],
            "UpdateWindowsTasksOnPasswordChange" : true,
            "RepeatDayOfWeek" : "Sunday",
            "RepeatWeekOfMonth" : "First",
            "RestartWindowsServiceOnPasswordChange" : true,
            "NotifyOwnersOnly" : true,
            "AllowPasswordChangeWhenReleased" : true,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 6,
            "TimeOfDayType" : "Instant",
            "RepeatMonthlyScheduleType" : "DayOfMonth",
            "RepeatInterval" : 1280358509
          },
          "AssetPartitionName" : "AssetPartitionName",
          "CreatedByUserId" : 6,
          "CheckScheduleName" : "CheckScheduleName",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "CheckScheduleId" : 5,
          "ChangeScheduleId" : 5,
          "Id" : 0,
          "AccountPasswordRuleId" : 1
        }
      },
      "PasswordSyncGroup" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique ID of the sync group (Read-Only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "Name of the sync group"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the sync group",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "Unique ID of the profile this sync group belongs to",
            "format" : "int32"
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile this sync group belongs to",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether platform tasks can run against this sync group"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Unique ID of the asset partition this sync group belongs to",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the partition this sync group belongs to",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "LastSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the last password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSyncAccountsTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last password change (Read-only)",
            "nullable" : true
          },
          "FailedSyncAccountsAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed password change attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the next password change, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "IsSynchronized" : {
            "type" : "boolean",
            "description" : "Whether all of the accounts for this sync group are currently synchronized"
          },
          "Accounts" : {
            "type" : "array",
            "description" : "Set of accounts that are assigned to this sync group",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SyncGroupAccount"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a group of accounts in a profile whose passwords must be the same. All accounts will be updated in priority order\r\nwhen a password change is requested.",
        "example" : {
          "ProfileId" : 6,
          "AssetPartitionId" : 1,
          "LastSyncAccountsTaskId" : "LastSyncAccountsTaskId",
          "Description" : "Description",
          "IsSynchronized" : true,
          "ProfileName" : "ProfileName",
          "Name" : "Name",
          "AssetPartitionName" : "AssetPartitionName",
          "FailedSyncAccountsAttempts" : 5,
          "CreatedByUserId" : 5,
          "LastSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "NextSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "LastSuccessSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "Id" : 0,
          "Disabled" : true,
          "LastFailureSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "Accounts" : [ {
            "IsServiceAccount" : true,
            "Description" : "Description",
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "IsSynchronized" : true,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "SyncPriority" : 171976544,
            "LinkedUsersCount" : 5,
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "AccountType" : "Asset",
            "Name" : "Name",
            "NotifyOwnersOnly" : true,
            "HasSshKey" : true,
            "TaskProperties" : {
              "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
              "FailedPasswordChangeAttempts" : 6,
              "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "SuspendAccountWhenCheckedIn" : true,
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "NetBiosName" : "NetBiosName",
            "Id" : 1,
            "Disabled" : true,
            "HasPassword" : true
          }, {
            "IsServiceAccount" : true,
            "Description" : "Description",
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "IsSynchronized" : true,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "SyncPriority" : 171976544,
            "LinkedUsersCount" : 5,
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "AccountType" : "Asset",
            "Name" : "Name",
            "NotifyOwnersOnly" : true,
            "HasSshKey" : true,
            "TaskProperties" : {
              "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
              "FailedPasswordChangeAttempts" : 6,
              "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "SuspendAccountWhenCheckedIn" : true,
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "NetBiosName" : "NetBiosName",
            "Id" : 1,
            "Disabled" : true,
            "HasPassword" : true
          } ]
        }
      },
      "PatchDistributionModel" : {
        "type" : "object",
        "properties" : {
          "PatchInfo" : {
            "$ref" : "#/components/schemas/PatchInfoModel"
          },
          "Members" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ClusterPatchModel"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PatchInfo" : {
            "Version" : "Version",
            "Title" : "Title",
            "Id" : "Id"
          },
          "Members" : [ {
            "Errors" : [ "Errors", "Errors" ],
            "PatchVersion" : "PatchVersion",
            "IsOsPatch" : true,
            "NetworkAddress" : "NetworkAddress",
            "StagingStatus" : "None",
            "Isleader" : true,
            "Id" : "Id",
            "Warnings" : [ "Warnings", "Warnings" ],
            "TargetOsLevel" : 0,
            "Name" : "Name"
          }, {
            "Errors" : [ "Errors", "Errors" ],
            "PatchVersion" : "PatchVersion",
            "IsOsPatch" : true,
            "NetworkAddress" : "NetworkAddress",
            "StagingStatus" : "None",
            "Isleader" : true,
            "Id" : "Id",
            "Warnings" : [ "Warnings", "Warnings" ],
            "TargetOsLevel" : 0,
            "Name" : "Name"
          } ]
        }
      },
      "PatchHistory" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "nullable" : true
          },
          "Metadata" : {
            "$ref" : "#/components/schemas/PatchMetadata"
          },
          "Success" : {
            "type" : "boolean"
          },
          "InstallationError" : {
            "type" : "string",
            "nullable" : true
          },
          "Timestamp" : {
            "type" : "string",
            "format" : "date-time",
            "nullable" : true
          },
          "OldVersion" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "InstallationError" : "InstallationError",
          "Metadata" : {
            "PatchVersion" : {
              "Major" : 6,
              "ServicePack" : 5,
              "Minor" : 1,
              "HotfixLevel" : 5
            },
            "Description" : "Description",
            "Released" : "2000-01-23T04:56:07.000+00:00",
            "SupportLink" : "SupportLink",
            "LtsMinimumApplianceVersion" : null,
            "Title" : "Title",
            "TargetOsLevel" : 0,
            "LtsType" : "LtsType",
            "MaximumApplianceVersion" : null,
            "TargetOsVersions" : [ "TargetOsVersions", "TargetOsVersions" ],
            "PayloadSizeBytes" : 2,
            "MinimumApplianceVersion" : null,
            "LtsMaximumApplianceVersion" : null,
            "OsOnlyPatch" : true,
            "Id" : "Id"
          },
          "OldVersion" : "OldVersion",
          "Id" : "Id",
          "Timestamp" : "2000-01-23T04:56:07.000+00:00",
          "Success" : true
        }
      },
      "PatchInfoModel" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "nullable" : true
          },
          "Title" : {
            "type" : "string",
            "nullable" : true
          },
          "Version" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Version" : "Version",
          "Title" : "Title",
          "Id" : "Id"
        }
      },
      "PatchMetadata" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "nullable" : true
          },
          "Title" : {
            "type" : "string",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "nullable" : true
          },
          "OsOnlyPatch" : {
            "type" : "boolean"
          },
          "TargetOsLevel" : {
            "type" : "integer",
            "format" : "int32",
            "nullable" : true
          },
          "TargetOsVersions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "SupportLink" : {
            "type" : "string",
            "nullable" : true
          },
          "PatchVersion" : {
            "$ref" : "#/components/schemas/PatchVersion"
          },
          "Released" : {
            "type" : "string",
            "format" : "date-time"
          },
          "PayloadSizeBytes" : {
            "type" : "integer",
            "format" : "int64"
          },
          "MinimumApplianceVersion" : {
            "$ref" : "#/components/schemas/PatchVersion"
          },
          "LtsMinimumApplianceVersion" : {
            "$ref" : "#/components/schemas/PatchVersion"
          },
          "MaximumApplianceVersion" : {
            "$ref" : "#/components/schemas/PatchVersion"
          },
          "LtsMaximumApplianceVersion" : {
            "$ref" : "#/components/schemas/PatchVersion"
          },
          "LtsType" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PatchVersion" : {
            "Major" : 6,
            "ServicePack" : 5,
            "Minor" : 1,
            "HotfixLevel" : 5
          },
          "Description" : "Description",
          "Released" : "2000-01-23T04:56:07.000+00:00",
          "SupportLink" : "SupportLink",
          "LtsMinimumApplianceVersion" : null,
          "Title" : "Title",
          "TargetOsLevel" : 0,
          "LtsType" : "LtsType",
          "MaximumApplianceVersion" : null,
          "TargetOsVersions" : [ "TargetOsVersions", "TargetOsVersions" ],
          "PayloadSizeBytes" : 2,
          "MinimumApplianceVersion" : null,
          "LtsMaximumApplianceVersion" : null,
          "OsOnlyPatch" : true,
          "Id" : "Id"
        }
      },
      "PatchPreconditionResult" : {
        "type" : "object",
        "properties" : {
          "ApplianceId" : {
            "type" : "string",
            "description" : "The Appliance Id of the appliance the patch precondition check was run on.",
            "nullable" : true
          },
          "IsOsPatch" : {
            "type" : "boolean",
            "description" : "True if this is an Operating System Patch, in which case use Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.TargetOsLevel.\r\nFalse if this a Safeguard Patch, in which case use Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.PatchVersion.\r\nNull if the patch metadata is unavailable",
            "nullable" : true
          },
          "PatchVersion" : {
            "$ref" : "#/components/schemas/PatchVersion"
          },
          "TargetOsLevel" : {
            "type" : "integer",
            "description" : "Contains the Operating System target level if Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.IsOsPatch is true.",
            "format" : "int32",
            "nullable" : true
          },
          "Errors" : {
            "type" : "array",
            "description" : "Errors which were detected when running the patch precondition check.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Warnings" : {
            "type" : "array",
            "description" : "Warnings which were detected when running the patch precondition check.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PatchVersion" : {
            "Major" : 6,
            "ServicePack" : 5,
            "Minor" : 1,
            "HotfixLevel" : 5
          },
          "Errors" : [ "Errors", "Errors" ],
          "IsOsPatch" : true,
          "ApplianceId" : "ApplianceId",
          "TargetOsLevel" : 0,
          "Warnings" : [ "Warnings", "Warnings" ]
        }
      },
      "PatchStagingStatus" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "None", "Staging", "Unstaging", "Staged", "Error", "Waiting" ]
      },
      "PatchVersion" : {
        "type" : "object",
        "properties" : {
          "Major" : {
            "type" : "integer",
            "description" : "Major release number",
            "format" : "int32"
          },
          "Minor" : {
            "type" : "integer",
            "description" : "Minor feature update number",
            "format" : "int32"
          },
          "ServicePack" : {
            "type" : "integer",
            "description" : "Bugfix service release number",
            "format" : "int32"
          },
          "HotfixLevel" : {
            "type" : "integer",
            "description" : "Hotfix/build number",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Specific to patching, will get translated to appliance Version after install",
        "example" : {
          "Major" : 6,
          "ServicePack" : 5,
          "Minor" : 1,
          "HotfixLevel" : 5
        }
      },
      "PersonalAccount" : {
        "required" : [ "AccountName", "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The personal account's unique id.  This is a system-assigned value that is generated when an account is first created. (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The descriptive name for the personal account."
          },
          "AccountName" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "The personal account name."
          },
          "Url" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The URL that is associated with the personal account.",
            "nullable" : true
          },
          "Notes" : {
            "maximum" : 2000,
            "maxLength" : 2000,
            "type" : "string",
            "description" : "The notes that are associated with the password account.",
            "nullable" : true
          },
          "ExpirationDate" : {
            "type" : "string",
            "description" : "Expiration date of the personal account password",
            "format" : "date-time",
            "nullable" : true
          },
          "LastChangeDate" : {
            "type" : "string",
            "description" : "The date that the personal password was changed (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "DisableNotifications" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not expiration notifications should be sent to the owner of the personal account.",
            "default" : false
          },
          "OwnerId" : {
            "type" : "integer",
            "description" : "Owner Id of the personal account. (Read-Only)",
            "format" : "int32"
          },
          "OwnerDisplayName" : {
            "type" : "string",
            "description" : "The display name of the owner of the personal account. (Read-only)",
            "nullable" : true
          },
          "OwnerEmailAddress" : {
            "type" : "string",
            "description" : "The email address of the owner of the personal account. (Read-only)",
            "nullable" : true
          },
          "SharedWithUser" : {
            "$ref" : "#/components/schemas/ShareWithUser"
          },
          "SharedWithId" : {
            "type" : "integer",
            "description" : "Id of the user with whom the personal account is shared.",
            "format" : "int32",
            "nullable" : true
          },
          "ShareExpirationDate" : {
            "type" : "string",
            "description" : "Expiration date of the personal account share",
            "format" : "date-time",
            "nullable" : true
          },
          "IsOwnedByMe" : {
            "type" : "boolean",
            "description" : "A flag indicating whether the personal account is owned by the current user."
          },
          "IsSharedByMe" : {
            "type" : "boolean",
            "description" : "A flag indicating whether the personal account is currently being shared."
          },
          "IsShareable" : {
            "type" : "boolean",
            "description" : "A flag indicating whether the personal account is currently shareable."
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an personal password account.",
        "example" : {
          "SharedWithId" : 5,
          "DisableNotifications" : false,
          "IsSharedByMe" : true,
          "OwnerDisplayName" : "OwnerDisplayName",
          "IsOwnedByMe" : true,
          "Url" : "Url",
          "Name" : "Name",
          "IsShareable" : true,
          "SharedWithUser" : {
            "Description" : "Description",
            "WorkPhone" : "WorkPhone",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "FirstName" : "FirstName",
            "DisplayName" : "DisplayName",
            "Base64PhotoData" : "Base64PhotoData",
            "Id" : 1,
            "LastName" : "LastName",
            "EmailAddress" : "EmailAddress",
            "MobilePhone" : "MobilePhone",
            "Name" : "Name"
          },
          "ShareExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "ExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "OwnerId" : 6,
          "LastChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "Id" : 0,
          "OwnerEmailAddress" : "OwnerEmailAddress",
          "Notes" : "Notes",
          "AccountName" : "AccountName"
        }
      },
      "PersonalAccountPasswordHistory" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32",
            "x-key" : true
          },
          "OwnerId" : {
            "type" : "integer",
            "description" : "Owner Id of the personal account. (Read-Only)",
            "format" : "int32"
          },
          "Password" : {
            "type" : "string",
            "description" : "Password for the personal account. (Read-Only)",
            "nullable" : true
          },
          "TimeStarted" : {
            "type" : "string",
            "description" : "Time validity start for personal account password. (Read-Only)",
            "format" : "date-time"
          },
          "TimeEnded" : {
            "type" : "string",
            "description" : "Time validity end for personal account password. (Read-Only)",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "TimeStarted" : "2000-01-23T04:56:07.000+00:00",
          "OwnerId" : 6,
          "Id" : 0,
          "TimeEnded" : "2000-01-23T04:56:07.000+00:00",
          "Password" : "Password"
        }
      },
      "PersonalAccountPasswordRule" : {
        "type" : "object",
        "properties" : {
          "Length" : {
            "maximum" : 255,
            "minimum" : 3,
            "type" : "integer",
            "description" : "Length of the generated password",
            "format" : "int32",
            "default" : 12
          },
          "IncludeNumbers" : {
            "type" : "boolean",
            "description" : "Password should include numbers",
            "default" : true
          },
          "IncludeSymbols" : {
            "type" : "boolean",
            "description" : "Password should include symbols",
            "default" : false
          }
        },
        "additionalProperties" : false,
        "description" : "Provides parameters for personal account password generation."
      },
      "PersonalAccountShare" : {
        "type" : "object",
        "properties" : {
          "SharedWithId" : {
            "type" : "integer",
            "description" : "The Id of the user with whom the personal account is shared.",
            "format" : "int32"
          },
          "ShareExpirationDate" : {
            "type" : "string",
            "description" : "Expiration date of the personal account share.",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a shared personal password account."
      },
      "PersonalAccountType" : {
        "type" : "string",
        "description" : "Type of personal account",
        "format" : "string",
        "enum" : [ "All", "OwnedByMe", "SharedByMe", "SharedWithMe" ]
      },
      "Platform" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the platform version (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformFamily" : {
            "$ref" : "#/components/schemas/PlatformFamily"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name for the platform (Read-only)",
            "nullable" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of the platform"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the platform",
            "nullable" : true
          },
          "Version" : {
            "maximum" : 30,
            "minimum" : 1,
            "maxLength" : 30,
            "minLength" : 1,
            "type" : "string",
            "description" : "Version of platform (readonly)",
            "nullable" : true
          },
          "Architecture" : {
            "maximum" : 30,
            "minimum" : 1,
            "maxLength" : 30,
            "minLength" : 1,
            "type" : "string",
            "description" : "Architecture of platform (readonly)",
            "nullable" : true
          },
          "DeviceClass" : {
            "$ref" : "#/components/schemas/DeviceClass"
          },
          "IsAcctNameCaseSensitive" : {
            "type" : "boolean",
            "description" : "Does the platform require case sensitive account names?"
          },
          "LicenseClass" : {
            "$ref" : "#/components/schemas/LicenseClass"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "If system owned then this platform cannot be modified or deleted (Read-only)"
          },
          "SupportedOperations" : {
            "type" : "array",
            "description" : "Operations this custom platform supports (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskNames"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/PlatformConnectionProperties"
          },
          "PasswordFeatureProperties" : {
            "$ref" : "#/components/schemas/PlatformPasswordFeatureProperties"
          },
          "SessionFeatureProperties" : {
            "$ref" : "#/components/schemas/PlatformSessionFeatureProperties"
          },
          "CustomScriptProperties" : {
            "$ref" : "#/components/schemas/PlatformCustomScriptProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a set of platform specific properties for an asset",
        "example" : {
          "Description" : "Description",
          "Architecture" : "Architecture",
          "DeviceClass" : "Unknown",
          "ConnectionProperties" : {
            "SupportsSslCertificateVerification" : true,
            "SupportsNamedPipeForServiceAccountConnection" : true,
            "SupportsPasswordAuthentication" : true,
            "SupportsSshKeyAuthentication" : true,
            "SupportsServiceName" : true,
            "SupportsAccessKeyAuthentication" : true,
            "SupportsLocalhostPasswordAuthentication" : true,
            "RequiresDistinguishedName" : true,
            "SupportsInstance" : true,
            "SupportsOraclePrivileges" : true,
            "SupportsDirectorySync" : true,
            "SupportsClientId" : true,
            "DefaultPort" : 6,
            "SupportsDirectoryPasswordAuthentication" : true,
            "SupportsWorkstationId" : true,
            "SupportsTimeout" : true,
            "SupportsPrivilegedAccount" : true,
            "SupportsDirectoryAssetDiscovery" : true,
            "SupportsLdap" : true,
            "SupportsPrivilegeElevationCommand" : true,
            "SupportsSslEncryption" : true,
            "SupportsStarlingConnectAuthentication" : true,
            "SupportsAccountPasswordAuthentication" : true,
            "SupportsSshTransport" : true,
            "SupportsTopSecretInterval" : true,
            "DefaultSslPort" : 7,
            "SupportsSslThumbprint" : true,
            "AllowCustomPort" : true,
            "SupportsEnablePassword" : true,
            "PrivilegedAccountName" : "PrivilegedAccountName",
            "SupportsTacacsSecret" : true
          },
          "IsAcctNameCaseSensitive" : true,
          "PasswordFeatureProperties" : {
            "SupportsPasswordManagement" : true,
            "SupportsSshKeyManagement" : true,
            "RequireNetworkAddress" : true,
            "SupportsDependentSystemTasks" : true,
            "AllowRequireCurrentPassword" : true,
            "SupportsSuspendRestoreAccount" : true,
            "SupportsAccountDiscovery" : true,
            "SupportsServiceDiscovery" : true,
            "SupportsUsePasswordHash" : true
          },
          "LicenseClass" : "System",
          "CustomScriptProperties" : {
            "Parameters" : [ {
              "DefaultValue" : "DefaultValue",
              "Type" : "String",
              "Description" : "Description",
              "TaskName" : null,
              "Name" : "Name"
            }, {
              "DefaultValue" : "DefaultValue",
              "Type" : "String",
              "Description" : "Description",
              "TaskName" : null,
              "Name" : "Name"
            } ],
            "HasScript" : true
          },
          "Name" : "Name",
          "Version" : "Version",
          "SupportedOperations" : [ "Unknown", "Unknown" ],
          "SessionFeatureProperties" : {
            "DefaultRemoteDesktopSessionPort" : 4,
            "DefaultTelnetSessionPort" : 5,
            "SupportsSessionManagement" : true,
            "DefaultSshSessionPort" : 1
          },
          "PlatformFamily" : "None",
          "DisplayName" : "DisplayName",
          "Id" : 0,
          "PlatformType" : "Unknown",
          "IsSystemOwned" : true
        }
      },
      "PlatformConnectionProperties" : {
        "type" : "object",
        "properties" : {
          "DefaultPort" : {
            "type" : "integer",
            "description" : "The default port to use for connections (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "DefaultSslPort" : {
            "type" : "integer",
            "description" : "The default port to use for connections when UseSslEncryption is enabled (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AllowCustomPort" : {
            "type" : "boolean",
            "description" : "Can the end user specify a port other than the default?\r\nValid for all but Windows, Windows Active Directory, Windows Desktop, and SAP (Read-only)"
          },
          "SupportsTimeout" : {
            "type" : "boolean",
            "description" : "Whether platform supports standard connection timeout parameter (Read-only)"
          },
          "SupportsPasswordAuthentication" : {
            "type" : "boolean",
            "description" : "Whether a service account can login using a password on this platform (Read-only)"
          },
          "SupportsSshKeyAuthentication" : {
            "type" : "boolean",
            "description" : "Whether a service account can login using an SSH key (Read-only)"
          },
          "SupportsLocalhostPasswordAuthentication" : {
            "type" : "boolean",
            "description" : "Whether a service account can login using an account on the hosted server with a password (Read-only)"
          },
          "SupportsDirectoryPasswordAuthentication" : {
            "type" : "boolean",
            "description" : "Whether a service account can login using an account from a directory server with a password (Read-only)"
          },
          "SupportsAccessKeyAuthentication" : {
            "type" : "boolean",
            "description" : "Whether this platform requires access key credentials"
          },
          "SupportsAccountPasswordAuthentication" : {
            "type" : "boolean",
            "description" : "Whether this platform requires the current account password for check/change"
          },
          "SupportsStarlingConnectAuthentication" : {
            "type" : "boolean",
            "description" : "Whether this platform can use the starling join credential for authentication"
          },
          "SupportsPrivilegeElevationCommand" : {
            "type" : "boolean",
            "description" : "Whether or not the platform supports delegation of commands (e.g. sudo.) The command is used to preface\r\ncommands requiring privileged access on the asset. Note that this must be non-interactive.\r\nValid for most unix-compatible platforms (Read-only)"
          },
          "SupportsSslEncryption" : {
            "type" : "boolean",
            "description" : "Whether the platform supports encryption of telnet data"
          },
          "SupportsWorkstationId" : {
            "type" : "boolean",
            "description" : "Whether the platform supports assigning a workstation ID to the telnet session\r\nValid for AS/400 platforms (Read-only)"
          },
          "SupportsSshTransport" : {
            "type" : "boolean",
            "description" : "Whether this platform uses SSH to connect to the target machine"
          },
          "SupportsEnablePassword" : {
            "type" : "boolean",
            "description" : "Cisco routers support an extra password to enable password changes"
          },
          "SupportsInstance" : {
            "type" : "boolean",
            "description" : "Whether this ODBC platform supports an Instance name to identify the target"
          },
          "SupportsServiceName" : {
            "type" : "boolean",
            "description" : "Whether this ODBC platform supports a Service name to identify the target"
          },
          "SupportsSslCertificateVerification" : {
            "type" : "boolean",
            "description" : "Whether this platform supports verification of the SSL certificate"
          },
          "SupportsSslThumbprint" : {
            "type" : "boolean",
            "description" : "Whether this platform uses a nominated SSL CA certificate"
          },
          "SupportsClientId" : {
            "type" : "boolean",
            "description" : "Whether the platform requires a client ID to be specified\r\nValid for SAP platforms (Read-only)"
          },
          "RequiresDistinguishedName" : {
            "type" : "boolean",
            "description" : "Whether a distinguished name is required for accounts\r\nValid for LDAP-based platforms (Read-only)"
          },
          "SupportsOraclePrivileges" : {
            "type" : "boolean",
            "description" : "Whether this platform supports 'as privileges' property (Oracle only)"
          },
          "SupportsTacacsSecret" : {
            "type" : "boolean",
            "description" : "Whether this platform supports Tacacs Secret (Cisco ISE only)"
          },
          "SupportsLdap" : {
            "type" : "boolean",
            "description" : "Set to true if this platform is a directory that supports LDAP (read-only)"
          },
          "SupportsDirectorySync" : {
            "type" : "boolean",
            "description" : "Set to true if this platform is a directory that supports directory synchronization (read-only)"
          },
          "SupportsDirectoryAssetDiscovery" : {
            "type" : "boolean",
            "description" : "Set to true if this platform is a directory that supports asset discovery (read-only)"
          },
          "SupportsNamedPipeForServiceAccountConnection" : {
            "type" : "boolean",
            "description" : "Whether named pipes or TcpIp is used for service account connection to the platform\r\nValid for Sql Server platforms"
          },
          "SupportsTopSecretInterval" : {
            "type" : "boolean",
            "description" : "Whether to use the profile's next change date as the interval on a Top Secret mainframe"
          },
          "SupportsPrivilegedAccount" : {
            "type" : "boolean",
            "description" : "Whether this platform supports a privileged account that can be managed, but cannot be used as a service account\r\nValid for Checkpoint platforms"
          },
          "PrivilegedAccountName" : {
            "type" : "string",
            "description" : "WThe name of the privileged account, if supported\r\nValid for Checkpoint platforms",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Default session feature settings for this platform",
        "example" : {
          "SupportsSslCertificateVerification" : true,
          "SupportsNamedPipeForServiceAccountConnection" : true,
          "SupportsPasswordAuthentication" : true,
          "SupportsSshKeyAuthentication" : true,
          "SupportsServiceName" : true,
          "SupportsAccessKeyAuthentication" : true,
          "SupportsLocalhostPasswordAuthentication" : true,
          "RequiresDistinguishedName" : true,
          "SupportsInstance" : true,
          "SupportsOraclePrivileges" : true,
          "SupportsDirectorySync" : true,
          "SupportsClientId" : true,
          "DefaultPort" : 6,
          "SupportsDirectoryPasswordAuthentication" : true,
          "SupportsWorkstationId" : true,
          "SupportsTimeout" : true,
          "SupportsPrivilegedAccount" : true,
          "SupportsDirectoryAssetDiscovery" : true,
          "SupportsLdap" : true,
          "SupportsPrivilegeElevationCommand" : true,
          "SupportsSslEncryption" : true,
          "SupportsStarlingConnectAuthentication" : true,
          "SupportsAccountPasswordAuthentication" : true,
          "SupportsSshTransport" : true,
          "SupportsTopSecretInterval" : true,
          "DefaultSslPort" : 7,
          "SupportsSslThumbprint" : true,
          "AllowCustomPort" : true,
          "SupportsEnablePassword" : true,
          "PrivilegedAccountName" : "PrivilegedAccountName",
          "SupportsTacacsSecret" : true
        }
      },
      "PlatformCustomScriptProperties" : {
        "type" : "object",
        "properties" : {
          "HasScript" : {
            "type" : "boolean",
            "description" : "Whether a script has been uploaded for this custom platform (Read-only)"
          },
          "Parameters" : {
            "type" : "array",
            "description" : "A list of parameters that should be provided to the custom platform script when invoked",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/CustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Settings related to session access requests",
        "example" : {
          "Parameters" : [ {
            "DefaultValue" : "DefaultValue",
            "Type" : "String",
            "Description" : "Description",
            "TaskName" : null,
            "Name" : "Name"
          }, {
            "DefaultValue" : "DefaultValue",
            "Type" : "String",
            "Description" : "Description",
            "TaskName" : null,
            "Name" : "Name"
          } ],
          "HasScript" : true
        }
      },
      "PlatformFamily" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "None", "Windows", "Linux", "AIX", "Solaris", "HPUX", "OSX", "AS400", "Cisco", "iDRAC", "Fortinet", "FreeBsd", "HPiLO", "JunOS", "OpenLdap", "ACF2", "RACF", "RacfLdap", "TopSecret", "SqlServer", "MySQL", "Oracle", "PanOS", "SAP", "SonicOs", "Sybase", "VSphere", "MicrosoftAD", "SonicWallSma", "Twitter", "HPiLOMP", "Aws", "Facebook", "F5BigIp", "MongoDB", "PostgreSQL", "Custom", "WindowsSsh", "CheckPoint", "StarlingConnect", "CiscoISECLI", "CiscoISE", "WindowsRm", "CiscoNxOs", "StarlingDirectory", "SapHana" ]
      },
      "PlatformPasswordFeatureProperties" : {
        "type" : "object",
        "properties" : {
          "SupportsPasswordManagement" : {
            "type" : "boolean",
            "description" : "Whether this platform supports automated management of account passwords"
          },
          "SupportsSshKeyManagement" : {
            "type" : "boolean",
            "description" : "Whether this platform supports automated management of account SSH keys"
          },
          "SupportsAccountDiscovery" : {
            "type" : "boolean",
            "description" : "Whether this platform supports account discovery"
          },
          "SupportsDependentSystemTasks" : {
            "type" : "boolean",
            "description" : "Whether this platform allows local service/task updates of directory account passwords"
          },
          "AllowRequireCurrentPassword" : {
            "type" : "boolean",
            "description" : "Whether this platform supports use of the current account password when managing passwords"
          },
          "RequireNetworkAddress" : {
            "type" : "boolean",
            "description" : "Whether a network address is required for this platform"
          },
          "SupportsServiceDiscovery" : {
            "type" : "boolean",
            "description" : "Whether this platform supports service discovery"
          },
          "SupportsUsePasswordHash" : {
            "type" : "boolean",
            "description" : "Set to true if this platform is a directory that supports password hashing management itself (read-only)"
          },
          "SupportsSuspendRestoreAccount" : {
            "type" : "boolean",
            "description" : "Whether this platform allows accounts to be suspended/restored (disabled/enabled)"
          }
        },
        "additionalProperties" : false,
        "description" : "Settings related to password management features",
        "example" : {
          "SupportsPasswordManagement" : true,
          "SupportsSshKeyManagement" : true,
          "RequireNetworkAddress" : true,
          "SupportsDependentSystemTasks" : true,
          "AllowRequireCurrentPassword" : true,
          "SupportsSuspendRestoreAccount" : true,
          "SupportsAccountDiscovery" : true,
          "SupportsServiceDiscovery" : true,
          "SupportsUsePasswordHash" : true
        }
      },
      "PlatformScriptLog" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Unique ID of the platform the script is associated with",
            "format" : "int32"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display name of the platform the script is associated with",
            "nullable" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the script was modified",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents metadata for platform script changes",
        "example" : {
          "PlatformDisplayName" : "PlatformDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "PlatformId" : 0,
          "Id" : "Id"
        }
      },
      "PlatformSessionFeatureProperties" : {
        "type" : "object",
        "properties" : {
          "SupportsSessionManagement" : {
            "type" : "boolean",
            "description" : "Whether this platform supports session access requests"
          },
          "DefaultSshSessionPort" : {
            "type" : "integer",
            "description" : "Default port for SSH sessions",
            "format" : "int32",
            "nullable" : true
          },
          "DefaultRemoteDesktopSessionPort" : {
            "type" : "integer",
            "description" : "Default port for Remote Desktop sessions",
            "format" : "int32",
            "nullable" : true
          },
          "DefaultTelnetSessionPort" : {
            "type" : "integer",
            "description" : "Default port for Telnet sessions",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Settings related to session access requests",
        "example" : {
          "DefaultRemoteDesktopSessionPort" : 4,
          "DefaultTelnetSessionPort" : 5,
          "SupportsSessionManagement" : true,
          "DefaultSshSessionPort" : 1
        }
      },
      "PlatformTaskInformation" : {
        "type" : "object",
        "properties" : {
          "TaskName" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "LastTaskDate" : {
            "type" : "string",
            "description" : "The date/time of the last attempt (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessTaskDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful attempt (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureTaskDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed attempt (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last attempt (Read-only)",
            "nullable" : true
          },
          "FailedTaskAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextTaskDate" : {
            "type" : "string",
            "description" : "The date/time of the next attempt, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Information about the platform task execution (Read-only)",
        "example" : {
          "LastFailureTaskDate" : "2000-01-23T04:56:07.000+00:00",
          "TaskName" : "Unknown",
          "LastSuccessTaskDate" : "2000-01-23T04:56:07.000+00:00",
          "FailedTaskAttempts" : 3,
          "LastTaskDate" : "2000-01-23T04:56:07.000+00:00",
          "NextTaskDate" : "2000-01-23T04:56:07.000+00:00",
          "LastTaskId" : "LastTaskId"
        }
      },
      "PlatformTaskLoadStatus" : {
        "type" : "object",
        "properties" : {
          "ApplianceLoadData" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ApplianceLoadData"
            }
          },
          "PendingPasswordChecks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledPasswordChecks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingPasswordChanges" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledPasswordChanges" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingSshKeyChecks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledSshKeyChecks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingSshKeyChanges" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledSshKeyChanges" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingSshKeyDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledSshKeyDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingDependentAssetUpdates" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledDependentAssetUpdates" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingAccountDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledAccountDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingServiceDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledServiceDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingAssetDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledAssetDiscoveries" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingSuspendAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledSuspendAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingRestoreAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledRestoreAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingSyncAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledSyncAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingTestConnections" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledTestConnections" : {
            "type" : "integer",
            "format" : "int32"
          },
          "PendingSshKeySyncAccounts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "ScheduledSshKeySyncAccounts" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ScheduledPasswordChanges" : 2,
          "PendingSshKeyChanges" : 1,
          "ScheduledSshKeyChanges" : 1,
          "ScheduledServiceDiscoveries" : 9,
          "PendingPasswordChecks" : 7,
          "PendingSyncAccounts" : 1,
          "ApplianceLoadData" : [ {
            "ApplianceIpAddress" : "ApplianceIpAddress",
            "Score" : 1.4658129805029452,
            "VpnLatencyScore" : 6,
            "ApplianceName" : "ApplianceName",
            "AuditLogScore" : 0,
            "TimeExpires" : "2000-01-23T04:56:07.000+00:00",
            "MaxTaskThreads" : 5,
            "QueuedTasks" : 2,
            "RecordDate" : "2000-01-23T04:56:07.000+00:00",
            "TaskThreads" : 5,
            "ApplianceId" : "ApplianceId",
            "ApplianceState" : "Unknown"
          }, {
            "ApplianceIpAddress" : "ApplianceIpAddress",
            "Score" : 1.4658129805029452,
            "VpnLatencyScore" : 6,
            "ApplianceName" : "ApplianceName",
            "AuditLogScore" : 0,
            "TimeExpires" : "2000-01-23T04:56:07.000+00:00",
            "MaxTaskThreads" : 5,
            "QueuedTasks" : 2,
            "RecordDate" : "2000-01-23T04:56:07.000+00:00",
            "TaskThreads" : 5,
            "ApplianceId" : "ApplianceId",
            "ApplianceState" : "Unknown"
          } ],
          "PendingAccountDiscoveries" : 4,
          "ScheduledAssetDiscoveries" : 8,
          "PendingDependentAssetUpdates" : 7,
          "ScheduledDependentAssetUpdates" : 1,
          "PendingSshKeySyncAccounts" : 5,
          "ScheduledTestConnections" : 6,
          "PendingSuspendAccounts" : 9,
          "ScheduledAccountDiscoveries" : 5,
          "PendingTestConnections" : 6,
          "PendingRestoreAccounts" : 3,
          "ScheduledSshKeySyncAccounts" : 6,
          "ScheduledSyncAccounts" : 2,
          "PendingPasswordChanges" : 3,
          "PendingServiceDiscoveries" : 9,
          "ScheduledRestoreAccounts" : 6,
          "PendingSshKeyDiscoveries" : 1,
          "ScheduledSshKeyDiscoveries" : 6,
          "ScheduledSshKeyChecks" : 7,
          "PendingAssetDiscoveries" : 6,
          "ScheduledSuspendAccounts" : 6,
          "ScheduledPasswordChecks" : 9,
          "PendingSshKeyChecks" : 4
        }
      },
      "PlatformType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "AIX", "AS400", "CiscoASA", "CiscoIOS", "iDRAC", "Fortinet", "FreeBsd", "HPiLO", "HPUX", "JunOS", "Ldap", "OSX", "ACF2", "RACF", "RacfLdap", "TopSecret", "SqlServer", "MySQL", "Oracle", "PanOS", "SAP", "SonicOs", "Sybase", "VSphere", "Windows", "MicrosoftAD", "RedHatEnterprise", "Centos", "Fedora", "Suse", "Debian", "Ubuntu", "OracleLinux", "Solaris", "SonicWallSma", "Twitter", "LinuxOther", "Other", "HPiLOMP", "Aws", "Facebook", "Acf2Ldap", "F5BigIp", "TopSecretLdap", "MongoDB", "PostgreSQL", "SapHana", "Custom", "AmazonLinux", "OtherManaged", "WindowsSsh", "CheckPoint", "StarlingConnect", "OtherDirectory", "CiscoISECLI", "CiscoISE", "WindowsRm", "CiscoNxOs", "StarlingDirectory", "RedHatDirectory", "EDirectoryLdap" ]
      },
      "PolicyAccount" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database key of the account (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the account (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "A short description of the account. (Read-only)",
            "nullable" : true
          },
          "HasPassword" : {
            "type" : "boolean",
            "description" : "Whether the account has a password set or not (Read-only)"
          },
          "HasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the account has an SSH key assigned or not (Read-only)"
          },
          "DomainName" : {
            "type" : "string",
            "description" : "The domain name that the account belongs to. (Read-only)",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the account. (Read-only)",
            "nullable" : true
          },
          "NetBiosName" : {
            "type" : "string",
            "description" : "The netbios name of the domain the account is from. (Read-only)",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "AccountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "IsServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account is being used as a service account (Read-only)"
          },
          "NotifyOwnersOnly" : {
            "type" : "boolean",
            "description" : "Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately (Read-only)"
          },
          "SuspendAccountWhenCheckedIn" : {
            "type" : "boolean",
            "description" : "Whether an account should be suspended when it is checked in. Will be restored when made available for check out. (Read-only)"
          },
          "AltLoginName" : {
            "type" : "string",
            "description" : "The alternate login name of the account. (Read-only)",
            "nullable" : true
          },
          "LinkedUsersCount" : {
            "type" : "integer",
            "description" : "The number of users linked to the policy account (Read-only)",
            "format" : "int32"
          },
          "RequestProperties" : {
            "$ref" : "#/components/schemas/AccountRequestProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AccountPlatformProperties"
          },
          "Asset" : {
            "$ref" : "#/components/schemas/AccountAssetProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an remote asset account available for request. A PolicyAccount is an \r\nalternate view of an account that is used for AccessPolicies, AccountGroups,\r\nand UserFavorites. The account must have a password and have AllowPasswordRequest set to true\r\nin order to be used in UserFavorites or to be able to request the password of the account.",
        "example" : {
          "IsServiceAccount" : true,
          "Description" : "Description",
          "Platform" : {
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "IsAcctNameCaseSensitive" : true,
            "PlatformType" : "Unknown",
            "SupportsSessionManagement" : true
          },
          "DomainName" : "DomainName",
          "DistinguishedName" : "DistinguishedName",
          "LinkedUsersCount" : 9,
          "RequestProperties" : {
            "AllowPasswordRequest" : true,
            "AllowSshKeyRequest" : true,
            "AllowSessionRequest" : true
          },
          "AccountType" : "Asset",
          "Name" : "Name",
          "NotifyOwnersOnly" : true,
          "HasSshKey" : true,
          "SuspendAccountWhenCheckedIn" : true,
          "AltLoginName" : "AltLoginName",
          "Asset" : {
            "AssetPartitionId" : 6,
            "AssetPartitionName" : "AssetPartitionName",
            "NetworkAddress" : "NetworkAddress",
            "Id" : 3,
            "Name" : "Name"
          },
          "NetBiosName" : "NetBiosName",
          "Id" : 8,
          "Disabled" : true,
          "HasPassword" : true
        }
      },
      "PolicyApproverProperties" : {
        "type" : "object",
        "properties" : {
          "RequireApproval" : {
            "type" : "boolean",
            "description" : "Password requests must be approved before the password may be released",
            "default" : true
          },
          "PendingApprovalEscalationEnabled" : {
            "type" : "boolean",
            "description" : "Whether email notifications should be sent for approval escalation"
          },
          "PendingApprovalDurationBeforeEscalationDays" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (days) a access request may be pending approval before notifying escalation contacts",
            "format" : "int32",
            "default" : 0
          },
          "PendingApprovalDurationBeforeEscalationHours" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (hours) a access request may be pending approval before notifying escalation contacts",
            "format" : "int32",
            "default" : 0
          },
          "PendingApprovalDurationBeforeEscalationMinutes" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (minutes) a access request may be pending approval before notifying escalation contacts",
            "format" : "int32",
            "default" : 0
          }
        },
        "additionalProperties" : false,
        "description" : "Settings related to approving a access request",
        "example" : {
          "RequireApproval" : true,
          "PendingApprovalEscalationEnabled" : true,
          "PendingApprovalDurationBeforeEscalationDays" : 22435,
          "PendingApprovalDurationBeforeEscalationHours" : 17,
          "PendingApprovalDurationBeforeEscalationMinutes" : 6
        }
      },
      "PolicyAsset" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "type" : "string",
            "description" : "A short description of the asset. (Read-only)",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "The database key of the asset (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the asset (Read-only)",
            "nullable" : true
          },
          "AssetType" : {
            "$ref" : "#/components/schemas/AssetType"
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "The network address of the asset (Read-only)",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database ID of partition asset belongs to",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of partition asset belongs to",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "The domain name that the asset belongs to. (Read-only)",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this asset has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/PolicyAssetPlatformProperties"
          },
          "SshHostKey" : {
            "$ref" : "#/components/schemas/AssetSshHostKey"
          },
          "SessionAccessProperties" : {
            "$ref" : "#/components/schemas/AssetSessionAccessProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an remote asset available for request. A PolicyAsset is an \r\nalternate view of an asset that is used for AccessPolicies, AssetGroups,\r\nand UserFavorites. The asset must have a password and have AllowSessionRequests set to true\r\nin order to be used in UserFavorites or to be able to request a session on the asset.",
        "example" : {
          "AssetPartitionId" : 6,
          "AssetPartitionName" : "AssetPartitionName",
          "AssetType" : "NotSpecified",
          "Description" : "Description",
          "SshHostKey" : {
            "Fingerprint" : "Fingerprint",
            "SshHostKey" : "SshHostKey",
            "FingerprintSha256" : "FingerprintSha256"
          },
          "NetworkAddress" : "NetworkAddress",
          "Platform" : {
            "DisplayName" : "DisplayName",
            "Id" : 5,
            "PlatformType" : null,
            "SupportsSessionManagement" : true
          },
          "DomainName" : "DomainName",
          "SessionAccessProperties" : {
            "RemoteDesktopSessionPort" : 21975,
            "AllowSessionRequests" : true,
            "TelnetSessionPort" : 20275,
            "SshSessionPort" : 43935
          },
          "Id" : 6,
          "Disabled" : true,
          "Name" : "Name"
        }
      },
      "PolicyAssetPlatformProperties" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the type of platform (Read-only)",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The display name of the type of platform (Read-only)",
            "nullable" : true
          },
          "SupportsSessionManagement" : {
            "type" : "boolean",
            "description" : "Whether this asset supports session access"
          }
        },
        "additionalProperties" : false,
        "description" : "Platform properties for policy asset",
        "example" : {
          "DisplayName" : "DisplayName",
          "Id" : 5,
          "PlatformType" : null,
          "SupportsSessionManagement" : true
        }
      },
      "PolicyEmergencyAccessProperties" : {
        "type" : "object",
        "properties" : {
          "AllowEmergencyAccess" : {
            "type" : "boolean",
            "description" : "Whether the members of this role can request emergency access",
            "default" : false
          },
          "IgnoreHourlyRestrictions" : {
            "type" : "boolean",
            "description" : "Ignore hourly restrictions when requesting emergency access",
            "default" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Settings related to emergency access to a password",
        "example" : {
          "IgnoreHourlyRestrictions" : true,
          "AllowEmergencyAccess" : false
        }
      },
      "PolicyRequesterProperties" : {
        "type" : "object",
        "properties" : {
          "DefaultReleaseDurationDays" : {
            "maximum" : 31,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The default duration (days) a request may be available. Only needed\r\nwhen AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.",
            "format" : "int32",
            "default" : 0
          },
          "DefaultReleaseDurationHours" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The default duration (hours) a request may be available. Only needed\r\nwhen AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.",
            "format" : "int32",
            "default" : 2
          },
          "DefaultReleaseDurationMinutes" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The default duration (minutes) a request may be available. Only needed\r\nwhen AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.",
            "format" : "int32",
            "default" : 0
          },
          "MaximumReleaseDurationDays" : {
            "maximum" : 31,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (days) a request may be available. Only needed\r\nwhen AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.",
            "format" : "int32",
            "default" : 7
          },
          "MaximumReleaseDurationHours" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (hours) a request may be available. Only needed\r\nwhen AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.",
            "format" : "int32",
            "default" : 0
          },
          "MaximumReleaseDurationMinutes" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (minutes) a request may be available. Only needed\r\nwhen AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.",
            "format" : "int32",
            "default" : 0
          },
          "AllowCustomDuration" : {
            "type" : "boolean",
            "description" : "Whether to allow the release duration to be modified during a \r\naccess request.",
            "default" : false
          },
          "RequireReasonCode" : {
            "type" : "boolean",
            "description" : "A reason code is required before a access request can be made.",
            "default" : false
          },
          "RequireReasonComment" : {
            "type" : "boolean",
            "description" : "A reason comment is required before a access request can be made.",
            "default" : false
          },
          "RequireServiceTicket" : {
            "type" : "boolean",
            "description" : "Whether a service ticket is required for access requests",
            "default" : false
          }
        },
        "additionalProperties" : false,
        "description" : "Represents settings for requesting asset/accounts",
        "example" : {
          "RequireServiceTicket" : false,
          "DefaultReleaseDurationMinutes" : 43,
          "DefaultReleaseDurationDays" : 6,
          "DefaultReleaseDurationHours" : 9,
          "MaximumReleaseDurationMinutes" : 8,
          "AllowCustomDuration" : false,
          "MaximumReleaseDurationDays" : 3,
          "RequireReasonComment" : false,
          "MaximumReleaseDurationHours" : 2,
          "RequireReasonCode" : false
        }
      },
      "PolicyReviewerProperties" : {
        "type" : "object",
        "properties" : {
          "RequiredReviewers" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minimum number of reviews required before a password request is closed",
            "format" : "int32",
            "default" : 0
          },
          "RequireReviewerComment" : {
            "type" : "boolean",
            "description" : "Whether a reviewer is required to supply a comment",
            "default" : false
          },
          "AllowSubsequentAccessRequestsWithoutReview" : {
            "type" : "boolean",
            "description" : "Whether this policy will allow bypassing any pending reviews in order to create new requests.",
            "default" : false
          },
          "PendingReviewEscalationEnabled" : {
            "type" : "boolean",
            "description" : "Whether email notifications should be sent for approval escalation"
          },
          "PendingReviewDurationBeforeEscalationDays" : {
            "maximum" : 32767,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (days) an expired password release may be pending review before notifying escalation contacts",
            "format" : "int32",
            "default" : 0
          },
          "PendingReviewDurationBeforeEscalationHours" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (hours) a expired password release may be pending review before notifying escalation contacts",
            "format" : "int32",
            "default" : 0
          },
          "PendingReviewDurationBeforeEscalationMinutes" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The maximum duration (minutes) a expired password release may be pending review before notifying escalation contacts",
            "format" : "int32",
            "default" : 0
          }
        },
        "additionalProperties" : false,
        "description" : "Settings related to reviewing a password request",
        "example" : {
          "PendingReviewDurationBeforeEscalationHours" : 22,
          "RequireReviewerComment" : false,
          "AllowSubsequentAccessRequestsWithoutReview" : false,
          "PendingReviewEscalationEnabled" : true,
          "PendingReviewDurationBeforeEscalationMinutes" : 55,
          "RequiredReviewers" : 1066272551,
          "PendingReviewDurationBeforeEscalationDays" : 16465
        }
      },
      "PolicyScopeItem" : {
        "required" : [ "Id", "ScopeItemType" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database Id of the scope item",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "DisplayName of the scope item (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of the scope item (Read-only)",
            "nullable" : true
          },
          "ScopeItemType" : {
            "$ref" : "#/components/schemas/PolicyScopeItemType"
          },
          "Account" : {
            "$ref" : "#/components/schemas/PolicyAccount"
          },
          "Asset" : {
            "$ref" : "#/components/schemas/PolicyAsset"
          },
          "AccountGroup" : {
            "$ref" : "#/components/schemas/AccountGroup"
          },
          "AssetGroup" : {
            "$ref" : "#/components/schemas/AssetGroup"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents requestable items governed by policy",
        "example" : {
          "Account" : null,
          "Description" : "Description",
          "ScopeItemType" : "Asset",
          "AccountGroup" : {
            "CreatedByUserId" : 3,
            "Description" : "Description",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 3,
            "GroupingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "IsDynamic" : true,
            "Accounts" : [ null, null ],
            "Name" : "Name"
          },
          "Asset" : null,
          "Id" : 7,
          "Name" : "Name",
          "AssetGroup" : {
            "AssetGroupingRule" : null,
            "CreatedByUserId" : 5,
            "Description" : "Description",
            "Assets" : [ null, null ],
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 7,
            "IsDynamic" : true,
            "Name" : "Name"
          }
        }
      },
      "PolicyScopeItemType" : {
        "type" : "string",
        "description" : "Type of policy scope item",
        "format" : "string",
        "enum" : [ "Asset", "Account", "AssetGroup", "AccountGroup" ]
      },
      "PrincipalKind" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Service", "User", "Group" ]
      },
      "Priority" : {
        "required" : [ "Id", "Value" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Id of the Role",
            "format" : "int32"
          },
          "Value" : {
            "type" : "integer",
            "description" : "Priority of the role",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "The priority determines the processing order of the Role.\r\nRoles will be processed in order which may cause some priorities to be shifted lower",
        "example" : {
          "Value" : 6,
          "Id" : 0
        }
      },
      "ProductLicense" : {
        "type" : "object",
        "properties" : {
          "Status" : {
            "$ref" : "#/components/schemas/LicenseStatus"
          },
          "Type" : {
            "$ref" : "#/components/schemas/LicenseType"
          },
          "Key" : {
            "type" : "string",
            "description" : "The license key.",
            "nullable" : true
          },
          "IsEnterprise" : {
            "type" : "boolean",
            "description" : "Is this an enterprise license."
          },
          "IsValid" : {
            "type" : "boolean",
            "description" : "Is the license valid."
          },
          "Module" : {
            "$ref" : "#/components/schemas/LicensableModule"
          },
          "Expires" : {
            "type" : "string",
            "description" : "The date and time that the license expires, or null\r\nif the license is a perpetual license.",
            "format" : "date-time",
            "nullable" : true
          },
          "DaysRemaining" : {
            "type" : "integer",
            "description" : "The number of days remaining until the license expires, or\r\nnull if the license is perpetual. Will be negative if the\r\nlicense is already expired.",
            "format" : "int32",
            "nullable" : true,
            "readOnly" : true
          },
          "InstallByDate" : {
            "type" : "string",
            "description" : "For a trial license, the date by which it must be installed.\r\nIf no start-by date is present, this will return null.",
            "format" : "date-time",
            "nullable" : true
          },
          "TrialDays" : {
            "type" : "integer",
            "description" : "For a trial license, the number of days following installation that\r\nthe license remains valid. Null if not present.",
            "format" : "int64",
            "nullable" : true
          },
          "IsExpired" : {
            "type" : "boolean",
            "description" : "Is the license expired."
          },
          "ChangedByUserDisplayName" : {
            "type" : "string",
            "description" : "The name of the user that installed the license, or\r\nnull for a license that is not installed.",
            "nullable" : true
          },
          "ChangedByUserId" : {
            "type" : "integer",
            "description" : "The id of the user that installed the license, or\r\nnull for a license that is not installed.",
            "format" : "int32",
            "nullable" : true
          },
          "ChangedByDate" : {
            "type" : "string",
            "description" : "The date and time that the license was installed, or\r\nnull if the license is not installed.",
            "format" : "date-time",
            "nullable" : true
          },
          "PasswordManagementLicense" : {
            "$ref" : "#/components/schemas/PasswordManagementLicense"
          },
          "SecretsBrokerLicense" : {
            "$ref" : "#/components/schemas/SecretsBrokerLicense"
          }
        },
        "additionalProperties" : false,
        "description" : "Information about a license",
        "example" : {
          "Status" : "None",
          "DaysRemaining" : 0,
          "IsExpired" : true,
          "InstallByDate" : "2000-01-23T04:56:07.000+00:00",
          "TrialDays" : 6,
          "SecretsBrokerLicense" : {
            "SecretsUsed" : 7,
            "MaxSecrets" : 4
          },
          "Type" : "Unknown",
          "IsEnterprise" : true,
          "ChangedByUserDisplayName" : "ChangedByUserDisplayName",
          "ChangedByUserId" : 1,
          "PasswordManagementLicense" : {
            "MaxUsers" : 5,
            "SystemsUsed" : 2,
            "Version" : 5,
            "MaxDesktops" : 7,
            "Model" : "User",
            "MaxSystems" : 3,
            "DesktopsUsed" : 9,
            "UsersUsed" : 2
          },
          "Expires" : "2000-01-23T04:56:07.000+00:00",
          "Module" : "PasswordManagement",
          "ChangedByDate" : "2000-01-23T04:56:07.000+00:00",
          "Key" : "Key",
          "IsValid" : true
        }
      },
      "ProductVersion" : {
        "type" : "object",
        "properties" : {
          "Major" : {
            "type" : "integer",
            "description" : "Major version (Read-only)",
            "format" : "int32"
          },
          "Minor" : {
            "type" : "integer",
            "description" : "Minor version (Read-only)",
            "format" : "int32"
          },
          "Revision" : {
            "type" : "integer",
            "description" : "Revision number (Read-only)",
            "format" : "int32"
          },
          "Build" : {
            "type" : "integer",
            "description" : "Build number (Read-only)",
            "format" : "int32"
          },
          "BuildDate" : {
            "type" : "string",
            "description" : "Date the code/image was built (Read-only)",
            "format" : "date-time"
          },
          "BuildVariant" : {
            "type" : "string",
            "description" : "Type of build (Read-only)",
            "nullable" : true
          },
          "BuildPlatform" : {
            "type" : "string",
            "description" : "Output type of build (Read-only)",
            "nullable" : true
          },
          "RsmsVersion" : {
            "type" : "string",
            "nullable" : true
          },
          "OsPatchLevel" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Product version of the code/image of the appliance",
        "example" : {
          "Major" : 6,
          "Revision" : 1,
          "BuildDate" : "2000-01-23T04:56:07.000+00:00",
          "BuildPlatform" : "BuildPlatform",
          "Build" : 4,
          "RsmsVersion" : "RsmsVersion",
          "OsPatchLevel" : 5,
          "Minor" : 7,
          "BuildVariant" : "BuildVariant"
        }
      },
      "ProfileScheduleType" : {
        "type" : "string",
        "description" : "The type of profile schedule",
        "format" : "string",
        "enum" : [ "AccountDiscovery", "AssetDiscovery", "ChangePassword", "CheckPassword", "ChangeSshKey", "CheckSshKey", "SshKeyDiscovery" ]
      },
      "PropertyChange" : {
        "type" : "object",
        "properties" : {
          "DisplayName" : {
            "type" : "string",
            "description" : "Display name of the property that changed",
            "nullable" : true
          },
          "Type" : {
            "type" : "string",
            "description" : "The type name of the property that changed",
            "nullable" : true
          },
          "OldValue" : {
            "type" : "string",
            "description" : "The old value of the property that changed",
            "nullable" : true
          },
          "NewValue" : {
            "type" : "string",
            "description" : "The new value of the property that changed",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a change made to an object",
        "example" : {
          "Type" : "Type",
          "OldValue" : "OldValue",
          "DisplayName" : "DisplayName",
          "NewValue" : "NewValue"
        }
      },
      "PurgeSettings" : {
        "type" : "object",
        "properties" : {
          "AutoPurgeAssets" : {
            "type" : "boolean",
            "description" : "Whether to automatically purged expired deleted assets"
          },
          "DeletedAssetRetentionInDays" : {
            "maximum" : 3650,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How long to retain deleted assets before purging",
            "format" : "int32",
            "default" : 3650
          },
          "AutoPurgeAssetAccounts" : {
            "type" : "boolean",
            "description" : "Whether to automatically purged expired deleted asset accounts"
          },
          "DeletedAssetAccountRetentionInDays" : {
            "maximum" : 3650,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How long to retain deleted asset accounts before purging",
            "format" : "int32",
            "default" : 3650
          },
          "AutoPurgeUsers" : {
            "type" : "boolean",
            "description" : "Whether to automatically purged expired deleted users"
          },
          "DeletedUserRetentionInDays" : {
            "maximum" : 3650,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How long to retain deleted using before purging",
            "format" : "int32",
            "default" : 3650
          }
        },
        "additionalProperties" : false,
        "description" : "Represents setting governing how long to retain deleted entities",
        "example" : {
          "AutoPurgeAssetAccounts" : true,
          "AutoPurgeAssets" : true,
          "DeletedAssetRetentionInDays" : 293,
          "DeletedAssetAccountRetentionInDays" : 2200,
          "AutoPurgeUsers" : true,
          "DeletedUserRetentionInDays" : 535
        }
      },
      "ReasonCode" : {
        "required" : [ "Description", "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the reason code (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the reason code"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the reason code"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the reason when requesting the password of an account",
        "example" : {
          "Description" : "Description",
          "Id" : 8,
          "Name" : "Name"
        }
      },
      "Registration" : {
        "required" : [ "AppName" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The registration's unique id.  This is a system-assigned value that is generated when a registration is first created. (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "AppName" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The applications's name."
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the application",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the application registration is disabled. Will be disabled if certificate user is disabled.",
            "default" : false
          },
          "VisibleToCertificateUsers" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the application self discovery is enabled for the cert user.",
            "default" : false
          },
          "CertificateUserId" : {
            "type" : "integer",
            "description" : "The id of the certificate user associated with the registration.",
            "format" : "int32",
            "default" : -1
          },
          "CertificateUserThumbPrint" : {
            "type" : "string",
            "description" : "Thumbprint associated with the certificate user.",
            "nullable" : true
          },
          "CertificateUser" : {
            "type" : "string",
            "description" : "The accounts for which the credentials can be retrieved.",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an application to application registration.",
        "example" : {
          "CreatedByUserId" : 1,
          "Description" : "Description",
          "CertificateUser" : "CertificateUser",
          "CertificateUserId" : 6,
          "VisibleToCertificateUsers" : false,
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Disabled" : false,
          "CertificateUserThumbPrint" : "CertificateUserThumbPrint",
          "AppName" : "AppName"
        }
      },
      "RegistrationAccessRequestBroker" : {
        "type" : "object",
        "properties" : {
          "ApiKey" : {
            "type" : "string",
            "description" : "The alias registration API key.",
            "nullable" : true,
            "readOnly" : true
          },
          "IpRestrictions" : {
            "type" : "array",
            "description" : "List of restricted IP addresses",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Users" : {
            "type" : "array",
            "description" : "The users for which an access request can be created.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/RegistrationAlias"
            }
          },
          "Groups" : {
            "type" : "array",
            "description" : "The user group for which an access request can be created.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/RegistrationAliasGroup"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the required details to create an access request on behalf of another user.",
        "example" : {
          "ApiKey" : "ApiKey",
          "IpRestrictions" : [ "IpRestrictions", "IpRestrictions" ],
          "Groups" : [ {
            "Description" : "Description",
            "DomainName" : "DomainName",
            "GroupId" : 1,
            "Name" : "Name"
          }, {
            "Description" : "Description",
            "DomainName" : "DomainName",
            "GroupId" : 1,
            "Name" : "Name"
          } ],
          "Users" : [ {
            "ProviderName" : "ProviderName",
            "UserName" : "UserName",
            "DomainName" : "DomainName",
            "UserId" : 0,
            "FirstName" : "FirstName",
            "DisplayName" : "DisplayName",
            "LastName" : "LastName",
            "Disabled" : 6,
            "DirectoryName" : "DirectoryName"
          }, {
            "ProviderName" : "ProviderName",
            "UserName" : "UserName",
            "DomainName" : "DomainName",
            "UserId" : 0,
            "FirstName" : "FirstName",
            "DisplayName" : "DisplayName",
            "LastName" : "LastName",
            "Disabled" : 6,
            "DirectoryName" : "DirectoryName"
          } ]
        }
      },
      "RegistrationAlias" : {
        "type" : "object",
        "properties" : {
          "UserId" : {
            "type" : "integer",
            "description" : "User ID.",
            "format" : "int32"
          },
          "FirstName" : {
            "type" : "string",
            "description" : "User first name.",
            "nullable" : true,
            "readOnly" : true
          },
          "LastName" : {
            "type" : "string",
            "description" : "User last name.",
            "nullable" : true,
            "readOnly" : true
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "User display name.",
            "nullable" : true,
            "readOnly" : true
          },
          "Disabled" : {
            "type" : "integer",
            "description" : "User disabled flag.",
            "format" : "int32",
            "readOnly" : true
          },
          "DirectoryName" : {
            "type" : "string",
            "description" : "Directory name.",
            "nullable" : true,
            "readOnly" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name.",
            "nullable" : true,
            "readOnly" : true
          },
          "UserName" : {
            "type" : "string",
            "description" : "User name.",
            "nullable" : true,
            "readOnly" : true
          },
          "ProviderName" : {
            "type" : "string",
            "description" : "Provider name.",
            "nullable" : true,
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a user that an application can impersonate.",
        "example" : {
          "ProviderName" : "ProviderName",
          "UserName" : "UserName",
          "DomainName" : "DomainName",
          "UserId" : 0,
          "FirstName" : "FirstName",
          "DisplayName" : "DisplayName",
          "LastName" : "LastName",
          "Disabled" : 6,
          "DirectoryName" : "DirectoryName"
        }
      },
      "RegistrationAliasGroup" : {
        "type" : "object",
        "properties" : {
          "GroupId" : {
            "type" : "integer",
            "description" : "Group ID.",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "Group name.",
            "nullable" : true,
            "readOnly" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Group description.",
            "nullable" : true,
            "readOnly" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name.",
            "nullable" : true,
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a user group whose users an application can impersonate.",
        "example" : {
          "Description" : "Description",
          "DomainName" : "DomainName",
          "GroupId" : 1,
          "Name" : "Name"
        }
      },
      "RegistrationRetrievableAccount" : {
        "type" : "object",
        "properties" : {
          "AccountId" : {
            "type" : "integer",
            "description" : "The account's unique id.",
            "format" : "int32"
          },
          "AccountName" : {
            "type" : "string",
            "description" : "The account name.",
            "nullable" : true,
            "readOnly" : true
          },
          "ApiKey" : {
            "type" : "string",
            "description" : "The account's API key.",
            "nullable" : true,
            "readOnly" : true
          },
          "IpRestrictions" : {
            "type" : "array",
            "description" : "List of restricted IP addresses",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "ID of the asset",
            "format" : "int32",
            "readOnly" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset",
            "nullable" : true,
            "readOnly" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "ID of the asset partition",
            "format" : "int32",
            "readOnly" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition",
            "nullable" : true,
            "readOnly" : true
          },
          "AssetDescription" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the asset",
            "nullable" : true,
            "readOnly" : true
          },
          "AccountDescription" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the account",
            "nullable" : true,
            "readOnly" : true
          },
          "NetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset",
            "nullable" : true,
            "readOnly" : true
          },
          "AccountDisabled" : {
            "type" : "integer",
            "description" : "Account disabled flag",
            "format" : "int32",
            "readOnly" : true
          },
          "AccountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name",
            "nullable" : true,
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an associated account on an application to application registration.",
        "example" : {
          "AssetPartitionId" : 1,
          "AccountDescription" : "AccountDescription",
          "AccountId" : 0,
          "ApiKey" : "ApiKey",
          "IpRestrictions" : [ "IpRestrictions", "IpRestrictions" ],
          "DomainName" : "DomainName",
          "AssetDescription" : "AssetDescription",
          "AccountDisabled" : 5,
          "AccountType" : "Asset",
          "AssetName" : "AssetName",
          "AssetPartitionName" : "AssetPartitionName",
          "NetworkAddress" : "NetworkAddress",
          "AssetId" : 6,
          "AccountName" : "AccountName"
        }
      },
      "RemedyProperties" : {
        "type" : "object",
        "properties" : {
          "AuthenticationString" : {
            "type" : "string",
            "description" : "Authentication string used to connect to the api",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration specific to Remedy",
        "example" : {
          "AuthenticationString" : "AuthenticationString"
        }
      },
      "RemoteDesktopApplicationProperties" : {
        "type" : "object",
        "properties" : {
          "ApplicationHostAssetId" : {
            "type" : "integer",
            "description" : "Database ID fo the application host asset",
            "format" : "int32",
            "nullable" : true
          },
          "ApplicationHostAsset" : {
            "$ref" : "#/components/schemas/PolicyAsset"
          },
          "ApplicationHostAccountId" : {
            "type" : "integer",
            "description" : "Database ID fo the application host asset login account",
            "format" : "int32",
            "nullable" : true
          },
          "ApplicationHostLoginAccount" : {
            "$ref" : "#/components/schemas/PolicyAccount"
          },
          "ApplicationDisplayName" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "Remote application display name",
            "nullable" : true
          },
          "ApplicationAlias" : {
            "maximum" : 1000,
            "maxLength" : 1000,
            "type" : "string",
            "description" : "Remote application alias",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration specific to Remote Desktop application sessions",
        "example" : {
          "ApplicationHostLoginAccount" : null,
          "ApplicationDisplayName" : "ApplicationDisplayName",
          "ApplicationAlias" : "ApplicationAlias",
          "ApplicationHostAssetId" : 2,
          "ApplicationHostAccountId" : 7,
          "ApplicationHostAsset" : {
            "AssetPartitionId" : 6,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetType" : "NotSpecified",
            "Description" : "Description",
            "SshHostKey" : {
              "Fingerprint" : "Fingerprint",
              "SshHostKey" : "SshHostKey",
              "FingerprintSha256" : "FingerprintSha256"
            },
            "NetworkAddress" : "NetworkAddress",
            "Platform" : {
              "DisplayName" : "DisplayName",
              "Id" : 5,
              "PlatformType" : null,
              "SupportsSessionManagement" : true
            },
            "DomainName" : "DomainName",
            "SessionAccessProperties" : {
              "RemoteDesktopSessionPort" : 21975,
              "AllowSessionRequests" : true,
              "TelnetSessionPort" : 20275,
              "SshSessionPort" : 43935
            },
            "Id" : 6,
            "Disabled" : true,
            "Name" : "Name"
          }
        }
      },
      "ReportCategories" : {
        "type" : "string",
        "description" : "Categories of reports",
        "format" : "string",
        "enum" : [ "Entitlements", "Tasks", "Ownership" ]
      },
      "RequestSessionId" : {
        "required" : [ "AccessRequestId", "SessionId" ],
        "type" : "object",
        "properties" : {
          "AccessRequestId" : {
            "type" : "string",
            "description" : "Unique access request ID"
          },
          "SessionId" : {
            "type" : "integer",
            "description" : "ID of session for request",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "List of sessions to terminate"
      },
      "RequestState" : {
        "type" : "string",
        "description" : "State of the current request",
        "format" : "string",
        "enum" : [ "Unknown", "Queued", "Running", "Success", "Failure", "Cancelled", "Accepted", "Rejected", "Received" ]
      },
      "RequestStatus" : {
        "type" : "object",
        "properties" : {
          "State" : {
            "$ref" : "#/components/schemas/RequestState"
          },
          "PercentComplete" : {
            "type" : "integer",
            "description" : "How much of work associated with the request is complete (Read-only)",
            "format" : "int32"
          },
          "Cancellable" : {
            "type" : "boolean",
            "description" : "Is the request cancellable? (Read-only). The value of this flag is a suggestion only."
          },
          "AcceptedTime" : {
            "type" : "string",
            "description" : "When was this request accepted (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "AcceptanceDuration" : {
            "type" : "string",
            "description" : "Duration that request was being validated for acceptance (Read-only)",
            "format" : "date-span"
          },
          "StartTime" : {
            "type" : "string",
            "description" : "When was the request work started (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "QueuedDuration" : {
            "type" : "string",
            "description" : "Duration that request was queued (Read-only)",
            "format" : "date-span"
          },
          "EndTime" : {
            "type" : "string",
            "description" : "When was the request completed (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "RunningDuration" : {
            "type" : "string",
            "description" : "Duration that request was running (Read-only)",
            "format" : "date-span"
          },
          "TotalDuration" : {
            "type" : "string",
            "description" : "Total duration that request was active (Read-only)",
            "format" : "date-span"
          },
          "Message" : {
            "type" : "string",
            "description" : "Last message associated with the request (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "EndTime" : "2000-01-23T04:56:07.000+00:00",
          "Message" : "Message",
          "State" : "Unknown",
          "PercentComplete" : 2,
          "Cancellable" : true,
          "StartTime" : "2000-01-23T04:56:07.000+00:00",
          "QueuedDuration" : "QueuedDuration",
          "RunningDuration" : "RunningDuration",
          "AcceptanceDuration" : "AcceptanceDuration",
          "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
          "TotalDuration" : "TotalDuration"
        }
      },
      "ReviewRequest" : {
        "required" : [ "RequestId" ],
        "type" : "object",
        "properties" : {
          "RequestId" : {
            "type" : "string",
            "description" : "Unique ID of the access request to review"
          },
          "Comment" : {
            "type" : "string",
            "description" : "Comment made by reviewer to describe review",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Information for reviewing a request",
        "example" : {
          "Comment" : "Comment",
          "RequestId" : "RequestId"
        }
      },
      "Role" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The database ID of the role (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "The name of the role"
          },
          "Priority" : {
            "type" : "integer",
            "description" : "The priority of this role. Used for resolving permission conflicts.\r\nSet to 0 to add as the lowest priority role. Max role priority plus 1.",
            "format" : "int32"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the role",
            "nullable" : true
          },
          "ExpirationDate" : {
            "type" : "string",
            "description" : "Date/time after which the associated policy/role will cease to be active",
            "format" : "date-time",
            "nullable" : true
          },
          "IsExpired" : {
            "type" : "boolean",
            "description" : "Whether this policy is expired.  (Read-only)"
          },
          "HasExpiredPolicies" : {
            "type" : "boolean",
            "description" : "Whether this role has policies that are expired.  (Read-only)"
          },
          "HasInvalidPolicies" : {
            "type" : "boolean",
            "description" : "Whether this role has policies that have invalid connection policies.  (Read-only)"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "UserCount" : {
            "type" : "integer",
            "description" : "Number of users that are a member of this role (Read-only)",
            "format" : "int32"
          },
          "AccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts that have policies belonging to this role (Read-only)",
            "format" : "int32"
          },
          "AssetCount" : {
            "type" : "integer",
            "description" : "Number of assets that have policies belonging to this role (Read-only)",
            "format" : "int32"
          },
          "PolicyCount" : {
            "type" : "integer",
            "description" : "Number of policies belonging to this role (Read-only)",
            "format" : "int32"
          },
          "HourlyRestrictionProperties" : {
            "$ref" : "#/components/schemas/HourlyRestrictionProperties"
          },
          "Members" : {
            "type" : "array",
            "description" : "Identities that are members of this role. Requesters for password policies assigned to this role.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Roles in Pangaea are made up of a members, security scopes, and permissions.\r\n* Members consist of users or groups.\r\n* Permissions determine access to resources on the appliance.\r\n* Security scopes determine access to assets such as assets and accounts. This access to assets is managed via policies (i.e. groups of settings)",
        "example" : {
          "IsExpired" : true,
          "Description" : "Description",
          "Priority" : 6,
          "UserCount" : 5,
          "AssetCount" : 2,
          "HasInvalidPolicies" : true,
          "HourlyRestrictionProperties" : {
            "EnableHourlyRestrictions" : false,
            "ThursdayValidHours" : [ 6, 6 ],
            "WednesdayValidHours" : [ 0, 0 ],
            "SaturdayValidHours" : [ 1, 1 ],
            "TuesdayValidHours" : [ 4, 4 ],
            "MondayValidHours" : [ 3, 3 ],
            "FridayValidHours" : [ 4, 4 ],
            "SundayValidHours" : [ 4, 4 ]
          },
          "PolicyCount" : 7,
          "HasExpiredPolicies" : true,
          "AccountCount" : 5,
          "Name" : "Name",
          "CreatedByUserId" : 1,
          "ExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Members" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ]
        }
      },
      "RunningTask" : {
        "type" : "object",
        "properties" : {
          "TaskId" : {
            "type" : "string",
            "description" : "Unique ID of the task",
            "nullable" : true
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Appliance that task is running on",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "AssetDiscoveryJobName" : {
            "type" : "string",
            "description" : "Name of the asset discovery job (Read-only)",
            "nullable" : true
          },
          "AssetDiscoveryType" : {
            "$ref" : "#/components/schemas/AssetDiscoveryType"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this job belongs to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this job belongs to (Read-only)",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory name the task was executed against (Read-only)",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Account to run this task for",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account this task is for (Read-only)",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "ID of the profile to run this task for",
            "format" : "int32",
            "nullable" : true
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile this task is for (Read-only)",
            "nullable" : true
          },
          "SyncGroupId" : {
            "type" : "integer",
            "description" : "ID of the sync group to run this task for",
            "format" : "int32",
            "nullable" : true
          },
          "SyncGroupName" : {
            "type" : "string",
            "description" : "Name of the sync group this task is for (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an asynchronous task on the appliance that is running",
        "example" : {
          "AssetPartitionId" : 0,
          "ProfileId" : 5,
          "TaskId" : "TaskId",
          "AccountId" : 1,
          "SyncGroupName" : "SyncGroupName",
          "ProfileName" : "ProfileName",
          "AssetName" : "AssetName",
          "Name" : "Unknown",
          "AssetDiscoveryJobName" : "AssetDiscoveryJobName",
          "AssetPartitionName" : "AssetPartitionName",
          "SyncGroupId" : 5,
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "AssetDiscoveryType" : "Directory",
          "ApplianceId" : "ApplianceId",
          "AssetId" : 6,
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          },
          "AccountName" : "AccountName"
        }
      },
      "SavedAccessRequest" : {
        "type" : "object",
        "properties" : {
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of asset to request access to",
            "format" : "int32"
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Database ID of the account to request password for (or access account for sessions)",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account being requested",
            "nullable" : true,
            "readOnly" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Name of the domain of the account",
            "nullable" : true,
            "readOnly" : true
          },
          "AccountAssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset of the account",
            "format" : "int32",
            "nullable" : true,
            "readOnly" : true
          },
          "AccountAssetName" : {
            "type" : "string",
            "description" : "Name of the asset of the account",
            "nullable" : true,
            "readOnly" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset to request access for",
            "nullable" : true,
            "readOnly" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "IsEmergency" : {
            "type" : "boolean",
            "description" : "Whether emergency access is being requested"
          },
          "ReasonCodeId" : {
            "type" : "integer",
            "description" : "Database ID of the pre-defined reason code for why the password access is needed",
            "format" : "int32",
            "nullable" : true
          },
          "ReasonCodeName" : {
            "type" : "string",
            "description" : "Name of the pre-defined reason code for why the password access is needed",
            "nullable" : true
          },
          "ReasonComment" : {
            "type" : "string",
            "description" : "Requester's reason of why the password access is needed",
            "nullable" : true
          },
          "RequestedDurationDays" : {
            "type" : "integer",
            "description" : "The number of days requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.",
            "format" : "int32",
            "nullable" : true
          },
          "RequestedDurationHours" : {
            "type" : "integer",
            "description" : "The number of hours requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.",
            "format" : "int32",
            "nullable" : true
          },
          "RequestedDurationMinutes" : {
            "type" : "integer",
            "description" : "The number of minutes requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.",
            "format" : "int32",
            "nullable" : true
          },
          "ActiveRequests" : {
            "type" : "array",
            "description" : "List of requests that are currently active",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ActiveRequest"
            }
          },
          "AssetPlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          }
        },
        "additionalProperties" : false,
        "description" : "A saved access request that can be used in a user request favorite",
        "example" : {
          "AccessRequestType" : "Password",
          "ActiveRequests" : [ {
            "AccessRequestType" : "Password",
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestId" : "RequestId",
            "State" : "New",
            "IsEmergency" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "AccessRequestType" : "Password",
            "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestId" : "RequestId",
            "State" : "New",
            "IsEmergency" : true,
            "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
            "RequestAvailability" : [ {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "Begin" : "2000-01-23T04:56:07.000+00:00",
              "End" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "AccountId" : 1,
          "ReasonComment" : "ReasonComment",
          "AccountAssetName" : "AccountAssetName",
          "RequestedDurationHours" : 7,
          "AccountDomainName" : "AccountDomainName",
          "AssetName" : "AssetName",
          "ReasonCodeId" : 5,
          "AccountAssetId" : 5,
          "AssetPlatformType" : "Unknown",
          "RequestedDurationMinutes" : 9,
          "IsEmergency" : true,
          "AssetId" : 6,
          "RequestedDurationDays" : 2,
          "AccountName" : "AccountName",
          "ReasonCodeName" : "ReasonCodeName"
        }
      },
      "ScheduledAuditLogReport" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the search (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this search"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this search",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          },
          "SerializationFormat" : {
            "$ref" : "#/components/schemas/SupportedReportDataSerializationFormat"
          },
          "CategoryOption" : {
            "$ref" : "#/components/schemas/AuditLogCategory"
          },
          "DateRangeType" : {
            "$ref" : "#/components/schemas/DateRangeType"
          },
          "StartDateOption" : {
            "type" : "string",
            "description" : "Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over filter)",
            "format" : "date-time",
            "nullable" : true
          },
          "EndDateOption" : {
            "type" : "string",
            "description" : "Get activity that occurred before this date. Defaults to now. (Preferred over filter)",
            "format" : "date-time",
            "nullable" : true
          },
          "UserIdOption" : {
            "type" : "integer",
            "description" : "Get activity that occurred for a specific user (Preferred over filter)",
            "format" : "int32",
            "nullable" : true
          },
          "UserIdOptionDisplayName" : {
            "type" : "string",
            "description" : "Display name for user ID option",
            "nullable" : true
          },
          "AssetIdOption" : {
            "type" : "integer",
            "description" : "Get activity that occurred for a specific asset (Preferred over filter)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetIdOptionName" : {
            "type" : "string",
            "description" : "Display name for asset ID option",
            "nullable" : true
          },
          "AccountIdOption" : {
            "type" : "integer",
            "description" : "Get activity that occurred for a specific account (Preferred over filter)",
            "format" : "int32",
            "nullable" : true
          },
          "AccountIdOptionName" : {
            "type" : "string",
            "description" : "Display name for account ID option",
            "nullable" : true
          },
          "IncludeDetailsOption" : {
            "type" : "boolean",
            "description" : "Report all activity details as opposed to a summary view. Only valid when CategoryOption is specified."
          },
          "FilterOption" : {
            "type" : "string",
            "description" : "Filter results. Only V3 DTO properties are supported. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()",
            "nullable" : true
          },
          "PageOption" : {
            "type" : "integer",
            "description" : "Which page (starting with 0) of data to return",
            "format" : "int32",
            "nullable" : true
          },
          "LimitOption" : {
            "type" : "integer",
            "description" : "The size of a page of data",
            "format" : "int32",
            "nullable" : true
          },
          "CountOption" : {
            "type" : "boolean",
            "description" : "When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. \r\nIf specified, the fields and orderby parameter values are ignored."
          },
          "FieldsOption" : {
            "type" : "string",
            "description" : "List of property names (comma-separated) to include in entity output. Only V3 DTO properties are supported.",
            "nullable" : true
          },
          "OrderbyOption" : {
            "type" : "string",
            "description" : "List of property names (comma-separated) to sort entities by. Only V3 DTO properties are supported. Prepend properties with - for descending.",
            "nullable" : true
          },
          "QueryStringOption" : {
            "type" : "string",
            "description" : "Search all string fields for the specified value",
            "nullable" : true
          },
          "LastScheduledExecution" : {
            "type" : "string",
            "description" : "The last time this report was executed",
            "format" : "date-time",
            "nullable" : true
          },
          "NextScheduledExecution" : {
            "type" : "string",
            "description" : "The next time this report will be executed",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "ScheduleType" : "Never",
          "Description" : "Description",
          "StartHour" : 12,
          "UserIdOption" : 7,
          "AccountIdOption" : 3,
          "FilterOption" : "FilterOption",
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetIdOptionName" : "AssetIdOptionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "UserIdOptionDisplayName" : "UserIdOptionDisplayName",
          "QueryStringOption" : "QueryStringOption",
          "CreatedByUserId" : 6,
          "OrderbyOption" : "OrderbyOption",
          "SerializationFormat" : "Json",
          "RepeatDayOfMonth" : 18,
          "CategoryOption" : "Unknown",
          "NextScheduledExecution" : "2000-01-23T04:56:07.000+00:00",
          "StartMinute" : 13,
          "FieldsOption" : "FieldsOption",
          "EndDateOption" : "2000-01-23T04:56:07.000+00:00",
          "StartDateOption" : "2000-01-23T04:56:07.000+00:00",
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "LastScheduledExecution" : "2000-01-23T04:56:07.000+00:00",
          "RepeatWeekOfMonth" : "First",
          "DateRangeType" : "None",
          "AccountIdOptionName" : "AccountIdOptionName",
          "LimitOption" : 4,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "IncludeDetailsOption" : true,
          "CountOption" : true,
          "Id" : 0,
          "TimeOfDayType" : "Instant",
          "PageOption" : 2,
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "AssetIdOption" : 9,
          "RepeatInterval" : 314780941
        }
      },
      "ScheduledTask" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "$ref" : "#/components/schemas/ScheduledTaskNames"
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Unique ID of account associated with task",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of account associated with task",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of account associated with task",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Unique ID of asset associated with task",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of asset associated with task",
            "nullable" : true
          },
          "SyncGroupId" : {
            "type" : "integer",
            "description" : "Unique ID of sync group associated with task",
            "format" : "int32",
            "nullable" : true
          },
          "SyncGroupName" : {
            "type" : "string",
            "description" : "Name of sync group associated with task",
            "nullable" : true
          },
          "ScheduleId" : {
            "type" : "integer",
            "description" : "Unique ID of schedule associated with task",
            "format" : "int32"
          },
          "ScheduleName" : {
            "type" : "string",
            "description" : "Name of schedule associated with task",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Unique ID of asset partition associated with task",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of asset partition associated with task",
            "nullable" : true
          },
          "DueDateTime" : {
            "type" : "string",
            "description" : "Date task is scheduled for",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a scheduled platform task",
        "example" : {
          "AssetPartitionId" : 5,
          "AccountId" : 0,
          "SyncGroupName" : "SyncGroupName",
          "DueDateTime" : "2000-01-23T04:56:07.000+00:00",
          "ScheduleId" : 5,
          "AccountDomainName" : "AccountDomainName",
          "AssetName" : "AssetName",
          "Name" : "TestConnection",
          "ScheduleName" : "ScheduleName",
          "AssetPartitionName" : "AssetPartitionName",
          "SyncGroupId" : 1,
          "AssetId" : 6,
          "AccountName" : "AccountName"
        }
      },
      "ScheduledTaskNames" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "TestConnection", "CheckPassword", "ChangePassword", "ChangeSshKey", "UpdateDependentAsset", "DiscoverAccounts", "DiscoverAssets", "RestoreAccount", "SuspendAccount", "PasswordSyncAccounts", "DiscoverServices", "CheckSshKey", "DiscoverSshKeys", "SshKeySyncAccounts" ]
      },
      "ScheduleInterval" : {
        "required" : [ "EndHour", "EndMinute", "StartHour", "StartMinute" ],
        "type" : "object",
        "properties" : {
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Hour the interval starts",
            "format" : "int32"
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Minute the interval starts",
            "format" : "int32"
          },
          "EndHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Hour the interval ends",
            "format" : "int32"
          },
          "EndMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Minute the interval ends. The end minute is not included in the window interval",
            "format" : "int32"
          },
          "Iterations" : {
            "maximum" : 1440,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Number of times to execute tasks during schedule window (derived using RepeatInterval for Hourly and Minute schedule types)",
            "format" : "int32",
            "default" : 1
          }
        },
        "additionalProperties" : false,
        "description" : "Interval of time in which to execute tasks",
        "example" : {
          "StartMinute" : 24,
          "StartHour" : 4,
          "EndHour" : 16,
          "Iterations" : 148,
          "EndMinute" : 7
        }
      },
      "ScheduleType" : {
        "type" : "string",
        "description" : "Represents how often the specified schedule will run",
        "format" : "string",
        "enum" : [ "Never", "Daily", "Weekly", "Monthly", "Hourly", "Minute" ]
      },
      "SchemaDescriptor" : {
        "type" : "object",
        "properties" : {
          "Required" : {
            "type" : "boolean",
            "description" : "This property is required to be set"
          },
          "ReadOnly" : {
            "type" : "boolean",
            "description" : "This property is readonly"
          }
        },
        "additionalProperties" : false,
        "description" : "Descriptor for a schema property",
        "example" : {
          "ReadOnly" : true,
          "Required" : true
        }
      },
      "SearchNameType" : {
        "type" : "string",
        "description" : "Type of name search to perform",
        "format" : "string",
        "enum" : [ "StartsWith", "Contains" ]
      },
      "SearchScope" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Base", "OneLevel", "Subtree" ]
      },
      "SecretsBrokerLicense" : {
        "type" : "object",
        "properties" : {
          "MaxSecrets" : {
            "type" : "integer",
            "description" : "The maximum number of secrets permitted under this license.",
            "format" : "int32",
            "nullable" : true
          },
          "SecretsUsed" : {
            "type" : "integer",
            "description" : "The number of secrets currently utilized.",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "A license for the secrets broker module.",
        "example" : {
          "SecretsUsed" : 7,
          "MaxSecrets" : 4
        }
      },
      "SendTestEmailParameters" : {
        "required" : [ "BodyTemplate", "SubjectTemplate", "ToEmail" ],
        "type" : "object",
        "properties" : {
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "ReplyToEmail" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "The Reply-To address to use when generating email notifications from this template.",
            "nullable" : true
          },
          "SubjectTemplate" : {
            "maximum" : 1024,
            "maxLength" : 1024,
            "type" : "string",
            "description" : "The subject line template. Mustache-style tags are supported for insertion of event property data. See also Event for definitions of event property data.",
            "default" : ""
          },
          "BodyTemplate" : {
            "maximum" : 16384,
            "maxLength" : 16384,
            "type" : "string",
            "description" : "The body template. Mustache-style tags are supported for insertion of event property data. See also Event for definitions of event property data.",
            "default" : ""
          },
          "Event" : {
            "$ref" : "#/components/schemas/Event"
          },
          "ToEmail" : {
            "type" : "string",
            "description" : "Email address to send test email to"
          }
        },
        "additionalProperties" : false
      },
      "ServerCertificate" : {
        "required" : [ "Base64CertificateData" ],
        "type" : "object",
        "properties" : {
          "Subject" : {
            "type" : "string",
            "description" : "The Subject of the certificate (Read-only)",
            "nullable" : true
          },
          "Base64CertificateData" : {
            "type" : "string",
            "description" : "Base64 encoded certificate DER data (write-only)"
          },
          "IssuedBy" : {
            "type" : "string",
            "description" : "The CA that issued the certificate (Read-only)",
            "nullable" : true
          },
          "IsCertificateAuthority" : {
            "type" : "boolean",
            "description" : "Whether or not this certificate is a certificate authority (Read-only)"
          },
          "IssuerCertificates" : {
            "type" : "array",
            "description" : "Base64 encoded certificate DER data for issuing certificates (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "DnsNames" : {
            "type" : "array",
            "description" : "List of alternate DNS names attached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "IpAddresses" : {
            "type" : "array",
            "description" : "List of alternate IP addresses attached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "NotBefore" : {
            "type" : "string",
            "description" : "The date the certificate becomes valid (Read-only)",
            "format" : "date-time"
          },
          "NotAfter" : {
            "type" : "string",
            "description" : "The date the certificate expires (Read-only)",
            "format" : "date-time"
          },
          "Thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "Passphrase" : {
            "type" : "string",
            "description" : "The passphrase for decrypting the certificate (write-only) (Read-only)",
            "nullable" : true,
            "default" : ""
          },
          "CertificateType" : {
            "$ref" : "#/components/schemas/CertificateType"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "System owned certificates cannot be deleted (Read-Only)"
          },
          "SystemOwnedPrivateKey" : {
            "type" : "boolean",
            "description" : "Whether private key was generated on a secure appliance (Read-Only)"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a certificate from a certificate store on the appliance",
        "example" : {
          "Thumbprint" : "Thumbprint",
          "Passphrase" : "Passphrase",
          "DnsNames" : [ "DnsNames", "DnsNames" ],
          "NotAfter" : "2000-01-23T04:56:07.000+00:00",
          "Subject" : "Subject",
          "IpAddresses" : [ "IpAddresses", "IpAddresses" ],
          "CertificateType" : "Unknown",
          "IssuerCertificates" : [ "IssuerCertificates", "IssuerCertificates" ],
          "SystemOwnedPrivateKey" : true,
          "IsCertificateAuthority" : true,
          "Base64CertificateData" : "Base64CertificateData",
          "NotBefore" : "2000-01-23T04:56:07.000+00:00",
          "IssuedBy" : "IssuedBy",
          "IsSystemOwned" : true
        }
      },
      "ServerCertificateLog" : {
        "required" : [ "Base64CertificateData" ],
        "type" : "object",
        "properties" : {
          "Subject" : {
            "type" : "string",
            "description" : "The Subject of the certificate (Read-only)",
            "nullable" : true
          },
          "Base64CertificateData" : {
            "type" : "string",
            "description" : "Base64 encoded public certificate DER data (Read-only)"
          },
          "IsCertificateAuthority" : {
            "type" : "boolean",
            "description" : "Whether or not this certificate is a certificate authority (Read-only)"
          },
          "IssuedBy" : {
            "type" : "string",
            "description" : "The CA that issued the certificate (Read-only)",
            "nullable" : true
          },
          "IssuerCertificates" : {
            "type" : "array",
            "description" : "Base64 encoded certificate DER data for issuing certificates (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "DnsNames" : {
            "type" : "array",
            "description" : "List of alternate DNS names attached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "IpAddresses" : {
            "type" : "array",
            "description" : "List of alternate IP addresses attached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "NotBefore" : {
            "type" : "string",
            "description" : "The date the certificate becomes valid (Read-only)",
            "format" : "date-time"
          },
          "NotAfter" : {
            "type" : "string",
            "description" : "The date the certificate expires (Read-only)",
            "format" : "date-time"
          },
          "Thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "Passphrase" : {
            "type" : "string",
            "description" : "The passphrase for decrypting the certificate (Read-only)",
            "nullable" : true,
            "default" : ""
          },
          "CertificateType" : {
            "$ref" : "#/components/schemas/CertificateType"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "System owned certificates cannot be deleted (Read-Only)"
          },
          "SystemOwnedPrivateKey" : {
            "type" : "boolean",
            "description" : "Whether private key was generated on a secure appliance (Read-Only)"
          },
          "InstalledDate" : {
            "type" : "string",
            "description" : "The date the certificate was installed (Read-only)",
            "format" : "date-time"
          },
          "ReplacedDate" : {
            "type" : "string",
            "description" : "The date the certificate was replaced by a new certificate (Read-only)",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a certificate from a certificate store on the appliance",
        "example" : {
          "Thumbprint" : "Thumbprint",
          "Passphrase" : "Passphrase",
          "ReplacedDate" : "2000-01-23T04:56:07.000+00:00",
          "DnsNames" : [ "DnsNames", "DnsNames" ],
          "NotAfter" : "2000-01-23T04:56:07.000+00:00",
          "Subject" : "Subject",
          "IpAddresses" : [ "IpAddresses", "IpAddresses" ],
          "CertificateType" : "Unknown",
          "IssuerCertificates" : [ "IssuerCertificates", "IssuerCertificates" ],
          "SystemOwnedPrivateKey" : true,
          "InstalledDate" : "2000-01-23T04:56:07.000+00:00",
          "IsCertificateAuthority" : true,
          "Base64CertificateData" : "Base64CertificateData",
          "NotBefore" : "2000-01-23T04:56:07.000+00:00",
          "IssuedBy" : "IssuedBy",
          "IsSystemOwned" : true
        }
      },
      "ServerCertificateSignatureRequest" : {
        "required" : [ "Subject" ],
        "type" : "object",
        "properties" : {
          "Subject" : {
            "maximum" : 500,
            "minimum" : 1,
            "maxLength" : 500,
            "minLength" : 1,
            "type" : "string",
            "description" : "The Subject as found on the request: \"Subject\":\"CN=fully.qualified.domain.name, OU=Organizational Unit, O=Company, L=City, S=State, C=Country\""
          },
          "KeyLength" : {
            "maximum" : 4096,
            "minimum" : 1024,
            "type" : "integer",
            "description" : "The length of the key\r\n<default>2048</default>",
            "format" : "int32",
            "default" : 2048
          },
          "Base64RequestData" : {
            "type" : "string",
            "description" : "The resulting request data encode in Base64 (Read-only)",
            "nullable" : true
          },
          "DnsNames" : {
            "type" : "array",
            "description" : "List of alternate DNS names attached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "IpAddresses" : {
            "type" : "array",
            "description" : "List of alternate IP addressesattached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Thumbprint" : {
            "type" : "string",
            "description" : "Thumbprint of the pending certificate (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "IssuedBy" : {
            "type" : "string",
            "description" : "who the request was issued by (Read-only)",
            "nullable" : true
          },
          "NotBefore" : {
            "type" : "string",
            "description" : "When the request becomes valid (Read-only)",
            "format" : "date-time"
          },
          "NotAfter" : {
            "type" : "string",
            "description" : "When the request becomes expired (Read-only)",
            "format" : "date-time"
          },
          "CertificateType" : {
            "$ref" : "#/components/schemas/ServerCertificateSignatureRequestType"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a request for getting a certificate signature from a CA",
        "example" : {
          "IpAddresses" : [ "IpAddresses", "IpAddresses" ],
          "CertificateType" : "Unknown",
          "Base64RequestData" : "Base64RequestData",
          "Thumbprint" : "Thumbprint",
          "DnsNames" : [ "DnsNames", "DnsNames" ],
          "NotBefore" : "2000-01-23T04:56:07.000+00:00",
          "NotAfter" : "2000-01-23T04:56:07.000+00:00",
          "KeyLength" : 1270,
          "IssuedBy" : "IssuedBy",
          "Subject" : "Subject"
        }
      },
      "ServerCertificateSignatureRequestType" : {
        "type" : "string",
        "description" : "Represents the type of CSR to be created",
        "format" : "string",
        "enum" : [ "Unknown", "Ssl", "AuditLogSigning", "ClientAuthentication", "SyslogClient", "EmailClientAuthentication" ]
      },
      "ServiceAccountCredentialType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "None", "Password", "SshKey", "DirectoryPassword", "LocalHostPassword", "AccessKey", "AccountPassword", "Custom", "StarlingConnect" ]
      },
      "ServiceDiscoveryLog" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of the event",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory name the task was executed against (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset. Only used when neither SystemId nor AccountId is defined",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the platform of the asset (Read-only)",
            "nullable" : true
          },
          "IsDirectory" : {
            "type" : "boolean",
            "description" : "Whether this is a directory platform (Read-only)"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network. Only used when neither SystemId nor AccountId is defined",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The database ID of the asset partition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "The database ID of the profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile explicitly set on this asset or inherited from the AssetPartition this asset belongs to (Read-only)",
            "nullable" : true
          },
          "AccountDiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "The database ID of the account discovery schedule when used (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AccountDiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of the account discovery schedule when used (Read-only)",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user that requested the task (Read-only)",
            "format" : "int32"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "InstallSshKeyFingerprint" : {
            "type" : "string",
            "description" : "Thumbprint of SSH key to install",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "DiscoveredServices" : {
            "type" : "array",
            "description" : "Accounts discovered by this task",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredServiceLog"
            }
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters passed to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a task that may run on a remote machine",
        "example" : {
          "ProfileId" : 5,
          "AccountDiscoveryScheduleId" : 5,
          "ApplianceName" : "ApplianceName",
          "IsDirectory" : true,
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "ProfileName" : "ProfileName",
          "CustomScriptParameters" : [ {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "Name" : "Unknown",
          "AssetPartitionName" : "AssetPartitionName",
          "NetworkAddress" : "NetworkAddress",
          "PlatformId" : 6,
          "InstallSshKeyFingerprint" : "InstallSshKeyFingerprint",
          "ApplianceId" : "ApplianceId",
          "AssetPartitionId" : 1,
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "DiscoveredServices" : [ {
            "AccountAssetId" : 9,
            "AccountId" : 7,
            "ServiceName" : "ServiceName",
            "ServiceType" : "Unknown",
            "AccountAssetName" : "AccountAssetName",
            "IsServiceEnabled" : true,
            "AccountDomainName" : "AccountDomainName",
            "DiscoveredAccount" : "DiscoveredAccount",
            "ServiceDisplayName" : "ServiceDisplayName",
            "AccountName" : "AccountName"
          }, {
            "AccountAssetId" : 9,
            "AccountId" : 7,
            "ServiceName" : "ServiceName",
            "ServiceType" : "Unknown",
            "AccountAssetName" : "AccountAssetName",
            "IsServiceEnabled" : true,
            "AccountDomainName" : "AccountDomainName",
            "DiscoveredAccount" : "DiscoveredAccount",
            "ServiceDisplayName" : "ServiceDisplayName",
            "AccountName" : "AccountName"
          } ],
          "EventName" : "Unknown",
          "AssetName" : "AssetName",
          "PlatformDisplayName" : "PlatformDisplayName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 2,
          "AccountDiscoveryScheduleName" : "AccountDiscoveryScheduleName",
          "Id" : "Id",
          "PlatformType" : "Unknown",
          "AssetId" : 0,
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "ServiceEnabled" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "PasswordChangeEnabled", "PasswordCheckEnabled", "PasswordRequestsEnabled", "SessionRequestsEnabled", "SshKeyRequestsEnabled", "AssetDiscoveryEnabled", "DirectorySyncEnabled", "SshKeyCheckEnabled", "SshKeyChangeEnabled", "SshKeyDiscoveryEnabled", "DiscoverAccountsEnabled", "DiscoverServicesEnabled" ]
      },
      "ServiceNowProperties" : {
        "type" : "object",
        "properties" : {
          "ClientIdentifier" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Unique identifier of allowed client (will use BasicAuth if not specified)",
            "nullable" : true
          },
          "ClientSecret" : {
            "type" : "string",
            "description" : "Passphrase corresponding to this client",
            "nullable" : true
          },
          "HasClientSecret" : {
            "type" : "boolean",
            "description" : "Whether a password has been set (Read-only)",
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration specific to ServiceNow",
        "example" : {
          "ClientIdentifier" : "ClientIdentifier",
          "ClientSecret" : "ClientSecret",
          "HasClientSecret" : true
        }
      },
      "ServicesConfig" : {
        "required" : [ "DiscoverAccountsEnabled", "DiscoverServicesEnabled", "PasswordChangeEnabled", "PasswordCheckEnabled", "PasswordRequestsEnabled", "SessionRequestsEnabled", "SshKeyChangeEnabled", "SshKeyCheckEnabled", "SshKeyDiscoveryEnabled", "SshKeyRequestsEnabled" ],
        "type" : "object",
        "properties" : {
          "PasswordChangeEnabled" : {
            "type" : "boolean",
            "description" : "Password change enabled",
            "default" : true
          },
          "PasswordCheckEnabled" : {
            "type" : "boolean",
            "description" : "Password check enabled",
            "default" : true
          },
          "PasswordRequestsEnabled" : {
            "type" : "boolean",
            "description" : "Password requests enabled",
            "default" : true
          },
          "SessionRequestsEnabled" : {
            "type" : "boolean",
            "description" : "Session requests enabled",
            "default" : true
          },
          "SshKeyRequestsEnabled" : {
            "type" : "boolean",
            "description" : "SSH Key requests enabled",
            "default" : true
          },
          "AssetDiscoveryEnabled" : {
            "type" : "boolean",
            "description" : "Asset discovery enabled",
            "default" : true
          },
          "DirectorySyncEnabled" : {
            "type" : "boolean",
            "description" : "Directory sync enabled",
            "default" : true
          },
          "SshKeyCheckEnabled" : {
            "type" : "boolean",
            "description" : "SSH key enabled",
            "default" : true
          },
          "SshKeyChangeEnabled" : {
            "type" : "boolean",
            "description" : "SSH key change enabled",
            "default" : true
          },
          "SshKeyDiscoveryEnabled" : {
            "type" : "boolean",
            "description" : "SSH key discovery enabled",
            "default" : true
          },
          "DiscoverAccountsEnabled" : {
            "type" : "boolean",
            "description" : "Discover accounts enabled",
            "default" : true
          },
          "DiscoverServicesEnabled" : {
            "type" : "boolean",
            "description" : "Discover services enabled",
            "default" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the service configuration on the appliance",
        "example" : {
          "PasswordRequestsEnabled" : true,
          "SshKeyDiscoveryEnabled" : true,
          "SshKeyCheckEnabled" : true,
          "SessionRequestsEnabled" : true,
          "DirectorySyncEnabled" : true,
          "PasswordChangeEnabled" : true,
          "DiscoverServicesEnabled" : true,
          "SshKeyChangeEnabled" : true,
          "SshKeyRequestsEnabled" : true,
          "PasswordCheckEnabled" : true,
          "AssetDiscoveryEnabled" : true,
          "DiscoverAccountsEnabled" : true
        }
      },
      "SessionAccessAccountType" : {
        "type" : "string",
        "description" : "How to authenticate to asset for session access",
        "format" : "string",
        "enum" : [ "None", "UserSupplied", "LinkedAccount", "PolicySpecific" ]
      },
      "SessionMemberStatus" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Available", "Unavailable" ]
      },
      "SessionModuleConnection" : {
        "required" : [ "NodeId" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique Id of the connected session module.",
            "format" : "int32",
            "x-key" : true
          },
          "NodeId" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Node Id of the session module."
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the session module.",
            "nullable" : true
          },
          "SpsNetworkAddress" : {
            "type" : "string",
            "description" : "REST access IP address.",
            "nullable" : true
          },
          "SpsHostName" : {
            "type" : "string",
            "description" : "SPS host name.",
            "nullable" : true
          },
          "CertificateUserCsr" : {
            "type" : "string",
            "description" : "Certificate Signing Request generated by SPS and to be signed by SPP.  The signed certificate will also be\r\nassociated with the certificate user created by SPP and used by SPS for authentication.",
            "nullable" : true
          },
          "SppSslPemEncodedCertificateChain" : {
            "type" : "string",
            "description" : "Current SSL PEM certificate chain.",
            "nullable" : true
          },
          "OneTimeToken" : {
            "type" : "string",
            "description" : "One time use token used by the linked session module to get the final trust validation.",
            "nullable" : true
          },
          "Trusted" : {
            "type" : "boolean",
            "description" : "Indicates if the session module connection is trusted.",
            "default" : false
          },
          "CertificateUserPemEncodedCertificate" : {
            "type" : "string",
            "description" : "Signed certificate generated from the CertificateUser Csr.",
            "nullable" : true
          },
          "CertificateUserId" : {
            "type" : "integer",
            "description" : "The id of the certificate user associated with the session module connection.",
            "format" : "int32"
          },
          "CertificateUserThumbprint" : {
            "type" : "string",
            "description" : "Thumbprint associated with the certificate user.",
            "nullable" : true
          },
          "CertificateUser" : {
            "type" : "string",
            "description" : "The certificate user associated with the linked session module.",
            "nullable" : true
          },
          "ClientCertificateThumbprint" : {
            "type" : "string",
            "description" : "Thumbprint associated with the certificate user.",
            "nullable" : true
          },
          "UseHostNameForLaunch" : {
            "type" : "boolean",
            "description" : "Use the SPS host name rather than IP address when launching a session.",
            "default" : false
          },
          "FirmwareVersion" : {
            "type" : "string",
            "description" : "Firmware version of the SPS appliance.",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a session module connection to a Safeguard cluster.",
        "example" : {
          "Description" : "Description",
          "SppSslPemEncodedCertificateChain" : "SppSslPemEncodedCertificateChain",
          "CertificateUserThumbprint" : "CertificateUserThumbprint",
          "CertificateUser" : "CertificateUser",
          "CertificateUserCsr" : "CertificateUserCsr",
          "Trusted" : false,
          "FirmwareVersion" : "FirmwareVersion",
          "CertificateUserPemEncodedCertificate" : "CertificateUserPemEncodedCertificate",
          "OneTimeToken" : "OneTimeToken",
          "CreatedByUserId" : 1,
          "ClientCertificateThumbprint" : "ClientCertificateThumbprint",
          "CertificateUserId" : 6,
          "NodeId" : "NodeId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "SpsNetworkAddress" : "SpsNetworkAddress",
          "SpsHostName" : "SpsHostName",
          "UseHostNameForLaunch" : false
        }
      },
      "SessionModuleConnectionPolicy" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Connection policy identifier",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Connection policy name",
            "nullable" : true
          },
          "SpsNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the linked session module",
            "nullable" : true
          },
          "SpsTargetAddress" : {
            "type" : "string",
            "description" : "Target address of the connection policy",
            "nullable" : true
          },
          "SpsNetworkPort" : {
            "type" : "string",
            "description" : "Network port of the linked session module",
            "nullable" : true
          },
          "SpsHostName" : {
            "type" : "string",
            "description" : "SPS host name.",
            "nullable" : true
          },
          "PolicyCapabilities" : {
            "type" : "array",
            "description" : "SPS policy capabilities.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SessionPolicyCapabilities"
            }
          },
          "Protocol" : {
            "$ref" : "#/components/schemas/SessionModuleConnectionProtocol"
          },
          "SessionModuleConnectionId" : {
            "type" : "integer",
            "description" : "Session module connection ID",
            "format" : "int32"
          },
          "IsPolicyDisabled" : {
            "type" : "boolean",
            "description" : "Session module connection policy is disabled or not"
          },
          "RequiresHostKey" : {
            "type" : "boolean",
            "description" : "Does the session module connection policy require a host key"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a session module connection policy",
        "example" : {
          "PolicyCapabilities" : [ "SppInitiated", "SppInitiated" ],
          "SessionModuleConnectionId" : 0,
          "RequiresHostKey" : true,
          "SpsTargetAddress" : "SpsTargetAddress",
          "Id" : "Id",
          "SpsNetworkAddress" : "SpsNetworkAddress",
          "SpsHostName" : "SpsHostName",
          "Protocol" : "Unknown",
          "SpsNetworkPort" : "SpsNetworkPort",
          "IsPolicyDisabled" : true,
          "Name" : "Name"
        }
      },
      "SessionModuleConnectionProtocol" : {
        "type" : "string",
        "description" : "Protocol of the Session Module Connection",
        "format" : "string",
        "enum" : [ "Unknown", "Rdp", "Ssh", "Telnet", "RdpApplication" ]
      },
      "SessionPlaybackData" : {
        "type" : "object",
        "properties" : {
          "version" : {
            "type" : "integer",
            "format" : "int32"
          },
          "download_url" : {
            "type" : "string",
            "nullable" : true
          },
          "terminate_url" : {
            "type" : "string",
            "nullable" : true
          },
          "authorization_header" : {
            "type" : "string",
            "description" : "Client must replace this with their authentication token",
            "nullable" : true
          },
          "username" : {
            "type" : "string",
            "nullable" : true
          },
          "password" : {
            "type" : "string",
            "nullable" : true
          },
          "active" : {
            "type" : "boolean"
          },
          "archive_server_address" : {
            "type" : "string",
            "nullable" : true
          },
          "archive_share_name" : {
            "type" : "string",
            "nullable" : true
          },
          "session_recording" : {
            "type" : "string",
            "nullable" : true
          },
          "perma_link" : {
            "type" : "string",
            "nullable" : true
          },
          "playback_url" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "SRS file definition used to playback session recordings from player",
        "example" : {
          "archive_server_address" : "archive_server_address",
          "password" : "password",
          "download_url" : "download_url",
          "session_recording" : "session_recording",
          "active" : true,
          "perma_link" : "perma_link",
          "archive_share_name" : "archive_share_name",
          "playback_url" : "playback_url",
          "version" : 0,
          "terminate_url" : "terminate_url",
          "authorization_header" : "authorization_header",
          "username" : "username"
        }
      },
      "SessionPolicyCapabilities" : {
        "type" : "string",
        "description" : "Session policy capabilities",
        "format" : "string",
        "enum" : [ "SppInitiated", "CredentialInjection" ]
      },
      "SessionProperties" : {
        "type" : "object",
        "properties" : {
          "SessionModuleConnectionId" : {
            "type" : "integer",
            "description" : "ID of the session module connection information",
            "format" : "int32",
            "nullable" : true
          },
          "SessionConnectionPolicyRef" : {
            "type" : "string",
            "description" : "Reference to the session module session connection policy",
            "nullable" : true
          },
          "RemoteDesktopApplicationProperties" : {
            "$ref" : "#/components/schemas/RemoteDesktopApplicationProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Session access configuration",
        "example" : {
          "SessionModuleConnectionId" : 1,
          "RemoteDesktopApplicationProperties" : {
            "ApplicationHostLoginAccount" : null,
            "ApplicationDisplayName" : "ApplicationDisplayName",
            "ApplicationAlias" : "ApplicationAlias",
            "ApplicationHostAssetId" : 2,
            "ApplicationHostAccountId" : 7,
            "ApplicationHostAsset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "AssetType" : "NotSpecified",
              "Description" : "Description",
              "SshHostKey" : {
                "Fingerprint" : "Fingerprint",
                "SshHostKey" : "SshHostKey",
                "FingerprintSha256" : "FingerprintSha256"
              },
              "NetworkAddress" : "NetworkAddress",
              "Platform" : {
                "DisplayName" : "DisplayName",
                "Id" : 5,
                "PlatformType" : null,
                "SupportsSessionManagement" : true
              },
              "DomainName" : "DomainName",
              "SessionAccessProperties" : {
                "RemoteDesktopSessionPort" : 21975,
                "AllowSessionRequests" : true,
                "TelnetSessionPort" : 20275,
                "SshSessionPort" : 43935
              },
              "Id" : 6,
              "Disabled" : true,
              "Name" : "Name"
            }
          },
          "SessionConnectionPolicyRef" : "SessionConnectionPolicyRef"
        }
      },
      "SessionRecordingProperties" : {
        "type" : "object",
        "properties" : {
          "HasRecording" : {
            "type" : "boolean",
            "description" : "Whether session was recorded"
          },
          "SpsApplianceId" : {
            "type" : "integer",
            "description" : "ID of the SPS appliance server where the session recording resides",
            "format" : "int32",
            "nullable" : true
          },
          "RecordingId" : {
            "type" : "string",
            "description" : "Id of the recording",
            "nullable" : true
          },
          "SessionResult" : {
            "type" : "string",
            "description" : "Session result",
            "nullable" : true
          },
          "DownloadUrl" : {
            "type" : "string",
            "description" : "Download URL of the recording",
            "nullable" : true
          },
          "IsLive" : {
            "type" : "boolean",
            "description" : "Is the session recording currently live"
          }
        },
        "additionalProperties" : false,
        "description" : "Information about session recording",
        "example" : {
          "HasRecording" : true,
          "RecordingId" : "RecordingId",
          "SpsApplianceId" : 7,
          "SessionResult" : "SessionResult",
          "IsLive" : true,
          "DownloadUrl" : "DownloadUrl"
        }
      },
      "SessionsLaunchData" : {
        "type" : "object",
        "properties" : {
          "Token" : {
            "type" : "string",
            "nullable" : true
          },
          "SessionId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "SpsInitiate" : {
            "type" : "boolean"
          },
          "SshConnectionString" : {
            "type" : "string",
            "nullable" : true
          },
          "TelnetConnectionString" : {
            "type" : "string",
            "nullable" : true
          },
          "RdpConnectionString" : {
            "type" : "string",
            "nullable" : true
          },
          "RdpConnectionFile" : {
            "type" : "string",
            "nullable" : true
          },
          "RdpHostComputer" : {
            "type" : "string",
            "nullable" : true
          },
          "ConnectionUri" : {
            "type" : "string",
            "nullable" : true
          },
          "SraConnectionUri" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "TelnetConnectionString" : "TelnetConnectionString",
          "RdpConnectionFile" : "RdpConnectionFile",
          "RdpHostComputer" : "RdpHostComputer",
          "SpsInitiate" : true,
          "ConnectionUri" : "ConnectionUri",
          "RdpConnectionString" : "RdpConnectionString",
          "Token" : "Token",
          "SshConnectionString" : "SshConnectionString",
          "SessionId" : 0,
          "SraConnectionUri" : "SraConnectionUri"
        }
      },
      "SessionState" : {
        "type" : "string",
        "description" : "Current state of the session",
        "format" : "string",
        "enum" : [ "None", "Initialized", "Authenticated", "Authorized", "Connected", "CheckedOut", "Terminated" ]
      },
      "Setting" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "The setting's name (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "Category" : {
            "type" : "string",
            "description" : "The setting's category (Read-only)",
            "nullable" : true
          },
          "Value" : {
            "maximum" : 512,
            "maxLength" : 512,
            "minLength" : 0,
            "type" : "string",
            "description" : "The setting's current value",
            "nullable" : true
          },
          "DefaultValue" : {
            "type" : "string",
            "description" : "The setting's default value (Read-only)",
            "nullable" : true
          },
          "MinValue" : {
            "type" : "integer",
            "description" : "The setting's minimum limit value, if the value is numeric in nature. When null, the value is either non-numeric or there is no minimum limit. (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "MaxValue" : {
            "type" : "integer",
            "description" : "The setting's maximum limit value, if the setting is numeric in nature. When null, the value is either non-numeric or there is no maximum limit. (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "Options" : {
            "type" : "array",
            "description" : "Valid options for this setting. Empty for many settings. (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SettingOption"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a setting used to configure the appliance or application",
        "example" : {
          "DefaultValue" : "DefaultValue",
          "Options" : [ {
            "Description" : "Description",
            "Value" : "Value"
          }, {
            "Description" : "Description",
            "Value" : "Value"
          } ],
          "Category" : "Category",
          "Value" : "Value",
          "MinValue" : 0,
          "MaxValue" : 6,
          "Name" : "Name"
        }
      },
      "SettingOption" : {
        "type" : "object",
        "properties" : {
          "Value" : {
            "type" : "string",
            "description" : "One of the setting's optional values (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "A description of this setting option (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Describes a setting's optional values",
        "example" : {
          "Description" : "Description",
          "Value" : "Value"
        }
      },
      "ShareWithUser" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The user's unique ID.  This is a system-assigned value that is generated when a user is first created. (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Friendly identifier of the user's identity in Safeguard.  Must be unique per identity provider."
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this user",
            "nullable" : true
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The user's display name (Read-only)",
            "nullable" : true
          },
          "LastName" : {
            "maximum" : 30,
            "minimum" : 1,
            "maxLength" : 30,
            "minLength" : 1,
            "type" : "string",
            "description" : "The user's last name. No double quotes.",
            "nullable" : true
          },
          "FirstName" : {
            "maximum" : 30,
            "minimum" : 1,
            "maxLength" : 30,
            "minLength" : 1,
            "type" : "string",
            "description" : "The user's first name. No double quotes.",
            "nullable" : true
          },
          "EmailAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The user's email address.",
            "nullable" : true
          },
          "WorkPhone" : {
            "maximum" : 30,
            "maxLength" : 30,
            "type" : "string",
            "description" : "The user's work phone number.",
            "nullable" : true
          },
          "MobilePhone" : {
            "maximum" : 30,
            "maxLength" : 30,
            "type" : "string",
            "description" : "The user's mobile phone number.",
            "nullable" : true
          },
          "Base64PhotoData" : {
            "type" : "string",
            "description" : "Binary photo data. Base64 encoded.  Limited to 64 KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image.",
            "nullable" : true
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Description" : "Description",
          "WorkPhone" : "WorkPhone",
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "FirstName" : "FirstName",
          "DisplayName" : "DisplayName",
          "Base64PhotoData" : "Base64PhotoData",
          "Id" : 1,
          "LastName" : "LastName",
          "EmailAddress" : "EmailAddress",
          "MobilePhone" : "MobilePhone",
          "Name" : "Name"
        }
      },
      "SnmpAuthenticationType" : {
        "type" : "string",
        "description" : "Authentication method for SNMP",
        "format" : "string",
        "enum" : [ "None", "Md5", "Sha1" ]
      },
      "SnmpEncryptionType" : {
        "type" : "string",
        "description" : "Type of SNMP encryptions to use",
        "format" : "string",
        "enum" : [ "None", "Des", "Aes128", "Aes192", "Aes256", "TripleDes" ]
      },
      "SnmpSubscriberProperties" : {
        "type" : "object",
        "properties" : {
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Subscriber SNMP network address",
            "nullable" : true
          },
          "Port" : {
            "type" : "integer",
            "description" : "UDP port number for SNMP traps",
            "format" : "int32",
            "nullable" : true,
            "default" : 162
          },
          "Community" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "SNMP community",
            "nullable" : true,
            "default" : "public"
          },
          "Version" : {
            "maximum" : 3,
            "minimum" : 1,
            "type" : "integer",
            "description" : "SNMP version",
            "format" : "int32",
            "nullable" : true,
            "default" : 2
          },
          "EngineId" : {
            "maximum" : 66,
            "minimum" : 10,
            "maxLength" : 66,
            "minLength" : 10,
            "type" : "string",
            "description" : "SNMP engine ID (between 10 and 64 hex characters, 0x is optional). Will be generated based on ApplianceId if not supplied. (v3 only)",
            "nullable" : true
          },
          "AuthenticationUserName" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "SNMP authentication username (v3 only)",
            "nullable" : true
          },
          "AuthenticationType" : {
            "$ref" : "#/components/schemas/SnmpAuthenticationType"
          },
          "AuthenticationPassword" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "SNMP authentication password (v3 only)",
            "nullable" : true
          },
          "HasAuthenticationPassword" : {
            "type" : "boolean",
            "description" : "Has SNMP authentication password (v3 only) (Read-Only)"
          },
          "EncryptionType" : {
            "$ref" : "#/components/schemas/SnmpEncryptionType"
          },
          "EncryptionPassword" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "SNMP encryption password (v3 only)",
            "nullable" : true
          },
          "HasEncryptionPassword" : {
            "type" : "boolean",
            "description" : "Has SNMP encryption password (v3 only) (Read-Only)"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents configuration for an SNMP event subscriber",
        "example" : {
          "EngineId" : "EngineId",
          "EncryptionType" : "None",
          "NetworkAddress" : "NetworkAddress",
          "Version" : 1,
          "AuthenticationPassword" : "AuthenticationPassword",
          "HasAuthenticationPassword" : true,
          "Port" : 5,
          "AuthenticationUserName" : "AuthenticationUserName",
          "EncryptionPassword" : "EncryptionPassword",
          "HasEncryptionPassword" : true,
          "Community" : "public",
          "AuthenticationType" : "None"
        }
      },
      "SshAlgorithms" : {
        "type" : "object",
        "properties" : {
          "PublicKey" : {
            "type" : "array",
            "description" : "Public Key Algorithms.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Cipher" : {
            "type" : "array",
            "description" : "Cipher Algorithms.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Kex" : {
            "type" : "array",
            "description" : "KEX Algorithms.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "Mac" : {
            "type" : "array",
            "description" : "MAC Algorithms.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the available algorithms when establishing an SSH connection through the sessions module, or to an archive server. The list order determines the priority in which the algorithms are negotiated with the SSHD server.",
        "example" : {
          "PublicKey" : [ "PublicKey", "PublicKey" ],
          "Cipher" : [ "Cipher", "Cipher" ],
          "Mac" : [ "Mac", "Mac" ],
          "Kex" : [ "Kex", "Kex" ]
        }
      },
      "SshKeyChangeSchedule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "AllowSshKeyChangeWhenReleased" : {
            "type" : "boolean",
            "description" : "Flag allowing the SSH key to be changed when it has been checked out. Not applicable to accounts in a SSH key sync group."
          },
          "SuspendAccountWhenCheckedIn" : {
            "type" : "boolean",
            "description" : "Whether an account should be suspended when it is checked in. Will be restored when made available for check out."
          },
          "NotifyOwnersOnly" : {
            "type" : "boolean",
            "description" : "Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately"
          },
          "RescheduleForUnscheduledSshKeyUpdate" : {
            "type" : "boolean",
            "description" : "Flag allowing this schedule to be updated when a SSH key is manually changed"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this change schedule is applied to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this change schedule is applied to (Read-only)",
            "nullable" : true
          },
          "GeneratedKeyLength" : {
            "type" : "integer",
            "description" : "Bit length of SSH keys to generate. RSA supports 1024, 2048, 4096, and 8192. Dsa supports 1024.",
            "format" : "int32",
            "default" : 2048
          },
          "GeneratedKeyType" : {
            "$ref" : "#/components/schemas/SshKeyType"
          },
          "GeneratedKeyComment" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "Comment to add to generated SSH keys",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a schedule used by a partition profile to change SSH keys",
        "example" : {
          "ScheduleType" : "Never",
          "Description" : "Description",
          "StartHour" : 16,
          "GeneratedKeyLength" : 6,
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 5,
          "RepeatDayOfMonth" : 7,
          "RescheduleForUnscheduledSshKeyUpdate" : true,
          "SuspendAccountWhenCheckedIn" : true,
          "AssetPartitionId" : 0,
          "StartMinute" : 54,
          "RepeatDaysOfWeek" : [ null, null ],
          "GeneratedKeyType" : "Unknown",
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "NotifyOwnersOnly" : true,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 1,
          "TimeOfDayType" : "Instant",
          "GeneratedKeyComment" : "GeneratedKeyComment",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "AllowSshKeyChangeWhenReleased" : true,
          "RepeatInterval" : 1210617418
        }
      },
      "SshKeyCheckSchedule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "ResetSshKeyOnMismatch" : {
            "type" : "boolean",
            "description" : "Flag to reset SSH key if an SSH key mismatch is found. Doesn't apply to manually invoked tasks."
          },
          "NotifyOwnersOnMismatch" : {
            "type" : "boolean",
            "description" : "Flag allowing users to be notified when a mismatch is found. Doesn't apply to manually invoked tasks."
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Database Identifier of the asset partition this check schedule is assigned to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this check schedule is assigned to (Read-only)",
            "nullable" : true
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a schedule used by a partition profile to check passwords",
        "example" : {
          "AssetPartitionId" : 0,
          "ScheduleType" : "Never",
          "StartMinute" : 41,
          "Description" : "Description",
          "StartHour" : 5,
          "ResetSshKeyOnMismatch" : true,
          "NotifyOwnersOnMismatch" : true,
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 1,
          "RepeatDayOfMonth" : 17,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 6,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "RepeatInterval" : 1280358509
        }
      },
      "SshKeyData" : {
        "type" : "object",
        "properties" : {
          "PrivateKey" : {
            "type" : "string",
            "description" : "The private key of the SSH key pair in the specified format.",
            "nullable" : true
          },
          "Passphrase" : {
            "type" : "string",
            "description" : "If the policy is set to password protect the SSH key, then this will contain the random\r\n            passphrase that was used.  The passphrase, and therefore the SSH key data, will change each time\r\n            the SSH key is downloaded/checked out.  May be null if the policy does not require the SSH key to\r\n            be password protected. (Read-only)",
            "nullable" : true
          },
          "PublicKey" : {
            "type" : "string",
            "description" : "The public key of the SSH key pair in the specified format. (Read-only)",
            "nullable" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH key. (Read-only)",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH key. (Read-only)",
            "nullable" : true
          },
          "SshKeyFormat" : {
            "$ref" : "#/components/schemas/SshKeyFormat"
          },
          "KeyType" : {
            "$ref" : "#/components/schemas/SshKeyType"
          },
          "KeyLength" : {
            "type" : "integer",
            "description" : "Length of SSH key (Read-only)",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "The SSH key data in the specified format, with or without password protection.",
        "example" : {
          "Fingerprint" : "Fingerprint",
          "PrivateKey" : "PrivateKey",
          "FingerprintSha256" : "FingerprintSha256",
          "KeyType" : "Unknown",
          "PublicKey" : "PublicKey",
          "Passphrase" : "Passphrase",
          "SshKeyFormat" : "OpenSsh",
          "KeyLength" : 0
        }
      },
      "SshKeyDiscoveryLog" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "ID of the task (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "LogTime" : {
            "type" : "string",
            "description" : "The date the task was created",
            "format" : "date-time"
          },
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "EventName" : {
            "$ref" : "#/components/schemas/EventName"
          },
          "EventDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the event (Read-only)",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "Database ID of the asset or directory to execute this task on",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset or directory name the task was executed against (Read-only)",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "The database ID of the platform of the asset.",
            "format" : "int32"
          },
          "PlatformType" : {
            "$ref" : "#/components/schemas/PlatformType"
          },
          "PlatformDisplayName" : {
            "type" : "string",
            "description" : "Display Name of the platform of the asset (Read-only)",
            "nullable" : true
          },
          "IsDirectory" : {
            "type" : "boolean",
            "description" : "Whether this is a directory platform (Read-only)",
            "readOnly" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network.",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "Account to run this task for",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account this task is for (Read-only)",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name the account is from (Read-only)",
            "nullable" : true
          },
          "AccountNetBiosName" : {
            "type" : "string",
            "description" : "Netbios name of the domain of the account (Read-only)",
            "nullable" : true
          },
          "AccountDistinguishedName" : {
            "type" : "string",
            "description" : "Distinguished name of the account (Read-only)",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The database ID of the asset partition this account belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this account belongs to (Read-only)",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "The database ID of the profile explicitly set on this account or inherited from the AssetPartition this asaccountset belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile explicitly set on this account or inherited from the AssetPartition this account belongs to (Read-only)",
            "nullable" : true
          },
          "SshKeyProfileId" : {
            "type" : "integer",
            "description" : "The database ID of the SSH key profile explicitly set on this account or inherited from the AssetPartition this account belongs to (Read-only)",
            "format" : "int32",
            "nullable" : true
          },
          "SshKeyProfileName" : {
            "type" : "string",
            "description" : "Name of the SSH key profile explicitly set on this account or inherited from the AssetPartition this account belongs to (Read-only)",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user that requested the task (Read-only)",
            "format" : "int32"
          },
          "ApplianceId" : {
            "type" : "string",
            "description" : "Id of appliance",
            "nullable" : true
          },
          "ApplianceName" : {
            "type" : "string",
            "description" : "Name of appliance",
            "nullable" : true
          },
          "RequestStatus" : {
            "$ref" : "#/components/schemas/RequestStatus"
          },
          "Log" : {
            "type" : "array",
            "description" : "Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskLog"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "UserProperties" : {
            "$ref" : "#/components/schemas/UserLogProperties"
          },
          "DiscoveredSshKeys" : {
            "type" : "array",
            "description" : "Accounts discovered by this task",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DiscoveredSshKeyLog"
            }
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters passed to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a task that may run on a remote machine",
        "example" : {
          "ProfileId" : 5,
          "AccountId" : 1,
          "ApplianceName" : "ApplianceName",
          "IsDirectory" : true,
          "EventDisplayName" : "EventDisplayName",
          "LogTime" : "2000-01-23T04:56:07.000+00:00",
          "ProfileName" : "ProfileName",
          "DiscoveredSshKeys" : [ {
            "Comment" : "Comment",
            "Options" : "Options",
            "Fingerprint" : "Fingerprint",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "KeyLength" : 9
          }, {
            "Comment" : "Comment",
            "Options" : "Options",
            "Fingerprint" : "Fingerprint",
            "FingerprintSha256" : "FingerprintSha256",
            "KeyType" : "Unknown",
            "PublicKey" : "PublicKey",
            "KeyLength" : 9
          } ],
          "CustomScriptParameters" : [ {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          }, {
            "Type" : "String",
            "Value" : "Value",
            "Name" : "Name"
          } ],
          "SshKeyProfileId" : 2,
          "AccountDomainName" : "AccountDomainName",
          "Name" : "Unknown",
          "AssetPartitionName" : "AssetPartitionName",
          "NetworkAddress" : "NetworkAddress",
          "PlatformId" : 6,
          "ApplianceId" : "ApplianceId",
          "AssetPartitionId" : 5,
          "SshKeyProfileName" : "SshKeyProfileName",
          "Log" : [ {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "Status" : "Unknown",
            "Message" : "Message",
            "Timestamp" : "2000-01-23T04:56:07.000+00:00"
          } ],
          "ConnectionProperties" : {
            "EffectiveServiceAccountName" : "EffectiveServiceAccountName",
            "ServiceAccountSshKeyProfileId" : 1,
            "ServiceAccountHasSshKey" : true,
            "RegisteredConnectorId" : 1,
            "ServiceAccountSshKeyProfileName" : "ServiceAccountSshKeyProfileName",
            "UseNamedPipeForServiceAccountConnection" : true,
            "Instance" : "Instance",
            "PrivilegeElevationCommand" : "PrivilegeElevationCommand",
            "Port" : 48874,
            "ServiceAccountAssetPlatformType" : null,
            "ServiceAccountSshKey" : {
              "Comment" : "Comment",
              "Fingerprint" : "Fingerprint",
              "PrivateKey" : "PrivateKey",
              "FingerprintSha256" : "FingerprintSha256",
              "KeyType" : "Unknown",
              "PublicKey" : "PublicKey",
              "Passphrase" : "Passphrase",
              "KeyLength" : 4884
            },
            "ServiceAccountId" : 6,
            "ServiceAccountAssetName" : "ServiceAccountAssetName",
            "HasSecretKey" : true,
            "TacacsSecret" : "TacacsSecret",
            "ServiceAccountSecurityId" : "ServiceAccountSecurityId",
            "CommandTimeout" : 13584,
            "ServiceAccountNetbiosName" : "ServiceAccountNetbiosName",
            "EnablePassword" : "EnablePassword",
            "WorkstationId" : "WorkstationId",
            "SslThumbprint" : "SslThumbprint",
            "EnableHasPassword" : true,
            "ClientId" : 737,
            "ServiceAccountDistinguishedName" : "ServiceAccountDistinguishedName",
            "ServiceAccountPassword" : "ServiceAccountPassword",
            "ServiceAccountCredentialType" : "None",
            "ServiceAccountUniqueObjectId" : "ServiceAccountUniqueObjectId",
            "ServiceAccountHasPassword" : true,
            "ServiceAccountDomainName" : "ServiceAccountDomainName",
            "UseSslEncryption" : true,
            "ServiceAccountProfileName" : "ServiceAccountProfileName",
            "HasTacacsSecret" : true,
            "UseTopSecretInterval" : true,
            "ServiceAccountName" : "ServiceAccountName",
            "VerifySslCertificate" : true,
            "OraclePrivileges" : "OraclePrivileges",
            "SecretKey" : "SecretKey",
            "ServiceAccountAssetPlatformId" : 4,
            "ServiceAccountProfileId" : 1,
            "ServiceName" : "ServiceName",
            "AccessKeyId" : "AccessKeyId",
            "ServiceAccountAssetId" : 1,
            "EffectiveServiceAccountDistinguishedName" : "EffectiveServiceAccountDistinguishedName",
            "ServiceAccountAssetPlatformDisplayName" : "ServiceAccountAssetPlatformDisplayName"
          },
          "EventName" : "Unknown",
          "AccountDistinguishedName" : "AccountDistinguishedName",
          "AssetName" : "AssetName",
          "PlatformDisplayName" : "PlatformDisplayName",
          "UserProperties" : {
            "UserWasHelpdeskAdmin" : true,
            "UserName" : "UserName",
            "UserWasPartitionOwner" : true,
            "DomainName" : "DomainName",
            "UserWasSystemAuditor" : true,
            "UserWasAuditor" : true,
            "UserWasApplianceAdmin" : true,
            "UserWasGlobalAdmin" : true,
            "UserWasDirectoryAdmin" : true,
            "UserWasOperationsAdmin" : true,
            "UserWasApplicationAuditor" : true,
            "ClientIpAddress" : "ClientIpAddress",
            "UserWasAssetAdmin" : true,
            "UserWasUserAdmin" : true,
            "UserDisplayName" : "UserDisplayName",
            "UserWasPolicyAdmin" : true
          },
          "UserId" : 7,
          "Id" : "Id",
          "PlatformType" : "Unknown",
          "AssetId" : 0,
          "AccountName" : "AccountName",
          "AccountNetBiosName" : "AccountNetBiosName",
          "RequestStatus" : {
            "EndTime" : "2000-01-23T04:56:07.000+00:00",
            "Message" : "Message",
            "State" : "Unknown",
            "PercentComplete" : 2,
            "Cancellable" : true,
            "StartTime" : "2000-01-23T04:56:07.000+00:00",
            "QueuedDuration" : "QueuedDuration",
            "RunningDuration" : "RunningDuration",
            "AcceptanceDuration" : "AcceptanceDuration",
            "AcceptedTime" : "2000-01-23T04:56:07.000+00:00",
            "TotalDuration" : "TotalDuration"
          }
        }
      },
      "SshKeyDiscoverySchedule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this schedule"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this Discovery schedule is applied to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this Discovery schedule is applied to (Read-only)",
            "nullable" : true
          },
          "ProfilesCount" : {
            "type" : "integer",
            "description" : "Number of profiles assigned to this discovery schedule (Read-only)",
            "format" : "int32"
          },
          "AccountsCount" : {
            "type" : "integer",
            "description" : "Number of accounts assigned to this discovery schedule (Read-only)",
            "format" : "int32"
          },
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the schedule (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this schedule",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ScheduleType" : {
            "$ref" : "#/components/schemas/ScheduleType"
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The timezone in which the schedule should run. Required when ScheduleType is not Never.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the timezone in which the schedule should run (Read-only)",
            "nullable" : true
          },
          "RepeatInterval" : {
            "maximum" : 2147483647,
            "minimum" : 1,
            "type" : "integer",
            "description" : "How frequently to run. Units are based on ScheduleType. \r\ne.g. every 2 days, every 3 months, every 4 weeks",
            "format" : "int32",
            "nullable" : true,
            "default" : 1
          },
          "RepeatMonthlyScheduleType" : {
            "$ref" : "#/components/schemas/MonthlyScheduleType"
          },
          "RepeatWeekOfMonth" : {
            "$ref" : "#/components/schemas/WeekOfMonth"
          },
          "RepeatDayOfWeek" : {
            "$ref" : "#/components/schemas/DayOfWeek"
          },
          "RepeatDayOfMonth" : {
            "maximum" : 31,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatDaysOfWeek" : {
            "type" : "array",
            "description" : "Which days of the week the schedule should run. Only valid when ScheduleType is Weekly",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DayOfWeek"
            }
          },
          "TimeOfDayType" : {
            "$ref" : "#/components/schemas/TimeOfDayType"
          },
          "StartHour" : {
            "maximum" : 23,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The hour of the day that the schedule will run (not applicable for 'Hour' or 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "StartMinute" : {
            "maximum" : 59,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The minute of the hour of the day that the schedule will run (not applicable for 'Minute' schedule type)",
            "format" : "int32",
            "nullable" : true
          },
          "TimeOfDayIntervals" : {
            "type" : "array",
            "description" : "Configuration of intervals of time in a day where tasks can be executed.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ScheduleInterval"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a schedule used by a partition profile to discovery authorized SSH keys",
        "example" : {
          "AssetPartitionId" : 0,
          "ScheduleType" : "Never",
          "StartMinute" : 21,
          "Description" : "Description",
          "ProfilesCount" : 6,
          "StartHour" : 21,
          "RepeatDaysOfWeek" : [ null, null ],
          "RepeatDayOfWeek" : "Sunday",
          "RepeatWeekOfMonth" : "First",
          "Name" : "Name",
          "TimeOfDayIntervals" : [ {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          }, {
            "StartMinute" : 24,
            "StartHour" : 4,
            "EndHour" : 16,
            "Iterations" : 148,
            "EndMinute" : 7
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "CreatedByUserId" : 5,
          "AccountsCount" : 1,
          "RepeatDayOfMonth" : 22,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 5,
          "TimeOfDayType" : "Instant",
          "RepeatMonthlyScheduleType" : "DayOfMonth",
          "RepeatInterval" : 494379917
        }
      },
      "SshKeyFormat" : {
        "type" : "string",
        "description" : "In what format will the SSH key, in particular the private key be exported to when downloading or checking it out.",
        "format" : "string",
        "enum" : [ "OpenSsh", "Ssh2", "Putty" ]
      },
      "SshKeyProfile" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the profile (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 70,
            "minimum" : 1,
            "maxLength" : 70,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of this profile"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this profile",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "CheckScheduleId" : {
            "type" : "integer",
            "description" : "Id of the SSH key Check Schedule",
            "format" : "int32"
          },
          "CheckScheduleName" : {
            "type" : "string",
            "description" : "Name of the SSH key Check Schedule",
            "nullable" : true
          },
          "ChangeScheduleId" : {
            "type" : "integer",
            "description" : "Id of the SSH key Change Schedule",
            "format" : "int32"
          },
          "ChangeScheduleName" : {
            "type" : "string",
            "description" : "Name of the SSH key Change Schedule",
            "nullable" : true
          },
          "DiscoveryScheduleId" : {
            "type" : "integer",
            "description" : "Id of the SSH key discovery Schedule",
            "format" : "int32"
          },
          "DiscoveryScheduleName" : {
            "type" : "string",
            "description" : "Name of the SSH key discovery Schedule",
            "nullable" : true
          },
          "CheckSchedule" : {
            "$ref" : "#/components/schemas/SshKeyCheckSchedule"
          },
          "ChangeSchedule" : {
            "$ref" : "#/components/schemas/SshKeyChangeSchedule"
          },
          "DiscoverySchedule" : {
            "$ref" : "#/components/schemas/SshKeyDiscoverySchedule"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "The asset partition this profile belongs to (Read-only)",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the asset partition this profile belongs to (Read-only)",
            "nullable" : true
          },
          "Owners" : {
            "type" : "array",
            "description" : "List of partition owners that manage this profile",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Configuration for managing SSH keys for accounts/assets in a partition",
        "example" : {
          "AssetPartitionId" : 2,
          "Description" : "Description",
          "DiscoverySchedule" : {
            "AssetPartitionId" : 0,
            "ScheduleType" : "Never",
            "StartMinute" : 21,
            "Description" : "Description",
            "ProfilesCount" : 6,
            "StartHour" : 21,
            "RepeatDaysOfWeek" : [ null, null ],
            "RepeatDayOfWeek" : "Sunday",
            "RepeatWeekOfMonth" : "First",
            "Name" : "Name",
            "TimeOfDayIntervals" : [ {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            }, {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            } ],
            "AssetPartitionName" : "AssetPartitionName",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "CreatedByUserId" : 5,
            "AccountsCount" : 1,
            "RepeatDayOfMonth" : 22,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 5,
            "TimeOfDayType" : "Instant",
            "RepeatMonthlyScheduleType" : "DayOfMonth",
            "RepeatInterval" : 494379917
          },
          "ChangeScheduleName" : "ChangeScheduleName",
          "CheckSchedule" : {
            "AssetPartitionId" : 0,
            "ScheduleType" : "Never",
            "StartMinute" : 41,
            "Description" : "Description",
            "StartHour" : 5,
            "ResetSshKeyOnMismatch" : true,
            "NotifyOwnersOnMismatch" : true,
            "RepeatDaysOfWeek" : [ null, null ],
            "RepeatDayOfWeek" : "Sunday",
            "RepeatWeekOfMonth" : "First",
            "Name" : "Name",
            "TimeOfDayIntervals" : [ {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            }, {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            } ],
            "AssetPartitionName" : "AssetPartitionName",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "CreatedByUserId" : 1,
            "RepeatDayOfMonth" : 17,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 6,
            "TimeOfDayType" : "Instant",
            "RepeatMonthlyScheduleType" : "DayOfMonth",
            "RepeatInterval" : 1280358509
          },
          "Name" : "Name",
          "ChangeSchedule" : {
            "ScheduleType" : "Never",
            "Description" : "Description",
            "StartHour" : 16,
            "GeneratedKeyLength" : 6,
            "Name" : "Name",
            "TimeOfDayIntervals" : [ {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            }, {
              "StartMinute" : 24,
              "StartHour" : 4,
              "EndHour" : 16,
              "Iterations" : 148,
              "EndMinute" : 7
            } ],
            "AssetPartitionName" : "AssetPartitionName",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "CreatedByUserId" : 5,
            "RepeatDayOfMonth" : 7,
            "RescheduleForUnscheduledSshKeyUpdate" : true,
            "SuspendAccountWhenCheckedIn" : true,
            "AssetPartitionId" : 0,
            "StartMinute" : 54,
            "RepeatDaysOfWeek" : [ null, null ],
            "GeneratedKeyType" : "Unknown",
            "RepeatDayOfWeek" : "Sunday",
            "RepeatWeekOfMonth" : "First",
            "NotifyOwnersOnly" : true,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "Id" : 1,
            "TimeOfDayType" : "Instant",
            "GeneratedKeyComment" : "GeneratedKeyComment",
            "RepeatMonthlyScheduleType" : "DayOfMonth",
            "AllowSshKeyChangeWhenReleased" : true,
            "RepeatInterval" : 1210617418
          },
          "Owners" : [ {
            "LinkedAccountsCount" : 7,
            "Description" : "Description",
            "TimeZoneIanaName" : "TimeZoneIanaName",
            "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
            "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
            "PrimaryAuthenticationProvider" : {
              "TypeReferenceName" : "Unknown",
              "Id" : 9,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "MobilePhone" : "MobilePhone",
            "ChangePasswordAtNextLogin" : false,
            "Name" : "Name",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "Locked" : false,
            "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "CreatedByUserId" : 4,
            "DisplayName" : "DisplayName",
            "Base64PhotoData" : "Base64PhotoData",
            "Disabled" : false,
            "IsPartitionOwner" : true,
            "WorkPhone" : "WorkPhone",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "PasswordNeverExpires" : false,
            "FirstName" : "FirstName",
            "IdentityProvider" : {
              "TypeReferenceName" : null,
              "Id" : 2,
              "Name" : "Name"
            },
            "EmailAddress" : "EmailAddress",
            "RequireCertificateAuthentication" : false,
            "SecondaryAuthenticationProvider" : {
              "TypeReferenceName" : null,
              "Id" : 3,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "DirectoryRequireCertificateAuthentication" : false,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "CloudAssistantApproveEnabled" : true,
            "Id" : 7,
            "LastName" : "LastName",
            "AllowPersonalAccounts" : false,
            "IsSystemOwned" : true
          }, {
            "LinkedAccountsCount" : 7,
            "Description" : "Description",
            "TimeZoneIanaName" : "TimeZoneIanaName",
            "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
            "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
            "PrimaryAuthenticationProvider" : {
              "TypeReferenceName" : "Unknown",
              "Id" : 9,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "MobilePhone" : "MobilePhone",
            "ChangePasswordAtNextLogin" : false,
            "Name" : "Name",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "Locked" : false,
            "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "CreatedByUserId" : 4,
            "DisplayName" : "DisplayName",
            "Base64PhotoData" : "Base64PhotoData",
            "Disabled" : false,
            "IsPartitionOwner" : true,
            "WorkPhone" : "WorkPhone",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "PasswordNeverExpires" : false,
            "FirstName" : "FirstName",
            "IdentityProvider" : {
              "TypeReferenceName" : null,
              "Id" : 2,
              "Name" : "Name"
            },
            "EmailAddress" : "EmailAddress",
            "RequireCertificateAuthentication" : false,
            "SecondaryAuthenticationProvider" : {
              "TypeReferenceName" : null,
              "Id" : 3,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "DirectoryRequireCertificateAuthentication" : false,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "CloudAssistantApproveEnabled" : true,
            "Id" : 7,
            "LastName" : "LastName",
            "AllowPersonalAccounts" : false,
            "IsSystemOwned" : true
          } ],
          "AssetPartitionName" : "AssetPartitionName",
          "CreatedByUserId" : 6,
          "DiscoveryScheduleId" : 5,
          "CheckScheduleName" : "CheckScheduleName",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "DiscoveryScheduleName" : "DiscoveryScheduleName",
          "CheckScheduleId" : 1,
          "ChangeScheduleId" : 5,
          "Id" : 0
        }
      },
      "SshKeySyncAccountTaskProperties" : {
        "type" : "object",
        "properties" : {
          "LastSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last SshKey change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful SshKey change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed SshKey change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSshKeyChangeTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last SshKey change (Read-only)",
            "nullable" : true
          },
          "FailedSshKeyChangeAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed SshKey change attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSshKeyChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the next SshKey change, if this account is enabled for automatic SshKey management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
          "FailedSshKeyChangeAttempts" : 6,
          "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "SshKeySyncGroup" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique ID of the sync group (Read-Only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "Name of the sync group"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the sync group",
            "nullable" : true
          },
          "ProfileId" : {
            "type" : "integer",
            "description" : "Unique ID of the profile this sync group belongs to",
            "format" : "int32"
          },
          "ProfileName" : {
            "type" : "string",
            "description" : "Name of the profile this sync group belongs to",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether platform tasks can run against this sync group"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "Unique ID of the asset partition this sync group belongs to",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the partition this sync group belongs to",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "LastSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the last SshKey change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful SshKey change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailureSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed SshKey change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSyncAccountsTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last SshKey change (Read-only)",
            "nullable" : true
          },
          "FailedSyncAccountsAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed SshKey change attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextSyncAccountsDate" : {
            "type" : "string",
            "description" : "The date/time of the next SshKey change, if this account is enabled for automatic SshKey management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "IsSynchronized" : {
            "type" : "boolean",
            "description" : "Whether all of the accounts for this sync group are currently synchronized"
          },
          "Accounts" : {
            "type" : "array",
            "description" : "Set of accounts that are assigned to this sync group",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SshKeySyncGroupAccount"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a group of accounts in a profile whose SSH keys must be the same. All accounts will be updated in priority order\r\nwhen a SSH key change is requested.",
        "example" : {
          "ProfileId" : 6,
          "AssetPartitionId" : 1,
          "LastSyncAccountsTaskId" : "LastSyncAccountsTaskId",
          "Description" : "Description",
          "IsSynchronized" : true,
          "ProfileName" : "ProfileName",
          "Name" : "Name",
          "AssetPartitionName" : "AssetPartitionName",
          "FailedSyncAccountsAttempts" : 5,
          "CreatedByUserId" : 5,
          "LastSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "NextSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "LastSuccessSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "Id" : 0,
          "Disabled" : true,
          "LastFailureSyncAccountsDate" : "2000-01-23T04:56:07.000+00:00",
          "Accounts" : [ {
            "IsServiceAccount" : true,
            "Description" : "Description",
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "IsSynchronized" : true,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "SyncPriority" : 171976544,
            "LinkedUsersCount" : 5,
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "AccountType" : "Asset",
            "Name" : "Name",
            "NotifyOwnersOnly" : true,
            "HasSshKey" : true,
            "TaskProperties" : {
              "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
              "FailedSshKeyChangeAttempts" : 6,
              "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "SuspendAccountWhenCheckedIn" : true,
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "NetBiosName" : "NetBiosName",
            "Id" : 1,
            "Disabled" : true,
            "HasPassword" : true
          }, {
            "IsServiceAccount" : true,
            "Description" : "Description",
            "Platform" : {
              "PlatformFamily" : "None",
              "DisplayName" : "DisplayName",
              "Id" : 6,
              "IsAcctNameCaseSensitive" : true,
              "PlatformType" : "Unknown",
              "SupportsSessionManagement" : true
            },
            "IsSynchronized" : true,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "SyncPriority" : 171976544,
            "LinkedUsersCount" : 5,
            "RequestProperties" : {
              "AllowPasswordRequest" : true,
              "AllowSshKeyRequest" : true,
              "AllowSessionRequest" : true
            },
            "AccountType" : "Asset",
            "Name" : "Name",
            "NotifyOwnersOnly" : true,
            "HasSshKey" : true,
            "TaskProperties" : {
              "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
              "FailedSshKeyChangeAttempts" : 6,
              "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
              "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00"
            },
            "SuspendAccountWhenCheckedIn" : true,
            "AltLoginName" : "AltLoginName",
            "Asset" : {
              "AssetPartitionId" : 6,
              "AssetPartitionName" : "AssetPartitionName",
              "NetworkAddress" : "NetworkAddress",
              "Id" : 3,
              "Name" : "Name"
            },
            "NetBiosName" : "NetBiosName",
            "Id" : 1,
            "Disabled" : true,
            "HasPassword" : true
          } ]
        }
      },
      "SshKeySyncGroupAccount" : {
        "type" : "object",
        "properties" : {
          "SyncPriority" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "description" : "This account will be synchronized at the same time as other accounts in the sync group with the same priority. \r\nAccounts with lower priority will be synchronized first.",
            "format" : "int32"
          },
          "IsSynchronized" : {
            "type" : "boolean",
            "description" : "Whether the SshKey for this account is currently in sync with the sync group"
          },
          "TaskProperties" : {
            "$ref" : "#/components/schemas/SshKeySyncAccountTaskProperties"
          },
          "Id" : {
            "type" : "integer",
            "description" : "The database key of the account (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the account (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "A short description of the account. (Read-only)",
            "nullable" : true
          },
          "HasPassword" : {
            "type" : "boolean",
            "description" : "Whether the account has a password set or not (Read-only)"
          },
          "HasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the account has an SSH key assigned or not (Read-only)"
          },
          "DomainName" : {
            "type" : "string",
            "description" : "The domain name that the account belongs to. (Read-only)",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the account. (Read-only)",
            "nullable" : true
          },
          "NetBiosName" : {
            "type" : "string",
            "description" : "The netbios name of the domain the account is from. (Read-only)",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "AccountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "IsServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account is being used as a service account (Read-only)"
          },
          "NotifyOwnersOnly" : {
            "type" : "boolean",
            "description" : "Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately (Read-only)"
          },
          "SuspendAccountWhenCheckedIn" : {
            "type" : "boolean",
            "description" : "Whether an account should be suspended when it is checked in. Will be restored when made available for check out. (Read-only)"
          },
          "AltLoginName" : {
            "type" : "string",
            "description" : "The alternate login name of the account. (Read-only)",
            "nullable" : true
          },
          "LinkedUsersCount" : {
            "type" : "integer",
            "description" : "The number of users linked to the policy account (Read-only)",
            "format" : "int32"
          },
          "RequestProperties" : {
            "$ref" : "#/components/schemas/AccountRequestProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AccountPlatformProperties"
          },
          "Asset" : {
            "$ref" : "#/components/schemas/AccountAssetProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an account assigned to a synchronization group",
        "example" : {
          "IsServiceAccount" : true,
          "Description" : "Description",
          "Platform" : {
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "IsAcctNameCaseSensitive" : true,
            "PlatformType" : "Unknown",
            "SupportsSessionManagement" : true
          },
          "IsSynchronized" : true,
          "DomainName" : "DomainName",
          "DistinguishedName" : "DistinguishedName",
          "SyncPriority" : 171976544,
          "LinkedUsersCount" : 5,
          "RequestProperties" : {
            "AllowPasswordRequest" : true,
            "AllowSshKeyRequest" : true,
            "AllowSessionRequest" : true
          },
          "AccountType" : "Asset",
          "Name" : "Name",
          "NotifyOwnersOnly" : true,
          "HasSshKey" : true,
          "TaskProperties" : {
            "LastSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailureSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSshKeyChangeTaskId" : "LastSshKeyChangeTaskId",
            "FailedSshKeyChangeAttempts" : 6,
            "NextSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastSuccessSshKeyChangeDate" : "2000-01-23T04:56:07.000+00:00"
          },
          "SuspendAccountWhenCheckedIn" : true,
          "AltLoginName" : "AltLoginName",
          "Asset" : {
            "AssetPartitionId" : 6,
            "AssetPartitionName" : "AssetPartitionName",
            "NetworkAddress" : "NetworkAddress",
            "Id" : 3,
            "Name" : "Name"
          },
          "NetBiosName" : "NetBiosName",
          "Id" : 1,
          "Disabled" : true,
          "HasPassword" : true
        }
      },
      "SshKeyType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Rsa", "Dsa", "Ed25519", "Ecdsa" ]
      },
      "SslCertificate" : {
        "required" : [ "Base64CertificateData" ],
        "type" : "object",
        "properties" : {
          "Subject" : {
            "type" : "string",
            "description" : "The Subject of the certificate (Read-only)",
            "nullable" : true
          },
          "Base64CertificateData" : {
            "type" : "string",
            "description" : "Base64 encoded certificate DER data (write-only)"
          },
          "IsCertificateAuthority" : {
            "type" : "boolean",
            "description" : "Whether or not this certificate is a certificate authority (Read-only)"
          },
          "IssuedBy" : {
            "type" : "string",
            "description" : "The CA that issued the certificate (Read-only)",
            "nullable" : true
          },
          "IssuerCertificates" : {
            "type" : "array",
            "description" : "Base64 encoded certificate DER data for issuing certificates (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "DnsNames" : {
            "type" : "array",
            "description" : "List of alternate DNS names attached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "IpAddresses" : {
            "type" : "array",
            "description" : "List of alternate IP addressesattached to the certificate (Read-only)",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "NotBefore" : {
            "type" : "string",
            "description" : "The date the certificate becomes valid (Read-only)",
            "format" : "date-time"
          },
          "NotAfter" : {
            "type" : "string",
            "description" : "The date the certificate expires (Read-only)",
            "format" : "date-time"
          },
          "Thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "Passphrase" : {
            "type" : "string",
            "description" : "The passphrase for decrypting the certificate (write-only) (Read-only)",
            "nullable" : true,
            "default" : ""
          },
          "CertificateType" : {
            "$ref" : "#/components/schemas/CertificateType"
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "System owned certificates cannot be deleted (Read-Only)"
          },
          "SystemOwnedPrivateKey" : {
            "type" : "boolean",
            "description" : "Whether private key was generated on a secure appliance (Read-Only)"
          },
          "Appliances" : {
            "type" : "array",
            "description" : "Cluster members this SSL certificate is assigned to",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Appliance"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Thumbprint" : "Thumbprint",
          "Passphrase" : "Passphrase",
          "DnsNames" : [ "DnsNames", "DnsNames" ],
          "NotAfter" : "2000-01-23T04:56:07.000+00:00",
          "Subject" : "Subject",
          "IpAddresses" : [ "IpAddresses", "IpAddresses" ],
          "CertificateType" : "Unknown",
          "IssuerCertificates" : [ "IssuerCertificates", "IssuerCertificates" ],
          "SystemOwnedPrivateKey" : true,
          "Appliances" : [ {
            "Id" : "Id",
            "Ipv6Address" : "Ipv6Address",
            "Name" : "Name",
            "Ipv4Address" : "Ipv4Address"
          }, {
            "Id" : "Id",
            "Ipv6Address" : "Ipv6Address",
            "Name" : "Name",
            "Ipv4Address" : "Ipv4Address"
          } ],
          "IsCertificateAuthority" : true,
          "Base64CertificateData" : "Base64CertificateData",
          "NotBefore" : "2000-01-23T04:56:07.000+00:00",
          "IssuedBy" : "IssuedBy",
          "IsSystemOwned" : true
        }
      },
      "StaAcceptance" : {
        "type" : "object",
        "properties" : {
          "Accepted" : {
            "type" : "boolean",
            "description" : "true if STA has been accepted, false otherwise"
          },
          "TimeOfAcceptance" : {
            "type" : "string",
            "description" : "The date the user accepted the STA",
            "format" : "date-time",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "The ID of the User that accepted the STA",
            "format" : "int32"
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "The Display Name of the user that accepted the STA",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "UserId" : 0,
          "TimeOfAcceptance" : "2000-01-23T04:56:07.000+00:00",
          "UserDisplayName" : "UserDisplayName",
          "Accepted" : true
        }
      },
      "StarlingConnectAccountDiscoveryProperties" : {
        "type" : "object",
        "properties" : {
          "RuleType" : {
            "$ref" : "#/components/schemas/StarlingConnectAccountDiscoveryRuleType"
          },
          "PropertyConstraintProperties" : {
            "$ref" : "#/components/schemas/StarlingConnectPropertyConstraintProperties"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PropertyConstraintProperties" : {
            "NameFilter" : "NameFilter",
            "GroupFilter" : "GroupFilter",
            "RoleFilter" : "RoleFilter"
          },
          "RuleType" : "PropertyConstraint"
        }
      },
      "StarlingConnectAccountDiscoveryRuleType" : {
        "type" : "string",
        "description" : "Type of Starling Connect account discovery filter",
        "format" : "string",
        "enum" : [ "PropertyConstraint", "FindAll" ]
      },
      "StarlingConnectPropertyConstraintProperties" : {
        "type" : "object",
        "properties" : {
          "NameFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filters accounts based on the name of the account (an ANR search is performed for Active Directory). Names can be specified as a regular expression.",
            "nullable" : true
          },
          "GroupFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filter accounts based on the names of groups in the directory the account belongs to. Names can be specified as a regular expression.",
            "nullable" : true
          },
          "RoleFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filter accounts based on the names of groups in the directory the account belongs to. Names can be specified as a regular expression.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "NameFilter" : "NameFilter",
          "GroupFilter" : "GroupFilter",
          "RoleFilter" : "RoleFilter"
        }
      },
      "StarlingRegisteredConnector" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "format" : "int32",
            "x-key" : true
          },
          "RegisteredConnectorId" : {
            "type" : "string",
            "nullable" : true
          },
          "RegisteredConnectorDisplayName" : {
            "type" : "string",
            "nullable" : true
          },
          "DisplayName" : {
            "type" : "string",
            "nullable" : true
          },
          "StarlingConnectorId" : {
            "type" : "string",
            "nullable" : true
          },
          "StarlingConnectorVersion" : {
            "type" : "string",
            "nullable" : true
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AssetPlatform"
          },
          "VisibleToAllPartitions" : {
            "type" : "boolean"
          },
          "VisibleToPartitions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetPartition"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StarlingConnectorId" : "StarlingConnectorId",
          "RegisteredConnectorId" : "RegisteredConnectorId",
          "VisibleToPartitions" : [ {
            "CreatedByUserId" : 6,
            "Description" : "Description",
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "DefaultProfileName" : "DefaultProfileName",
            "DefaultSshKeyProfileId" : 5,
            "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "DefaultProfileId" : 1,
            "Id" : 0,
            "Name" : "Name"
          }, {
            "CreatedByUserId" : 6,
            "Description" : "Description",
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "DefaultProfileName" : "DefaultProfileName",
            "DefaultSshKeyProfileId" : 5,
            "DefaultSshKeyProfileName" : "DefaultSshKeyProfileName",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "DefaultProfileId" : 1,
            "Id" : 0,
            "Name" : "Name"
          } ],
          "RegisteredConnectorDisplayName" : "RegisteredConnectorDisplayName",
          "Platform" : null,
          "DisplayName" : "DisplayName",
          "StarlingConnectorVersion" : "StarlingConnectorVersion",
          "Id" : 9,
          "VisibleToAllPartitions" : true
        }
      },
      "StarlingRegisteredConnectorFromStarling" : {
        "type" : "object",
        "properties" : {
          "RegisteredConnectorId" : {
            "type" : "string",
            "nullable" : true
          },
          "ConnectorId" : {
            "type" : "string",
            "nullable" : true
          },
          "ConnectorDisplayName" : {
            "type" : "string",
            "nullable" : true
          },
          "SubscriptionId" : {
            "type" : "string",
            "nullable" : true
          },
          "DisplayName" : {
            "type" : "string",
            "nullable" : true
          },
          "AvailableVersions" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "RegisteredConnectorId" : "RegisteredConnectorId",
          "SubscriptionId" : "SubscriptionId",
          "DisplayName" : "DisplayName",
          "AvailableVersions" : [ "AvailableVersions", "AvailableVersions" ],
          "ConnectorDisplayName" : "ConnectorDisplayName",
          "ConnectorId" : "ConnectorId"
        }
      },
      "StarlingSubscription" : {
        "required" : [ "ClientCredentials", "JoinUrl", "Name", "TokenEndpoint" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique Id of the Starling subscription information. Read-only.",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "User supplied friendly name for the Starling subscription."
          },
          "ClientCredentials" : {
            "maximum" : 1024,
            "maxLength" : 1024,
            "type" : "string",
            "description" : "Value returned from the Starling join process to be used when authenticating against the Starling API.\r\n            It is a colon delimited string of the client_id and client_secret to be used as the client credentials in an\r\n            OAuth2 Client Credentials Flow authentication request."
          },
          "TokenEndpoint" : {
            "maximum" : 2048,
            "maxLength" : 2048,
            "type" : "string",
            "description" : "Value returned from the Starling join process indicating the Url to use when authenticating."
          },
          "JoinUrl" : {
            "maximum" : 2048,
            "maxLength" : 2048,
            "type" : "string",
            "description" : "A copy of the Url that was used to initiate the Starling join process.  Parts will be used to unjoin\r\n            if necessary."
          },
          "CloudAssistantSenderId" : {
            "type" : "string",
            "description" : "Available when the customer has subscribed to Starling Cloud Assistant.",
            "nullable" : true,
            "readOnly" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "TokenEndpoint" : "TokenEndpoint",
          "JoinUrl" : "JoinUrl",
          "CloudAssistantSenderId" : "CloudAssistantSenderId",
          "Id" : 0,
          "ClientCredentials" : "ClientCredentials",
          "Name" : "Name"
        }
      },
      "SummaryInformation" : {
        "type" : "object",
        "properties" : {
          "TotalTaskCount" : {
            "type" : "integer",
            "description" : "Sum of all TaskSummary.Count values for all dates being reported",
            "format" : "int32"
          },
          "SummaryDates" : {
            "type" : "array",
            "description" : "List of date buckets",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DateTasks"
            }
          },
          "MinimumDateTime" : {
            "type" : "string",
            "description" : "Earliest date summarized",
            "format" : "date-time"
          },
          "MaximumDateTime" : {
            "type" : "string",
            "description" : "Latest date summarized",
            "format" : "date-time"
          }
        },
        "additionalProperties" : false,
        "description" : "The count of all tasks",
        "example" : {
          "TotalTaskCount" : 0,
          "MinimumDateTime" : "2000-01-23T04:56:07.000+00:00",
          "MaximumDateTime" : "2000-01-23T04:56:07.000+00:00",
          "SummaryDates" : [ {
            "TotalDateTaskCount" : 6,
            "Counts" : [ {
              "Count" : 1,
              "Name" : "Unknown"
            }, {
              "Count" : 1,
              "Name" : "Unknown"
            } ],
            "SummaryDateTime" : "2000-01-23T04:56:07.000+00:00"
          }, {
            "TotalDateTaskCount" : 6,
            "Counts" : [ {
              "Count" : 1,
              "Name" : "Unknown"
            }, {
              "Count" : 1,
              "Name" : "Unknown"
            } ],
            "SummaryDateTime" : "2000-01-23T04:56:07.000+00:00"
          } ]
        }
      },
      "SupportedReportDataSerializationFormat" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Json", "Csv" ]
      },
      "SyncAccountTaskProperties" : {
        "type" : "object",
        "properties" : {
          "LastPasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastSuccessPasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last successful password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastFailurePasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the last failed password change (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "LastPasswordChangeTaskId" : {
            "type" : "string",
            "description" : "The task audit log ID of the last password change (Read-only)",
            "nullable" : true
          },
          "FailedPasswordChangeAttempts" : {
            "type" : "integer",
            "description" : "Number of subsequent failed password change attempts since last success (Read-only)",
            "format" : "int32"
          },
          "NextPasswordChangeDate" : {
            "type" : "string",
            "description" : "The date/time of the next password change, if this account is enabled for automatic password management (Read-only)",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
          "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
          "FailedPasswordChangeAttempts" : 6,
          "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "SyncGroupAccount" : {
        "type" : "object",
        "properties" : {
          "SyncPriority" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "description" : "This account will be synchronized at the same time as other accounts in the sync group with the same priority. \r\nAccounts with lower priority will be synchronized first.",
            "format" : "int32"
          },
          "IsSynchronized" : {
            "type" : "boolean",
            "description" : "Whether the password for this account is currently in sync with the sync group"
          },
          "TaskProperties" : {
            "$ref" : "#/components/schemas/SyncAccountTaskProperties"
          },
          "Id" : {
            "type" : "integer",
            "description" : "The database key of the account (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the account (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "A short description of the account. (Read-only)",
            "nullable" : true
          },
          "HasPassword" : {
            "type" : "boolean",
            "description" : "Whether the account has a password set or not (Read-only)"
          },
          "HasSshKey" : {
            "type" : "boolean",
            "description" : "Whether the account has an SSH key assigned or not (Read-only)"
          },
          "DomainName" : {
            "type" : "string",
            "description" : "The domain name that the account belongs to. (Read-only)",
            "nullable" : true
          },
          "DistinguishedName" : {
            "type" : "string",
            "description" : "The distinguished name of the account. (Read-only)",
            "nullable" : true
          },
          "NetBiosName" : {
            "type" : "string",
            "description" : "The netbios name of the domain the account is from. (Read-only)",
            "nullable" : true
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)"
          },
          "AccountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "IsServiceAccount" : {
            "type" : "boolean",
            "description" : "Whether this account is being used as a service account (Read-only)"
          },
          "NotifyOwnersOnly" : {
            "type" : "boolean",
            "description" : "Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately (Read-only)"
          },
          "SuspendAccountWhenCheckedIn" : {
            "type" : "boolean",
            "description" : "Whether an account should be suspended when it is checked in. Will be restored when made available for check out. (Read-only)"
          },
          "AltLoginName" : {
            "type" : "string",
            "description" : "The alternate login name of the account. (Read-only)",
            "nullable" : true
          },
          "LinkedUsersCount" : {
            "type" : "integer",
            "description" : "The number of users linked to the policy account (Read-only)",
            "format" : "int32"
          },
          "RequestProperties" : {
            "$ref" : "#/components/schemas/AccountRequestProperties"
          },
          "Platform" : {
            "$ref" : "#/components/schemas/AccountPlatformProperties"
          },
          "Asset" : {
            "$ref" : "#/components/schemas/AccountAssetProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an account assigned to a synchronization group",
        "example" : {
          "IsServiceAccount" : true,
          "Description" : "Description",
          "Platform" : {
            "PlatformFamily" : "None",
            "DisplayName" : "DisplayName",
            "Id" : 6,
            "IsAcctNameCaseSensitive" : true,
            "PlatformType" : "Unknown",
            "SupportsSessionManagement" : true
          },
          "IsSynchronized" : true,
          "DomainName" : "DomainName",
          "DistinguishedName" : "DistinguishedName",
          "SyncPriority" : 171976544,
          "LinkedUsersCount" : 5,
          "RequestProperties" : {
            "AllowPasswordRequest" : true,
            "AllowSshKeyRequest" : true,
            "AllowSessionRequest" : true
          },
          "AccountType" : "Asset",
          "Name" : "Name",
          "NotifyOwnersOnly" : true,
          "HasSshKey" : true,
          "TaskProperties" : {
            "LastSuccessPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastFailurePasswordChangeDate" : "2000-01-23T04:56:07.000+00:00",
            "LastPasswordChangeTaskId" : "LastPasswordChangeTaskId",
            "FailedPasswordChangeAttempts" : 6,
            "NextPasswordChangeDate" : "2000-01-23T04:56:07.000+00:00"
          },
          "SuspendAccountWhenCheckedIn" : true,
          "AltLoginName" : "AltLoginName",
          "Asset" : {
            "AssetPartitionId" : 6,
            "AssetPartitionName" : "AssetPartitionName",
            "NetworkAddress" : "NetworkAddress",
            "Id" : 3,
            "Name" : "Name"
          },
          "NetBiosName" : "NetBiosName",
          "Id" : 1,
          "Disabled" : true,
          "HasPassword" : true
        }
      },
      "SyslogFacility" : {
        "type" : "string",
        "description" : "A value used to categorize the system or application that generated the syslog event.",
        "format" : "string",
        "enum" : [ "Kernel", "User", "Mail", "Daemons", "Authorization", "Syslog", "Printer", "News", "Uucp", "Clock", "Authorization2", "Ftp", "Ntp", "Audit", "Alert", "Clock2", "Local0", "Local1", "Local2", "Local3", "Local4", "Local5", "Local6", "Local7" ]
      },
      "SyslogFormat" : {
        "type" : "string",
        "description" : "Format of syslog output",
        "format" : "string",
        "enum" : [ "CEF", "JSON" ]
      },
      "SyslogProtocol" : {
        "type" : "string",
        "description" : "A combination of the network connection transport protocol and Syslog message format to use.",
        "format" : "string",
        "enum" : [ "LegacyUdp", "Udp", "Tcp" ]
      },
      "SyslogServer" : {
        "required" : [ "Name", "NetworkAddress" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique database ID of this server configuration",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "Name of this server"
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network address of syslog server"
          },
          "Port" : {
            "maximum" : 32767,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port to connect to syslog server",
            "format" : "int32",
            "default" : 514
          },
          "Protocol" : {
            "$ref" : "#/components/schemas/SyslogProtocol"
          },
          "UseSslEncryption" : {
            "type" : "boolean",
            "description" : "Whether to encrypt data with SSL. Only valid when using TCP protocol.",
            "default" : false
          },
          "UseClientCertificate" : {
            "type" : "boolean",
            "description" : "Whether to authenticate to syslog server with client certificate. Requires that SyslogClientCertificate is configured. Only valid when using SSL encryption",
            "default" : false
          },
          "VerifySslCertificate" : {
            "type" : "boolean",
            "description" : "Verify SSL certificate if using SSL. Only valid when using SSL encryption",
            "default" : false
          },
          "TcpFraming" : {
            "$ref" : "#/components/schemas/SyslogTcpFraming"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a syslog server where data and events can be sent",
        "example" : {
          "CreatedByUserId" : 1,
          "UseClientCertificate" : false,
          "TcpFraming" : "OctetCounting",
          "NetworkAddress" : "NetworkAddress",
          "UseSslEncryption" : false,
          "Port" : 19750,
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "Protocol" : "LegacyUdp",
          "Name" : "Name",
          "VerifySslCertificate" : false
        }
      },
      "SyslogSubscriberProperties" : {
        "type" : "object",
        "properties" : {
          "SyslogServerId" : {
            "type" : "integer",
            "description" : "The syslog server configuration to use",
            "format" : "int32",
            "nullable" : true
          },
          "SyslogServerName" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "Name of the syslog server configuration",
            "nullable" : true
          },
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network address of syslog server. If server ID is not specified than server will be looked up by network address",
            "nullable" : true
          },
          "Port" : {
            "maximum" : 32767,
            "minimum" : 1,
            "type" : "integer",
            "description" : "Port to connect to syslog server",
            "format" : "int32",
            "nullable" : true,
            "default" : 514
          },
          "UseSslEncryption" : {
            "type" : "boolean",
            "description" : "Whether to encrypt data with SSL. Only valid when using TCP protocol.",
            "default" : false
          },
          "UseClientCertificate" : {
            "type" : "boolean",
            "description" : "Whether to authenticate to syslog server with client certificate. Requires that SyslogClientCertificate is configured. Only valid when using SSL encryption",
            "default" : false
          },
          "VerifySslCertificate" : {
            "type" : "boolean",
            "description" : "Verify SSL certificate if using SSL. Only valid when using SSL encryption",
            "default" : false
          },
          "Facility" : {
            "$ref" : "#/components/schemas/SyslogFacility"
          },
          "KeyPrefix" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "All event properties with this prefix (Only for Json log format)",
            "nullable" : true
          },
          "Protocol" : {
            "$ref" : "#/components/schemas/SyslogProtocol"
          },
          "LogFormat" : {
            "$ref" : "#/components/schemas/SyslogFormat"
          },
          "TcpFraming" : {
            "$ref" : "#/components/schemas/SyslogTcpFraming"
          }
        },
        "additionalProperties" : false,
        "description" : "Properties for syslog subscribers",
        "example" : {
          "LogFormat" : "CEF",
          "UseClientCertificate" : false,
          "TcpFraming" : "OctetCounting",
          "NetworkAddress" : "NetworkAddress",
          "UseSslEncryption" : false,
          "Port" : 19536,
          "SyslogServerId" : 1,
          "SyslogServerName" : "SyslogServerName",
          "Facility" : "Kernel",
          "Protocol" : "LegacyUdp",
          "VerifySslCertificate" : false,
          "KeyPrefix" : "KeyPrefix"
        }
      },
      "SyslogTcpFraming" : {
        "type" : "string",
        "description" : "When using Syslog over a TCP connection, both the server and client must agree on how each\r\n            message will be deliminated, since TCP is a stream based protocol.",
        "format" : "string",
        "enum" : [ "OctetCounting", "LF", "CR", "CRLF", "NUL" ]
      },
      "SystemSshKey" : {
        "type" : "object",
        "properties" : {
          "PrivateKey" : {
            "type" : "string",
            "description" : "Private key represented in base64 (write-only)",
            "nullable" : true
          },
          "Passphrase" : {
            "type" : "string",
            "description" : "Passphrase to decrypt PrivateKey (write-only)",
            "nullable" : true
          },
          "PublicKey" : {
            "type" : "string",
            "description" : "Public key represented in base64",
            "nullable" : true
          },
          "Comment" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Comment associated with key",
            "nullable" : true
          },
          "Fingerprint" : {
            "type" : "string",
            "description" : "The MD5 fingerprint hash of the SSH key (Read-only)",
            "nullable" : true
          },
          "FingerprintSha256" : {
            "type" : "string",
            "description" : "The SHA256 fingerprint hash, Base64 encoded, of the SSH key. (Read-only)",
            "nullable" : true
          },
          "KeyType" : {
            "$ref" : "#/components/schemas/SshKeyType"
          },
          "KeyLength" : {
            "maximum" : 8192,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Length of SSH key",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an SSH key assigned to a system",
        "example" : {
          "Comment" : "Comment",
          "Fingerprint" : "Fingerprint",
          "PrivateKey" : "PrivateKey",
          "FingerprintSha256" : "FingerprintSha256",
          "KeyType" : "Unknown",
          "PublicKey" : "PublicKey",
          "Passphrase" : "Passphrase",
          "KeyLength" : 4884
        }
      },
      "Tag" : {
        "required" : [ "Id" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique ID of the tag",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the tag",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of the tag",
            "nullable" : true
          },
          "AdminAssigned" : {
            "type" : "boolean",
            "description" : "Whether this tag has been explicitly assigned by an admin"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a tag associated with an entity",
        "example" : {
          "Description" : "Description",
          "AdminAssigned" : true,
          "Id" : 1,
          "Name" : "Name"
        }
      },
      "TaggingGroupingCondition" : {
        "required" : [ "CompareType", "ObjectAttribute" ],
        "type" : "object",
        "properties" : {
          "ObjectAttribute" : {
            "$ref" : "#/components/schemas/TaggingGroupingObjectAttributes"
          },
          "CompareType" : {
            "$ref" : "#/components/schemas/ComparisonOperator"
          },
          "CompareValue" : {
            "type" : "string",
            "description" : "The value to compare the ObjectAttribute value against. Always stored/transferred as a string, converted as needed.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "CompareValue" : "CompareValue",
          "CompareType" : "EqualTo",
          "ObjectAttribute" : "Name"
        }
      },
      "TaggingGroupingConditionGroup" : {
        "required" : [ "Children" ],
        "type" : "object",
        "properties" : {
          "LogicalJoinType" : {
            "$ref" : "#/components/schemas/ConditionJoinType"
          },
          "Children" : {
            "type" : "array",
            "description" : "The children of this group.",
            "items" : {
              "$ref" : "#/components/schemas/TaggingGroupingConditionOrConditionGroup"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Children" : [ {
            "TaggingGroupingConditionGroup" : null,
            "TaggingGroupingCondition" : {
              "CompareValue" : "CompareValue",
              "CompareType" : "EqualTo",
              "ObjectAttribute" : "Name"
            }
          }, {
            "TaggingGroupingConditionGroup" : null,
            "TaggingGroupingCondition" : {
              "CompareValue" : "CompareValue",
              "CompareType" : "EqualTo",
              "ObjectAttribute" : "Name"
            }
          } ],
          "LogicalJoinType" : "And"
        }
      },
      "TaggingGroupingConditionOrConditionGroup" : {
        "type" : "object",
        "properties" : {
          "TaggingGroupingCondition" : {
            "$ref" : "#/components/schemas/TaggingGroupingCondition"
          },
          "TaggingGroupingConditionGroup" : {
            "$ref" : "#/components/schemas/TaggingGroupingConditionGroup"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "TaggingGroupingConditionGroup" : null,
          "TaggingGroupingCondition" : {
            "CompareValue" : "CompareValue",
            "CompareType" : "EqualTo",
            "ObjectAttribute" : "Name"
          }
        }
      },
      "TaggingGroupingObjectAttributes" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Name", "Description", "Platform", "Disabled", "AllowSessionRequests", "Tag", "PlatformName", "PlatformVersion", "AllowPasswordRequests", "IsServiceAccount", "DiscoveryJobName", "AllowSshKeyRequests", "PartitionName", "AssetTag", "AssetName", "DomainName", "NetBiosName", "DistinguishedName", "ObjectSid", "DiscoveredGroupName", "DiscoveredGroupDistinguishedName", "DirectoryContainer", "ProfileName", "EffectiveProfileName", "NetworkAddress" ]
      },
      "TaggingGroupingObjectType" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Asset", "AssetAccount", "AssetDiscoverySchedule", "AssetAccountDiscoverySchedule", "DirectoryAccount" ]
      },
      "TaggingGroupingRule" : {
        "type" : "object",
        "properties" : {
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the rule",
            "nullable" : true
          },
          "Enabled" : {
            "type" : "boolean",
            "description" : "If true, entities will be evaluated against this rule",
            "default" : true
          },
          "RuleConditionGroup" : {
            "$ref" : "#/components/schemas/TaggingGroupingConditionGroup"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "RuleConditionGroup" : {
            "Children" : [ {
              "TaggingGroupingConditionGroup" : null,
              "TaggingGroupingCondition" : {
                "CompareValue" : "CompareValue",
                "CompareType" : "EqualTo",
                "ObjectAttribute" : "Name"
              }
            }, {
              "TaggingGroupingConditionGroup" : null,
              "TaggingGroupingCondition" : {
                "CompareValue" : "CompareValue",
                "CompareType" : "EqualTo",
                "ObjectAttribute" : "Name"
              }
            } ],
            "LogicalJoinType" : "And"
          },
          "Description" : "Description",
          "Enabled" : true
        }
      },
      "TaggingRuleActionResult" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "AddTag", "RemoveTag", "AlreadyHasTag", "AlreadyMissingTag", "RemoveNotAllowed" ]
      },
      "TaskCustomScriptParameter" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "Name of the parameter",
            "nullable" : true
          },
          "Value" : {
            "type" : "string",
            "description" : "Value of the parameter.",
            "nullable" : true
          },
          "Type" : {
            "$ref" : "#/components/schemas/CustomScriptParameterType"
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters passed to custom platform script",
        "example" : {
          "Type" : "String",
          "Value" : "Value",
          "Name" : "Name"
        }
      },
      "TaskLog" : {
        "type" : "object",
        "properties" : {
          "Timestamp" : {
            "type" : "string",
            "description" : "Timestamp of the log entry (Read-only)",
            "format" : "date-time"
          },
          "Status" : {
            "$ref" : "#/components/schemas/TaskStatus"
          },
          "Message" : {
            "type" : "string",
            "description" : "Log message (Read-only)",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Status" : "Unknown",
          "Message" : "Message",
          "Timestamp" : "2000-01-23T04:56:07.000+00:00"
        }
      },
      "TaskNames" : {
        "type" : "string",
        "description" : "Enumeration of password management tasks",
        "format" : "string",
        "enum" : [ "Unknown", "TestConnection", "CheckPassword", "ChangePassword", "InstallSshKey", "ChangeSshKey", "UpdateDependentAsset", "DiscoverSshHostKey", "DiscoverAccounts", "DiscoverAssets", "Archive", "RestoreAccount", "SuspendAccount", "PasswordSyncAccounts", "DiscoverServices", "DirectoryAssetSync", "DirectoryAssetDeleteSync", "DirectoryProviderSync", "DirectoryProviderDeleteSync", "CheckSshKey", "DiscoverSshKeys", "SshKeySyncAccounts", "LocalIdentityProviderSync", "RevokeSshKey", "RetrieveSshHostKey" ]
      },
      "TaskReportTypes" : {
        "type" : "string",
        "description" : "Types of task reports",
        "format" : "string",
        "enum" : [ "FailedAccountTasks", "FailedAssetTasks" ]
      },
      "TaskStatus" : {
        "type" : "string",
        "format" : "string",
        "enum" : [ "Unknown", "Success", "Failure", "Connecting", "Checking", "Changing", "PasswordMismatch", "SshHostKeyMismatch", "ServiceChangePasswordSuccess", "ServiceChangePasswordFailure", "ServiceRestartSuccess", "ServiceRestartFailure", "TaskChangePasswordSuccess", "TaskChangePasswordFailure", "Running", "Queued", "Finalizing", "Saving", "SshKeyMismatch", "Discovering" ]
      },
      "TaskSummary" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "$ref" : "#/components/schemas/TaskNames"
          },
          "Count" : {
            "type" : "integer",
            "description" : "Count of scheduled tasks",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "The count of a given scheduled task. Used in DateTasks.Counts array.",
        "example" : {
          "Count" : 1,
          "Name" : "Unknown"
        }
      },
      "TemperatureStatistic" : {
        "type" : "object",
        "properties" : {
          "TemperatureCelsius" : {
            "type" : "number",
            "format" : "float"
          },
          "TemperatureFahrenheit" : {
            "type" : "number",
            "format" : "float"
          },
          "TemperatureKelvin" : {
            "type" : "number",
            "format" : "float"
          },
          "ZoneName" : {
            "type" : "string",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "TemperatureCelsius" : 1.2315135,
          "ZoneName" : "ZoneName",
          "TemperatureFahrenheit" : 1.0246457,
          "TemperatureKelvin" : 1.4894159
        }
      },
      "TestAssetDiscoveryParameters" : {
        "required" : [ "AssetDiscoveryJobName", "DiscoveryType", "RuleName" ],
        "type" : "object",
        "properties" : {
          "AssetDiscoveryJobName" : {
            "type" : "string",
            "description" : "Name of the discovery job to show in audit log"
          },
          "DiscoveryType" : {
            "$ref" : "#/components/schemas/AssetDiscoveryType"
          },
          "RuleName" : {
            "type" : "string",
            "description" : "Name of the discovery rule to show in audit log"
          },
          "Conditions" : {
            "type" : "array",
            "description" : "Discovery conditions to test",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AssetDiscoveryCondition"
            }
          },
          "DirectoryDiscoveryProperties" : {
            "$ref" : "#/components/schemas/DirectoryDiscoveryProperties"
          },
          "NetworkDiscoveryProperties" : {
            "$ref" : "#/components/schemas/NetworkDiscoveryProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters for testing asset discovery rules"
      },
      "TestConnectionParameters" : {
        "type" : "object",
        "properties" : {
          "NetworkAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Network DNS name or IP address used to connect to the machine over the network",
            "nullable" : true
          },
          "PlatformId" : {
            "type" : "integer",
            "description" : "Database ID of platform type / version",
            "format" : "int32",
            "nullable" : true
          },
          "SshHostKey" : {
            "maximum" : 8000,
            "maxLength" : 8000,
            "type" : "string",
            "description" : "Public key of the asset",
            "nullable" : true
          },
          "AutoAcceptSshHostKey" : {
            "type" : "boolean",
            "description" : "Whether to auto-accept the ssh host key",
            "default" : false
          },
          "ExtendedLogging" : {
            "type" : "boolean",
            "description" : "Whether to enable extended logging for the task",
            "default" : false
          },
          "DomainControllers" : {
            "type" : "array",
            "description" : "List of available domain controllers. If this list is empty then DNS will be used instead.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DomainController"
            }
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/AssetConnectionProperties"
          },
          "CustomScriptParameters" : {
            "type" : "array",
            "description" : "Set of parameters to pass to custom platform script",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TaskCustomScriptParameter"
            }
          }
        },
        "additionalProperties" : false
      },
      "TestEmailClientConfig" : {
        "required" : [ "SenderEmail", "ServerAddress", "ToEmail" ],
        "type" : "object",
        "properties" : {
          "ToEmail" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "Email address used to send a test email to"
          },
          "ServerAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "IP address or FQDN of the email server"
          },
          "PortNumber" : {
            "maximum" : 65535,
            "minimum" : 1,
            "type" : "integer",
            "description" : "TCP port number for the email service",
            "format" : "int32",
            "nullable" : true,
            "default" : 25
          },
          "SenderEmail" : {
            "maximum" : 512,
            "maxLength" : 512,
            "type" : "string",
            "description" : "Email address used as the From address for all email originating from the appliance. Required when an email server address is configured."
          },
          "RequireTlsFlag" : {
            "type" : "boolean",
            "description" : "Determines whether TLS is required by the SMTP server. (STARTTLS)",
            "nullable" : true,
            "default" : true
          },
          "RequireSmtpsFlag" : {
            "type" : "boolean",
            "description" : "Determines whether SMTPS is required by the SMTP server.  Setting this also sets RequireTlsFlag",
            "default" : false
          },
          "VerifySslCertificate" : {
            "type" : "boolean",
            "description" : "Determines whether the server certificate needs validation when RequireTlsFlag is set to true",
            "default" : true
          },
          "RequireUserAuthentication" : {
            "type" : "boolean",
            "description" : "Determines whether the SMTP server requires account/password authentication",
            "default" : false
          },
          "UseClientCertificate" : {
            "type" : "boolean",
            "description" : "Indicate if the client certificate is required for the connection to remote SMTP server",
            "default" : false
          },
          "TimeoutSeconds" : {
            "type" : "integer",
            "description" : "Seconds to wait after the test email has begun delivery to see if the delivery fails (max 255 seconds).",
            "format" : "int32",
            "nullable" : true
          },
          "ConnectionProperties" : {
            "$ref" : "#/components/schemas/EmailClientConfigConnectionProperties"
          }
        },
        "additionalProperties" : false
      },
      "TicketSystem" : {
        "required" : [ "Name", "TicketSystemType" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Unique identifier of the ticket system",
            "format" : "int32"
          },
          "Name" : {
            "maximum" : 100,
            "minimum" : 1,
            "maxLength" : 100,
            "minLength" : 1,
            "type" : "string",
            "description" : "Display name of the ticket system"
          },
          "ApplicationUrl" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Base URL location of the ticket system",
            "nullable" : true
          },
          "TicketSystemType" : {
            "$ref" : "#/components/schemas/TicketSystemType"
          },
          "UserName" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Login name for ticket system",
            "nullable" : true
          },
          "Password" : {
            "type" : "string",
            "description" : "Password for ticket system",
            "nullable" : true
          },
          "HasPassword" : {
            "type" : "boolean",
            "description" : "Whether a password has been set"
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "ServiceNowProperties" : {
            "$ref" : "#/components/schemas/ServiceNowProperties"
          },
          "RemedyProperties" : {
            "$ref" : "#/components/schemas/RemedyProperties"
          },
          "TicketRegularExpression" : {
            "maximum" : 1024,
            "minimum" : 0,
            "maxLength" : 1024,
            "minLength" : 0,
            "type" : "string",
            "description" : "TicketRegularExpression string used to validate format of ticket",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Connection info for validating service tickets assigned to access requests",
        "example" : {
          "UserName" : "UserName",
          "TicketSystemType" : "ServiceNow",
          "Name" : "Name",
          "ApplicationUrl" : "ApplicationUrl",
          "CreatedByUserId" : 6,
          "RemedyProperties" : {
            "AuthenticationString" : "AuthenticationString"
          },
          "ServiceNowProperties" : {
            "ClientIdentifier" : "ClientIdentifier",
            "ClientSecret" : "ClientSecret",
            "HasClientSecret" : true
          },
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "Id" : 0,
          "TicketRegularExpression" : "TicketRegularExpression",
          "HasPassword" : true,
          "Password" : "Password"
        }
      },
      "TicketSystemTestConnectionParameters" : {
        "required" : [ "TicketSystemType" ],
        "type" : "object",
        "properties" : {
          "ApplicationUrl" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Base URL location of the ticket system",
            "nullable" : true
          },
          "TicketSystemType" : {
            "$ref" : "#/components/schemas/TicketSystemType"
          },
          "UserName" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Login name for ticket system",
            "nullable" : true
          },
          "Password" : {
            "type" : "string",
            "description" : "Password for ticket system",
            "nullable" : true
          },
          "ServiceNowProperties" : {
            "$ref" : "#/components/schemas/ServiceNowProperties"
          },
          "RemedyProperties" : {
            "$ref" : "#/components/schemas/RemedyProperties"
          },
          "TicketRegularExpression" : {
            "maximum" : 1024,
            "minimum" : 0,
            "maxLength" : 1024,
            "minLength" : 0,
            "type" : "string",
            "description" : "TicketRegularExpression string used to validate format of ticket",
            "nullable" : true
          }
        },
        "additionalProperties" : false
      },
      "TicketSystemType" : {
        "type" : "string",
        "description" : "Type of ticket system",
        "format" : "string",
        "enum" : [ "ServiceNow", "Remedy", "Other" ]
      },
      "TimeInterval" : {
        "type" : "object",
        "properties" : {
          "Days" : {
            "type" : "integer",
            "description" : "The days component of this time interval",
            "format" : "int32"
          },
          "Hours" : {
            "type" : "integer",
            "description" : "The hours component of this time interval",
            "format" : "int32"
          },
          "Milliseconds" : {
            "type" : "integer",
            "description" : "The milliseconds component of this time interval",
            "format" : "int32"
          },
          "Minutes" : {
            "type" : "integer",
            "description" : "The minutes component of this time interval",
            "format" : "int32"
          },
          "Seconds" : {
            "type" : "integer",
            "description" : "The seconds component of this time interval",
            "format" : "int32"
          },
          "TotalMilliseconds" : {
            "type" : "number",
            "description" : "The value of this time interval in whole and fractional milliseconds",
            "format" : "double"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a time interval",
        "example" : {
          "TotalMilliseconds" : 3.616076749251911,
          "Hours" : 5,
          "Days" : 5,
          "Seconds" : 9,
          "Milliseconds" : 2,
          "Minutes" : 7
        }
      },
      "TimeOfDayType" : {
        "type" : "string",
        "description" : "Method to determine the time of day that scheduled tasks will run",
        "format" : "string",
        "enum" : [ "Instant", "Interval" ]
      },
      "TimeZone" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "The time zone's unique id. (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The time zone's display name. (Read-only)",
            "nullable" : true
          },
          "StandardName" : {
            "type" : "string",
            "description" : "A standard name of the time zone. (Read-only)",
            "nullable" : true
          },
          "DaylightName" : {
            "type" : "string",
            "description" : "A daylight name of the time zone. (Read-only)",
            "nullable" : true
          },
          "IanaName" : {
            "type" : "string",
            "description" : "The IANA name of the time zone. (Read-only)",
            "nullable" : true
          },
          "UtcOffset" : {
            "type" : "integer",
            "description" : "The time zone's offset from UTC (in minutes). May be a negative number or zero. (Read-only)",
            "format" : "int32"
          },
          "AllowsDst" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the time zone observes Daylight Saving Time. (Read-only)"
          },
          "Obsolete" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the time zone is obsolete. Obsolete time zones may still be referenced\r\nby existing entities but should not be used when creating new entities. (Read-only)"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents the read-only property values of a time zone.",
        "example" : {
          "UtcOffset" : 0,
          "Obsolete" : true,
          "IanaName" : "IanaName",
          "AllowsDst" : true,
          "DisplayName" : "DisplayName",
          "Id" : "Id",
          "DaylightName" : "DaylightName",
          "StandardName" : "StandardName"
        }
      },
      "TransferProtocol" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "$ref" : "#/components/schemas/TransferProtocolType"
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of this protocol (Read-only)",
            "nullable" : true
          },
          "Description" : {
            "type" : "string",
            "description" : "Description of this protocol (Read-only)",
            "nullable" : true
          },
          "SupportsCustomPort" : {
            "type" : "boolean",
            "description" : "Protocol supports using a custom port"
          },
          "SupportsPassword" : {
            "type" : "boolean",
            "description" : "Protocol supports password username/authentication"
          },
          "SupportsSshKey" : {
            "type" : "boolean",
            "description" : "Protocol supports SSH username/key authentication"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a file transfer protocol used by archive servers",
        "example" : {
          "SupportsCustomPort" : true,
          "Description" : "Description",
          "SupportsSshKey" : true,
          "SupportsPassword" : true,
          "Id" : null,
          "Name" : "Name"
        }
      },
      "TransferProtocolType" : {
        "type" : "string",
        "description" : "Type of file transfer protocol",
        "format" : "string",
        "enum" : [ "Smb", "Scp", "Sftp" ]
      },
      "UniqueNameParameters" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "type" : "string",
            "description" : "Name to check for uniqueness"
          },
          "ExcludeId" : {
            "type" : "integer",
            "description" : "Id of existing entity to exclude from check (for updates)",
            "format" : "int32",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters for checking uniqueness of entity names"
      },
      "UnixAccountDiscoveryProperties" : {
        "type" : "object",
        "properties" : {
          "RuleType" : {
            "$ref" : "#/components/schemas/UnixAccountDiscoveryRuleType"
          },
          "PropertyConstraintProperties" : {
            "$ref" : "#/components/schemas/UnixPropertyConstraintProperties"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PropertyConstraintProperties" : {
            "NameFilter" : "NameFilter",
            "GroupFilter" : "GroupFilter",
            "GidFilter" : [ "GidFilter", "GidFilter" ],
            "UidFilter" : [ "UidFilter", "UidFilter" ]
          },
          "RuleType" : "PropertyConstraint"
        }
      },
      "UnixAccountDiscoveryRuleType" : {
        "type" : "string",
        "description" : "Type of unix account discovery filter",
        "format" : "string",
        "enum" : [ "PropertyConstraint", "FindAll" ]
      },
      "UnixPropertyConstraintProperties" : {
        "type" : "object",
        "properties" : {
          "GidFilter" : {
            "type" : "array",
            "description" : "Filter applied to discriminate between Unix group identifiers. IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "GroupFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filter applied to discriminate between account group names. Names can be specified as a regular expression.",
            "nullable" : true
          },
          "NameFilter" : {
            "type" : "string",
            "description" : "Filter applied to discriminate between account names. Names can be specified as a regular expression.",
            "nullable" : true
          },
          "UidFilter" : {
            "type" : "array",
            "description" : "Filter applied to discriminate between account unique identifiers. IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "NameFilter" : "NameFilter",
          "GroupFilter" : "GroupFilter",
          "GidFilter" : [ "GidFilter", "GidFilter" ],
          "UidFilter" : [ "UidFilter", "UidFilter" ]
        }
      },
      "UpdateDependentAssetParameters" : {
        "required" : [ "AccountId" ],
        "type" : "object",
        "properties" : {
          "AccountId" : {
            "type" : "integer",
            "description" : "Update service running with this dependent account. Account must be a local account or configured as\r\na dependent account on the asset.",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Parameters for invoking UpdateDependentSystem platform task"
      },
      "User" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "AdminRoles" : {
            "type" : "array",
            "description" : "Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "Id" : {
            "type" : "integer",
            "description" : "The user's unique id.  This is a system-assigned value that is generated when a user is first created. (Read-only)",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Friendly identifier of the user's identity in Safeguard.  Must be unique per identity provider."
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of this user",
            "nullable" : true
          },
          "DisplayName" : {
            "type" : "string",
            "description" : "The user's display name (Read-only)",
            "nullable" : true
          },
          "LastName" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The user's last name. No double quotes.",
            "nullable" : true
          },
          "FirstName" : {
            "maximum" : 255,
            "minimum" : 1,
            "maxLength" : 255,
            "minLength" : 1,
            "type" : "string",
            "description" : "The user's first name. No double quotes.",
            "nullable" : true
          },
          "EmailAddress" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The user's email address.",
            "nullable" : true
          },
          "WorkPhone" : {
            "maximum" : 30,
            "maxLength" : 30,
            "type" : "string",
            "description" : "The user's work phone number.",
            "nullable" : true
          },
          "MobilePhone" : {
            "maximum" : 30,
            "maxLength" : 30,
            "type" : "string",
            "description" : "The user's mobile phone number.",
            "nullable" : true
          },
          "PrimaryAuthenticationProvider" : {
            "$ref" : "#/components/schemas/UserPrimaryAuthenticationProvider"
          },
          "SecondaryAuthenticationProvider" : {
            "$ref" : "#/components/schemas/UserSecondaryAuthenticationProvider"
          },
          "IdentityProvider" : {
            "$ref" : "#/components/schemas/UserIdentityProvider"
          },
          "Disabled" : {
            "type" : "boolean",
            "description" : "A flag indicating whether or not the user is disabled. Read-only for directory users \r\nfor which this will be synchronized with the directory.",
            "default" : false
          },
          "TimeZoneId" : {
            "type" : "string",
            "description" : "The id of the user's timezone.",
            "nullable" : true
          },
          "TimeZoneDisplayName" : {
            "type" : "string",
            "description" : "The description of the user's timezone (Read-only)",
            "nullable" : true
          },
          "TimeZoneIanaName" : {
            "type" : "string",
            "description" : "The IANA name of the user's timezone (Read-only)",
            "nullable" : true
          },
          "IsPartitionOwner" : {
            "type" : "boolean",
            "description" : "Whether this user owns any partitions (Read-only)"
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "CloudAssistantApproveEnabled" : {
            "type" : "boolean",
            "readOnly" : true
          },
          "CloudAssistantRecipientId" : {
            "type" : "string",
            "nullable" : true
          },
          "AllowPersonalAccounts" : {
            "type" : "boolean",
            "description" : "If the user is able to create the personal accounts",
            "default" : false
          },
          "Locked" : {
            "type" : "boolean",
            "description" : "A read-only flag indicating that the user's account is locked.  A locked user account may be unlocked by an administrator. (Read-only)",
            "default" : false
          },
          "PasswordNeverExpires" : {
            "type" : "boolean",
            "description" : "A flag indicating that the user's password never expires. Only meaningful for users whose PrimaryAuthenticationType is 'Local'.",
            "default" : false
          },
          "ChangePasswordAtNextLogin" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must change their password at their next login.  Only meaningful for users whose PrimaryAuthenticationType is 'Local'.",
            "default" : false
          },
          "Base64PhotoData" : {
            "type" : "string",
            "description" : "Binary photo data. Base64 encoded.  Limited to 64 KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image.",
            "nullable" : true
          },
          "IsSystemOwned" : {
            "type" : "boolean",
            "description" : "Whether this is a built-in user that cannot be modified (Read-only)"
          },
          "LastLoginDate" : {
            "type" : "string",
            "description" : "Date and Time when the user last successfully logged in (Read-only)",
            "format" : "date-time",
            "nullable" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "RequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If set to {true}, then the user must authenticate with a client certificate.  If they attempt to login with a username and\r\npassword, for example, if they are using their Active Directory account, access will be denied. Cannot be disabled if enforced\r\nby Active Directory.",
            "default" : false
          },
          "DirectoryRequireCertificateAuthentication" : {
            "type" : "boolean",
            "description" : "If this is an AD user then this will represent the 'Require Smart Card' attribute of the user in AD. If this is true then \r\nRequireCertificateAuthentication will also be set to true",
            "default" : false
          },
          "LinkedAccountsCount" : {
            "type" : "integer",
            "description" : "The number of policy accounts linked to the user (Read-only)",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an application user.",
        "example" : {
          "LinkedAccountsCount" : 7,
          "Description" : "Description",
          "TimeZoneIanaName" : "TimeZoneIanaName",
          "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
          "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
          "PrimaryAuthenticationProvider" : {
            "TypeReferenceName" : "Unknown",
            "Id" : 9,
            "Identity" : "Identity",
            "Name" : "Name"
          },
          "MobilePhone" : "MobilePhone",
          "ChangePasswordAtNextLogin" : false,
          "Name" : "Name",
          "TimeZoneDisplayName" : "TimeZoneDisplayName",
          "Locked" : false,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "CreatedByUserId" : 4,
          "DisplayName" : "DisplayName",
          "Base64PhotoData" : "Base64PhotoData",
          "Disabled" : false,
          "IsPartitionOwner" : true,
          "WorkPhone" : "WorkPhone",
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "PasswordNeverExpires" : false,
          "FirstName" : "FirstName",
          "IdentityProvider" : {
            "TypeReferenceName" : null,
            "Id" : 2,
            "Name" : "Name"
          },
          "EmailAddress" : "EmailAddress",
          "RequireCertificateAuthentication" : false,
          "SecondaryAuthenticationProvider" : {
            "TypeReferenceName" : null,
            "Id" : 3,
            "Identity" : "Identity",
            "Name" : "Name"
          },
          "DirectoryRequireCertificateAuthentication" : false,
          "TimeZoneId" : "TimeZoneId",
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "CloudAssistantApproveEnabled" : true,
          "Id" : 7,
          "LastName" : "LastName",
          "AllowPersonalAccounts" : false,
          "IsSystemOwned" : true
        }
      },
      "UserAccountEntitlement" : {
        "type" : "object",
        "properties" : {
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user granted access",
            "format" : "int32"
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of the user granted access",
            "nullable" : true
          },
          "UserName" : {
            "type" : "string",
            "description" : "UserName of user granted access",
            "nullable" : true
          },
          "UserDomainName" : {
            "type" : "string",
            "description" : "DomainName of user granted access",
            "nullable" : true
          },
          "AdminRoles" : {
            "type" : "array",
            "description" : "Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AdminRoleName"
            }
          },
          "IsPartitionOwner" : {
            "type" : "boolean",
            "description" : "Whether this user owns any partitions"
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "ID of the asset granted access to",
            "format" : "int32"
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset granted access to",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset granted access to",
            "nullable" : true
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "ID of the partition of the asset",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the partition of the asset",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "ID of the account granted access to",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account granted access to",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of the account granted access to",
            "nullable" : true
          },
          "AccountAssetId" : {
            "type" : "integer",
            "description" : "ID of the asset the account belongs to",
            "format" : "int32",
            "nullable" : true
          },
          "AccountAssetName" : {
            "type" : "string",
            "description" : "Name of the asset the account belongs to",
            "nullable" : true
          },
          "AccessPolicyId" : {
            "type" : "integer",
            "description" : "ID of the policy granting access",
            "format" : "int32"
          },
          "AccessPolicyName" : {
            "type" : "string",
            "description" : "Name of the policy granting access",
            "nullable" : true
          },
          "AccessRequestType" : {
            "$ref" : "#/components/schemas/AccessRequestType"
          },
          "AllowSessionPasswordRelease" : {
            "type" : "boolean",
            "description" : "Whether password access is also granted for session requests"
          },
          "AllowSessionSshKeyRelease" : {
            "type" : "boolean",
            "description" : "Whether SSH key access is also granted for session requests"
          },
          "ChangePasswordAfterCheckin" : {
            "type" : "boolean",
            "description" : "Whether password will be changed after requests are checked in"
          },
          "ChangeSshKeyAfterCheckin" : {
            "type" : "boolean",
            "description" : "Whether the SSH key will be changed after requests are checked in"
          },
          "PassphraseProtectSshKey" : {
            "type" : "boolean",
            "description" : "Whether the SSH key will be protected with a passphrase each time it is checked out"
          },
          "RoleId" : {
            "type" : "integer",
            "description" : "ID of the role the policy belongs to",
            "format" : "int32"
          },
          "RoleName" : {
            "type" : "string",
            "description" : "Name of the role the policy belongs to",
            "nullable" : true
          },
          "EffectiveExpirationDate" : {
            "type" : "string",
            "description" : "Effective expiration date of role/policy",
            "format" : "date-time",
            "nullable" : true
          },
          "EffectiveHourlyRestrictionProperties" : {
            "$ref" : "#/components/schemas/HourlyRestrictionProperties"
          },
          "RoleIdentityId" : {
            "type" : "integer",
            "description" : "ID of role member in the role granting access to user",
            "format" : "int32"
          },
          "RoleIdentityName" : {
            "type" : "string",
            "description" : "Name of role member in the role granting access to user",
            "nullable" : true
          },
          "RoleIdentityType" : {
            "$ref" : "#/components/schemas/PrincipalKind"
          },
          "FromLinkedAccount" : {
            "type" : "boolean",
            "description" : "Whether account is linked to the user"
          },
          "AccountRequestType" : {
            "$ref" : "#/components/schemas/AccountRequestType"
          },
          "PasswordLastAccessedDate" : {
            "type" : "string",
            "description" : "Last time the user last used password",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "AccessRequestType" : "Password",
          "AccountId" : 5,
          "AccountAssetName" : "AccountAssetName",
          "RoleIdentityId" : 9,
          "AccessPolicyId" : 2,
          "AccountDomainName" : "AccountDomainName",
          "AssetPartitionName" : "AssetPartitionName",
          "AccountAssetId" : 5,
          "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
          "PasswordLastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
          "UserDisplayName" : "UserDisplayName",
          "FromLinkedAccount" : true,
          "AssetPartitionId" : 1,
          "UserDomainName" : "UserDomainName",
          "UserName" : "UserName",
          "IsPartitionOwner" : true,
          "ChangeSshKeyAfterCheckin" : true,
          "RoleIdentityName" : "RoleIdentityName",
          "RoleId" : 7,
          "AssetName" : "AssetName",
          "AccessPolicyName" : "AccessPolicyName",
          "AllowSessionPasswordRelease" : true,
          "RoleName" : "RoleName",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "AllowSessionSshKeyRelease" : true,
          "ChangePasswordAfterCheckin" : true,
          "EffectiveHourlyRestrictionProperties" : {
            "EnableHourlyRestrictions" : false,
            "ThursdayValidHours" : [ 6, 6 ],
            "WednesdayValidHours" : [ 0, 0 ],
            "SaturdayValidHours" : [ 1, 1 ],
            "TuesdayValidHours" : [ 4, 4 ],
            "MondayValidHours" : [ 3, 3 ],
            "FridayValidHours" : [ 4, 4 ],
            "SundayValidHours" : [ 4, 4 ]
          },
          "UserId" : 0,
          "PassphraseProtectSshKey" : true,
          "EffectiveExpirationDate" : "2000-01-23T04:56:07.000+00:00",
          "RoleIdentityType" : "Unknown",
          "AccountRequestType" : "None",
          "AssetId" : 6,
          "AccountName" : "AccountName"
        }
      },
      "UserAssetSchemaDescriptors" : {
        "type" : "object",
        "properties" : {
          "UserClassTypeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "UserNameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "PasswordAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DescriptionAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "MemberOfAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "AltLoginNameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          }
        },
        "additionalProperties" : false,
        "description" : "Descriptors for user schema properties",
        "example" : {
          "MemberOfAttributeDescriptor" : null,
          "PasswordAttributeDescriptor" : null,
          "DescriptionAttributeDescriptor" : null,
          "UserNameAttributeDescriptor" : null,
          "AltLoginNameAttributeDescriptor" : null,
          "UserClassTypeDescriptor" : {
            "ReadOnly" : true,
            "Required" : true
          }
        }
      },
      "UserAssetSchemaProperties" : {
        "type" : "object",
        "properties" : {
          "UserClassType" : {
            "type" : "array",
            "description" : "LDAP objects that have all of the specified objectClass types will be treated as users.\r\nThese objectClass types will also be used to validate the attributes mapped to user properties.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "UserNameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of user name schema attribute",
            "nullable" : true
          },
          "PasswordAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of password schema attribute (Ldap only)",
            "nullable" : true
          },
          "DescriptionAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of description schema attribute",
            "nullable" : true
          },
          "MemberOfAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of MemberOf schema attribute",
            "nullable" : true
          },
          "AltLoginNameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of user principle",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Directory attribute mappings for users",
        "example" : {
          "AltLoginNameAttribute" : "AltLoginNameAttribute",
          "UserNameAttribute" : "UserNameAttribute",
          "DescriptionAttribute" : "DescriptionAttribute",
          "UserClassType" : [ "UserClassType", "UserClassType" ],
          "PasswordAttribute" : "PasswordAttribute",
          "MemberOfAttribute" : "MemberOfAttribute"
        }
      },
      "UserBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/User"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/User"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "LinkedAccountsCount" : 7,
            "Description" : "Description",
            "TimeZoneIanaName" : "TimeZoneIanaName",
            "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
            "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
            "PrimaryAuthenticationProvider" : {
              "TypeReferenceName" : "Unknown",
              "Id" : 9,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "MobilePhone" : "MobilePhone",
            "ChangePasswordAtNextLogin" : false,
            "Name" : "Name",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "Locked" : false,
            "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "CreatedByUserId" : 4,
            "DisplayName" : "DisplayName",
            "Base64PhotoData" : "Base64PhotoData",
            "Disabled" : false,
            "IsPartitionOwner" : true,
            "WorkPhone" : "WorkPhone",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "PasswordNeverExpires" : false,
            "FirstName" : "FirstName",
            "IdentityProvider" : {
              "TypeReferenceName" : null,
              "Id" : 2,
              "Name" : "Name"
            },
            "EmailAddress" : "EmailAddress",
            "RequireCertificateAuthentication" : false,
            "SecondaryAuthenticationProvider" : {
              "TypeReferenceName" : null,
              "Id" : 3,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "DirectoryRequireCertificateAuthentication" : false,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "CloudAssistantApproveEnabled" : true,
            "Id" : 7,
            "LastName" : "LastName",
            "AllowPersonalAccounts" : false,
            "IsSystemOwned" : true
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "UserBatchResult" : {
        "type" : "object",
        "properties" : {
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : 6,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "UserGroup" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the group",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "maximum" : 50,
            "maxLength" : 50,
            "type" : "string",
            "description" : "Name of the group"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the group",
            "nullable" : true
          },
          "IsReadOnly" : {
            "type" : "boolean",
            "description" : "Whether this group can be modified via the appliance or not (Read-only)",
            "readOnly" : true
          },
          "CreatedDate" : {
            "type" : "string",
            "description" : "Date this entity was created (Read-only)",
            "format" : "date-time"
          },
          "CreatedByUserId" : {
            "type" : "integer",
            "description" : "The database ID of the user that created this entity (Read-only)",
            "format" : "int32"
          },
          "CreatedByUserDisplayName" : {
            "type" : "string",
            "description" : "The display name of the user that created this entity (Read-only)",
            "nullable" : true
          },
          "DirectoryProperties" : {
            "$ref" : "#/components/schemas/DirectoryObjectProperties"
          },
          "Members" : {
            "type" : "array",
            "description" : "List of users in this group",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "DirectoryGroupSyncProperties" : {
            "$ref" : "#/components/schemas/DirectoryGroupSyncProperties"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a group of users for managing roles and permissions within the application\r\nand for managing assets.",
        "example" : {
          "CreatedByUserId" : 6,
          "Description" : "Description",
          "DirectoryProperties" : {
            "DirectoryId" : 2,
            "DomainName" : "DomainName",
            "DistinguishedName" : "DistinguishedName",
            "ObjectSid" : "ObjectSid",
            "ObjectGuid" : "ObjectGuid",
            "NetbiosName" : "NetbiosName",
            "DirectoryName" : "DirectoryName"
          },
          "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
          "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
          "DirectoryGroupSyncProperties" : {
            "SecondaryAuthenticationProviderTypeReferenceName" : null,
            "LinkDirectoryAccounts" : true,
            "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "PrimaryAuthenticationProviderName" : "PrimaryAuthenticationProviderName",
            "PrimaryAuthenticationProviderId" : 1,
            "SecondaryAuthenticationProviderId" : 5,
            "SecondaryAuthenticationProviderName" : "SecondaryAuthenticationProviderName",
            "PrimaryAuthenticationProviderTypeReferenceName" : "Unknown",
            "RequireCertificateAuthentication" : true,
            "AllowPersonalAccounts" : false
          },
          "Id" : 0,
          "IsReadOnly" : true,
          "Members" : [ {
            "LinkedAccountsCount" : 7,
            "Description" : "Description",
            "TimeZoneIanaName" : "TimeZoneIanaName",
            "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
            "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
            "PrimaryAuthenticationProvider" : {
              "TypeReferenceName" : "Unknown",
              "Id" : 9,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "MobilePhone" : "MobilePhone",
            "ChangePasswordAtNextLogin" : false,
            "Name" : "Name",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "Locked" : false,
            "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "CreatedByUserId" : 4,
            "DisplayName" : "DisplayName",
            "Base64PhotoData" : "Base64PhotoData",
            "Disabled" : false,
            "IsPartitionOwner" : true,
            "WorkPhone" : "WorkPhone",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "PasswordNeverExpires" : false,
            "FirstName" : "FirstName",
            "IdentityProvider" : {
              "TypeReferenceName" : null,
              "Id" : 2,
              "Name" : "Name"
            },
            "EmailAddress" : "EmailAddress",
            "RequireCertificateAuthentication" : false,
            "SecondaryAuthenticationProvider" : {
              "TypeReferenceName" : null,
              "Id" : 3,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "DirectoryRequireCertificateAuthentication" : false,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "CloudAssistantApproveEnabled" : true,
            "Id" : 7,
            "LastName" : "LastName",
            "AllowPersonalAccounts" : false,
            "IsSystemOwned" : true
          }, {
            "LinkedAccountsCount" : 7,
            "Description" : "Description",
            "TimeZoneIanaName" : "TimeZoneIanaName",
            "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
            "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
            "PrimaryAuthenticationProvider" : {
              "TypeReferenceName" : "Unknown",
              "Id" : 9,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "MobilePhone" : "MobilePhone",
            "ChangePasswordAtNextLogin" : false,
            "Name" : "Name",
            "TimeZoneDisplayName" : "TimeZoneDisplayName",
            "Locked" : false,
            "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
            "CreatedByUserId" : 4,
            "DisplayName" : "DisplayName",
            "Base64PhotoData" : "Base64PhotoData",
            "Disabled" : false,
            "IsPartitionOwner" : true,
            "WorkPhone" : "WorkPhone",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "PasswordNeverExpires" : false,
            "FirstName" : "FirstName",
            "IdentityProvider" : {
              "TypeReferenceName" : null,
              "Id" : 2,
              "Name" : "Name"
            },
            "EmailAddress" : "EmailAddress",
            "RequireCertificateAuthentication" : false,
            "SecondaryAuthenticationProvider" : {
              "TypeReferenceName" : null,
              "Id" : 3,
              "Identity" : "Identity",
              "Name" : "Name"
            },
            "DirectoryRequireCertificateAuthentication" : false,
            "TimeZoneId" : "TimeZoneId",
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "CloudAssistantApproveEnabled" : true,
            "Id" : 7,
            "LastName" : "LastName",
            "AllowPersonalAccounts" : false,
            "IsSystemOwned" : true
          } ],
          "Name" : "Name"
        }
      },
      "UserGroupBatchResponse" : {
        "type" : "object",
        "properties" : {
          "Response" : {
            "$ref" : "#/components/schemas/UserGroup"
          },
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "$ref" : "#/components/schemas/UserGroup"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Response" : {
            "CreatedByUserId" : 6,
            "Description" : "Description",
            "DirectoryProperties" : {
              "DirectoryId" : 2,
              "DomainName" : "DomainName",
              "DistinguishedName" : "DistinguishedName",
              "ObjectSid" : "ObjectSid",
              "ObjectGuid" : "ObjectGuid",
              "NetbiosName" : "NetbiosName",
              "DirectoryName" : "DirectoryName"
            },
            "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
            "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
            "DirectoryGroupSyncProperties" : {
              "SecondaryAuthenticationProviderTypeReferenceName" : null,
              "LinkDirectoryAccounts" : true,
              "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
              "PrimaryAuthenticationProviderName" : "PrimaryAuthenticationProviderName",
              "PrimaryAuthenticationProviderId" : 1,
              "SecondaryAuthenticationProviderId" : 5,
              "SecondaryAuthenticationProviderName" : "SecondaryAuthenticationProviderName",
              "PrimaryAuthenticationProviderTypeReferenceName" : "Unknown",
              "RequireCertificateAuthentication" : true,
              "AllowPersonalAccounts" : false
            },
            "Id" : 0,
            "IsReadOnly" : true,
            "Members" : [ {
              "LinkedAccountsCount" : 7,
              "Description" : "Description",
              "TimeZoneIanaName" : "TimeZoneIanaName",
              "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
              "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
              "PrimaryAuthenticationProvider" : {
                "TypeReferenceName" : "Unknown",
                "Id" : 9,
                "Identity" : "Identity",
                "Name" : "Name"
              },
              "MobilePhone" : "MobilePhone",
              "ChangePasswordAtNextLogin" : false,
              "Name" : "Name",
              "TimeZoneDisplayName" : "TimeZoneDisplayName",
              "Locked" : false,
              "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
              "CreatedByUserId" : 4,
              "DisplayName" : "DisplayName",
              "Base64PhotoData" : "Base64PhotoData",
              "Disabled" : false,
              "IsPartitionOwner" : true,
              "WorkPhone" : "WorkPhone",
              "DirectoryProperties" : {
                "DirectoryId" : 2,
                "DomainName" : "DomainName",
                "DistinguishedName" : "DistinguishedName",
                "ObjectSid" : "ObjectSid",
                "ObjectGuid" : "ObjectGuid",
                "NetbiosName" : "NetbiosName",
                "DirectoryName" : "DirectoryName"
              },
              "PasswordNeverExpires" : false,
              "FirstName" : "FirstName",
              "IdentityProvider" : {
                "TypeReferenceName" : null,
                "Id" : 2,
                "Name" : "Name"
              },
              "EmailAddress" : "EmailAddress",
              "RequireCertificateAuthentication" : false,
              "SecondaryAuthenticationProvider" : {
                "TypeReferenceName" : null,
                "Id" : 3,
                "Identity" : "Identity",
                "Name" : "Name"
              },
              "DirectoryRequireCertificateAuthentication" : false,
              "TimeZoneId" : "TimeZoneId",
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "CloudAssistantApproveEnabled" : true,
              "Id" : 7,
              "LastName" : "LastName",
              "AllowPersonalAccounts" : false,
              "IsSystemOwned" : true
            }, {
              "LinkedAccountsCount" : 7,
              "Description" : "Description",
              "TimeZoneIanaName" : "TimeZoneIanaName",
              "LastLoginDate" : "2000-01-23T04:56:07.000+00:00",
              "CloudAssistantRecipientId" : "CloudAssistantRecipientId",
              "PrimaryAuthenticationProvider" : {
                "TypeReferenceName" : "Unknown",
                "Id" : 9,
                "Identity" : "Identity",
                "Name" : "Name"
              },
              "MobilePhone" : "MobilePhone",
              "ChangePasswordAtNextLogin" : false,
              "Name" : "Name",
              "TimeZoneDisplayName" : "TimeZoneDisplayName",
              "Locked" : false,
              "AdminRoles" : [ "GlobalAdmin", "GlobalAdmin" ],
              "CreatedByUserId" : 4,
              "DisplayName" : "DisplayName",
              "Base64PhotoData" : "Base64PhotoData",
              "Disabled" : false,
              "IsPartitionOwner" : true,
              "WorkPhone" : "WorkPhone",
              "DirectoryProperties" : {
                "DirectoryId" : 2,
                "DomainName" : "DomainName",
                "DistinguishedName" : "DistinguishedName",
                "ObjectSid" : "ObjectSid",
                "ObjectGuid" : "ObjectGuid",
                "NetbiosName" : "NetbiosName",
                "DirectoryName" : "DirectoryName"
              },
              "PasswordNeverExpires" : false,
              "FirstName" : "FirstName",
              "IdentityProvider" : {
                "TypeReferenceName" : null,
                "Id" : 2,
                "Name" : "Name"
              },
              "EmailAddress" : "EmailAddress",
              "RequireCertificateAuthentication" : false,
              "SecondaryAuthenticationProvider" : {
                "TypeReferenceName" : null,
                "Id" : 3,
                "Identity" : "Identity",
                "Name" : "Name"
              },
              "DirectoryRequireCertificateAuthentication" : false,
              "TimeZoneId" : "TimeZoneId",
              "CreatedDate" : "2000-01-23T04:56:07.000+00:00",
              "CreatedByUserDisplayName" : "CreatedByUserDisplayName",
              "CloudAssistantApproveEnabled" : true,
              "Id" : 7,
              "LastName" : "LastName",
              "AllowPersonalAccounts" : false,
              "IsSystemOwned" : true
            } ],
            "Name" : "Name"
          },
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : null,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "UserGroupBatchResult" : {
        "type" : "object",
        "properties" : {
          "StatusCode" : {
            "$ref" : "#/components/schemas/HttpStatusCode"
          },
          "StatusCodeNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "IsSuccess" : {
            "type" : "boolean"
          },
          "Error" : {
            "$ref" : "#/components/schemas/ApiError"
          },
          "Request" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "StatusCodeNumber" : 0,
          "IsSuccess" : true,
          "Request" : 6,
          "Error" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "StatusCode" : "Continue"
        }
      },
      "UserGroupRole" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the role",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the role",
            "nullable" : true
          },
          "AccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts managed by the role",
            "format" : "int32"
          },
          "UserCount" : {
            "type" : "integer",
            "description" : "Number of users that are members of the role",
            "format" : "int32"
          },
          "PolicyCount" : {
            "type" : "integer",
            "description" : "Number of policies assigned to the role",
            "format" : "int32"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a role that a group belongs to",
        "example" : {
          "UserCount" : 1,
          "Id" : 0,
          "PolicyCount" : 5,
          "AccountCount" : 6,
          "Name" : "Name"
        }
      },
      "UserIdentityProvider" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The id of the user's identity provider.",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the user's identity provider. (Read-only)",
            "nullable" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          }
        },
        "additionalProperties" : false,
        "description" : "Information about user identity provider",
        "example" : {
          "TypeReferenceName" : null,
          "Id" : 2,
          "Name" : "Name"
        }
      },
      "UserLogProperties" : {
        "type" : "object",
        "properties" : {
          "ClientIpAddress" : {
            "type" : "string",
            "description" : "IP address of the user client that caused the change (Read-only).",
            "nullable" : true
          },
          "UserName" : {
            "type" : "string",
            "description" : "UserName of the user that caused the change (Read-only).",
            "nullable" : true
          },
          "DomainName" : {
            "type" : "string",
            "description" : "Domain name of the user that caused the change (Read-only).",
            "nullable" : true
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of the user that caused the change (Read-only).",
            "nullable" : true
          },
          "UserWasGlobalAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the GlobalAdmin role at the time of the change? (Read-only)."
          },
          "UserWasDirectoryAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the DirectoryAdmin role at the time of the change? (Read-only)."
          },
          "UserWasAuditor" : {
            "type" : "boolean",
            "description" : "Was the user in the Auditor role at the time of the change? (Read-only)."
          },
          "UserWasApplicationAuditor" : {
            "type" : "boolean",
            "description" : "Was the user in the ApplicationAuditor role at the time of the change? (Read-only)."
          },
          "UserWasSystemAuditor" : {
            "type" : "boolean",
            "description" : "Was the user in the SystemAuditor role at the time of the change? (Read-only)."
          },
          "UserWasAssetAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the AssetAdmin role at the time of the change? (Read-only)."
          },
          "UserWasPartitionOwner" : {
            "type" : "boolean",
            "description" : "Was the user a partition owner at the time of the change? (Read-only)."
          },
          "UserWasApplianceAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the ApplianceAdmin role at the time of the change? (Read-only)."
          },
          "UserWasPolicyAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the PolicyAdmin role at the time of the change? (Read-only)."
          },
          "UserWasUserAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the UserAdmin role at the time of the change? (Read-only)."
          },
          "UserWasHelpdeskAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the HelpdeskAdmin role at the time of the change? (Read-only)."
          },
          "UserWasOperationsAdmin" : {
            "type" : "boolean",
            "description" : "Was the user in the OperationsAdmin role at the time of the change? (Read-only)."
          }
        },
        "additionalProperties" : false,
        "example" : {
          "UserWasHelpdeskAdmin" : true,
          "UserName" : "UserName",
          "UserWasPartitionOwner" : true,
          "DomainName" : "DomainName",
          "UserWasSystemAuditor" : true,
          "UserWasAuditor" : true,
          "UserWasApplianceAdmin" : true,
          "UserWasGlobalAdmin" : true,
          "UserWasDirectoryAdmin" : true,
          "UserWasOperationsAdmin" : true,
          "UserWasApplicationAuditor" : true,
          "ClientIpAddress" : "ClientIpAddress",
          "UserWasAssetAdmin" : true,
          "UserWasUserAdmin" : true,
          "UserDisplayName" : "UserDisplayName",
          "UserWasPolicyAdmin" : true
        }
      },
      "UserOwnership" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "The owned items's unique id.  This is a system-assigned value that is generated from the sql view. (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "OwnerId" : {
            "type" : "integer",
            "description" : "Ownership item Id; Asset, Account, Partition.",
            "format" : "int32"
          },
          "UserId" : {
            "type" : "integer",
            "description" : "Ownership User Id.",
            "format" : "int32"
          },
          "OwnershipType" : {
            "$ref" : "#/components/schemas/OwnershipType"
          },
          "Name" : {
            "type" : "string",
            "description" : "Ownership Object Name.",
            "nullable" : true
          },
          "ViaSelf" : {
            "type" : "boolean",
            "description" : "Ownership was granted via the user account directly."
          },
          "ViaGroups" : {
            "type" : "array",
            "description" : "Ownership was granted via group(s) membership directly.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "ViaTags" : {
            "type" : "array",
            "description" : "Ownership was granted via tag(s), either due to the user being an assigned owner of the tag or \r\na group the user belongs to is an assigned owner of the tag.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PartitionTag"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an application user ownership.",
        "example" : {
          "OwnershipType" : "Unknown",
          "OwnerId" : 0,
          "ViaTags" : [ {
            "AssetPartitionId" : 5,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetAccountTaggingRule" : null,
            "Description" : "Description",
            "AssetTaggingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Id" : 1,
            "Name" : "Name"
          }, {
            "AssetPartitionId" : 5,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetAccountTaggingRule" : null,
            "Description" : "Description",
            "AssetTaggingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Id" : 1,
            "Name" : "Name"
          } ],
          "ViaGroups" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ],
          "UserId" : 6,
          "ViaSelf" : true,
          "Id" : "Id",
          "Name" : "Name"
        }
      },
      "UserOwnershipDetail" : {
        "type" : "object",
        "properties" : {
          "OwnershipType" : {
            "$ref" : "#/components/schemas/OwnershipType"
          },
          "ItemId" : {
            "type" : "integer",
            "description" : "ID of the owned item (PartitionId, AssetId, or AccountId)",
            "format" : "int32"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "ID of the partition",
            "format" : "int32"
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the partition",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "ID of the asset owne",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset owned",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset owned",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "ID of the account owned",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account owned",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of the account owned",
            "nullable" : true
          },
          "TagId" : {
            "type" : "integer",
            "description" : "ID of the tag (applies to tag ownership report)",
            "format" : "int32",
            "nullable" : true
          },
          "TagName" : {
            "type" : "string",
            "description" : "Name of the tag (applies to tag ownership report)",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user who is an owner",
            "format" : "int32"
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of the user who is an owner",
            "nullable" : true
          },
          "UserName" : {
            "type" : "string",
            "description" : "UserName of user who is an owner",
            "nullable" : true
          },
          "UserDomainName" : {
            "type" : "string",
            "description" : "DomainName of user who is an owner",
            "nullable" : true
          },
          "IsDirect" : {
            "type" : "boolean",
            "description" : "How ownership was assigned"
          },
          "IsTag" : {
            "type" : "boolean",
            "description" : "How ownership was assigned"
          },
          "ViaDirectGroups" : {
            "type" : "array",
            "description" : "A list of direct groups the identity is a part of that grants the identity access to the resource.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "ViaTagGroups" : {
            "type" : "array",
            "description" : "A list of tag groups the identity is a part of that grants the identity access to the resource.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Identity"
            }
          },
          "ViaTags" : {
            "type" : "array",
            "description" : "A list of tags the identity is a part of that grants the identity access to the resource.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PartitionTag"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "OwnershipType" : "Unknown",
          "AssetPartitionId" : 6,
          "UserDomainName" : "UserDomainName",
          "AccountId" : 5,
          "UserName" : "UserName",
          "TagName" : "TagName",
          "ViaTags" : [ {
            "AssetPartitionId" : 5,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetAccountTaggingRule" : null,
            "Description" : "Description",
            "AssetTaggingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Id" : 1,
            "Name" : "Name"
          }, {
            "AssetPartitionId" : 5,
            "AssetPartitionName" : "AssetPartitionName",
            "AssetAccountTaggingRule" : null,
            "Description" : "Description",
            "AssetTaggingRule" : {
              "RuleConditionGroup" : {
                "Children" : [ {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                }, {
                  "TaggingGroupingConditionGroup" : null,
                  "TaggingGroupingCondition" : {
                    "CompareValue" : "CompareValue",
                    "CompareType" : "EqualTo",
                    "ObjectAttribute" : "Name"
                  }
                } ],
                "LogicalJoinType" : "And"
              },
              "Description" : "Description",
              "Enabled" : true
            },
            "ManagedBy" : [ {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            }, {
              "IdentityProviderId" : 4,
              "PrincipalKind" : null,
              "FullDisplayName" : "FullDisplayName",
              "DomainName" : "DomainName",
              "DisplayName" : "DisplayName",
              "IdentityProviderName" : "IdentityProviderName",
              "Id" : 0,
              "IdentityProviderTypeReferenceName" : null,
              "EmailAddress" : "EmailAddress",
              "IsSystemOwned" : true,
              "Name" : "Name"
            } ],
            "Id" : 1,
            "Name" : "Name"
          } ],
          "ViaDirectGroups" : [ {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          }, {
            "IdentityProviderId" : 4,
            "PrincipalKind" : null,
            "FullDisplayName" : "FullDisplayName",
            "DomainName" : "DomainName",
            "DisplayName" : "DisplayName",
            "IdentityProviderName" : "IdentityProviderName",
            "Id" : 0,
            "IdentityProviderTypeReferenceName" : null,
            "EmailAddress" : "EmailAddress",
            "IsSystemOwned" : true,
            "Name" : "Name"
          } ],
          "IsTag" : true,
          "ItemId" : 0,
          "AccountDomainName" : "AccountDomainName",
          "AssetName" : "AssetName",
          "AssetPartitionName" : "AssetPartitionName",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "UserId" : 2,
          "TagId" : 5,
          "ViaTagGroups" : [ null, null ],
          "IsDirect" : true,
          "UserDisplayName" : "UserDisplayName",
          "AssetId" : 1,
          "AccountName" : "AccountName"
        }
      },
      "UserOwnershipReportType" : {
        "type" : "object",
        "properties" : {
          "OwnershipType" : {
            "$ref" : "#/components/schemas/OwnershipType"
          },
          "ItemId" : {
            "type" : "integer",
            "description" : "ID of the owned item (PartitionId, AssetId, AccountId, UserId, TagId)",
            "format" : "int32"
          },
          "AssetPartitionId" : {
            "type" : "integer",
            "description" : "ID of the partition",
            "format" : "int32",
            "nullable" : true
          },
          "AssetPartitionName" : {
            "type" : "string",
            "description" : "Name of the partition",
            "nullable" : true
          },
          "AssetId" : {
            "type" : "integer",
            "description" : "ID of the asset owne",
            "format" : "int32",
            "nullable" : true
          },
          "AssetName" : {
            "type" : "string",
            "description" : "Name of the asset owned",
            "nullable" : true
          },
          "AssetNetworkAddress" : {
            "type" : "string",
            "description" : "Network address of the asset owned",
            "nullable" : true
          },
          "AccountId" : {
            "type" : "integer",
            "description" : "ID of the account owned",
            "format" : "int32",
            "nullable" : true
          },
          "AccountName" : {
            "type" : "string",
            "description" : "Name of the account owned",
            "nullable" : true
          },
          "AccountDomainName" : {
            "type" : "string",
            "description" : "Domain name of the account owned",
            "nullable" : true
          },
          "TagId" : {
            "type" : "integer",
            "description" : "ID of the tag (applies to tag ownership report)",
            "format" : "int32",
            "nullable" : true
          },
          "TagName" : {
            "type" : "string",
            "description" : "Name of the tag (applies to tag ownership report)",
            "nullable" : true
          },
          "UserId" : {
            "type" : "integer",
            "description" : "ID of the user who is an owner",
            "format" : "int32",
            "nullable" : true
          },
          "UserDisplayName" : {
            "type" : "string",
            "description" : "DisplayName of the user who is an owner",
            "nullable" : true
          },
          "UserName" : {
            "type" : "string",
            "description" : "UserName of user who is an owner",
            "nullable" : true
          },
          "UserDomainName" : {
            "type" : "string",
            "description" : "DomainName of user who is an owner",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "example" : {
          "OwnershipType" : "Unknown",
          "AssetPartitionId" : 6,
          "UserDomainName" : "UserDomainName",
          "AccountId" : 5,
          "UserName" : "UserName",
          "TagName" : "TagName",
          "ItemId" : 0,
          "AccountDomainName" : "AccountDomainName",
          "AssetName" : "AssetName",
          "AssetPartitionName" : "AssetPartitionName",
          "AssetNetworkAddress" : "AssetNetworkAddress",
          "UserId" : 2,
          "TagId" : 5,
          "UserDisplayName" : "UserDisplayName",
          "AssetId" : 1,
          "AccountName" : "AccountName"
        }
      },
      "UserPasswordRule" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 50,
            "minimum" : 1,
            "maxLength" : 50,
            "minLength" : 1,
            "type" : "string",
            "description" : "Name of the password rule"
          },
          "MaxCharacters" : {
            "maximum" : 255,
            "minimum" : 3,
            "type" : "integer",
            "description" : "The maximum length of the password",
            "format" : "int32",
            "default" : 64
          },
          "MinCharacters" : {
            "maximum" : 255,
            "minimum" : 3,
            "type" : "integer",
            "description" : "The minimum length of the password",
            "format" : "int32",
            "default" : 8
          },
          "AllowNonAlphaNumericCharacters" : {
            "type" : "boolean",
            "description" : "Allow non-alphanumeric characters in the password?",
            "default" : true
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the password rule",
            "nullable" : true
          },
          "AllowUppercaseCharacters" : {
            "type" : "boolean",
            "description" : "Allow uppercase characters in the password?",
            "default" : true
          },
          "MinUppercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, what is the minimum number of uppercase characters required",
            "format" : "int32",
            "default" : 1
          },
          "InvalidUppercaseCharacters" : {
            "type" : "array",
            "description" : "List of uppercase alphabet characters that may not be used.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveUppercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of uppercase characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowLowercaseCharacters" : {
            "type" : "boolean",
            "description" : "Allow lowercase characters in the password?",
            "default" : true
          },
          "MinLowercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, what is the minimum number of lowercase characters required",
            "format" : "int32",
            "default" : 1
          },
          "InvalidLowercaseCharacters" : {
            "type" : "array",
            "description" : "List of lowercase alphabet characters that may not be used.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveLowercaseCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of lowercase characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowNumericCharacters" : {
            "type" : "boolean",
            "description" : "Allow numeric characters in the password?",
            "default" : true
          },
          "MinNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, what is the minimum number of numeric characters required",
            "format" : "int32",
            "default" : 1
          },
          "InvalidNumericCharacters" : {
            "type" : "array",
            "description" : "List of numeric characters that may not be used.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of numeric characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "MinNonAlphaNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 0,
            "type" : "integer",
            "description" : "If allowed, the minimum number of non-alphanumeric characters required",
            "format" : "int32",
            "default" : 0
          },
          "NonAlphaNumericRestrictionType" : {
            "$ref" : "#/components/schemas/NonAlphaNumericRestrictionType"
          },
          "AllowedNonAlphaNumericCharacters" : {
            "type" : "array",
            "description" : "List of non-alphanumeric characters that may be used when NonAlphaNumericRestrictionType is set to 'Include'",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "InvalidNonAlphaNumericCharacters" : {
            "type" : "array",
            "description" : "List of numeric characters that may not be used when NonAlphaNumericRestrictionType is set to 'Exclude'\r\nNOTE: Generated passwords will be restricted to the set of printable ascii characters.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "MaxConsecutiveNonAlphaNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If allowed, what is the maximum number of non-alphanumeric characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "AllowedFirstCharacterType" : {
            "$ref" : "#/components/schemas/PasswordCharacterType"
          },
          "AllowedLastCharacterType" : {
            "$ref" : "#/components/schemas/PasswordCharacterType"
          },
          "MaxConsecutiveAlphabeticCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If upper or lower characters are allowed, what is the maximum number of alphabet characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "MaxConsecutiveAlphaNumericCharacters" : {
            "maximum" : 255,
            "minimum" : 1,
            "type" : "integer",
            "description" : "If upper or lower or numeric characters are allowed, what is the maximum number of alphabet or numeric characters that may be used consecutively",
            "format" : "int32",
            "nullable" : true
          },
          "RepeatedCharacterRestriction" : {
            "$ref" : "#/components/schemas/PasswordCharacterRepeatMode"
          }
        },
        "additionalProperties" : false,
        "description" : "The password rule enforced when user passwords are set",
        "example" : {
          "AllowedFirstCharacterType" : "All",
          "Description" : "Description",
          "AllowLowercaseCharacters" : true,
          "MaxConsecutiveNonAlphaNumericCharacters" : 52,
          "NonAlphaNumericRestrictionType" : "Include",
          "InvalidNumericCharacters" : [ "InvalidNumericCharacters", "InvalidNumericCharacters" ],
          "InvalidLowercaseCharacters" : [ "InvalidLowercaseCharacters", "InvalidLowercaseCharacters" ],
          "MinNumericCharacters" : 180,
          "Name" : "Name",
          "InvalidUppercaseCharacters" : [ "InvalidUppercaseCharacters", "InvalidUppercaseCharacters" ],
          "MaxConsecutiveUppercaseCharacters" : 152,
          "AllowedLastCharacterType" : null,
          "AllowedNonAlphaNumericCharacters" : [ "AllowedNonAlphaNumericCharacters", "AllowedNonAlphaNumericCharacters" ],
          "MaxConsecutiveLowercaseCharacters" : 59,
          "MaxConsecutiveAlphabeticCharacters" : 106,
          "MaxConsecutiveNumericCharacters" : 237,
          "MinCharacters" : 154,
          "MinLowercaseCharacters" : 143,
          "AllowNonAlphaNumericCharacters" : true,
          "InvalidNonAlphaNumericCharacters" : [ "InvalidNonAlphaNumericCharacters", "InvalidNonAlphaNumericCharacters" ],
          "AllowNumericCharacters" : true,
          "MaxConsecutiveAlphaNumericCharacters" : 188,
          "RepeatedCharacterRestriction" : "NotSpecified",
          "AllowUppercaseCharacters" : true,
          "MinUppercaseCharacters" : 37,
          "MaxCharacters" : 23,
          "MinNonAlphaNumericCharacters" : 92
        }
      },
      "UserPhoto" : {
        "required" : [ "Base64PhotoData" ],
        "type" : "object",
        "properties" : {
          "Base64PhotoData" : {
            "type" : "string",
            "description" : "Binary photo data. Base64 encoded. Limited to 100KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image."
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an application user's photo.",
        "example" : {
          "Base64PhotoData" : "Base64PhotoData"
        }
      },
      "UserPreference" : {
        "type" : "object",
        "properties" : {
          "Name" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The preference name. Key must be unique per user but otherwise has no meaning inside the appliance. (Read-only)",
            "nullable" : true,
            "x-key" : true
          },
          "Value" : {
            "maximum" : 65535,
            "maxLength" : 65535,
            "type" : "string",
            "description" : "The preference value. Value has no meaning inside the appliance.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Represents an application user's preference.",
        "example" : {
          "Value" : "Value",
          "Name" : "Name"
        }
      },
      "UserPrimaryAuthenticationProvider" : {
        "required" : [ "Id" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The id of the user's primary authentication provider.",
            "format" : "int32"
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the user's primary authentication provider (Read-only)",
            "nullable" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "Identity" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "The value required to authenticate the user against the specified authentication provider.  Often this will be\r\nwhat the user enters when logging in.  However, for some providers such as External Federation, it needs to match\r\nthe provider's Name Claim that is returned.  This value must be unique per authentication provider.  For Active\r\nDirectory and LDAP, you may specify the 'samAccountName' or 'Username' attribute when creating a user, but the\r\nvalue will be overwritten with the 'objectGUID' or 'entryUuid', respectively.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Authentication provider information for a user",
        "example" : {
          "TypeReferenceName" : "Unknown",
          "Id" : 9,
          "Identity" : "Identity",
          "Name" : "Name"
        }
      },
      "UserProviderSchemaDescriptors" : {
        "type" : "object",
        "properties" : {
          "UserClassTypeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "UserNameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "FirstNameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "LastNameAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DescriptionAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "MailAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "PhoneAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "MobileAttributeDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          },
          "DirectoryGroupSyncAttributeForManagedObjectsDescriptor" : {
            "$ref" : "#/components/schemas/SchemaDescriptor"
          }
        },
        "additionalProperties" : false,
        "description" : "Descriptors for user schema properties",
        "example" : {
          "DirectoryGroupSyncAttributeForManagedObjectsDescriptor" : null,
          "DescriptionAttributeDescriptor" : null,
          "MobileAttributeDescriptor" : null,
          "MailAttributeDescriptor" : null,
          "PhoneAttributeDescriptor" : null,
          "UserNameAttributeDescriptor" : null,
          "FirstNameAttributeDescriptor" : null,
          "DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor" : null,
          "UserClassTypeDescriptor" : {
            "ReadOnly" : true,
            "Required" : true
          },
          "LastNameAttributeDescriptor" : null,
          "DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor" : null
        }
      },
      "UserProviderSchemaProperties" : {
        "type" : "object",
        "properties" : {
          "UserClassType" : {
            "type" : "array",
            "description" : "LDAP objects that have all of the specified objectClass types will be treated as users.\r\nThese objectClass types will also be used to validate the attributes mapped to user properties.",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "UserNameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of user name schema attribute",
            "nullable" : true
          },
          "FirstNameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of first name schema attribute",
            "nullable" : true
          },
          "LastNameAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of last name schema attribute",
            "nullable" : true
          },
          "DescriptionAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of description schema attribute",
            "nullable" : true
          },
          "MailAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of mail schema attribute",
            "nullable" : true
          },
          "PhoneAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of phone schema attribute",
            "nullable" : true
          },
          "MobileAttribute" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of mobile schema attribute",
            "nullable" : true
          },
          "DirectoryGroupSyncAttributeForExternalFederationAuthentication" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of attribute used while adding users of a directory user group from which the imported user's primary\r\n            authentication identity (email address or name claim) will come from when an external federation provider has been\r\n            chosen as that group's means of authentication.",
            "nullable" : true
          },
          "DirectoryGroupSyncAttributeForRadiusAuthentication" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of attribute used while adding users of a directory user group from which the imported user's primary\r\n            or secondary authentication identity will come from when a RADIUS provider has been chosen as that group's means of\r\n            primary or secondary authentication.",
            "nullable" : true
          },
          "DirectoryGroupSyncAttributeForManagedObjects" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Name of attribute used while adding users of a directory user group from which the imported user's linked\r\n            accounts will automatically be associated to their Safeguard user.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Directory attribute mappings for users",
        "example" : {
          "DirectoryGroupSyncAttributeForManagedObjects" : "DirectoryGroupSyncAttributeForManagedObjects",
          "FirstNameAttribute" : "FirstNameAttribute",
          "DirectoryGroupSyncAttributeForExternalFederationAuthentication" : "DirectoryGroupSyncAttributeForExternalFederationAuthentication",
          "PhoneAttribute" : "PhoneAttribute",
          "DirectoryGroupSyncAttributeForRadiusAuthentication" : "DirectoryGroupSyncAttributeForRadiusAuthentication",
          "UserNameAttribute" : "UserNameAttribute",
          "MobileAttribute" : "MobileAttribute",
          "DescriptionAttribute" : "DescriptionAttribute",
          "LastNameAttribute" : "LastNameAttribute",
          "UserClassType" : [ "UserClassType", "UserClassType" ],
          "MailAttribute" : "MailAttribute"
        }
      },
      "UserRequestFavorite" : {
        "required" : [ "Name" ],
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "string",
            "description" : "Database ID of the favorite",
            "nullable" : true,
            "x-key" : true
          },
          "Name" : {
            "maximum" : 100,
            "maxLength" : 100,
            "type" : "string",
            "description" : "Name of the favorite"
          },
          "Description" : {
            "maximum" : 255,
            "maxLength" : 255,
            "type" : "string",
            "description" : "Description of the favorite",
            "nullable" : true
          },
          "Category" : {
            "maximum" : 2147483647,
            "minimum" : 0,
            "type" : "integer",
            "description" : "User specified category of this request favorite",
            "format" : "int32",
            "default" : 0
          },
          "Requests" : {
            "type" : "array",
            "description" : "Saved requests associated with this group",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SavedAccessRequest"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "A group of saved requests",
        "example" : {
          "Description" : "Description",
          "Category" : 171976544,
          "Id" : "Id",
          "Requests" : [ {
            "AccessRequestType" : "Password",
            "ActiveRequests" : [ {
              "AccessRequestType" : "Password",
              "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestId" : "RequestId",
              "State" : "New",
              "IsEmergency" : true,
              "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestAvailability" : [ {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              }, {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              } ],
              "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "AccessRequestType" : "Password",
              "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestId" : "RequestId",
              "State" : "New",
              "IsEmergency" : true,
              "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestAvailability" : [ {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              }, {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              } ],
              "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "AccountId" : 1,
            "ReasonComment" : "ReasonComment",
            "AccountAssetName" : "AccountAssetName",
            "RequestedDurationHours" : 7,
            "AccountDomainName" : "AccountDomainName",
            "AssetName" : "AssetName",
            "ReasonCodeId" : 5,
            "AccountAssetId" : 5,
            "AssetPlatformType" : "Unknown",
            "RequestedDurationMinutes" : 9,
            "IsEmergency" : true,
            "AssetId" : 6,
            "RequestedDurationDays" : 2,
            "AccountName" : "AccountName",
            "ReasonCodeName" : "ReasonCodeName"
          }, {
            "AccessRequestType" : "Password",
            "ActiveRequests" : [ {
              "AccessRequestType" : "Password",
              "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestId" : "RequestId",
              "State" : "New",
              "IsEmergency" : true,
              "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestAvailability" : [ {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              }, {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              } ],
              "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
            }, {
              "AccessRequestType" : "Password",
              "StateChangedOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestId" : "RequestId",
              "State" : "New",
              "IsEmergency" : true,
              "ExpiresOn" : "2000-01-23T04:56:07.000+00:00",
              "RequestAvailability" : [ {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              }, {
                "Begin" : "2000-01-23T04:56:07.000+00:00",
                "End" : "2000-01-23T04:56:07.000+00:00"
              } ],
              "RequestedFor" : "2000-01-23T04:56:07.000+00:00"
            } ],
            "AccountId" : 1,
            "ReasonComment" : "ReasonComment",
            "AccountAssetName" : "AccountAssetName",
            "RequestedDurationHours" : 7,
            "AccountDomainName" : "AccountDomainName",
            "AssetName" : "AssetName",
            "ReasonCodeId" : 5,
            "AccountAssetId" : 5,
            "AssetPlatformType" : "Unknown",
            "RequestedDurationMinutes" : 9,
            "IsEmergency" : true,
            "AssetId" : 6,
            "RequestedDurationDays" : 2,
            "AccountName" : "AccountName",
            "ReasonCodeName" : "ReasonCodeName"
          } ],
          "Name" : "Name"
        }
      },
      "UserRole" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "Database ID of the role",
            "format" : "int32",
            "x-key" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "Name of the role",
            "nullable" : true
          },
          "AccountCount" : {
            "type" : "integer",
            "description" : "Number of accounts managed by the role",
            "format" : "int32"
          },
          "UserCount" : {
            "type" : "integer",
            "description" : "Number of users that are members of the role",
            "format" : "int32"
          },
          "PolicyCount" : {
            "type" : "integer",
            "description" : "Number of policies assigned to the role",
            "format" : "int32"
          },
          "Membership" : {
            "type" : "array",
            "description" : "How membership in this role was explicitly granted (Read-Only)",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/UserRoleMembership"
            }
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a role that a user belongs to plus how that membership was granted",
        "example" : {
          "UserCount" : 1,
          "Membership" : [ {
            "RoleMemberIsUserGroup" : true,
            "RoleMemberDisplayName" : "RoleMemberDisplayName",
            "RoleMemberId" : 5
          }, {
            "RoleMemberIsUserGroup" : true,
            "RoleMemberDisplayName" : "RoleMemberDisplayName",
            "RoleMemberId" : 5
          } ],
          "Id" : 0,
          "PolicyCount" : 5,
          "AccountCount" : 6,
          "Name" : "Name"
        }
      },
      "UserRoleMembership" : {
        "type" : "object",
        "properties" : {
          "RoleMemberId" : {
            "type" : "integer",
            "description" : "Database ID of the role member",
            "format" : "int32",
            "x-key" : true
          },
          "RoleMemberDisplayName" : {
            "type" : "string",
            "description" : "Display name of the role member",
            "nullable" : true
          },
          "RoleMemberIsUserGroup" : {
            "type" : "boolean",
            "description" : "Whether or not the role member is a group or a user"
          }
        },
        "additionalProperties" : false,
        "description" : "Represents a member of a role",
        "example" : {
          "RoleMemberIsUserGroup" : true,
          "RoleMemberDisplayName" : "RoleMemberDisplayName",
          "RoleMemberId" : 5
        }
      },
      "UserSecondaryAuthenticationProvider" : {
        "type" : "object",
        "properties" : {
          "Id" : {
            "type" : "integer",
            "description" : "The id of the user's secondary authentication provider.  If this property is not set then the user is not subject to secondary authentication.",
            "format" : "int32",
            "nullable" : true
          },
          "Name" : {
            "type" : "string",
            "description" : "The name of the user's secondary authentication provider. (Read-only)",
            "nullable" : true
          },
          "TypeReferenceName" : {
            "$ref" : "#/components/schemas/IdentityProviderTypeReferenceName"
          },
          "Identity" : {
            "maximum" : 1000,
            "maxLength" : 1000,
            "type" : "string",
            "description" : "The value required to authenticate the user against the specified secondary authentication provider.  Often this will be\r\nwhat the user enters when logging in.",
            "nullable" : true
          }
        },
        "additionalProperties" : false,
        "description" : "Information about user secondary auth provider",
        "example" : {
          "TypeReferenceName" : null,
          "Id" : 3,
          "Identity" : "Identity",
          "Name" : "Name"
        }
      },
      "ValidationError" : {
        "type" : "object",
        "properties" : {
          "ValidationErrors" : {
            "type" : "array",
            "nullable" : true,
            "items" : { }
          },
          "Code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "Message" : {
            "type" : "string",
            "nullable" : true
          },
          "InnerError" : {
            "$ref" : "#/components/schemas/ApiError"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Message" : "Message",
          "ValidationErrors" : [ "", "" ],
          "InnerError" : {
            "Message" : "Message",
            "InnerError" : null,
            "Code" : 6
          },
          "Code" : 0
        }
      },
      "VMCompatibleBackupAuthorizationSetting" : {
        "type" : "object",
        "properties" : {
          "Authorized" : {
            "type" : "boolean",
            "description" : "True if the cluster is authorized to download backups from hardware\r\nas a backup that can restore to a virtual appliance."
          }
        },
        "additionalProperties" : false,
        "example" : {
          "Authorized" : true
        }
      },
      "WeekOfMonth" : {
        "type" : "string",
        "description" : "The week of the month",
        "format" : "string",
        "enum" : [ "First", "Second", "Third", "Fourth", "Last" ]
      },
      "WindowsAccountDiscoveryProperties" : {
        "type" : "object",
        "properties" : {
          "RuleType" : {
            "$ref" : "#/components/schemas/WindowsAccountDiscoveryRuleType"
          },
          "PropertyConstraintProperties" : {
            "$ref" : "#/components/schemas/WindowsPropertyConstraintProperties"
          }
        },
        "additionalProperties" : false,
        "example" : {
          "PropertyConstraintProperties" : {
            "NameFilter" : "NameFilter",
            "RidFilter" : [ "RidFilter", "RidFilter" ],
            "GroupFilter" : "GroupFilter",
            "GidFilter" : [ "GidFilter", "GidFilter" ]
          },
          "RuleType" : "PropertyConstraint"
        }
      },
      "WindowsAccountDiscoveryRuleType" : {
        "type" : "string",
        "description" : "Type of windows account discovery filter",
        "format" : "string",
        "enum" : [ "PropertyConstraint", "FindAll" ]
      },
      "WindowsPropertyConstraintProperties" : {
        "type" : "object",
        "properties" : {
          "GidFilter" : {
            "type" : "array",
            "description" : "Filter applied to discriminate between Unix group identifiers. IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          },
          "GroupFilter" : {
            "maximum" : 255,
            "minimum" : 0,
            "maxLength" : 255,
            "minLength" : 0,
            "type" : "string",
            "description" : "Filter applied to discriminate between account group names. Names can be specified as a regular expression.",
            "nullable" : true
          },
          "NameFilter" : {
            "type" : "string",
            "description" : "Filter applied to discriminate between account names. Names can be specified as a regular expression.",
            "nullable" : true
          },
          "RidFilter" : {
            "type" : "array",
            "description" : "Filter applied to discriminate between Windows relative identifiers. IDs can be specified as a single ID or a range, e.g. 1 or 3-5",
            "nullable" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "additionalProperties" : false,
        "example" : {
          "NameFilter" : "NameFilter",
          "RidFilter" : [ "RidFilter", "RidFilter" ],
          "GroupFilter" : "GroupFilter",
          "GidFilter" : [ "GidFilter", "GidFilter" ]
        }
      },
      "Licenses_Raw_body" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "Photo_Raw_body" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "Script_Raw_body" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "ValidateScript_Raw_body" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      },
      "Photo_Raw_body_1" : {
        "type" : "object",
        "properties" : {
          "_" : {
            "type" : "string",
            "format" : "binary"
          }
        }
      }
    },
    "securitySchemes" : {
      "oauth2" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "/RSTS/Login",
            "scopes" : { }
          }
        }
      },
      "BearerAuth" : {
        "type" : "http",
        "scheme" : "Bearer"
      }
    }
  }
}
