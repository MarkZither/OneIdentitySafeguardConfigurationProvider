/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Credential parameters for directory schema discovery
    /// </summary>
    [DataContract]
    public partial class AssetSchemaParameters : IEquatable<AssetSchemaParameters>
    { 
        /// <summary>
        /// Use service account credentials from specified directory provider
        /// </summary>
        /// <value>Use service account credentials from specified directory provider</value>

        [DataMember(Name="DirectoryId")]
        public int? DirectoryId { get; set; }

        /// <summary>
        /// The network address of the server the directory resides on (not required for Active Directory)
        /// </summary>
        /// <value>The network address of the server the directory resides on (not required for Active Directory)</value>

        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// Gets or Sets PlatformType
        /// </summary>

        [DataMember(Name="PlatformType")]
        public PlatformType PlatformType { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>

        [DataMember(Name="ConnectionProperties")]
        public AssetConnectionProperties ConnectionProperties { get; set; }

        /// <summary>
        /// List of available domain controllers. If this list is empty then DNS will be used instead.
        /// </summary>
        /// <value>List of available domain controllers. If this list is empty then DNS will be used instead.</value>

        [DataMember(Name="DomainControllers")]
        public List<DomainController> DomainControllers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetSchemaParameters {\n");
            sb.Append("  DirectoryId: ").Append(DirectoryId).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  DomainControllers: ").Append(DomainControllers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetSchemaParameters)obj);
        }

        /// <summary>
        /// Returns true if AssetSchemaParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetSchemaParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetSchemaParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DirectoryId == other.DirectoryId ||
                    DirectoryId != null &&
                    DirectoryId.Equals(other.DirectoryId)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    PlatformType == other.PlatformType ||
                    PlatformType != null &&
                    PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    ConnectionProperties == other.ConnectionProperties ||
                    ConnectionProperties != null &&
                    ConnectionProperties.Equals(other.ConnectionProperties)
                ) && 
                (
                    DomainControllers == other.DomainControllers ||
                    DomainControllers != null &&
                    DomainControllers.SequenceEqual(other.DomainControllers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DirectoryId != null)
                    hashCode = hashCode * 59 + DirectoryId.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (PlatformType != null)
                    hashCode = hashCode * 59 + PlatformType.GetHashCode();
                    if (ConnectionProperties != null)
                    hashCode = hashCode * 59 + ConnectionProperties.GetHashCode();
                    if (DomainControllers != null)
                    hashCode = hashCode * 59 + DomainControllers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetSchemaParameters left, AssetSchemaParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetSchemaParameters left, AssetSchemaParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
