/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Task information for an asset
    /// </summary>
    [DataContract]
    public partial class AssetTaskProperties : IEquatable<AssetTaskProperties>
    { 
        /// <summary>
        /// Whether this asset has any platform task failures (Read-only)
        /// </summary>
        /// <value>Whether this asset has any platform task failures (Read-only)</value>

        [DataMember(Name="HasAssetTaskFailure")]
        public bool? HasAssetTaskFailure { get; set; }

        /// <summary>
        /// The date/time of the last account discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the last account discovery (Read-only)</value>

        [DataMember(Name="LastAccountDiscoveryDate")]
        public DateTime? LastAccountDiscoveryDate { get; set; }

        /// <summary>
        /// The date/time of the last successful account discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the last successful account discovery (Read-only)</value>

        [DataMember(Name="LastSuccessAccountDiscoveryDate")]
        public DateTime? LastSuccessAccountDiscoveryDate { get; set; }

        /// <summary>
        /// The date/time of the last failed account discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the last failed account discovery (Read-only)</value>

        [DataMember(Name="LastFailureAccountDiscoveryDate")]
        public DateTime? LastFailureAccountDiscoveryDate { get; set; }

        /// <summary>
        /// Number of subsequent failed account discovery attempts since last success (Read-only)
        /// </summary>
        /// <value>Number of subsequent failed account discovery attempts since last success (Read-only)</value>

        [DataMember(Name="FailedAccountDiscoveryAttempts")]
        public int? FailedAccountDiscoveryAttempts { get; set; }

        /// <summary>
        /// The date/time of the next account discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the next account discovery (Read-only)</value>

        [DataMember(Name="NextAccountDiscoveryDate")]
        public DateTime? NextAccountDiscoveryDate { get; set; }

        /// <summary>
        /// The task audit log ID of the last account discovery (Read-only)
        /// </summary>
        /// <value>The task audit log ID of the last account discovery (Read-only)</value>

        [DataMember(Name="LastAccountDiscoveryTaskId")]
        public string LastAccountDiscoveryTaskId { get; set; }

        /// <summary>
        /// The date/time of the last service discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the last service discovery (Read-only)</value>

        [DataMember(Name="LastServiceDiscoveryDate")]
        public DateTime? LastServiceDiscoveryDate { get; set; }

        /// <summary>
        /// The date/time of the last successful service discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the last successful service discovery (Read-only)</value>

        [DataMember(Name="LastSuccessServiceDiscoveryDate")]
        public DateTime? LastSuccessServiceDiscoveryDate { get; set; }

        /// <summary>
        /// The date/time of the last failed service discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the last failed service discovery (Read-only)</value>

        [DataMember(Name="LastFailureServiceDiscoveryDate")]
        public DateTime? LastFailureServiceDiscoveryDate { get; set; }

        /// <summary>
        /// Number of subsequent failed service discovery attempts since last success (Read-only)
        /// </summary>
        /// <value>Number of subsequent failed service discovery attempts since last success (Read-only)</value>

        [DataMember(Name="FailedServiceDiscoveryAttempts")]
        public int? FailedServiceDiscoveryAttempts { get; set; }

        /// <summary>
        /// The date/time of the next service discovery (Read-only)
        /// </summary>
        /// <value>The date/time of the next service discovery (Read-only)</value>

        [DataMember(Name="NextServiceDiscoveryDate")]
        public DateTime? NextServiceDiscoveryDate { get; set; }

        /// <summary>
        /// The task audit log ID of the last service discovery (Read-only)
        /// </summary>
        /// <value>The task audit log ID of the last service discovery (Read-only)</value>

        [DataMember(Name="LastServiceDiscoveryTaskId")]
        public string LastServiceDiscoveryTaskId { get; set; }

        /// <summary>
        /// The date/time of the test connection (Read-only)
        /// </summary>
        /// <value>The date/time of the test connection (Read-only)</value>

        [DataMember(Name="LastTestConnectionDate")]
        public DateTime? LastTestConnectionDate { get; set; }

        /// <summary>
        /// The date/time of the last successful test connection (Read-only)
        /// </summary>
        /// <value>The date/time of the last successful test connection (Read-only)</value>

        [DataMember(Name="LastSuccessTestConnectionDate")]
        public DateTime? LastSuccessTestConnectionDate { get; set; }

        /// <summary>
        /// The date/time of the last failed test connnection (Read-only)
        /// </summary>
        /// <value>The date/time of the last failed test connnection (Read-only)</value>

        [DataMember(Name="LastFailureTestConnectionDate")]
        public DateTime? LastFailureTestConnectionDate { get; set; }

        /// <summary>
        /// Number of subsequent failed test connection attempts since last success (Read-only)
        /// </summary>
        /// <value>Number of subsequent failed test connection attempts since last success (Read-only)</value>

        [DataMember(Name="FailedTestConnectionAttempts")]
        public int? FailedTestConnectionAttempts { get; set; }

        /// <summary>
        /// The date/time of the next test connection, if this Service is enabled for automatic password management (Read-only)
        /// </summary>
        /// <value>The date/time of the next test connection, if this Service is enabled for automatic password management (Read-only)</value>

        [DataMember(Name="NextTestConnectionDate")]
        public DateTime? NextTestConnectionDate { get; set; }

        /// <summary>
        /// The task audit log ID of the last test connection (Read-only)
        /// </summary>
        /// <value>The task audit log ID of the last test connection (Read-only)</value>

        [DataMember(Name="LastTestConnectionTaskId")]
        public string LastTestConnectionTaskId { get; set; }

        /// <summary>
        /// The date/time of the dependent service update (Read-only)
        /// </summary>
        /// <value>The date/time of the dependent service update (Read-only)</value>

        [DataMember(Name="LastDependentServiceUpdateDate")]
        public DateTime? LastDependentServiceUpdateDate { get; set; }

        /// <summary>
        /// The date/time of the last successful dependent service update (Read-only)
        /// </summary>
        /// <value>The date/time of the last successful dependent service update (Read-only)</value>

        [DataMember(Name="LastSuccessDependentServiceUpdateDate")]
        public DateTime? LastSuccessDependentServiceUpdateDate { get; set; }

        /// <summary>
        /// The date/time of the last failed dependent service update (Read-only)
        /// </summary>
        /// <value>The date/time of the last failed dependent service update (Read-only)</value>

        [DataMember(Name="LastFailureDependentServiceUpdateDate")]
        public DateTime? LastFailureDependentServiceUpdateDate { get; set; }

        /// <summary>
        /// Number of subsequent failed dependent service update attempts since last success (Read-only)
        /// </summary>
        /// <value>Number of subsequent failed dependent service update attempts since last success (Read-only)</value>

        [DataMember(Name="FailedDependentServiceUpdateAttempts")]
        public int? FailedDependentServiceUpdateAttempts { get; set; }

        /// <summary>
        /// The date/time of the next dependent service update, if this Service is enabled for automatic password management (Read-only)
        /// </summary>
        /// <value>The date/time of the next dependent service update, if this Service is enabled for automatic password management (Read-only)</value>

        [DataMember(Name="NextDependentServiceUpdateDate")]
        public DateTime? NextDependentServiceUpdateDate { get; set; }

        /// <summary>
        /// The task audit log ID of the last dependent service update (Read-only)
        /// </summary>
        /// <value>The task audit log ID of the last dependent service update (Read-only)</value>

        [DataMember(Name="LastDependentServiceUpdateTaskId")]
        public string LastDependentServiceUpdateTaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetTaskProperties {\n");
            sb.Append("  HasAssetTaskFailure: ").Append(HasAssetTaskFailure).Append("\n");
            sb.Append("  LastAccountDiscoveryDate: ").Append(LastAccountDiscoveryDate).Append("\n");
            sb.Append("  LastSuccessAccountDiscoveryDate: ").Append(LastSuccessAccountDiscoveryDate).Append("\n");
            sb.Append("  LastFailureAccountDiscoveryDate: ").Append(LastFailureAccountDiscoveryDate).Append("\n");
            sb.Append("  FailedAccountDiscoveryAttempts: ").Append(FailedAccountDiscoveryAttempts).Append("\n");
            sb.Append("  NextAccountDiscoveryDate: ").Append(NextAccountDiscoveryDate).Append("\n");
            sb.Append("  LastAccountDiscoveryTaskId: ").Append(LastAccountDiscoveryTaskId).Append("\n");
            sb.Append("  LastServiceDiscoveryDate: ").Append(LastServiceDiscoveryDate).Append("\n");
            sb.Append("  LastSuccessServiceDiscoveryDate: ").Append(LastSuccessServiceDiscoveryDate).Append("\n");
            sb.Append("  LastFailureServiceDiscoveryDate: ").Append(LastFailureServiceDiscoveryDate).Append("\n");
            sb.Append("  FailedServiceDiscoveryAttempts: ").Append(FailedServiceDiscoveryAttempts).Append("\n");
            sb.Append("  NextServiceDiscoveryDate: ").Append(NextServiceDiscoveryDate).Append("\n");
            sb.Append("  LastServiceDiscoveryTaskId: ").Append(LastServiceDiscoveryTaskId).Append("\n");
            sb.Append("  LastTestConnectionDate: ").Append(LastTestConnectionDate).Append("\n");
            sb.Append("  LastSuccessTestConnectionDate: ").Append(LastSuccessTestConnectionDate).Append("\n");
            sb.Append("  LastFailureTestConnectionDate: ").Append(LastFailureTestConnectionDate).Append("\n");
            sb.Append("  FailedTestConnectionAttempts: ").Append(FailedTestConnectionAttempts).Append("\n");
            sb.Append("  NextTestConnectionDate: ").Append(NextTestConnectionDate).Append("\n");
            sb.Append("  LastTestConnectionTaskId: ").Append(LastTestConnectionTaskId).Append("\n");
            sb.Append("  LastDependentServiceUpdateDate: ").Append(LastDependentServiceUpdateDate).Append("\n");
            sb.Append("  LastSuccessDependentServiceUpdateDate: ").Append(LastSuccessDependentServiceUpdateDate).Append("\n");
            sb.Append("  LastFailureDependentServiceUpdateDate: ").Append(LastFailureDependentServiceUpdateDate).Append("\n");
            sb.Append("  FailedDependentServiceUpdateAttempts: ").Append(FailedDependentServiceUpdateAttempts).Append("\n");
            sb.Append("  NextDependentServiceUpdateDate: ").Append(NextDependentServiceUpdateDate).Append("\n");
            sb.Append("  LastDependentServiceUpdateTaskId: ").Append(LastDependentServiceUpdateTaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetTaskProperties)obj);
        }

        /// <summary>
        /// Returns true if AssetTaskProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetTaskProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetTaskProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HasAssetTaskFailure == other.HasAssetTaskFailure ||
                    HasAssetTaskFailure != null &&
                    HasAssetTaskFailure.Equals(other.HasAssetTaskFailure)
                ) && 
                (
                    LastAccountDiscoveryDate == other.LastAccountDiscoveryDate ||
                    LastAccountDiscoveryDate != null &&
                    LastAccountDiscoveryDate.Equals(other.LastAccountDiscoveryDate)
                ) && 
                (
                    LastSuccessAccountDiscoveryDate == other.LastSuccessAccountDiscoveryDate ||
                    LastSuccessAccountDiscoveryDate != null &&
                    LastSuccessAccountDiscoveryDate.Equals(other.LastSuccessAccountDiscoveryDate)
                ) && 
                (
                    LastFailureAccountDiscoveryDate == other.LastFailureAccountDiscoveryDate ||
                    LastFailureAccountDiscoveryDate != null &&
                    LastFailureAccountDiscoveryDate.Equals(other.LastFailureAccountDiscoveryDate)
                ) && 
                (
                    FailedAccountDiscoveryAttempts == other.FailedAccountDiscoveryAttempts ||
                    FailedAccountDiscoveryAttempts != null &&
                    FailedAccountDiscoveryAttempts.Equals(other.FailedAccountDiscoveryAttempts)
                ) && 
                (
                    NextAccountDiscoveryDate == other.NextAccountDiscoveryDate ||
                    NextAccountDiscoveryDate != null &&
                    NextAccountDiscoveryDate.Equals(other.NextAccountDiscoveryDate)
                ) && 
                (
                    LastAccountDiscoveryTaskId == other.LastAccountDiscoveryTaskId ||
                    LastAccountDiscoveryTaskId != null &&
                    LastAccountDiscoveryTaskId.Equals(other.LastAccountDiscoveryTaskId)
                ) && 
                (
                    LastServiceDiscoveryDate == other.LastServiceDiscoveryDate ||
                    LastServiceDiscoveryDate != null &&
                    LastServiceDiscoveryDate.Equals(other.LastServiceDiscoveryDate)
                ) && 
                (
                    LastSuccessServiceDiscoveryDate == other.LastSuccessServiceDiscoveryDate ||
                    LastSuccessServiceDiscoveryDate != null &&
                    LastSuccessServiceDiscoveryDate.Equals(other.LastSuccessServiceDiscoveryDate)
                ) && 
                (
                    LastFailureServiceDiscoveryDate == other.LastFailureServiceDiscoveryDate ||
                    LastFailureServiceDiscoveryDate != null &&
                    LastFailureServiceDiscoveryDate.Equals(other.LastFailureServiceDiscoveryDate)
                ) && 
                (
                    FailedServiceDiscoveryAttempts == other.FailedServiceDiscoveryAttempts ||
                    FailedServiceDiscoveryAttempts != null &&
                    FailedServiceDiscoveryAttempts.Equals(other.FailedServiceDiscoveryAttempts)
                ) && 
                (
                    NextServiceDiscoveryDate == other.NextServiceDiscoveryDate ||
                    NextServiceDiscoveryDate != null &&
                    NextServiceDiscoveryDate.Equals(other.NextServiceDiscoveryDate)
                ) && 
                (
                    LastServiceDiscoveryTaskId == other.LastServiceDiscoveryTaskId ||
                    LastServiceDiscoveryTaskId != null &&
                    LastServiceDiscoveryTaskId.Equals(other.LastServiceDiscoveryTaskId)
                ) && 
                (
                    LastTestConnectionDate == other.LastTestConnectionDate ||
                    LastTestConnectionDate != null &&
                    LastTestConnectionDate.Equals(other.LastTestConnectionDate)
                ) && 
                (
                    LastSuccessTestConnectionDate == other.LastSuccessTestConnectionDate ||
                    LastSuccessTestConnectionDate != null &&
                    LastSuccessTestConnectionDate.Equals(other.LastSuccessTestConnectionDate)
                ) && 
                (
                    LastFailureTestConnectionDate == other.LastFailureTestConnectionDate ||
                    LastFailureTestConnectionDate != null &&
                    LastFailureTestConnectionDate.Equals(other.LastFailureTestConnectionDate)
                ) && 
                (
                    FailedTestConnectionAttempts == other.FailedTestConnectionAttempts ||
                    FailedTestConnectionAttempts != null &&
                    FailedTestConnectionAttempts.Equals(other.FailedTestConnectionAttempts)
                ) && 
                (
                    NextTestConnectionDate == other.NextTestConnectionDate ||
                    NextTestConnectionDate != null &&
                    NextTestConnectionDate.Equals(other.NextTestConnectionDate)
                ) && 
                (
                    LastTestConnectionTaskId == other.LastTestConnectionTaskId ||
                    LastTestConnectionTaskId != null &&
                    LastTestConnectionTaskId.Equals(other.LastTestConnectionTaskId)
                ) && 
                (
                    LastDependentServiceUpdateDate == other.LastDependentServiceUpdateDate ||
                    LastDependentServiceUpdateDate != null &&
                    LastDependentServiceUpdateDate.Equals(other.LastDependentServiceUpdateDate)
                ) && 
                (
                    LastSuccessDependentServiceUpdateDate == other.LastSuccessDependentServiceUpdateDate ||
                    LastSuccessDependentServiceUpdateDate != null &&
                    LastSuccessDependentServiceUpdateDate.Equals(other.LastSuccessDependentServiceUpdateDate)
                ) && 
                (
                    LastFailureDependentServiceUpdateDate == other.LastFailureDependentServiceUpdateDate ||
                    LastFailureDependentServiceUpdateDate != null &&
                    LastFailureDependentServiceUpdateDate.Equals(other.LastFailureDependentServiceUpdateDate)
                ) && 
                (
                    FailedDependentServiceUpdateAttempts == other.FailedDependentServiceUpdateAttempts ||
                    FailedDependentServiceUpdateAttempts != null &&
                    FailedDependentServiceUpdateAttempts.Equals(other.FailedDependentServiceUpdateAttempts)
                ) && 
                (
                    NextDependentServiceUpdateDate == other.NextDependentServiceUpdateDate ||
                    NextDependentServiceUpdateDate != null &&
                    NextDependentServiceUpdateDate.Equals(other.NextDependentServiceUpdateDate)
                ) && 
                (
                    LastDependentServiceUpdateTaskId == other.LastDependentServiceUpdateTaskId ||
                    LastDependentServiceUpdateTaskId != null &&
                    LastDependentServiceUpdateTaskId.Equals(other.LastDependentServiceUpdateTaskId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HasAssetTaskFailure != null)
                    hashCode = hashCode * 59 + HasAssetTaskFailure.GetHashCode();
                    if (LastAccountDiscoveryDate != null)
                    hashCode = hashCode * 59 + LastAccountDiscoveryDate.GetHashCode();
                    if (LastSuccessAccountDiscoveryDate != null)
                    hashCode = hashCode * 59 + LastSuccessAccountDiscoveryDate.GetHashCode();
                    if (LastFailureAccountDiscoveryDate != null)
                    hashCode = hashCode * 59 + LastFailureAccountDiscoveryDate.GetHashCode();
                    if (FailedAccountDiscoveryAttempts != null)
                    hashCode = hashCode * 59 + FailedAccountDiscoveryAttempts.GetHashCode();
                    if (NextAccountDiscoveryDate != null)
                    hashCode = hashCode * 59 + NextAccountDiscoveryDate.GetHashCode();
                    if (LastAccountDiscoveryTaskId != null)
                    hashCode = hashCode * 59 + LastAccountDiscoveryTaskId.GetHashCode();
                    if (LastServiceDiscoveryDate != null)
                    hashCode = hashCode * 59 + LastServiceDiscoveryDate.GetHashCode();
                    if (LastSuccessServiceDiscoveryDate != null)
                    hashCode = hashCode * 59 + LastSuccessServiceDiscoveryDate.GetHashCode();
                    if (LastFailureServiceDiscoveryDate != null)
                    hashCode = hashCode * 59 + LastFailureServiceDiscoveryDate.GetHashCode();
                    if (FailedServiceDiscoveryAttempts != null)
                    hashCode = hashCode * 59 + FailedServiceDiscoveryAttempts.GetHashCode();
                    if (NextServiceDiscoveryDate != null)
                    hashCode = hashCode * 59 + NextServiceDiscoveryDate.GetHashCode();
                    if (LastServiceDiscoveryTaskId != null)
                    hashCode = hashCode * 59 + LastServiceDiscoveryTaskId.GetHashCode();
                    if (LastTestConnectionDate != null)
                    hashCode = hashCode * 59 + LastTestConnectionDate.GetHashCode();
                    if (LastSuccessTestConnectionDate != null)
                    hashCode = hashCode * 59 + LastSuccessTestConnectionDate.GetHashCode();
                    if (LastFailureTestConnectionDate != null)
                    hashCode = hashCode * 59 + LastFailureTestConnectionDate.GetHashCode();
                    if (FailedTestConnectionAttempts != null)
                    hashCode = hashCode * 59 + FailedTestConnectionAttempts.GetHashCode();
                    if (NextTestConnectionDate != null)
                    hashCode = hashCode * 59 + NextTestConnectionDate.GetHashCode();
                    if (LastTestConnectionTaskId != null)
                    hashCode = hashCode * 59 + LastTestConnectionTaskId.GetHashCode();
                    if (LastDependentServiceUpdateDate != null)
                    hashCode = hashCode * 59 + LastDependentServiceUpdateDate.GetHashCode();
                    if (LastSuccessDependentServiceUpdateDate != null)
                    hashCode = hashCode * 59 + LastSuccessDependentServiceUpdateDate.GetHashCode();
                    if (LastFailureDependentServiceUpdateDate != null)
                    hashCode = hashCode * 59 + LastFailureDependentServiceUpdateDate.GetHashCode();
                    if (FailedDependentServiceUpdateAttempts != null)
                    hashCode = hashCode * 59 + FailedDependentServiceUpdateAttempts.GetHashCode();
                    if (NextDependentServiceUpdateDate != null)
                    hashCode = hashCode * 59 + NextDependentServiceUpdateDate.GetHashCode();
                    if (LastDependentServiceUpdateTaskId != null)
                    hashCode = hashCode * 59 + LastDependentServiceUpdateTaskId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetTaskProperties left, AssetTaskProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetTaskProperties left, AssetTaskProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
