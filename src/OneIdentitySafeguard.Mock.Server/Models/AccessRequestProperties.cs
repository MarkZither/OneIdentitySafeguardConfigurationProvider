/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Configuration governing access requests
    /// </summary>
    [DataContract]
    public partial class AccessRequestProperties : IEquatable<AccessRequestProperties>
    { 
        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// Whether to allow more than one access request to be active at the same time
        /// </summary>
        /// <value>Whether to allow more than one access request to be active at the same time</value>

        [DataMember(Name="AllowSimultaneousAccess")]
        public bool? AllowSimultaneousAccess { get; set; }

        /// <summary>
        /// Maximum number of times access can be granted during the same time period
        /// </summary>
        /// <value>Maximum number of times access can be granted during the same time period</value>

        [Range(1, 99)]
        [DataMember(Name="MaximumSimultaneousReleases")]
        public int? MaximumSimultaneousReleases { get; set; }

        /// <summary>
        /// Whether to change the account password after an access request is checked in
        /// </summary>
        /// <value>Whether to change the account password after an access request is checked in</value>

        [DataMember(Name="ChangePasswordAfterCheckin")]
        public bool? ChangePasswordAfterCheckin { get; set; }

        /// <summary>
        /// Whether to change the SSH key pair after an access request is checked in
        /// </summary>
        /// <value>Whether to change the SSH key pair after an access request is checked in</value>

        [DataMember(Name="ChangeSshKeyAfterCheckin")]
        public bool? ChangeSshKeyAfterCheckin { get; set; }

        /// <summary>
        /// Whether to allow the password to be released as part of a session access request (RemoteDesktop or Ssh)
        /// </summary>
        /// <value>Whether to allow the password to be released as part of a session access request (RemoteDesktop or Ssh)</value>

        [DataMember(Name="AllowSessionPasswordRelease")]
        public bool? AllowSessionPasswordRelease { get; set; }

        /// <summary>
        /// Whether to allow the SSH key to be released as part of a session access request (Ssh)
        /// </summary>
        /// <value>Whether to allow the SSH key to be released as part of a session access request (Ssh)</value>

        [DataMember(Name="AllowSessionSshKeyRelease")]
        public bool? AllowSessionSshKeyRelease { get; set; }

        /// <summary>
        /// Gets or Sets SessionAccessAccountType
        /// </summary>

        [DataMember(Name="SessionAccessAccountType")]
        public SessionAccessAccountType SessionAccessAccountType { get; set; }

        /// <summary>
        /// Details of session access accounts (Read-only)
        /// </summary>
        /// <value>Details of session access accounts (Read-only)</value>

        [DataMember(Name="SessionAccessAccounts")]
        public List<PolicyAccount> SessionAccessAccounts { get; set; }

        /// <summary>
        /// Whether to terminate active sessions when the access request expires
        /// </summary>
        /// <value>Whether to terminate active sessions when the access request expires</value>

        [DataMember(Name="TerminateExpiredSessions")]
        public bool? TerminateExpiredSessions { get; set; }

        /// <summary>
        /// Whether to allow linked accounts to be requested
        /// </summary>
        /// <value>Whether to allow linked accounts to be requested</value>

        [DataMember(Name="AllowLinkedAccountPasswordAccess")]
        public bool? AllowLinkedAccountPasswordAccess { get; set; }

        /// <summary>
        /// Whether the SSH private key will be encrypted upon check out
        /// </summary>
        /// <value>Whether the SSH private key will be encrypted upon check out</value>

        [DataMember(Name="PassphraseProtectSshKey")]
        public bool? PassphraseProtectSshKey { get; set; }

        /// <summary>
        /// Whether to use the AltLoginName AD attribute for a session connection launch string
        /// </summary>
        /// <value>Whether to use the AltLoginName AD attribute for a session connection launch string</value>

        [DataMember(Name="UseAltLoginName")]
        public bool? UseAltLoginName { get; set; }

        /// <summary>
        /// Whether to filter linked accounts using scope filtering. Only valid when using linked session accounts or linked account password access
        /// </summary>
        /// <value>Whether to filter linked accounts using scope filtering. Only valid when using linked session accounts or linked account password access</value>

        [DataMember(Name="LinkedAccountScopeFiltering")]
        public bool? LinkedAccountScopeFiltering { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessRequestProperties {\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  AllowSimultaneousAccess: ").Append(AllowSimultaneousAccess).Append("\n");
            sb.Append("  MaximumSimultaneousReleases: ").Append(MaximumSimultaneousReleases).Append("\n");
            sb.Append("  ChangePasswordAfterCheckin: ").Append(ChangePasswordAfterCheckin).Append("\n");
            sb.Append("  ChangeSshKeyAfterCheckin: ").Append(ChangeSshKeyAfterCheckin).Append("\n");
            sb.Append("  AllowSessionPasswordRelease: ").Append(AllowSessionPasswordRelease).Append("\n");
            sb.Append("  AllowSessionSshKeyRelease: ").Append(AllowSessionSshKeyRelease).Append("\n");
            sb.Append("  SessionAccessAccountType: ").Append(SessionAccessAccountType).Append("\n");
            sb.Append("  SessionAccessAccounts: ").Append(SessionAccessAccounts).Append("\n");
            sb.Append("  TerminateExpiredSessions: ").Append(TerminateExpiredSessions).Append("\n");
            sb.Append("  AllowLinkedAccountPasswordAccess: ").Append(AllowLinkedAccountPasswordAccess).Append("\n");
            sb.Append("  PassphraseProtectSshKey: ").Append(PassphraseProtectSshKey).Append("\n");
            sb.Append("  UseAltLoginName: ").Append(UseAltLoginName).Append("\n");
            sb.Append("  LinkedAccountScopeFiltering: ").Append(LinkedAccountScopeFiltering).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessRequestProperties)obj);
        }

        /// <summary>
        /// Returns true if AccessRequestProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessRequestProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessRequestProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    AllowSimultaneousAccess == other.AllowSimultaneousAccess ||
                    AllowSimultaneousAccess != null &&
                    AllowSimultaneousAccess.Equals(other.AllowSimultaneousAccess)
                ) && 
                (
                    MaximumSimultaneousReleases == other.MaximumSimultaneousReleases ||
                    MaximumSimultaneousReleases != null &&
                    MaximumSimultaneousReleases.Equals(other.MaximumSimultaneousReleases)
                ) && 
                (
                    ChangePasswordAfterCheckin == other.ChangePasswordAfterCheckin ||
                    ChangePasswordAfterCheckin != null &&
                    ChangePasswordAfterCheckin.Equals(other.ChangePasswordAfterCheckin)
                ) && 
                (
                    ChangeSshKeyAfterCheckin == other.ChangeSshKeyAfterCheckin ||
                    ChangeSshKeyAfterCheckin != null &&
                    ChangeSshKeyAfterCheckin.Equals(other.ChangeSshKeyAfterCheckin)
                ) && 
                (
                    AllowSessionPasswordRelease == other.AllowSessionPasswordRelease ||
                    AllowSessionPasswordRelease != null &&
                    AllowSessionPasswordRelease.Equals(other.AllowSessionPasswordRelease)
                ) && 
                (
                    AllowSessionSshKeyRelease == other.AllowSessionSshKeyRelease ||
                    AllowSessionSshKeyRelease != null &&
                    AllowSessionSshKeyRelease.Equals(other.AllowSessionSshKeyRelease)
                ) && 
                (
                    SessionAccessAccountType == other.SessionAccessAccountType ||
                    SessionAccessAccountType != null &&
                    SessionAccessAccountType.Equals(other.SessionAccessAccountType)
                ) && 
                (
                    SessionAccessAccounts == other.SessionAccessAccounts ||
                    SessionAccessAccounts != null &&
                    SessionAccessAccounts.SequenceEqual(other.SessionAccessAccounts)
                ) && 
                (
                    TerminateExpiredSessions == other.TerminateExpiredSessions ||
                    TerminateExpiredSessions != null &&
                    TerminateExpiredSessions.Equals(other.TerminateExpiredSessions)
                ) && 
                (
                    AllowLinkedAccountPasswordAccess == other.AllowLinkedAccountPasswordAccess ||
                    AllowLinkedAccountPasswordAccess != null &&
                    AllowLinkedAccountPasswordAccess.Equals(other.AllowLinkedAccountPasswordAccess)
                ) && 
                (
                    PassphraseProtectSshKey == other.PassphraseProtectSshKey ||
                    PassphraseProtectSshKey != null &&
                    PassphraseProtectSshKey.Equals(other.PassphraseProtectSshKey)
                ) && 
                (
                    UseAltLoginName == other.UseAltLoginName ||
                    UseAltLoginName != null &&
                    UseAltLoginName.Equals(other.UseAltLoginName)
                ) && 
                (
                    LinkedAccountScopeFiltering == other.LinkedAccountScopeFiltering ||
                    LinkedAccountScopeFiltering != null &&
                    LinkedAccountScopeFiltering.Equals(other.LinkedAccountScopeFiltering)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (AllowSimultaneousAccess != null)
                    hashCode = hashCode * 59 + AllowSimultaneousAccess.GetHashCode();
                    if (MaximumSimultaneousReleases != null)
                    hashCode = hashCode * 59 + MaximumSimultaneousReleases.GetHashCode();
                    if (ChangePasswordAfterCheckin != null)
                    hashCode = hashCode * 59 + ChangePasswordAfterCheckin.GetHashCode();
                    if (ChangeSshKeyAfterCheckin != null)
                    hashCode = hashCode * 59 + ChangeSshKeyAfterCheckin.GetHashCode();
                    if (AllowSessionPasswordRelease != null)
                    hashCode = hashCode * 59 + AllowSessionPasswordRelease.GetHashCode();
                    if (AllowSessionSshKeyRelease != null)
                    hashCode = hashCode * 59 + AllowSessionSshKeyRelease.GetHashCode();
                    if (SessionAccessAccountType != null)
                    hashCode = hashCode * 59 + SessionAccessAccountType.GetHashCode();
                    if (SessionAccessAccounts != null)
                    hashCode = hashCode * 59 + SessionAccessAccounts.GetHashCode();
                    if (TerminateExpiredSessions != null)
                    hashCode = hashCode * 59 + TerminateExpiredSessions.GetHashCode();
                    if (AllowLinkedAccountPasswordAccess != null)
                    hashCode = hashCode * 59 + AllowLinkedAccountPasswordAccess.GetHashCode();
                    if (PassphraseProtectSshKey != null)
                    hashCode = hashCode * 59 + PassphraseProtectSshKey.GetHashCode();
                    if (UseAltLoginName != null)
                    hashCode = hashCode * 59 + UseAltLoginName.GetHashCode();
                    if (LinkedAccountScopeFiltering != null)
                    hashCode = hashCode * 59 + LinkedAccountScopeFiltering.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessRequestProperties left, AccessRequestProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessRequestProperties left, AccessRequestProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
