/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AssetInstallSshKeyParameters : IEquatable<AssetInstallSshKeyParameters>
    { 
        /// <summary>
        /// Gets or Sets SshKeyToInstall
        /// </summary>

        [DataMember(Name="SshKeyToInstall")]
        public AccountSshKey SshKeyToInstall { get; set; }

        /// <summary>
        /// Name of the asset to test the connection with
        /// </summary>
        /// <value>Name of the asset to test the connection with</value>
        [Required]

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// The domain to test directory asset connection against. Forest root will be used if null.
        /// </summary>
        /// <value>The domain to test directory asset connection against. Forest root will be used if null.</value>

        [MaxLength(255)]
        [DataMember(Name="DomainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Network DNS name or IP address used to connect to the machine over the network
        /// </summary>
        /// <value>Network DNS name or IP address used to connect to the machine over the network</value>

        [MaxLength(255)]
        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// Database ID of platform type / version
        /// </summary>
        /// <value>Database ID of platform type / version</value>

        [DataMember(Name="PlatformId")]
        public int? PlatformId { get; set; }

        /// <summary>
        /// Public key of the asset
        /// </summary>
        /// <value>Public key of the asset</value>

        [MaxLength(8000)]
        [DataMember(Name="SshHostKey")]
        public string SshHostKey { get; set; }

        /// <summary>
        /// Whether to auto-accept the ssh host key
        /// </summary>
        /// <value>Whether to auto-accept the ssh host key</value>

        [DataMember(Name="AutoAcceptSshHostKey")]
        public bool? AutoAcceptSshHostKey { get; set; }

        /// <summary>
        /// Whether to enable extended logging for the task
        /// </summary>
        /// <value>Whether to enable extended logging for the task</value>

        [DataMember(Name="ExtendedLogging")]
        public bool? ExtendedLogging { get; set; }

        /// <summary>
        /// List of available domain controllers. If this list is empty then DNS will be used instead.
        /// </summary>
        /// <value>List of available domain controllers. If this list is empty then DNS will be used instead.</value>

        [DataMember(Name="DomainControllers")]
        public List<DomainController> DomainControllers { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>

        [DataMember(Name="ConnectionProperties")]
        public AssetConnectionProperties ConnectionProperties { get; set; }

        /// <summary>
        /// Set of parameters to pass to custom platform script
        /// </summary>
        /// <value>Set of parameters to pass to custom platform script</value>

        [DataMember(Name="CustomScriptParameters")]
        public List<TaskCustomScriptParameter> CustomScriptParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetInstallSshKeyParameters {\n");
            sb.Append("  SshKeyToInstall: ").Append(SshKeyToInstall).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  SshHostKey: ").Append(SshHostKey).Append("\n");
            sb.Append("  AutoAcceptSshHostKey: ").Append(AutoAcceptSshHostKey).Append("\n");
            sb.Append("  ExtendedLogging: ").Append(ExtendedLogging).Append("\n");
            sb.Append("  DomainControllers: ").Append(DomainControllers).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  CustomScriptParameters: ").Append(CustomScriptParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetInstallSshKeyParameters)obj);
        }

        /// <summary>
        /// Returns true if AssetInstallSshKeyParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetInstallSshKeyParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetInstallSshKeyParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SshKeyToInstall == other.SshKeyToInstall ||
                    SshKeyToInstall != null &&
                    SshKeyToInstall.Equals(other.SshKeyToInstall)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    PlatformId == other.PlatformId ||
                    PlatformId != null &&
                    PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    SshHostKey == other.SshHostKey ||
                    SshHostKey != null &&
                    SshHostKey.Equals(other.SshHostKey)
                ) && 
                (
                    AutoAcceptSshHostKey == other.AutoAcceptSshHostKey ||
                    AutoAcceptSshHostKey != null &&
                    AutoAcceptSshHostKey.Equals(other.AutoAcceptSshHostKey)
                ) && 
                (
                    ExtendedLogging == other.ExtendedLogging ||
                    ExtendedLogging != null &&
                    ExtendedLogging.Equals(other.ExtendedLogging)
                ) && 
                (
                    DomainControllers == other.DomainControllers ||
                    DomainControllers != null &&
                    DomainControllers.SequenceEqual(other.DomainControllers)
                ) && 
                (
                    ConnectionProperties == other.ConnectionProperties ||
                    ConnectionProperties != null &&
                    ConnectionProperties.Equals(other.ConnectionProperties)
                ) && 
                (
                    CustomScriptParameters == other.CustomScriptParameters ||
                    CustomScriptParameters != null &&
                    CustomScriptParameters.SequenceEqual(other.CustomScriptParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SshKeyToInstall != null)
                    hashCode = hashCode * 59 + SshKeyToInstall.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (PlatformId != null)
                    hashCode = hashCode * 59 + PlatformId.GetHashCode();
                    if (SshHostKey != null)
                    hashCode = hashCode * 59 + SshHostKey.GetHashCode();
                    if (AutoAcceptSshHostKey != null)
                    hashCode = hashCode * 59 + AutoAcceptSshHostKey.GetHashCode();
                    if (ExtendedLogging != null)
                    hashCode = hashCode * 59 + ExtendedLogging.GetHashCode();
                    if (DomainControllers != null)
                    hashCode = hashCode * 59 + DomainControllers.GetHashCode();
                    if (ConnectionProperties != null)
                    hashCode = hashCode * 59 + ConnectionProperties.GetHashCode();
                    if (CustomScriptParameters != null)
                    hashCode = hashCode * 59 + CustomScriptParameters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetInstallSshKeyParameters left, AssetInstallSshKeyParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetInstallSshKeyParameters left, AssetInstallSshKeyParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
