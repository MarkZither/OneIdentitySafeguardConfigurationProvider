/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an account assigned to a synchronization group
    /// </summary>
    [DataContract]
    public partial class SyncGroupAccount : IEquatable<SyncGroupAccount>
    { 
        /// <summary>
        /// This account will be synchronized at the same time as other accounts in the sync group with the same priority.   Accounts with lower priority will be synchronized first.
        /// </summary>
        /// <value>This account will be synchronized at the same time as other accounts in the sync group with the same priority.   Accounts with lower priority will be synchronized first.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="SyncPriority")]
        public int? SyncPriority { get; set; }

        /// <summary>
        /// Whether the password for this account is currently in sync with the sync group
        /// </summary>
        /// <value>Whether the password for this account is currently in sync with the sync group</value>

        [DataMember(Name="IsSynchronized")]
        public bool? IsSynchronized { get; set; }

        /// <summary>
        /// Gets or Sets TaskProperties
        /// </summary>

        [DataMember(Name="TaskProperties")]
        public SyncAccountTaskProperties TaskProperties { get; set; }

        /// <summary>
        /// The database key of the account (Read-only)
        /// </summary>
        /// <value>The database key of the account (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the account (Read-only)
        /// </summary>
        /// <value>The name of the account (Read-only)</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// A short description of the account. (Read-only)
        /// </summary>
        /// <value>A short description of the account. (Read-only)</value>

        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Whether the account has a password set or not (Read-only)
        /// </summary>
        /// <value>Whether the account has a password set or not (Read-only)</value>

        [DataMember(Name="HasPassword")]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Whether the account has an SSH key assigned or not (Read-only)
        /// </summary>
        /// <value>Whether the account has an SSH key assigned or not (Read-only)</value>

        [DataMember(Name="HasSshKey")]
        public bool? HasSshKey { get; set; }

        /// <summary>
        /// The domain name that the account belongs to. (Read-only)
        /// </summary>
        /// <value>The domain name that the account belongs to. (Read-only)</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// The distinguished name of the account. (Read-only)
        /// </summary>
        /// <value>The distinguished name of the account. (Read-only)</value>

        [DataMember(Name="DistinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// The netbios name of the domain the account is from. (Read-only)
        /// </summary>
        /// <value>The netbios name of the domain the account is from. (Read-only)</value>

        [DataMember(Name="NetBiosName")]
        public string NetBiosName { get; set; }

        /// <summary>
        /// Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)
        /// </summary>
        /// <value>Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)</value>

        [DataMember(Name="Disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>

        [DataMember(Name="AccountType")]
        public AccountType AccountType { get; set; }

        /// <summary>
        /// Whether this account is being used as a service account (Read-only)
        /// </summary>
        /// <value>Whether this account is being used as a service account (Read-only)</value>

        [DataMember(Name="IsServiceAccount")]
        public bool? IsServiceAccount { get; set; }

        /// <summary>
        /// Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately (Read-only)
        /// </summary>
        /// <value>Only notify account owners that password must be changed or account must be restored/suspended rather than running immediately (Read-only)</value>

        [DataMember(Name="NotifyOwnersOnly")]
        public bool? NotifyOwnersOnly { get; set; }

        /// <summary>
        /// Whether an account should be suspended when it is checked in. Will be restored when made available for check out. (Read-only)
        /// </summary>
        /// <value>Whether an account should be suspended when it is checked in. Will be restored when made available for check out. (Read-only)</value>

        [DataMember(Name="SuspendAccountWhenCheckedIn")]
        public bool? SuspendAccountWhenCheckedIn { get; set; }

        /// <summary>
        /// The alternate login name of the account. (Read-only)
        /// </summary>
        /// <value>The alternate login name of the account. (Read-only)</value>

        [DataMember(Name="AltLoginName")]
        public string AltLoginName { get; set; }

        /// <summary>
        /// The number of users linked to the policy account (Read-only)
        /// </summary>
        /// <value>The number of users linked to the policy account (Read-only)</value>

        [DataMember(Name="LinkedUsersCount")]
        public int? LinkedUsersCount { get; set; }

        /// <summary>
        /// Gets or Sets RequestProperties
        /// </summary>

        [DataMember(Name="RequestProperties")]
        public AccountRequestProperties RequestProperties { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>

        [DataMember(Name="Platform")]
        public AccountPlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>

        [DataMember(Name="Asset")]
        public AccountAssetProperties Asset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncGroupAccount {\n");
            sb.Append("  SyncPriority: ").Append(SyncPriority).Append("\n");
            sb.Append("  IsSynchronized: ").Append(IsSynchronized).Append("\n");
            sb.Append("  TaskProperties: ").Append(TaskProperties).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  HasSshKey: ").Append(HasSshKey).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  DistinguishedName: ").Append(DistinguishedName).Append("\n");
            sb.Append("  NetBiosName: ").Append(NetBiosName).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  IsServiceAccount: ").Append(IsServiceAccount).Append("\n");
            sb.Append("  NotifyOwnersOnly: ").Append(NotifyOwnersOnly).Append("\n");
            sb.Append("  SuspendAccountWhenCheckedIn: ").Append(SuspendAccountWhenCheckedIn).Append("\n");
            sb.Append("  AltLoginName: ").Append(AltLoginName).Append("\n");
            sb.Append("  LinkedUsersCount: ").Append(LinkedUsersCount).Append("\n");
            sb.Append("  RequestProperties: ").Append(RequestProperties).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SyncGroupAccount)obj);
        }

        /// <summary>
        /// Returns true if SyncGroupAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of SyncGroupAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncGroupAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SyncPriority == other.SyncPriority ||
                    SyncPriority != null &&
                    SyncPriority.Equals(other.SyncPriority)
                ) && 
                (
                    IsSynchronized == other.IsSynchronized ||
                    IsSynchronized != null &&
                    IsSynchronized.Equals(other.IsSynchronized)
                ) && 
                (
                    TaskProperties == other.TaskProperties ||
                    TaskProperties != null &&
                    TaskProperties.Equals(other.TaskProperties)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HasPassword == other.HasPassword ||
                    HasPassword != null &&
                    HasPassword.Equals(other.HasPassword)
                ) && 
                (
                    HasSshKey == other.HasSshKey ||
                    HasSshKey != null &&
                    HasSshKey.Equals(other.HasSshKey)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    DistinguishedName == other.DistinguishedName ||
                    DistinguishedName != null &&
                    DistinguishedName.Equals(other.DistinguishedName)
                ) && 
                (
                    NetBiosName == other.NetBiosName ||
                    NetBiosName != null &&
                    NetBiosName.Equals(other.NetBiosName)
                ) && 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    AccountType == other.AccountType ||
                    AccountType != null &&
                    AccountType.Equals(other.AccountType)
                ) && 
                (
                    IsServiceAccount == other.IsServiceAccount ||
                    IsServiceAccount != null &&
                    IsServiceAccount.Equals(other.IsServiceAccount)
                ) && 
                (
                    NotifyOwnersOnly == other.NotifyOwnersOnly ||
                    NotifyOwnersOnly != null &&
                    NotifyOwnersOnly.Equals(other.NotifyOwnersOnly)
                ) && 
                (
                    SuspendAccountWhenCheckedIn == other.SuspendAccountWhenCheckedIn ||
                    SuspendAccountWhenCheckedIn != null &&
                    SuspendAccountWhenCheckedIn.Equals(other.SuspendAccountWhenCheckedIn)
                ) && 
                (
                    AltLoginName == other.AltLoginName ||
                    AltLoginName != null &&
                    AltLoginName.Equals(other.AltLoginName)
                ) && 
                (
                    LinkedUsersCount == other.LinkedUsersCount ||
                    LinkedUsersCount != null &&
                    LinkedUsersCount.Equals(other.LinkedUsersCount)
                ) && 
                (
                    RequestProperties == other.RequestProperties ||
                    RequestProperties != null &&
                    RequestProperties.Equals(other.RequestProperties)
                ) && 
                (
                    Platform == other.Platform ||
                    Platform != null &&
                    Platform.Equals(other.Platform)
                ) && 
                (
                    Asset == other.Asset ||
                    Asset != null &&
                    Asset.Equals(other.Asset)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SyncPriority != null)
                    hashCode = hashCode * 59 + SyncPriority.GetHashCode();
                    if (IsSynchronized != null)
                    hashCode = hashCode * 59 + IsSynchronized.GetHashCode();
                    if (TaskProperties != null)
                    hashCode = hashCode * 59 + TaskProperties.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HasPassword != null)
                    hashCode = hashCode * 59 + HasPassword.GetHashCode();
                    if (HasSshKey != null)
                    hashCode = hashCode * 59 + HasSshKey.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (DistinguishedName != null)
                    hashCode = hashCode * 59 + DistinguishedName.GetHashCode();
                    if (NetBiosName != null)
                    hashCode = hashCode * 59 + NetBiosName.GetHashCode();
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (AccountType != null)
                    hashCode = hashCode * 59 + AccountType.GetHashCode();
                    if (IsServiceAccount != null)
                    hashCode = hashCode * 59 + IsServiceAccount.GetHashCode();
                    if (NotifyOwnersOnly != null)
                    hashCode = hashCode * 59 + NotifyOwnersOnly.GetHashCode();
                    if (SuspendAccountWhenCheckedIn != null)
                    hashCode = hashCode * 59 + SuspendAccountWhenCheckedIn.GetHashCode();
                    if (AltLoginName != null)
                    hashCode = hashCode * 59 + AltLoginName.GetHashCode();
                    if (LinkedUsersCount != null)
                    hashCode = hashCode * 59 + LinkedUsersCount.GetHashCode();
                    if (RequestProperties != null)
                    hashCode = hashCode * 59 + RequestProperties.GetHashCode();
                    if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (Asset != null)
                    hashCode = hashCode * 59 + Asset.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SyncGroupAccount left, SyncGroupAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncGroupAccount left, SyncGroupAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
