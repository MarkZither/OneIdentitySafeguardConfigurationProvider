/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EventSubscriberUser : IEquatable<EventSubscriberUser>
    { 
        /// <summary>
        /// Whether this event subscriber is disabled for the current user
        /// </summary>
        /// <value>Whether this event subscriber is disabled for the current user</value>

        [DataMember(Name="Disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Unique key of the subscriber.
        /// </summary>
        /// <value>Unique key of the subscriber.</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Subscriber description
        /// </summary>
        /// <value>Subscriber description</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]

        [DataMember(Name="Type")]
        public EventSubscriberType Type { get; set; }

        /// <summary>
        /// Database ID of user to send notification to (defaults to calling user). Required for EventSubscriberType of Signalr. Supported by EventSubscriberType of Email.
        /// </summary>
        /// <value>Database ID of user to send notification to (defaults to calling user). Required for EventSubscriberType of Signalr. Supported by EventSubscriberType of Email.</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// DisplayName of user to send notification to (Read-only)
        /// </summary>
        /// <value>DisplayName of user to send notification to (Read-only)</value>

        [DataMember(Name="UserDisplayName")]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// Email address user to send notification to (Read-only)
        /// </summary>
        /// <value>Email address user to send notification to (Read-only)</value>

        [DataMember(Name="UserEmailAddress")]
        public string UserEmailAddress { get; set; }

        /// <summary>
        /// Subscriber email address. Supported by EventSubscriberType of Email. Cannot be specified with UserId.
        /// </summary>
        /// <value>Subscriber email address. Supported by EventSubscriberType of Email. Cannot be specified with UserId.</value>

        [MaxLength(255)]
        [DataMember(Name="EmailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets SyslogProperties
        /// </summary>

        [DataMember(Name="SyslogProperties")]
        public SyslogSubscriberProperties SyslogProperties { get; set; }

        /// <summary>
        /// Gets or Sets SnmpProperties
        /// </summary>

        [DataMember(Name="SnmpProperties")]
        public SnmpSubscriberProperties SnmpProperties { get; set; }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>

        [DataMember(Name="ObjectType")]
        public EventObjectType ObjectType { get; set; }

        /// <summary>
        /// Id of the object to subscribe to
        /// </summary>
        /// <value>Id of the object to subscribe to</value>

        [DataMember(Name="ObjectId")]
        public int? ObjectId { get; set; }

        /// <summary>
        /// Whether this event subscriber is manageable by all appliance admins.  The property is read-only for all users except the user that originally created the subscriber.
        /// </summary>
        /// <value>Whether this event subscriber is manageable by all appliance admins.  The property is read-only for all users except the user that originally created the subscriber.</value>

        [DataMember(Name="IsApplianceShared")]
        public bool? IsApplianceShared { get; set; }

        /// <summary>
        /// Will automatically subscribe to all events allowed by the user&#x27;s permissions
        /// </summary>
        /// <value>Will automatically subscribe to all events allowed by the user&#x27;s permissions</value>

        [DataMember(Name="SubscribeToAllEvents")]
        public bool? SubscribeToAllEvents { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Whether this is a built-in event subscriber that cannot be modified (Read-only)
        /// </summary>
        /// <value>Whether this is a built-in event subscriber that cannot be modified (Read-only)</value>

        [DataMember(Name="IsSystemOwned")]
        public bool? IsSystemOwned { get; set; }

        /// <summary>
        /// Whether partition owners are subscribed. If there are no explicit partition owners then users with the AssetAdmin role will be notified. (Read-only)
        /// </summary>
        /// <value>Whether partition owners are subscribed. If there are no explicit partition owners then users with the AssetAdmin role will be notified. (Read-only)</value>

        [DataMember(Name="PartitionOwnerIsSubscribed")]
        public bool? PartitionOwnerIsSubscribed { get; set; }

        /// <summary>
        /// Users with these administrative roles are subscribed. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin (Read-Only)
        /// </summary>
        /// <value>Users with these administrative roles are subscribed. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin (Read-Only)</value>

        [DataMember(Name="AdminRoles")]
        public List<AdminRoleName> AdminRoles { get; set; }

        /// <summary>
        /// Whether workflow users are subscribed (Read-only)
        /// </summary>
        /// <value>Whether workflow users are subscribed (Read-only)</value>

        [DataMember(Name="WorkflowUserIsSubscribed")]
        public bool? WorkflowUserIsSubscribed { get; set; }

        /// <summary>
        /// Events that are subscribed to
        /// </summary>
        /// <value>Events that are subscribed to</value>

        [DataMember(Name="Subscriptions")]
        public List<EventSubscription> Subscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventSubscriberUser {\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserDisplayName: ").Append(UserDisplayName).Append("\n");
            sb.Append("  UserEmailAddress: ").Append(UserEmailAddress).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  SyslogProperties: ").Append(SyslogProperties).Append("\n");
            sb.Append("  SnmpProperties: ").Append(SnmpProperties).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  IsApplianceShared: ").Append(IsApplianceShared).Append("\n");
            sb.Append("  SubscribeToAllEvents: ").Append(SubscribeToAllEvents).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  IsSystemOwned: ").Append(IsSystemOwned).Append("\n");
            sb.Append("  PartitionOwnerIsSubscribed: ").Append(PartitionOwnerIsSubscribed).Append("\n");
            sb.Append("  AdminRoles: ").Append(AdminRoles).Append("\n");
            sb.Append("  WorkflowUserIsSubscribed: ").Append(WorkflowUserIsSubscribed).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EventSubscriberUser)obj);
        }

        /// <summary>
        /// Returns true if EventSubscriberUser instances are equal
        /// </summary>
        /// <param name="other">Instance of EventSubscriberUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventSubscriberUser other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserDisplayName == other.UserDisplayName ||
                    UserDisplayName != null &&
                    UserDisplayName.Equals(other.UserDisplayName)
                ) && 
                (
                    UserEmailAddress == other.UserEmailAddress ||
                    UserEmailAddress != null &&
                    UserEmailAddress.Equals(other.UserEmailAddress)
                ) && 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    SyslogProperties == other.SyslogProperties ||
                    SyslogProperties != null &&
                    SyslogProperties.Equals(other.SyslogProperties)
                ) && 
                (
                    SnmpProperties == other.SnmpProperties ||
                    SnmpProperties != null &&
                    SnmpProperties.Equals(other.SnmpProperties)
                ) && 
                (
                    ObjectType == other.ObjectType ||
                    ObjectType != null &&
                    ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    ObjectId == other.ObjectId ||
                    ObjectId != null &&
                    ObjectId.Equals(other.ObjectId)
                ) && 
                (
                    IsApplianceShared == other.IsApplianceShared ||
                    IsApplianceShared != null &&
                    IsApplianceShared.Equals(other.IsApplianceShared)
                ) && 
                (
                    SubscribeToAllEvents == other.SubscribeToAllEvents ||
                    SubscribeToAllEvents != null &&
                    SubscribeToAllEvents.Equals(other.SubscribeToAllEvents)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    IsSystemOwned == other.IsSystemOwned ||
                    IsSystemOwned != null &&
                    IsSystemOwned.Equals(other.IsSystemOwned)
                ) && 
                (
                    PartitionOwnerIsSubscribed == other.PartitionOwnerIsSubscribed ||
                    PartitionOwnerIsSubscribed != null &&
                    PartitionOwnerIsSubscribed.Equals(other.PartitionOwnerIsSubscribed)
                ) && 
                (
                    AdminRoles == other.AdminRoles ||
                    AdminRoles != null &&
                    AdminRoles.SequenceEqual(other.AdminRoles)
                ) && 
                (
                    WorkflowUserIsSubscribed == other.WorkflowUserIsSubscribed ||
                    WorkflowUserIsSubscribed != null &&
                    WorkflowUserIsSubscribed.Equals(other.WorkflowUserIsSubscribed)
                ) && 
                (
                    Subscriptions == other.Subscriptions ||
                    Subscriptions != null &&
                    Subscriptions.SequenceEqual(other.Subscriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserDisplayName != null)
                    hashCode = hashCode * 59 + UserDisplayName.GetHashCode();
                    if (UserEmailAddress != null)
                    hashCode = hashCode * 59 + UserEmailAddress.GetHashCode();
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (SyslogProperties != null)
                    hashCode = hashCode * 59 + SyslogProperties.GetHashCode();
                    if (SnmpProperties != null)
                    hashCode = hashCode * 59 + SnmpProperties.GetHashCode();
                    if (ObjectType != null)
                    hashCode = hashCode * 59 + ObjectType.GetHashCode();
                    if (ObjectId != null)
                    hashCode = hashCode * 59 + ObjectId.GetHashCode();
                    if (IsApplianceShared != null)
                    hashCode = hashCode * 59 + IsApplianceShared.GetHashCode();
                    if (SubscribeToAllEvents != null)
                    hashCode = hashCode * 59 + SubscribeToAllEvents.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (IsSystemOwned != null)
                    hashCode = hashCode * 59 + IsSystemOwned.GetHashCode();
                    if (PartitionOwnerIsSubscribed != null)
                    hashCode = hashCode * 59 + PartitionOwnerIsSubscribed.GetHashCode();
                    if (AdminRoles != null)
                    hashCode = hashCode * 59 + AdminRoles.GetHashCode();
                    if (WorkflowUserIsSubscribed != null)
                    hashCode = hashCode * 59 + WorkflowUserIsSubscribed.GetHashCode();
                    if (Subscriptions != null)
                    hashCode = hashCode * 59 + Subscriptions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EventSubscriberUser left, EventSubscriberUser right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventSubscriberUser left, EventSubscriberUser right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
