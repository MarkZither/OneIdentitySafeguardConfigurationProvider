/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SyncAccountTaskProperties : IEquatable<SyncAccountTaskProperties>
    { 
        /// <summary>
        /// The date/time of the last password change (Read-only)
        /// </summary>
        /// <value>The date/time of the last password change (Read-only)</value>

        [DataMember(Name="LastPasswordChangeDate")]
        public DateTime? LastPasswordChangeDate { get; set; }

        /// <summary>
        /// The date/time of the last successful password change (Read-only)
        /// </summary>
        /// <value>The date/time of the last successful password change (Read-only)</value>

        [DataMember(Name="LastSuccessPasswordChangeDate")]
        public DateTime? LastSuccessPasswordChangeDate { get; set; }

        /// <summary>
        /// The date/time of the last failed password change (Read-only)
        /// </summary>
        /// <value>The date/time of the last failed password change (Read-only)</value>

        [DataMember(Name="LastFailurePasswordChangeDate")]
        public DateTime? LastFailurePasswordChangeDate { get; set; }

        /// <summary>
        /// The task audit log ID of the last password change (Read-only)
        /// </summary>
        /// <value>The task audit log ID of the last password change (Read-only)</value>

        [DataMember(Name="LastPasswordChangeTaskId")]
        public string LastPasswordChangeTaskId { get; set; }

        /// <summary>
        /// Number of subsequent failed password change attempts since last success (Read-only)
        /// </summary>
        /// <value>Number of subsequent failed password change attempts since last success (Read-only)</value>

        [DataMember(Name="FailedPasswordChangeAttempts")]
        public int? FailedPasswordChangeAttempts { get; set; }

        /// <summary>
        /// The date/time of the next password change, if this account is enabled for automatic password management (Read-only)
        /// </summary>
        /// <value>The date/time of the next password change, if this account is enabled for automatic password management (Read-only)</value>

        [DataMember(Name="NextPasswordChangeDate")]
        public DateTime? NextPasswordChangeDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SyncAccountTaskProperties {\n");
            sb.Append("  LastPasswordChangeDate: ").Append(LastPasswordChangeDate).Append("\n");
            sb.Append("  LastSuccessPasswordChangeDate: ").Append(LastSuccessPasswordChangeDate).Append("\n");
            sb.Append("  LastFailurePasswordChangeDate: ").Append(LastFailurePasswordChangeDate).Append("\n");
            sb.Append("  LastPasswordChangeTaskId: ").Append(LastPasswordChangeTaskId).Append("\n");
            sb.Append("  FailedPasswordChangeAttempts: ").Append(FailedPasswordChangeAttempts).Append("\n");
            sb.Append("  NextPasswordChangeDate: ").Append(NextPasswordChangeDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SyncAccountTaskProperties)obj);
        }

        /// <summary>
        /// Returns true if SyncAccountTaskProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of SyncAccountTaskProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncAccountTaskProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LastPasswordChangeDate == other.LastPasswordChangeDate ||
                    LastPasswordChangeDate != null &&
                    LastPasswordChangeDate.Equals(other.LastPasswordChangeDate)
                ) && 
                (
                    LastSuccessPasswordChangeDate == other.LastSuccessPasswordChangeDate ||
                    LastSuccessPasswordChangeDate != null &&
                    LastSuccessPasswordChangeDate.Equals(other.LastSuccessPasswordChangeDate)
                ) && 
                (
                    LastFailurePasswordChangeDate == other.LastFailurePasswordChangeDate ||
                    LastFailurePasswordChangeDate != null &&
                    LastFailurePasswordChangeDate.Equals(other.LastFailurePasswordChangeDate)
                ) && 
                (
                    LastPasswordChangeTaskId == other.LastPasswordChangeTaskId ||
                    LastPasswordChangeTaskId != null &&
                    LastPasswordChangeTaskId.Equals(other.LastPasswordChangeTaskId)
                ) && 
                (
                    FailedPasswordChangeAttempts == other.FailedPasswordChangeAttempts ||
                    FailedPasswordChangeAttempts != null &&
                    FailedPasswordChangeAttempts.Equals(other.FailedPasswordChangeAttempts)
                ) && 
                (
                    NextPasswordChangeDate == other.NextPasswordChangeDate ||
                    NextPasswordChangeDate != null &&
                    NextPasswordChangeDate.Equals(other.NextPasswordChangeDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LastPasswordChangeDate != null)
                    hashCode = hashCode * 59 + LastPasswordChangeDate.GetHashCode();
                    if (LastSuccessPasswordChangeDate != null)
                    hashCode = hashCode * 59 + LastSuccessPasswordChangeDate.GetHashCode();
                    if (LastFailurePasswordChangeDate != null)
                    hashCode = hashCode * 59 + LastFailurePasswordChangeDate.GetHashCode();
                    if (LastPasswordChangeTaskId != null)
                    hashCode = hashCode * 59 + LastPasswordChangeTaskId.GetHashCode();
                    if (FailedPasswordChangeAttempts != null)
                    hashCode = hashCode * 59 + FailedPasswordChangeAttempts.GetHashCode();
                    if (NextPasswordChangeDate != null)
                    hashCode = hashCode * 59 + NextPasswordChangeDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SyncAccountTaskProperties left, SyncAccountTaskProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SyncAccountTaskProperties left, SyncAccountTaskProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
