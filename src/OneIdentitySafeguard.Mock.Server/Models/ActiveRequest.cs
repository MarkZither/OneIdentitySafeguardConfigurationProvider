/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ActiveRequest : IEquatable<ActiveRequest>
    { 
        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>

        [DataMember(Name="RequestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// Gets or Sets IsEmergency
        /// </summary>

        [DataMember(Name="IsEmergency")]
        public bool? IsEmergency { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFor
        /// </summary>

        [DataMember(Name="RequestedFor")]
        public DateTime? RequestedFor { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresOn
        /// </summary>

        [DataMember(Name="ExpiresOn")]
        public DateTime? ExpiresOn { get; set; }

        /// <summary>
        /// Gets or Sets RequestAvailability
        /// </summary>

        [DataMember(Name="RequestAvailability")]
        public List<DateTimeInterval> RequestAvailability { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="State")]
        public AccessRequestState State { get; set; }

        /// <summary>
        /// Gets or Sets StateChangedOn
        /// </summary>

        [DataMember(Name="StateChangedOn")]
        public DateTime? StateChangedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiveRequest {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  IsEmergency: ").Append(IsEmergency).Append("\n");
            sb.Append("  RequestedFor: ").Append(RequestedFor).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  RequestAvailability: ").Append(RequestAvailability).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateChangedOn: ").Append(StateChangedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActiveRequest)obj);
        }

        /// <summary>
        /// Returns true if ActiveRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ActiveRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiveRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestId == other.RequestId ||
                    RequestId != null &&
                    RequestId.Equals(other.RequestId)
                ) && 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    IsEmergency == other.IsEmergency ||
                    IsEmergency != null &&
                    IsEmergency.Equals(other.IsEmergency)
                ) && 
                (
                    RequestedFor == other.RequestedFor ||
                    RequestedFor != null &&
                    RequestedFor.Equals(other.RequestedFor)
                ) && 
                (
                    ExpiresOn == other.ExpiresOn ||
                    ExpiresOn != null &&
                    ExpiresOn.Equals(other.ExpiresOn)
                ) && 
                (
                    RequestAvailability == other.RequestAvailability ||
                    RequestAvailability != null &&
                    RequestAvailability.SequenceEqual(other.RequestAvailability)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    StateChangedOn == other.StateChangedOn ||
                    StateChangedOn != null &&
                    StateChangedOn.Equals(other.StateChangedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestId != null)
                    hashCode = hashCode * 59 + RequestId.GetHashCode();
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (IsEmergency != null)
                    hashCode = hashCode * 59 + IsEmergency.GetHashCode();
                    if (RequestedFor != null)
                    hashCode = hashCode * 59 + RequestedFor.GetHashCode();
                    if (ExpiresOn != null)
                    hashCode = hashCode * 59 + ExpiresOn.GetHashCode();
                    if (RequestAvailability != null)
                    hashCode = hashCode * 59 + RequestAvailability.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (StateChangedOn != null)
                    hashCode = hashCode * 59 + StateChangedOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActiveRequest left, ActiveRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActiveRequest left, ActiveRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
