/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Attribute that can be set on a directory entry
    /// </summary>
    [DataContract]
    public partial class DirectorySchemaAttribute : IEquatable<DirectorySchemaAttribute>
    { 
        /// <summary>
        /// The name of the schame attribute
        /// </summary>
        /// <value>The name of the schame attribute</value>

        [DataMember(Name="LdapDisplayName")]
        public string LdapDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets AttributeSyntax
        /// </summary>

        [DataMember(Name="AttributeSyntax")]
        public DirectorySchemaSyntaxType AttributeSyntax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectorySchemaAttribute {\n");
            sb.Append("  LdapDisplayName: ").Append(LdapDisplayName).Append("\n");
            sb.Append("  AttributeSyntax: ").Append(AttributeSyntax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DirectorySchemaAttribute)obj);
        }

        /// <summary>
        /// Returns true if DirectorySchemaAttribute instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectorySchemaAttribute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectorySchemaAttribute other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LdapDisplayName == other.LdapDisplayName ||
                    LdapDisplayName != null &&
                    LdapDisplayName.Equals(other.LdapDisplayName)
                ) && 
                (
                    AttributeSyntax == other.AttributeSyntax ||
                    AttributeSyntax != null &&
                    AttributeSyntax.Equals(other.AttributeSyntax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LdapDisplayName != null)
                    hashCode = hashCode * 59 + LdapDisplayName.GetHashCode();
                    if (AttributeSyntax != null)
                    hashCode = hashCode * 59 + AttributeSyntax.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DirectorySchemaAttribute left, DirectorySchemaAttribute right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectorySchemaAttribute left, DirectorySchemaAttribute right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
