/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a network subnet in CIDR notation e.g., 192.168.1.0/24
    /// </summary>
    [DataContract]
    public partial class NetworkSubnet : IEquatable<NetworkSubnet>
    { 
        /// <summary>
        /// Gets or Sets AddressFamily
        /// </summary>
        [Required]

        [DataMember(Name="AddressFamily")]
        public NetworkAddressFamily AddressFamily { get; set; }

        /// <summary>
        /// Address of the network e.g., 192.168.1.0 or 2001:0db8:0123:4567:89ab:cdef:1234:5678
        /// </summary>
        /// <value>Address of the network e.g., 192.168.1.0 or 2001:0db8:0123:4567:89ab:cdef:1234:5678</value>
        [Required]

        [MaxLength(45)]
        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// The length of the network prefix e.g., 24
        /// </summary>
        /// <value>The length of the network prefix e.g., 24</value>
        [Required]

        [DataMember(Name="NetworkPrefixLength")]
        public int? NetworkPrefixLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkSubnet {\n");
            sb.Append("  AddressFamily: ").Append(AddressFamily).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  NetworkPrefixLength: ").Append(NetworkPrefixLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NetworkSubnet)obj);
        }

        /// <summary>
        /// Returns true if NetworkSubnet instances are equal
        /// </summary>
        /// <param name="other">Instance of NetworkSubnet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkSubnet other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddressFamily == other.AddressFamily ||
                    AddressFamily != null &&
                    AddressFamily.Equals(other.AddressFamily)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    NetworkPrefixLength == other.NetworkPrefixLength ||
                    NetworkPrefixLength != null &&
                    NetworkPrefixLength.Equals(other.NetworkPrefixLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddressFamily != null)
                    hashCode = hashCode * 59 + AddressFamily.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (NetworkPrefixLength != null)
                    hashCode = hashCode * 59 + NetworkPrefixLength.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NetworkSubnet left, NetworkSubnet right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NetworkSubnet left, NetworkSubnet right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
