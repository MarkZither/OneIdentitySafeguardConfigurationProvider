/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomPartitionDiscoverAccountsParameters : IEquatable<CustomPartitionDiscoverAccountsParameters>
    { 
        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [Required]

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Friendly name used to identify this rule
        /// </summary>
        /// <value>Friendly name used to identify this rule</value>
        [Required]

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// If selected, accounts found through discovery will be automatically taken under management.
        /// </summary>
        /// <value>If selected, accounts found through discovery will be automatically taken under management.</value>

        [DataMember(Name="AutoManageDiscoveredAccounts")]
        public bool? AutoManageDiscoveredAccounts { get; set; }

        /// <summary>
        /// Gets or Sets AccountTemplate
        /// </summary>

        [DataMember(Name="AccountTemplate")]
        public AccountTemplate AccountTemplate { get; set; }

        /// <summary>
        /// Gets or Sets UnixAccountDiscoveryProperties
        /// </summary>

        [DataMember(Name="UnixAccountDiscoveryProperties")]
        public UnixAccountDiscoveryProperties UnixAccountDiscoveryProperties { get; set; }

        /// <summary>
        /// Gets or Sets WindowsAccountDiscoveryProperties
        /// </summary>

        [DataMember(Name="WindowsAccountDiscoveryProperties")]
        public WindowsAccountDiscoveryProperties WindowsAccountDiscoveryProperties { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryAccountDiscoveryProperties
        /// </summary>

        [DataMember(Name="DirectoryAccountDiscoveryProperties")]
        public DirectoryAccountDiscoveryProperties DirectoryAccountDiscoveryProperties { get; set; }

        /// <summary>
        /// Gets or Sets StarlingConnectAccountDiscoveryProperties
        /// </summary>

        [DataMember(Name="StarlingConnectAccountDiscoveryProperties")]
        public StarlingConnectAccountDiscoveryProperties StarlingConnectAccountDiscoveryProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomPartitionDiscoverAccountsParameters {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AutoManageDiscoveredAccounts: ").Append(AutoManageDiscoveredAccounts).Append("\n");
            sb.Append("  AccountTemplate: ").Append(AccountTemplate).Append("\n");
            sb.Append("  UnixAccountDiscoveryProperties: ").Append(UnixAccountDiscoveryProperties).Append("\n");
            sb.Append("  WindowsAccountDiscoveryProperties: ").Append(WindowsAccountDiscoveryProperties).Append("\n");
            sb.Append("  DirectoryAccountDiscoveryProperties: ").Append(DirectoryAccountDiscoveryProperties).Append("\n");
            sb.Append("  StarlingConnectAccountDiscoveryProperties: ").Append(StarlingConnectAccountDiscoveryProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomPartitionDiscoverAccountsParameters)obj);
        }

        /// <summary>
        /// Returns true if CustomPartitionDiscoverAccountsParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomPartitionDiscoverAccountsParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomPartitionDiscoverAccountsParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AutoManageDiscoveredAccounts == other.AutoManageDiscoveredAccounts ||
                    AutoManageDiscoveredAccounts != null &&
                    AutoManageDiscoveredAccounts.Equals(other.AutoManageDiscoveredAccounts)
                ) && 
                (
                    AccountTemplate == other.AccountTemplate ||
                    AccountTemplate != null &&
                    AccountTemplate.Equals(other.AccountTemplate)
                ) && 
                (
                    UnixAccountDiscoveryProperties == other.UnixAccountDiscoveryProperties ||
                    UnixAccountDiscoveryProperties != null &&
                    UnixAccountDiscoveryProperties.Equals(other.UnixAccountDiscoveryProperties)
                ) && 
                (
                    WindowsAccountDiscoveryProperties == other.WindowsAccountDiscoveryProperties ||
                    WindowsAccountDiscoveryProperties != null &&
                    WindowsAccountDiscoveryProperties.Equals(other.WindowsAccountDiscoveryProperties)
                ) && 
                (
                    DirectoryAccountDiscoveryProperties == other.DirectoryAccountDiscoveryProperties ||
                    DirectoryAccountDiscoveryProperties != null &&
                    DirectoryAccountDiscoveryProperties.Equals(other.DirectoryAccountDiscoveryProperties)
                ) && 
                (
                    StarlingConnectAccountDiscoveryProperties == other.StarlingConnectAccountDiscoveryProperties ||
                    StarlingConnectAccountDiscoveryProperties != null &&
                    StarlingConnectAccountDiscoveryProperties.Equals(other.StarlingConnectAccountDiscoveryProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AutoManageDiscoveredAccounts != null)
                    hashCode = hashCode * 59 + AutoManageDiscoveredAccounts.GetHashCode();
                    if (AccountTemplate != null)
                    hashCode = hashCode * 59 + AccountTemplate.GetHashCode();
                    if (UnixAccountDiscoveryProperties != null)
                    hashCode = hashCode * 59 + UnixAccountDiscoveryProperties.GetHashCode();
                    if (WindowsAccountDiscoveryProperties != null)
                    hashCode = hashCode * 59 + WindowsAccountDiscoveryProperties.GetHashCode();
                    if (DirectoryAccountDiscoveryProperties != null)
                    hashCode = hashCode * 59 + DirectoryAccountDiscoveryProperties.GetHashCode();
                    if (StarlingConnectAccountDiscoveryProperties != null)
                    hashCode = hashCode * 59 + StarlingConnectAccountDiscoveryProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomPartitionDiscoverAccountsParameters left, CustomPartitionDiscoverAccountsParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomPartitionDiscoverAccountsParameters left, CustomPartitionDiscoverAccountsParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
