/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DiscoverSshHostKeyParameters : IEquatable<DiscoverSshHostKeyParameters>
    { 
        /// <summary>
        /// The database ID of the platform of the system
        /// </summary>
        /// <value>The database ID of the platform of the system</value>

        [DataMember(Name="PlatformId")]
        public int? PlatformId { get; set; }

        /// <summary>
        /// Name of the asset to test the connection with
        /// </summary>
        /// <value>Name of the asset to test the connection with</value>
        [Required]

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Network DNS name or IP address used to connect to the machine over the network.
        /// </summary>
        /// <value>Network DNS name or IP address used to connect to the machine over the network.</value>
        [Required]

        [MaxLength(255)]
        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// Port used by SSH to login to the machine
        /// </summary>
        /// <value>Port used by SSH to login to the machine</value>

        [Range(1, 2147483647)]
        [DataMember(Name="Port")]
        public int? Port { get; set; }

        /// <summary>
        /// Set of parameters to pass to custom platform script
        /// </summary>
        /// <value>Set of parameters to pass to custom platform script</value>

        [DataMember(Name="CustomScriptParameters")]
        public List<TaskCustomScriptParameter> CustomScriptParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoverSshHostKeyParameters {\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  CustomScriptParameters: ").Append(CustomScriptParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoverSshHostKeyParameters)obj);
        }

        /// <summary>
        /// Returns true if DiscoverSshHostKeyParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoverSshHostKeyParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoverSshHostKeyParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PlatformId == other.PlatformId ||
                    PlatformId != null &&
                    PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    CustomScriptParameters == other.CustomScriptParameters ||
                    CustomScriptParameters != null &&
                    CustomScriptParameters.SequenceEqual(other.CustomScriptParameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PlatformId != null)
                    hashCode = hashCode * 59 + PlatformId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (CustomScriptParameters != null)
                    hashCode = hashCode * 59 + CustomScriptParameters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoverSshHostKeyParameters left, DiscoverSshHostKeyParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoverSshHostKeyParameters left, DiscoverSshHostKeyParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
