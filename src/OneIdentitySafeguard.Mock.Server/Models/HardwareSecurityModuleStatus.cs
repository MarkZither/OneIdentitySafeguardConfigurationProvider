/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HardwareSecurityModuleStatus : IEquatable<HardwareSecurityModuleStatus>
    { 
        /// <summary>
        /// Gets or Sets LastAccessDate
        /// </summary>

        [DataMember(Name="LastAccessDate")]
        public DateTime? LastAccessDate { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>

        [DataMember(Name="Enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Configuration
        /// </summary>

        [DataMember(Name="Configuration")]
        public HardwareSecurityModuleConfiguration Configuration { get; set; }

        /// <summary>
        /// Gets or Sets HealthStatus
        /// </summary>

        [DataMember(Name="HealthStatus")]
        public string HealthStatus { get; set; }

        /// <summary>
        /// Gets or Sets MasterKeyLabel
        /// </summary>

        [DataMember(Name="MasterKeyLabel")]
        public string MasterKeyLabel { get; set; }

        /// <summary>
        /// Gets or Sets TransitionToErrorState
        /// </summary>

        [DataMember(Name="TransitionToErrorState")]
        public bool? TransitionToErrorState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HardwareSecurityModuleStatus {\n");
            sb.Append("  LastAccessDate: ").Append(LastAccessDate).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Configuration: ").Append(Configuration).Append("\n");
            sb.Append("  HealthStatus: ").Append(HealthStatus).Append("\n");
            sb.Append("  MasterKeyLabel: ").Append(MasterKeyLabel).Append("\n");
            sb.Append("  TransitionToErrorState: ").Append(TransitionToErrorState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HardwareSecurityModuleStatus)obj);
        }

        /// <summary>
        /// Returns true if HardwareSecurityModuleStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of HardwareSecurityModuleStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HardwareSecurityModuleStatus other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LastAccessDate == other.LastAccessDate ||
                    LastAccessDate != null &&
                    LastAccessDate.Equals(other.LastAccessDate)
                ) && 
                (
                    Enabled == other.Enabled ||
                    Enabled != null &&
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    Configuration == other.Configuration ||
                    Configuration != null &&
                    Configuration.Equals(other.Configuration)
                ) && 
                (
                    HealthStatus == other.HealthStatus ||
                    HealthStatus != null &&
                    HealthStatus.Equals(other.HealthStatus)
                ) && 
                (
                    MasterKeyLabel == other.MasterKeyLabel ||
                    MasterKeyLabel != null &&
                    MasterKeyLabel.Equals(other.MasterKeyLabel)
                ) && 
                (
                    TransitionToErrorState == other.TransitionToErrorState ||
                    TransitionToErrorState != null &&
                    TransitionToErrorState.Equals(other.TransitionToErrorState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LastAccessDate != null)
                    hashCode = hashCode * 59 + LastAccessDate.GetHashCode();
                    if (Enabled != null)
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (Configuration != null)
                    hashCode = hashCode * 59 + Configuration.GetHashCode();
                    if (HealthStatus != null)
                    hashCode = hashCode * 59 + HealthStatus.GetHashCode();
                    if (MasterKeyLabel != null)
                    hashCode = hashCode * 59 + MasterKeyLabel.GetHashCode();
                    if (TransitionToErrorState != null)
                    hashCode = hashCode * 59 + TransitionToErrorState.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HardwareSecurityModuleStatus left, HardwareSecurityModuleStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HardwareSecurityModuleStatus left, HardwareSecurityModuleStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
