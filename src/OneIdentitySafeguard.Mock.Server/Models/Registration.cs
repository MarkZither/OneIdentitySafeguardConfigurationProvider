/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an application to application registration.
    /// </summary>
    [DataContract]
    public partial class Registration : IEquatable<Registration>
    { 
        /// <summary>
        /// The registration&#x27;s unique id.  This is a system-assigned value that is generated when a registration is first created. (Read-only)
        /// </summary>
        /// <value>The registration&#x27;s unique id.  This is a system-assigned value that is generated when a registration is first created. (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The applications&#x27;s name.
        /// </summary>
        /// <value>The applications&#x27;s name.</value>
        [Required]

        [MaxLength(255)]
        [DataMember(Name="AppName")]
        public string AppName { get; set; }

        /// <summary>
        /// Description of the application
        /// </summary>
        /// <value>Description of the application</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// A flag indicating whether or not the application registration is disabled. Will be disabled if certificate user is disabled.
        /// </summary>
        /// <value>A flag indicating whether or not the application registration is disabled. Will be disabled if certificate user is disabled.</value>

        [DataMember(Name="Disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// A flag indicating whether or not the application self discovery is enabled for the cert user.
        /// </summary>
        /// <value>A flag indicating whether or not the application self discovery is enabled for the cert user.</value>

        [DataMember(Name="VisibleToCertificateUsers")]
        public bool? VisibleToCertificateUsers { get; set; }

        /// <summary>
        /// The id of the certificate user associated with the registration.
        /// </summary>
        /// <value>The id of the certificate user associated with the registration.</value>

        [DataMember(Name="CertificateUserId")]
        public int? CertificateUserId { get; set; }

        /// <summary>
        /// Thumbprint associated with the certificate user.
        /// </summary>
        /// <value>Thumbprint associated with the certificate user.</value>

        [DataMember(Name="CertificateUserThumbPrint")]
        public string CertificateUserThumbPrint { get; set; }

        /// <summary>
        /// The accounts for which the credentials can be retrieved.
        /// </summary>
        /// <value>The accounts for which the credentials can be retrieved.</value>

        [DataMember(Name="CertificateUser")]
        public string CertificateUser { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Registration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  VisibleToCertificateUsers: ").Append(VisibleToCertificateUsers).Append("\n");
            sb.Append("  CertificateUserId: ").Append(CertificateUserId).Append("\n");
            sb.Append("  CertificateUserThumbPrint: ").Append(CertificateUserThumbPrint).Append("\n");
            sb.Append("  CertificateUser: ").Append(CertificateUser).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Registration)obj);
        }

        /// <summary>
        /// Returns true if Registration instances are equal
        /// </summary>
        /// <param name="other">Instance of Registration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Registration other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AppName == other.AppName ||
                    AppName != null &&
                    AppName.Equals(other.AppName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    VisibleToCertificateUsers == other.VisibleToCertificateUsers ||
                    VisibleToCertificateUsers != null &&
                    VisibleToCertificateUsers.Equals(other.VisibleToCertificateUsers)
                ) && 
                (
                    CertificateUserId == other.CertificateUserId ||
                    CertificateUserId != null &&
                    CertificateUserId.Equals(other.CertificateUserId)
                ) && 
                (
                    CertificateUserThumbPrint == other.CertificateUserThumbPrint ||
                    CertificateUserThumbPrint != null &&
                    CertificateUserThumbPrint.Equals(other.CertificateUserThumbPrint)
                ) && 
                (
                    CertificateUser == other.CertificateUser ||
                    CertificateUser != null &&
                    CertificateUser.Equals(other.CertificateUser)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AppName != null)
                    hashCode = hashCode * 59 + AppName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (VisibleToCertificateUsers != null)
                    hashCode = hashCode * 59 + VisibleToCertificateUsers.GetHashCode();
                    if (CertificateUserId != null)
                    hashCode = hashCode * 59 + CertificateUserId.GetHashCode();
                    if (CertificateUserThumbPrint != null)
                    hashCode = hashCode * 59 + CertificateUserThumbPrint.GetHashCode();
                    if (CertificateUser != null)
                    hashCode = hashCode * 59 + CertificateUser.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Registration left, Registration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Registration left, Registration right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
