/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Roles in Pangaea are made up of a members, security scopes, and permissions.  * Members consist of users or groups.  * Permissions determine access to resources on the appliance.  * Security scopes determine access to assets such as assets and accounts. This access to assets is managed via policies (i.e. groups of settings)
    /// </summary>
    [DataContract]
    public partial class Role : IEquatable<Role>
    { 
        /// <summary>
        /// The database ID of the role (Read-only)
        /// </summary>
        /// <value>The database ID of the role (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the role
        /// </summary>
        /// <value>The name of the role</value>
        [Required]

        [StringLength(50, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The priority of this role. Used for resolving permission conflicts.  Set to 0 to add as the lowest priority role. Max role priority plus 1.
        /// </summary>
        /// <value>The priority of this role. Used for resolving permission conflicts.  Set to 0 to add as the lowest priority role. Max role priority plus 1.</value>

        [DataMember(Name="Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Description of the role
        /// </summary>
        /// <value>Description of the role</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Date/time after which the associated policy/role will cease to be active
        /// </summary>
        /// <value>Date/time after which the associated policy/role will cease to be active</value>

        [DataMember(Name="ExpirationDate")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Whether this policy is expired.  (Read-only)
        /// </summary>
        /// <value>Whether this policy is expired.  (Read-only)</value>

        [DataMember(Name="IsExpired")]
        public bool? IsExpired { get; set; }

        /// <summary>
        /// Whether this role has policies that are expired.  (Read-only)
        /// </summary>
        /// <value>Whether this role has policies that are expired.  (Read-only)</value>

        [DataMember(Name="HasExpiredPolicies")]
        public bool? HasExpiredPolicies { get; set; }

        /// <summary>
        /// Whether this role has policies that have invalid connection policies.  (Read-only)
        /// </summary>
        /// <value>Whether this role has policies that have invalid connection policies.  (Read-only)</value>

        [DataMember(Name="HasInvalidPolicies")]
        public bool? HasInvalidPolicies { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Number of users that are a member of this role (Read-only)
        /// </summary>
        /// <value>Number of users that are a member of this role (Read-only)</value>

        [DataMember(Name="UserCount")]
        public int? UserCount { get; set; }

        /// <summary>
        /// Number of accounts that have policies belonging to this role (Read-only)
        /// </summary>
        /// <value>Number of accounts that have policies belonging to this role (Read-only)</value>

        [DataMember(Name="AccountCount")]
        public int? AccountCount { get; set; }

        /// <summary>
        /// Number of assets that have policies belonging to this role (Read-only)
        /// </summary>
        /// <value>Number of assets that have policies belonging to this role (Read-only)</value>

        [DataMember(Name="AssetCount")]
        public int? AssetCount { get; set; }

        /// <summary>
        /// Number of policies belonging to this role (Read-only)
        /// </summary>
        /// <value>Number of policies belonging to this role (Read-only)</value>

        [DataMember(Name="PolicyCount")]
        public int? PolicyCount { get; set; }

        /// <summary>
        /// Gets or Sets HourlyRestrictionProperties
        /// </summary>

        [DataMember(Name="HourlyRestrictionProperties")]
        public HourlyRestrictionProperties HourlyRestrictionProperties { get; set; }

        /// <summary>
        /// Identities that are members of this role. Requesters for password policies assigned to this role.
        /// </summary>
        /// <value>Identities that are members of this role. Requesters for password policies assigned to this role.</value>

        [DataMember(Name="Members")]
        public List<Identity> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Role {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  HasExpiredPolicies: ").Append(HasExpiredPolicies).Append("\n");
            sb.Append("  HasInvalidPolicies: ").Append(HasInvalidPolicies).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  AccountCount: ").Append(AccountCount).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  PolicyCount: ").Append(PolicyCount).Append("\n");
            sb.Append("  HourlyRestrictionProperties: ").Append(HourlyRestrictionProperties).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Role)obj);
        }

        /// <summary>
        /// Returns true if Role instances are equal
        /// </summary>
        /// <param name="other">Instance of Role to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Role other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    IsExpired == other.IsExpired ||
                    IsExpired != null &&
                    IsExpired.Equals(other.IsExpired)
                ) && 
                (
                    HasExpiredPolicies == other.HasExpiredPolicies ||
                    HasExpiredPolicies != null &&
                    HasExpiredPolicies.Equals(other.HasExpiredPolicies)
                ) && 
                (
                    HasInvalidPolicies == other.HasInvalidPolicies ||
                    HasInvalidPolicies != null &&
                    HasInvalidPolicies.Equals(other.HasInvalidPolicies)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    UserCount == other.UserCount ||
                    UserCount != null &&
                    UserCount.Equals(other.UserCount)
                ) && 
                (
                    AccountCount == other.AccountCount ||
                    AccountCount != null &&
                    AccountCount.Equals(other.AccountCount)
                ) && 
                (
                    AssetCount == other.AssetCount ||
                    AssetCount != null &&
                    AssetCount.Equals(other.AssetCount)
                ) && 
                (
                    PolicyCount == other.PolicyCount ||
                    PolicyCount != null &&
                    PolicyCount.Equals(other.PolicyCount)
                ) && 
                (
                    HourlyRestrictionProperties == other.HourlyRestrictionProperties ||
                    HourlyRestrictionProperties != null &&
                    HourlyRestrictionProperties.Equals(other.HourlyRestrictionProperties)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    Members.SequenceEqual(other.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (IsExpired != null)
                    hashCode = hashCode * 59 + IsExpired.GetHashCode();
                    if (HasExpiredPolicies != null)
                    hashCode = hashCode * 59 + HasExpiredPolicies.GetHashCode();
                    if (HasInvalidPolicies != null)
                    hashCode = hashCode * 59 + HasInvalidPolicies.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (UserCount != null)
                    hashCode = hashCode * 59 + UserCount.GetHashCode();
                    if (AccountCount != null)
                    hashCode = hashCode * 59 + AccountCount.GetHashCode();
                    if (AssetCount != null)
                    hashCode = hashCode * 59 + AssetCount.GetHashCode();
                    if (PolicyCount != null)
                    hashCode = hashCode * 59 + PolicyCount.GetHashCode();
                    if (HourlyRestrictionProperties != null)
                    hashCode = hashCode * 59 + HourlyRestrictionProperties.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Role left, Role right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Role left, Role right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
