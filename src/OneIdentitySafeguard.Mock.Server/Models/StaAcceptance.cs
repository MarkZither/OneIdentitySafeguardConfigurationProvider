/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StaAcceptance : IEquatable<StaAcceptance>
    { 
        /// <summary>
        /// true if STA has been accepted, false otherwise
        /// </summary>
        /// <value>true if STA has been accepted, false otherwise</value>

        [DataMember(Name="Accepted")]
        public bool? Accepted { get; set; }

        /// <summary>
        /// The date the user accepted the STA
        /// </summary>
        /// <value>The date the user accepted the STA</value>

        [DataMember(Name="TimeOfAcceptance")]
        public DateTime? TimeOfAcceptance { get; set; }

        /// <summary>
        /// The ID of the User that accepted the STA
        /// </summary>
        /// <value>The ID of the User that accepted the STA</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// The Display Name of the user that accepted the STA
        /// </summary>
        /// <value>The Display Name of the user that accepted the STA</value>

        [DataMember(Name="UserDisplayName")]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StaAcceptance {\n");
            sb.Append("  Accepted: ").Append(Accepted).Append("\n");
            sb.Append("  TimeOfAcceptance: ").Append(TimeOfAcceptance).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserDisplayName: ").Append(UserDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StaAcceptance)obj);
        }

        /// <summary>
        /// Returns true if StaAcceptance instances are equal
        /// </summary>
        /// <param name="other">Instance of StaAcceptance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StaAcceptance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Accepted == other.Accepted ||
                    Accepted != null &&
                    Accepted.Equals(other.Accepted)
                ) && 
                (
                    TimeOfAcceptance == other.TimeOfAcceptance ||
                    TimeOfAcceptance != null &&
                    TimeOfAcceptance.Equals(other.TimeOfAcceptance)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserDisplayName == other.UserDisplayName ||
                    UserDisplayName != null &&
                    UserDisplayName.Equals(other.UserDisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Accepted != null)
                    hashCode = hashCode * 59 + Accepted.GetHashCode();
                    if (TimeOfAcceptance != null)
                    hashCode = hashCode * 59 + TimeOfAcceptance.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserDisplayName != null)
                    hashCode = hashCode * 59 + UserDisplayName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StaAcceptance left, StaAcceptance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StaAcceptance left, StaAcceptance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
