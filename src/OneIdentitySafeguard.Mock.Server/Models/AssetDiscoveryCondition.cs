/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Conditions to determine which assets to add to database
    /// </summary>
    [DataContract]
    public partial class AssetDiscoveryCondition : IEquatable<AssetDiscoveryCondition>
    { 
        /// <summary>
        /// Gets or Sets ConditionType
        /// </summary>
        [Required]

        [DataMember(Name="ConditionType")]
        public AssetDiscoveryConditionType ConditionType { get; set; }

        /// <summary>
        /// Optional AD group to restrict Active Directory search to
        /// </summary>
        /// <value>Optional AD group to restrict Active Directory search to</value>

        [DataMember(Name="AdGroups")]
        public List<string> AdGroups { get; set; }

        /// <summary>
        /// Custom LDAP filter to search for computer objects (Only available for Directory DiscoveryType)
        /// </summary>
        /// <value>Custom LDAP filter to search for computer objects (Only available for Directory DiscoveryType)</value>

        [StringLength(1024, MinimumLength=1)]
        [DataMember(Name="LdapFilter")]
        public string LdapFilter { get; set; }

        /// <summary>
        /// Set of property constraints to match against discovered assets
        /// </summary>
        /// <value>Set of property constraints to match against discovered assets</value>

        [DataMember(Name="PropertyConstraints")]
        public List<AssetDiscoveryPropertyConstraint> PropertyConstraints { get; set; }

        /// <summary>
        /// Search base for computer objects (Only available for Directory DiscoveryType)
        /// </summary>
        /// <value>Search base for computer objects (Only available for Directory DiscoveryType)</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="SearchBase")]
        public string SearchBase { get; set; }

        /// <summary>
        /// Gets or Sets SearchScope
        /// </summary>

        [DataMember(Name="SearchScope")]
        public DiscoverySearchScope SearchScope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetDiscoveryCondition {\n");
            sb.Append("  ConditionType: ").Append(ConditionType).Append("\n");
            sb.Append("  AdGroups: ").Append(AdGroups).Append("\n");
            sb.Append("  LdapFilter: ").Append(LdapFilter).Append("\n");
            sb.Append("  PropertyConstraints: ").Append(PropertyConstraints).Append("\n");
            sb.Append("  SearchBase: ").Append(SearchBase).Append("\n");
            sb.Append("  SearchScope: ").Append(SearchScope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetDiscoveryCondition)obj);
        }

        /// <summary>
        /// Returns true if AssetDiscoveryCondition instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetDiscoveryCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetDiscoveryCondition other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConditionType == other.ConditionType ||
                    ConditionType != null &&
                    ConditionType.Equals(other.ConditionType)
                ) && 
                (
                    AdGroups == other.AdGroups ||
                    AdGroups != null &&
                    AdGroups.SequenceEqual(other.AdGroups)
                ) && 
                (
                    LdapFilter == other.LdapFilter ||
                    LdapFilter != null &&
                    LdapFilter.Equals(other.LdapFilter)
                ) && 
                (
                    PropertyConstraints == other.PropertyConstraints ||
                    PropertyConstraints != null &&
                    PropertyConstraints.SequenceEqual(other.PropertyConstraints)
                ) && 
                (
                    SearchBase == other.SearchBase ||
                    SearchBase != null &&
                    SearchBase.Equals(other.SearchBase)
                ) && 
                (
                    SearchScope == other.SearchScope ||
                    SearchScope != null &&
                    SearchScope.Equals(other.SearchScope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConditionType != null)
                    hashCode = hashCode * 59 + ConditionType.GetHashCode();
                    if (AdGroups != null)
                    hashCode = hashCode * 59 + AdGroups.GetHashCode();
                    if (LdapFilter != null)
                    hashCode = hashCode * 59 + LdapFilter.GetHashCode();
                    if (PropertyConstraints != null)
                    hashCode = hashCode * 59 + PropertyConstraints.GetHashCode();
                    if (SearchBase != null)
                    hashCode = hashCode * 59 + SearchBase.GetHashCode();
                    if (SearchScope != null)
                    hashCode = hashCode * 59 + SearchScope.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetDiscoveryCondition left, AssetDiscoveryCondition right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetDiscoveryCondition left, AssetDiscoveryCondition right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
