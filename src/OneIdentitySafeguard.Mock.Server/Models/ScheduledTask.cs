/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a scheduled platform task
    /// </summary>
    [DataContract]
    public partial class ScheduledTask : IEquatable<ScheduledTask>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="Name")]
        public ScheduledTaskNames Name { get; set; }

        /// <summary>
        /// Unique ID of account associated with task
        /// </summary>
        /// <value>Unique ID of account associated with task</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of account associated with task
        /// </summary>
        /// <value>Name of account associated with task</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Domain name of account associated with task
        /// </summary>
        /// <value>Domain name of account associated with task</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// Unique ID of asset associated with task
        /// </summary>
        /// <value>Unique ID of asset associated with task</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of asset associated with task
        /// </summary>
        /// <value>Name of asset associated with task</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Unique ID of sync group associated with task
        /// </summary>
        /// <value>Unique ID of sync group associated with task</value>

        [DataMember(Name="SyncGroupId")]
        public int? SyncGroupId { get; set; }

        /// <summary>
        /// Name of sync group associated with task
        /// </summary>
        /// <value>Name of sync group associated with task</value>

        [DataMember(Name="SyncGroupName")]
        public string SyncGroupName { get; set; }

        /// <summary>
        /// Unique ID of schedule associated with task
        /// </summary>
        /// <value>Unique ID of schedule associated with task</value>

        [DataMember(Name="ScheduleId")]
        public int? ScheduleId { get; set; }

        /// <summary>
        /// Name of schedule associated with task
        /// </summary>
        /// <value>Name of schedule associated with task</value>

        [DataMember(Name="ScheduleName")]
        public string ScheduleName { get; set; }

        /// <summary>
        /// Unique ID of asset partition associated with task
        /// </summary>
        /// <value>Unique ID of asset partition associated with task</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of asset partition associated with task
        /// </summary>
        /// <value>Name of asset partition associated with task</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Date task is scheduled for
        /// </summary>
        /// <value>Date task is scheduled for</value>

        [DataMember(Name="DueDateTime")]
        public DateTime? DueDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduledTask {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  SyncGroupId: ").Append(SyncGroupId).Append("\n");
            sb.Append("  SyncGroupName: ").Append(SyncGroupName).Append("\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  ScheduleName: ").Append(ScheduleName).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  DueDateTime: ").Append(DueDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScheduledTask)obj);
        }

        /// <summary>
        /// Returns true if ScheduledTask instances are equal
        /// </summary>
        /// <param name="other">Instance of ScheduledTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduledTask other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    SyncGroupId == other.SyncGroupId ||
                    SyncGroupId != null &&
                    SyncGroupId.Equals(other.SyncGroupId)
                ) && 
                (
                    SyncGroupName == other.SyncGroupName ||
                    SyncGroupName != null &&
                    SyncGroupName.Equals(other.SyncGroupName)
                ) && 
                (
                    ScheduleId == other.ScheduleId ||
                    ScheduleId != null &&
                    ScheduleId.Equals(other.ScheduleId)
                ) && 
                (
                    ScheduleName == other.ScheduleName ||
                    ScheduleName != null &&
                    ScheduleName.Equals(other.ScheduleName)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    DueDateTime == other.DueDateTime ||
                    DueDateTime != null &&
                    DueDateTime.Equals(other.DueDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (SyncGroupId != null)
                    hashCode = hashCode * 59 + SyncGroupId.GetHashCode();
                    if (SyncGroupName != null)
                    hashCode = hashCode * 59 + SyncGroupName.GetHashCode();
                    if (ScheduleId != null)
                    hashCode = hashCode * 59 + ScheduleId.GetHashCode();
                    if (ScheduleName != null)
                    hashCode = hashCode * 59 + ScheduleName.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (DueDateTime != null)
                    hashCode = hashCode * 59 + DueDateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScheduledTask left, ScheduledTask right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScheduledTask left, ScheduledTask right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
