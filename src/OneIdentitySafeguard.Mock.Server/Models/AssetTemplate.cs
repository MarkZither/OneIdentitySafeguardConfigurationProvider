/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Asset template for discovered assets
    /// </summary>
    [DataContract]
    public partial class AssetTemplate : IEquatable<AssetTemplate>
    { 
        /// <summary>
        /// Gets or Sets PasswordProfile
        /// </summary>

        [DataMember(Name="PasswordProfile")]
        public AssetPasswordProfileProperties PasswordProfile { get; set; }

        /// <summary>
        /// Gets or Sets SshKeyProfile
        /// </summary>

        [DataMember(Name="SshKeyProfile")]
        public AssetSshKeyProfileProperties SshKeyProfile { get; set; }

        /// <summary>
        /// Account discovery schedule to assign to discovered assets
        /// </summary>
        /// <value>Account discovery schedule to assign to discovered assets</value>

        [DataMember(Name="AccountDiscoveryScheduleId")]
        public int? AccountDiscoveryScheduleId { get; set; }

        /// <summary>
        /// Name of the Account discovery schedule to assign to discovered assets (Read-only)
        /// </summary>
        /// <value>Name of the Account discovery schedule to assign to discovered assets (Read-only)</value>

        [DataMember(Name="AccountDiscoveryScheduleName")]
        public string AccountDiscoveryScheduleName { get; set; }

        /// <summary>
        /// Database ID of the managed network this asset is explicitly assigned to. If null then   managed network will be calculated dynamically.
        /// </summary>
        /// <value>Database ID of the managed network this asset is explicitly assigned to. If null then   managed network will be calculated dynamically.</value>

        [DataMember(Name="ManagedNetworkId")]
        public int? ManagedNetworkId { get; set; }

        /// <summary>
        /// Display name managed network (Read-only)
        /// </summary>
        /// <value>Display name managed network (Read-only)</value>

        [DataMember(Name="ManagedNetworkName")]
        public string ManagedNetworkName { get; set; }

        /// <summary>
        /// Platform type to assign to assets discovered by this rule.  If null then the platform will be derived from discovered properties.
        /// </summary>
        /// <value>Platform type to assign to assets discovered by this rule.  If null then the platform will be derived from discovered properties.</value>

        [DataMember(Name="PlatformId")]
        public int? PlatformId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformType
        /// </summary>

        [DataMember(Name="PlatformType")]
        public PlatformType PlatformType { get; set; }

        /// <summary>
        /// Gets or Sets PlatformFamily
        /// </summary>

        [DataMember(Name="PlatformFamily")]
        public PlatformFamily PlatformFamily { get; set; }

        /// <summary>
        /// Display name of assigned platform (Read-only)
        /// </summary>
        /// <value>Display name of assigned platform (Read-only)</value>

        [DataMember(Name="PlatformDisplayName")]
        public string PlatformDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>

        [DataMember(Name="ConnectionProperties")]
        public AssetConnectionProperties ConnectionProperties { get; set; }

        /// <summary>
        /// Gets or Sets SessionAccessProperties
        /// </summary>

        [DataMember(Name="SessionAccessProperties")]
        public AssetSessionAccessProperties SessionAccessProperties { get; set; }

        /// <summary>
        /// The tags to be associated with the asset
        /// </summary>
        /// <value>The tags to be associated with the asset</value>

        [DataMember(Name="Tags")]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetTemplate {\n");
            sb.Append("  PasswordProfile: ").Append(PasswordProfile).Append("\n");
            sb.Append("  SshKeyProfile: ").Append(SshKeyProfile).Append("\n");
            sb.Append("  AccountDiscoveryScheduleId: ").Append(AccountDiscoveryScheduleId).Append("\n");
            sb.Append("  AccountDiscoveryScheduleName: ").Append(AccountDiscoveryScheduleName).Append("\n");
            sb.Append("  ManagedNetworkId: ").Append(ManagedNetworkId).Append("\n");
            sb.Append("  ManagedNetworkName: ").Append(ManagedNetworkName).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  PlatformFamily: ").Append(PlatformFamily).Append("\n");
            sb.Append("  PlatformDisplayName: ").Append(PlatformDisplayName).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  SessionAccessProperties: ").Append(SessionAccessProperties).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetTemplate)obj);
        }

        /// <summary>
        /// Returns true if AssetTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetTemplate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PasswordProfile == other.PasswordProfile ||
                    PasswordProfile != null &&
                    PasswordProfile.Equals(other.PasswordProfile)
                ) && 
                (
                    SshKeyProfile == other.SshKeyProfile ||
                    SshKeyProfile != null &&
                    SshKeyProfile.Equals(other.SshKeyProfile)
                ) && 
                (
                    AccountDiscoveryScheduleId == other.AccountDiscoveryScheduleId ||
                    AccountDiscoveryScheduleId != null &&
                    AccountDiscoveryScheduleId.Equals(other.AccountDiscoveryScheduleId)
                ) && 
                (
                    AccountDiscoveryScheduleName == other.AccountDiscoveryScheduleName ||
                    AccountDiscoveryScheduleName != null &&
                    AccountDiscoveryScheduleName.Equals(other.AccountDiscoveryScheduleName)
                ) && 
                (
                    ManagedNetworkId == other.ManagedNetworkId ||
                    ManagedNetworkId != null &&
                    ManagedNetworkId.Equals(other.ManagedNetworkId)
                ) && 
                (
                    ManagedNetworkName == other.ManagedNetworkName ||
                    ManagedNetworkName != null &&
                    ManagedNetworkName.Equals(other.ManagedNetworkName)
                ) && 
                (
                    PlatformId == other.PlatformId ||
                    PlatformId != null &&
                    PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    PlatformType == other.PlatformType ||
                    PlatformType != null &&
                    PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    PlatformFamily == other.PlatformFamily ||
                    PlatformFamily != null &&
                    PlatformFamily.Equals(other.PlatformFamily)
                ) && 
                (
                    PlatformDisplayName == other.PlatformDisplayName ||
                    PlatformDisplayName != null &&
                    PlatformDisplayName.Equals(other.PlatformDisplayName)
                ) && 
                (
                    ConnectionProperties == other.ConnectionProperties ||
                    ConnectionProperties != null &&
                    ConnectionProperties.Equals(other.ConnectionProperties)
                ) && 
                (
                    SessionAccessProperties == other.SessionAccessProperties ||
                    SessionAccessProperties != null &&
                    SessionAccessProperties.Equals(other.SessionAccessProperties)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PasswordProfile != null)
                    hashCode = hashCode * 59 + PasswordProfile.GetHashCode();
                    if (SshKeyProfile != null)
                    hashCode = hashCode * 59 + SshKeyProfile.GetHashCode();
                    if (AccountDiscoveryScheduleId != null)
                    hashCode = hashCode * 59 + AccountDiscoveryScheduleId.GetHashCode();
                    if (AccountDiscoveryScheduleName != null)
                    hashCode = hashCode * 59 + AccountDiscoveryScheduleName.GetHashCode();
                    if (ManagedNetworkId != null)
                    hashCode = hashCode * 59 + ManagedNetworkId.GetHashCode();
                    if (ManagedNetworkName != null)
                    hashCode = hashCode * 59 + ManagedNetworkName.GetHashCode();
                    if (PlatformId != null)
                    hashCode = hashCode * 59 + PlatformId.GetHashCode();
                    if (PlatformType != null)
                    hashCode = hashCode * 59 + PlatformType.GetHashCode();
                    if (PlatformFamily != null)
                    hashCode = hashCode * 59 + PlatformFamily.GetHashCode();
                    if (PlatformDisplayName != null)
                    hashCode = hashCode * 59 + PlatformDisplayName.GetHashCode();
                    if (ConnectionProperties != null)
                    hashCode = hashCode * 59 + ConnectionProperties.GetHashCode();
                    if (SessionAccessProperties != null)
                    hashCode = hashCode * 59 + SessionAccessProperties.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetTemplate left, AssetTemplate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetTemplate left, AssetTemplate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
