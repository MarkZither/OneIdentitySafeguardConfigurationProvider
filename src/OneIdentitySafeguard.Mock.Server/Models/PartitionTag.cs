/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PartitionTag : IEquatable<PartitionTag>
    { 
        /// <summary>
        /// The ID of the tag
        /// </summary>
        /// <value>The ID of the tag</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The ID of the partition that this tag is associated with
        /// </summary>
        /// <value>The ID of the partition that this tag is associated with</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// The name of the partition that this tag is associated with
        /// </summary>
        /// <value>The name of the partition that this tag is associated with</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// The name of the tag
        /// </summary>
        /// <value>The name of the tag</value>
        [Required]

        [MaxLength(50)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The description of the tag
        /// </summary>
        /// <value>The description of the tag</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AssetTaggingRule
        /// </summary>

        [DataMember(Name="AssetTaggingRule")]
        public TaggingGroupingRule AssetTaggingRule { get; set; }

        /// <summary>
        /// Gets or Sets AssetAccountTaggingRule
        /// </summary>

        [DataMember(Name="AssetAccountTaggingRule")]
        public TaggingGroupingRule AssetAccountTaggingRule { get; set; }

        /// <summary>
        /// List of Identities that manage this asset
        /// </summary>
        /// <value>List of Identities that manage this asset</value>

        [DataMember(Name="ManagedBy")]
        public List<Identity> ManagedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartitionTag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AssetTaggingRule: ").Append(AssetTaggingRule).Append("\n");
            sb.Append("  AssetAccountTaggingRule: ").Append(AssetAccountTaggingRule).Append("\n");
            sb.Append("  ManagedBy: ").Append(ManagedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PartitionTag)obj);
        }

        /// <summary>
        /// Returns true if PartitionTag instances are equal
        /// </summary>
        /// <param name="other">Instance of PartitionTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartitionTag other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AssetTaggingRule == other.AssetTaggingRule ||
                    AssetTaggingRule != null &&
                    AssetTaggingRule.Equals(other.AssetTaggingRule)
                ) && 
                (
                    AssetAccountTaggingRule == other.AssetAccountTaggingRule ||
                    AssetAccountTaggingRule != null &&
                    AssetAccountTaggingRule.Equals(other.AssetAccountTaggingRule)
                ) && 
                (
                    ManagedBy == other.ManagedBy ||
                    ManagedBy != null &&
                    ManagedBy.SequenceEqual(other.ManagedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AssetTaggingRule != null)
                    hashCode = hashCode * 59 + AssetTaggingRule.GetHashCode();
                    if (AssetAccountTaggingRule != null)
                    hashCode = hashCode * 59 + AssetAccountTaggingRule.GetHashCode();
                    if (ManagedBy != null)
                    hashCode = hashCode * 59 + ManagedBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PartitionTag left, PartitionTag right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PartitionTag left, PartitionTag right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
