/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an remote asset account
    /// </summary>
    [DataContract]
    public partial class AssetAccount : IEquatable<AssetAccount>
    { 
        /// <summary>
        /// The database ID of the account (Read-only)
        /// </summary>
        /// <value>The database ID of the account (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the account
        /// </summary>
        /// <value>The name of the account</value>
        [Required]

        [MaxLength(100)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The distinguished name of the account (required for ACF2-Ldap)
        /// </summary>
        /// <value>The distinguished name of the account (required for ACF2-Ldap)</value>

        [MaxLength(2000)]
        [DataMember(Name="DistinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// Name of the domain this object is from. Required if this is an object to import from a directory.
        /// </summary>
        /// <value>Name of the domain this object is from. Required if this is an object to import from a directory.</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// A short description of the account.
        /// </summary>
        /// <value>A short description of the account.</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// The alternate login name (Read-only)
        /// </summary>
        /// <value>The alternate login name (Read-only)</value>

        [DataMember(Name="AltLoginName")]
        public string AltLoginName { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// List of Identities that manage this asset
        /// </summary>
        /// <value>List of Identities that manage this asset</value>

        [DataMember(Name="ManagedBy")]
        public List<Identity> ManagedBy { get; set; }

        /// <summary>
        /// Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)
        /// </summary>
        /// <value>Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)</value>

        [DataMember(Name="Disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Whether this account is a service account or not (Read-only)
        /// </summary>
        /// <value>Whether this account is a service account or not (Read-only)</value>

        [DataMember(Name="IsServiceAccount")]
        public bool? IsServiceAccount { get; set; }

        /// <summary>
        /// Whether this account can be used as a service account for other assets (only valid for directory accounts)
        /// </summary>
        /// <value>Whether this account can be used as a service account for other assets (only valid for directory accounts)</value>

        [DataMember(Name="SharedServiceAccount")]
        public bool? SharedServiceAccount { get; set; }

        /// <summary>
        /// The tags associated with this account
        /// </summary>
        /// <value>The tags associated with this account</value>

        [DataMember(Name="Tags")]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>

        [DataMember(Name="Asset")]
        public AccountAssetProperties Asset { get; set; }

        /// <summary>
        /// Gets or Sets PasswordProfile
        /// </summary>

        [DataMember(Name="PasswordProfile")]
        public AccountProfileProperties PasswordProfile { get; set; }

        /// <summary>
        /// Gets or Sets SshKeyProfile
        /// </summary>

        [DataMember(Name="SshKeyProfile")]
        public AccountSshKeyProfileProperties SshKeyProfile { get; set; }

        /// <summary>
        /// Gets or Sets RequestProperties
        /// </summary>

        [DataMember(Name="RequestProperties")]
        public AccountRequestProperties RequestProperties { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>

        [DataMember(Name="Platform")]
        public AccountPlatformProperties Platform { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveredProperties
        /// </summary>

        [DataMember(Name="DiscoveredProperties")]
        public DiscoveredAccountProperties DiscoveredProperties { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryProperties
        /// </summary>

        [DataMember(Name="DirectoryProperties")]
        public DirectoryAccountProperties DirectoryProperties { get; set; }

        /// <summary>
        /// Gets or Sets SyncGroup
        /// </summary>

        [DataMember(Name="SyncGroup")]
        public AccountSyncGroupProperties SyncGroup { get; set; }

        /// <summary>
        /// Gets or Sets SshKeySyncGroup
        /// </summary>

        [DataMember(Name="SshKeySyncGroup")]
        public AccountSshKeySyncGroupProperties SshKeySyncGroup { get; set; }

        /// <summary>
        /// Whether the account has a password set or not (Read-only)
        /// </summary>
        /// <value>Whether the account has a password set or not (Read-only)</value>

        [DataMember(Name="HasPassword")]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Whether the account has an SSH key assigned or not (Read-only)
        /// </summary>
        /// <value>Whether the account has an SSH key assigned or not (Read-only)</value>

        [DataMember(Name="HasSshKey")]
        public bool? HasSshKey { get; set; }

        /// <summary>
        /// Gets or Sets TaskProperties
        /// </summary>

        [DataMember(Name="TaskProperties")]
        public AccountTaskProperties TaskProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DistinguishedName: ").Append(DistinguishedName).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AltLoginName: ").Append(AltLoginName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  ManagedBy: ").Append(ManagedBy).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  IsServiceAccount: ").Append(IsServiceAccount).Append("\n");
            sb.Append("  SharedServiceAccount: ").Append(SharedServiceAccount).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  PasswordProfile: ").Append(PasswordProfile).Append("\n");
            sb.Append("  SshKeyProfile: ").Append(SshKeyProfile).Append("\n");
            sb.Append("  RequestProperties: ").Append(RequestProperties).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  DiscoveredProperties: ").Append(DiscoveredProperties).Append("\n");
            sb.Append("  DirectoryProperties: ").Append(DirectoryProperties).Append("\n");
            sb.Append("  SyncGroup: ").Append(SyncGroup).Append("\n");
            sb.Append("  SshKeySyncGroup: ").Append(SshKeySyncGroup).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  HasSshKey: ").Append(HasSshKey).Append("\n");
            sb.Append("  TaskProperties: ").Append(TaskProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetAccount)obj);
        }

        /// <summary>
        /// Returns true if AssetAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DistinguishedName == other.DistinguishedName ||
                    DistinguishedName != null &&
                    DistinguishedName.Equals(other.DistinguishedName)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AltLoginName == other.AltLoginName ||
                    AltLoginName != null &&
                    AltLoginName.Equals(other.AltLoginName)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    ManagedBy == other.ManagedBy ||
                    ManagedBy != null &&
                    ManagedBy.SequenceEqual(other.ManagedBy)
                ) && 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    IsServiceAccount == other.IsServiceAccount ||
                    IsServiceAccount != null &&
                    IsServiceAccount.Equals(other.IsServiceAccount)
                ) && 
                (
                    SharedServiceAccount == other.SharedServiceAccount ||
                    SharedServiceAccount != null &&
                    SharedServiceAccount.Equals(other.SharedServiceAccount)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Asset == other.Asset ||
                    Asset != null &&
                    Asset.Equals(other.Asset)
                ) && 
                (
                    PasswordProfile == other.PasswordProfile ||
                    PasswordProfile != null &&
                    PasswordProfile.Equals(other.PasswordProfile)
                ) && 
                (
                    SshKeyProfile == other.SshKeyProfile ||
                    SshKeyProfile != null &&
                    SshKeyProfile.Equals(other.SshKeyProfile)
                ) && 
                (
                    RequestProperties == other.RequestProperties ||
                    RequestProperties != null &&
                    RequestProperties.Equals(other.RequestProperties)
                ) && 
                (
                    Platform == other.Platform ||
                    Platform != null &&
                    Platform.Equals(other.Platform)
                ) && 
                (
                    DiscoveredProperties == other.DiscoveredProperties ||
                    DiscoveredProperties != null &&
                    DiscoveredProperties.Equals(other.DiscoveredProperties)
                ) && 
                (
                    DirectoryProperties == other.DirectoryProperties ||
                    DirectoryProperties != null &&
                    DirectoryProperties.Equals(other.DirectoryProperties)
                ) && 
                (
                    SyncGroup == other.SyncGroup ||
                    SyncGroup != null &&
                    SyncGroup.Equals(other.SyncGroup)
                ) && 
                (
                    SshKeySyncGroup == other.SshKeySyncGroup ||
                    SshKeySyncGroup != null &&
                    SshKeySyncGroup.Equals(other.SshKeySyncGroup)
                ) && 
                (
                    HasPassword == other.HasPassword ||
                    HasPassword != null &&
                    HasPassword.Equals(other.HasPassword)
                ) && 
                (
                    HasSshKey == other.HasSshKey ||
                    HasSshKey != null &&
                    HasSshKey.Equals(other.HasSshKey)
                ) && 
                (
                    TaskProperties == other.TaskProperties ||
                    TaskProperties != null &&
                    TaskProperties.Equals(other.TaskProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DistinguishedName != null)
                    hashCode = hashCode * 59 + DistinguishedName.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AltLoginName != null)
                    hashCode = hashCode * 59 + AltLoginName.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (ManagedBy != null)
                    hashCode = hashCode * 59 + ManagedBy.GetHashCode();
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (IsServiceAccount != null)
                    hashCode = hashCode * 59 + IsServiceAccount.GetHashCode();
                    if (SharedServiceAccount != null)
                    hashCode = hashCode * 59 + SharedServiceAccount.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Asset != null)
                    hashCode = hashCode * 59 + Asset.GetHashCode();
                    if (PasswordProfile != null)
                    hashCode = hashCode * 59 + PasswordProfile.GetHashCode();
                    if (SshKeyProfile != null)
                    hashCode = hashCode * 59 + SshKeyProfile.GetHashCode();
                    if (RequestProperties != null)
                    hashCode = hashCode * 59 + RequestProperties.GetHashCode();
                    if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (DiscoveredProperties != null)
                    hashCode = hashCode * 59 + DiscoveredProperties.GetHashCode();
                    if (DirectoryProperties != null)
                    hashCode = hashCode * 59 + DirectoryProperties.GetHashCode();
                    if (SyncGroup != null)
                    hashCode = hashCode * 59 + SyncGroup.GetHashCode();
                    if (SshKeySyncGroup != null)
                    hashCode = hashCode * 59 + SshKeySyncGroup.GetHashCode();
                    if (HasPassword != null)
                    hashCode = hashCode * 59 + HasPassword.GetHashCode();
                    if (HasSshKey != null)
                    hashCode = hashCode * 59 + HasSshKey.GetHashCode();
                    if (TaskProperties != null)
                    hashCode = hashCode * 59 + TaskProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetAccount left, AssetAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetAccount left, AssetAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
