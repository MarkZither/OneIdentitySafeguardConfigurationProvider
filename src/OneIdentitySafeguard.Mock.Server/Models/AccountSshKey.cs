/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an SSH key assigned to an account
    /// </summary>
    [DataContract]
    public partial class AccountSshKey : IEquatable<AccountSshKey>
    { 
        /// <summary>
        /// Private key represented in base64 (write-only)
        /// </summary>
        /// <value>Private key represented in base64 (write-only)</value>

        [DataMember(Name="PrivateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Passphrase to decrypt PrivateKey (write-only)
        /// </summary>
        /// <value>Passphrase to decrypt PrivateKey (write-only)</value>

        [DataMember(Name="Passphrase")]
        public string Passphrase { get; set; }

        /// <summary>
        /// Public key represented in base64
        /// </summary>
        /// <value>Public key represented in base64</value>

        [DataMember(Name="PublicKey")]
        public string PublicKey { get; set; }

        /// <summary>
        /// Comment associated with key
        /// </summary>
        /// <value>Comment associated with key</value>

        [MaxLength(255)]
        [DataMember(Name="Comment")]
        public string Comment { get; set; }

        /// <summary>
        /// The MD5 fingerprint hash of the SSH key (Read-only)
        /// </summary>
        /// <value>The MD5 fingerprint hash of the SSH key (Read-only)</value>

        [DataMember(Name="Fingerprint")]
        public string Fingerprint { get; set; }

        /// <summary>
        /// The SHA256 fingerprint hash, Base64 encoded, of the SSH key
        /// </summary>
        /// <value>The SHA256 fingerprint hash, Base64 encoded, of the SSH key</value>

        [DataMember(Name="FingerprintSha256")]
        public string FingerprintSha256 { get; set; }

        /// <summary>
        /// Gets or Sets KeyType
        /// </summary>

        [DataMember(Name="KeyType")]
        public SshKeyType KeyType { get; set; }

        /// <summary>
        /// Length, in bits, of SSH key
        /// </summary>
        /// <value>Length, in bits, of SSH key</value>

        [Range(0, 8192)]
        [DataMember(Name="KeyLength")]
        public int? KeyLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountSshKey {\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  PublicKey: ").Append(PublicKey).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  FingerprintSha256: ").Append(FingerprintSha256).Append("\n");
            sb.Append("  KeyType: ").Append(KeyType).Append("\n");
            sb.Append("  KeyLength: ").Append(KeyLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountSshKey)obj);
        }

        /// <summary>
        /// Returns true if AccountSshKey instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountSshKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountSshKey other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PrivateKey == other.PrivateKey ||
                    PrivateKey != null &&
                    PrivateKey.Equals(other.PrivateKey)
                ) && 
                (
                    Passphrase == other.Passphrase ||
                    Passphrase != null &&
                    Passphrase.Equals(other.Passphrase)
                ) && 
                (
                    PublicKey == other.PublicKey ||
                    PublicKey != null &&
                    PublicKey.Equals(other.PublicKey)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Fingerprint == other.Fingerprint ||
                    Fingerprint != null &&
                    Fingerprint.Equals(other.Fingerprint)
                ) && 
                (
                    FingerprintSha256 == other.FingerprintSha256 ||
                    FingerprintSha256 != null &&
                    FingerprintSha256.Equals(other.FingerprintSha256)
                ) && 
                (
                    KeyType == other.KeyType ||
                    KeyType != null &&
                    KeyType.Equals(other.KeyType)
                ) && 
                (
                    KeyLength == other.KeyLength ||
                    KeyLength != null &&
                    KeyLength.Equals(other.KeyLength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PrivateKey != null)
                    hashCode = hashCode * 59 + PrivateKey.GetHashCode();
                    if (Passphrase != null)
                    hashCode = hashCode * 59 + Passphrase.GetHashCode();
                    if (PublicKey != null)
                    hashCode = hashCode * 59 + PublicKey.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Fingerprint != null)
                    hashCode = hashCode * 59 + Fingerprint.GetHashCode();
                    if (FingerprintSha256 != null)
                    hashCode = hashCode * 59 + FingerprintSha256.GetHashCode();
                    if (KeyType != null)
                    hashCode = hashCode * 59 + KeyType.GetHashCode();
                    if (KeyLength != null)
                    hashCode = hashCode * 59 + KeyLength.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountSshKey left, AccountSshKey right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountSshKey left, AccountSshKey right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
