/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Options available with Network Type Discovery
    /// </summary>
    [DataContract]
    public partial class NetworkDiscoveryOptions : IEquatable<NetworkDiscoveryOptions>
    { 
        /// <summary>
        /// Attempt to determine operating system using the OS fingerprint. Can increase duration of discovery.
        /// </summary>
        /// <value>Attempt to determine operating system using the OS fingerprint. Can increase duration of discovery.</value>

        [DataMember(Name="OsFingerPrint")]
        public bool? OsFingerPrint { get; set; }

        /// <summary>
        /// Time allowed, in seconds, for network scan to run before cancelling the task. Set to 0 to use the default of 15 minutes.
        /// </summary>
        /// <value>Time allowed, in seconds, for network scan to run before cancelling the task. Set to 0 to use the default of 15 minutes.</value>

        [DataMember(Name="ScanTimeout")]
        public int? ScanTimeout { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NetworkDiscoveryOptions {\n");
            sb.Append("  OsFingerPrint: ").Append(OsFingerPrint).Append("\n");
            sb.Append("  ScanTimeout: ").Append(ScanTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NetworkDiscoveryOptions)obj);
        }

        /// <summary>
        /// Returns true if NetworkDiscoveryOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of NetworkDiscoveryOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkDiscoveryOptions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OsFingerPrint == other.OsFingerPrint ||
                    OsFingerPrint != null &&
                    OsFingerPrint.Equals(other.OsFingerPrint)
                ) && 
                (
                    ScanTimeout == other.ScanTimeout ||
                    ScanTimeout != null &&
                    ScanTimeout.Equals(other.ScanTimeout)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OsFingerPrint != null)
                    hashCode = hashCode * 59 + OsFingerPrint.GetHashCode();
                    if (ScanTimeout != null)
                    hashCode = hashCode * 59 + ScanTimeout.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NetworkDiscoveryOptions left, NetworkDiscoveryOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NetworkDiscoveryOptions left, NetworkDiscoveryOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
