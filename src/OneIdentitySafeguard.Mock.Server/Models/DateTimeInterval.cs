/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents two datetimes - a begin and an end. The interval includes the begin, and excludes the end.
    /// </summary>
    [DataContract]
    public partial class DateTimeInterval : IEquatable<DateTimeInterval>
    { 
        /// <summary>
        /// The inclusive lower bound of the interval
        /// </summary>
        /// <value>The inclusive lower bound of the interval</value>

        [DataMember(Name="Begin")]
        public DateTime? Begin { get; set; }

        /// <summary>
        /// The exclusive upper bound of the interval
        /// </summary>
        /// <value>The exclusive upper bound of the interval</value>

        [DataMember(Name="End")]
        public DateTime? End { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateTimeInterval {\n");
            sb.Append("  Begin: ").Append(Begin).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DateTimeInterval)obj);
        }

        /// <summary>
        /// Returns true if DateTimeInterval instances are equal
        /// </summary>
        /// <param name="other">Instance of DateTimeInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateTimeInterval other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Begin == other.Begin ||
                    Begin != null &&
                    Begin.Equals(other.Begin)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Begin != null)
                    hashCode = hashCode * 59 + Begin.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DateTimeInterval left, DateTimeInterval right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DateTimeInterval left, DateTimeInterval right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
