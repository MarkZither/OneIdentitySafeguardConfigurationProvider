/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A summary report of account tasks
    /// </summary>
    [DataContract]
    public partial class AccountTaskSummaryReport : IEquatable<AccountTaskSummaryReport>
    { 
        /// <summary>
        /// Number of password check failures
        /// </summary>
        /// <value>Number of password check failures</value>

        [DataMember(Name="PasswordCheckFailures")]
        public int? PasswordCheckFailures { get; set; }

        /// <summary>
        /// Number of password change failures
        /// </summary>
        /// <value>Number of password change failures</value>

        [DataMember(Name="PasswordChangeFailures")]
        public int? PasswordChangeFailures { get; set; }

        /// <summary>
        /// Number of password check successes
        /// </summary>
        /// <value>Number of password check successes</value>

        [DataMember(Name="PasswordCheckSuccesses")]
        public int? PasswordCheckSuccesses { get; set; }

        /// <summary>
        /// Number of password change successes
        /// </summary>
        /// <value>Number of password change successes</value>

        [DataMember(Name="PasswordChangeSuccesses")]
        public int? PasswordChangeSuccesses { get; set; }

        /// <summary>
        /// Number of SSH key check failures
        /// </summary>
        /// <value>Number of SSH key check failures</value>

        [DataMember(Name="SshKeyCheckFailures")]
        public int? SshKeyCheckFailures { get; set; }

        /// <summary>
        /// Number of SSH key change failures
        /// </summary>
        /// <value>Number of SSH key change failures</value>

        [DataMember(Name="SshKeyChangeFailures")]
        public int? SshKeyChangeFailures { get; set; }

        /// <summary>
        /// Number of SSH key check successes
        /// </summary>
        /// <value>Number of SSH key check successes</value>

        [DataMember(Name="SshKeyCheckSuccesses")]
        public int? SshKeyCheckSuccesses { get; set; }

        /// <summary>
        /// Number of SSH key change successes
        /// </summary>
        /// <value>Number of SSH key change successes</value>

        [DataMember(Name="SshKeyChangeSuccesses")]
        public int? SshKeyChangeSuccesses { get; set; }

        /// <summary>
        /// Number of SSH key discovery failures
        /// </summary>
        /// <value>Number of SSH key discovery failures</value>

        [DataMember(Name="SshKeyDiscoveryFailures")]
        public int? SshKeyDiscoveryFailures { get; set; }

        /// <summary>
        /// Number of SSH key revoke failures
        /// </summary>
        /// <value>Number of SSH key revoke failures</value>

        [DataMember(Name="SshKeyRevokeFailures")]
        public int? SshKeyRevokeFailures { get; set; }

        /// <summary>
        /// Number of SSH key discovery successes
        /// </summary>
        /// <value>Number of SSH key discovery successes</value>

        [DataMember(Name="SshKeyDiscoverySuccesses")]
        public int? SshKeyDiscoverySuccesses { get; set; }

        /// <summary>
        /// Number of SSH key revoke successes
        /// </summary>
        /// <value>Number of SSH key revoke successes</value>

        [DataMember(Name="SshKeyRevokeSuccesses")]
        public int? SshKeyRevokeSuccesses { get; set; }

        /// <summary>
        /// Number of suspend account failures
        /// </summary>
        /// <value>Number of suspend account failures</value>

        [DataMember(Name="SuspendAccountFailures")]
        public int? SuspendAccountFailures { get; set; }

        /// <summary>
        /// Number of restore account failures
        /// </summary>
        /// <value>Number of restore account failures</value>

        [DataMember(Name="RestoreAccountFailures")]
        public int? RestoreAccountFailures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTaskSummaryReport {\n");
            sb.Append("  PasswordCheckFailures: ").Append(PasswordCheckFailures).Append("\n");
            sb.Append("  PasswordChangeFailures: ").Append(PasswordChangeFailures).Append("\n");
            sb.Append("  PasswordCheckSuccesses: ").Append(PasswordCheckSuccesses).Append("\n");
            sb.Append("  PasswordChangeSuccesses: ").Append(PasswordChangeSuccesses).Append("\n");
            sb.Append("  SshKeyCheckFailures: ").Append(SshKeyCheckFailures).Append("\n");
            sb.Append("  SshKeyChangeFailures: ").Append(SshKeyChangeFailures).Append("\n");
            sb.Append("  SshKeyCheckSuccesses: ").Append(SshKeyCheckSuccesses).Append("\n");
            sb.Append("  SshKeyChangeSuccesses: ").Append(SshKeyChangeSuccesses).Append("\n");
            sb.Append("  SshKeyDiscoveryFailures: ").Append(SshKeyDiscoveryFailures).Append("\n");
            sb.Append("  SshKeyRevokeFailures: ").Append(SshKeyRevokeFailures).Append("\n");
            sb.Append("  SshKeyDiscoverySuccesses: ").Append(SshKeyDiscoverySuccesses).Append("\n");
            sb.Append("  SshKeyRevokeSuccesses: ").Append(SshKeyRevokeSuccesses).Append("\n");
            sb.Append("  SuspendAccountFailures: ").Append(SuspendAccountFailures).Append("\n");
            sb.Append("  RestoreAccountFailures: ").Append(RestoreAccountFailures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountTaskSummaryReport)obj);
        }

        /// <summary>
        /// Returns true if AccountTaskSummaryReport instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountTaskSummaryReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTaskSummaryReport other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PasswordCheckFailures == other.PasswordCheckFailures ||
                    PasswordCheckFailures != null &&
                    PasswordCheckFailures.Equals(other.PasswordCheckFailures)
                ) && 
                (
                    PasswordChangeFailures == other.PasswordChangeFailures ||
                    PasswordChangeFailures != null &&
                    PasswordChangeFailures.Equals(other.PasswordChangeFailures)
                ) && 
                (
                    PasswordCheckSuccesses == other.PasswordCheckSuccesses ||
                    PasswordCheckSuccesses != null &&
                    PasswordCheckSuccesses.Equals(other.PasswordCheckSuccesses)
                ) && 
                (
                    PasswordChangeSuccesses == other.PasswordChangeSuccesses ||
                    PasswordChangeSuccesses != null &&
                    PasswordChangeSuccesses.Equals(other.PasswordChangeSuccesses)
                ) && 
                (
                    SshKeyCheckFailures == other.SshKeyCheckFailures ||
                    SshKeyCheckFailures != null &&
                    SshKeyCheckFailures.Equals(other.SshKeyCheckFailures)
                ) && 
                (
                    SshKeyChangeFailures == other.SshKeyChangeFailures ||
                    SshKeyChangeFailures != null &&
                    SshKeyChangeFailures.Equals(other.SshKeyChangeFailures)
                ) && 
                (
                    SshKeyCheckSuccesses == other.SshKeyCheckSuccesses ||
                    SshKeyCheckSuccesses != null &&
                    SshKeyCheckSuccesses.Equals(other.SshKeyCheckSuccesses)
                ) && 
                (
                    SshKeyChangeSuccesses == other.SshKeyChangeSuccesses ||
                    SshKeyChangeSuccesses != null &&
                    SshKeyChangeSuccesses.Equals(other.SshKeyChangeSuccesses)
                ) && 
                (
                    SshKeyDiscoveryFailures == other.SshKeyDiscoveryFailures ||
                    SshKeyDiscoveryFailures != null &&
                    SshKeyDiscoveryFailures.Equals(other.SshKeyDiscoveryFailures)
                ) && 
                (
                    SshKeyRevokeFailures == other.SshKeyRevokeFailures ||
                    SshKeyRevokeFailures != null &&
                    SshKeyRevokeFailures.Equals(other.SshKeyRevokeFailures)
                ) && 
                (
                    SshKeyDiscoverySuccesses == other.SshKeyDiscoverySuccesses ||
                    SshKeyDiscoverySuccesses != null &&
                    SshKeyDiscoverySuccesses.Equals(other.SshKeyDiscoverySuccesses)
                ) && 
                (
                    SshKeyRevokeSuccesses == other.SshKeyRevokeSuccesses ||
                    SshKeyRevokeSuccesses != null &&
                    SshKeyRevokeSuccesses.Equals(other.SshKeyRevokeSuccesses)
                ) && 
                (
                    SuspendAccountFailures == other.SuspendAccountFailures ||
                    SuspendAccountFailures != null &&
                    SuspendAccountFailures.Equals(other.SuspendAccountFailures)
                ) && 
                (
                    RestoreAccountFailures == other.RestoreAccountFailures ||
                    RestoreAccountFailures != null &&
                    RestoreAccountFailures.Equals(other.RestoreAccountFailures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PasswordCheckFailures != null)
                    hashCode = hashCode * 59 + PasswordCheckFailures.GetHashCode();
                    if (PasswordChangeFailures != null)
                    hashCode = hashCode * 59 + PasswordChangeFailures.GetHashCode();
                    if (PasswordCheckSuccesses != null)
                    hashCode = hashCode * 59 + PasswordCheckSuccesses.GetHashCode();
                    if (PasswordChangeSuccesses != null)
                    hashCode = hashCode * 59 + PasswordChangeSuccesses.GetHashCode();
                    if (SshKeyCheckFailures != null)
                    hashCode = hashCode * 59 + SshKeyCheckFailures.GetHashCode();
                    if (SshKeyChangeFailures != null)
                    hashCode = hashCode * 59 + SshKeyChangeFailures.GetHashCode();
                    if (SshKeyCheckSuccesses != null)
                    hashCode = hashCode * 59 + SshKeyCheckSuccesses.GetHashCode();
                    if (SshKeyChangeSuccesses != null)
                    hashCode = hashCode * 59 + SshKeyChangeSuccesses.GetHashCode();
                    if (SshKeyDiscoveryFailures != null)
                    hashCode = hashCode * 59 + SshKeyDiscoveryFailures.GetHashCode();
                    if (SshKeyRevokeFailures != null)
                    hashCode = hashCode * 59 + SshKeyRevokeFailures.GetHashCode();
                    if (SshKeyDiscoverySuccesses != null)
                    hashCode = hashCode * 59 + SshKeyDiscoverySuccesses.GetHashCode();
                    if (SshKeyRevokeSuccesses != null)
                    hashCode = hashCode * 59 + SshKeyRevokeSuccesses.GetHashCode();
                    if (SuspendAccountFailures != null)
                    hashCode = hashCode * 59 + SuspendAccountFailures.GetHashCode();
                    if (RestoreAccountFailures != null)
                    hashCode = hashCode * 59 + RestoreAccountFailures.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountTaskSummaryReport left, AccountTaskSummaryReport right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountTaskSummaryReport left, AccountTaskSummaryReport right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
