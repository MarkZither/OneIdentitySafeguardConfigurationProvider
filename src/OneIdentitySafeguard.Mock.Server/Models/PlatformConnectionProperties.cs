/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Default session feature settings for this platform
    /// </summary>
    [DataContract]
    public partial class PlatformConnectionProperties : IEquatable<PlatformConnectionProperties>
    { 
        /// <summary>
        /// The default port to use for connections (Read-only)
        /// </summary>
        /// <value>The default port to use for connections (Read-only)</value>

        [DataMember(Name="DefaultPort")]
        public int? DefaultPort { get; set; }

        /// <summary>
        /// The default port to use for connections when UseSslEncryption is enabled (Read-only)
        /// </summary>
        /// <value>The default port to use for connections when UseSslEncryption is enabled (Read-only)</value>

        [DataMember(Name="DefaultSslPort")]
        public int? DefaultSslPort { get; set; }

        /// <summary>
        /// Can the end user specify a port other than the default?  Valid for all but Windows, Windows Active Directory, Windows Desktop, and SAP (Read-only)
        /// </summary>
        /// <value>Can the end user specify a port other than the default?  Valid for all but Windows, Windows Active Directory, Windows Desktop, and SAP (Read-only)</value>

        [DataMember(Name="AllowCustomPort")]
        public bool? AllowCustomPort { get; set; }

        /// <summary>
        /// Whether platform supports standard connection timeout parameter (Read-only)
        /// </summary>
        /// <value>Whether platform supports standard connection timeout parameter (Read-only)</value>

        [DataMember(Name="SupportsTimeout")]
        public bool? SupportsTimeout { get; set; }

        /// <summary>
        /// Whether a service account can login using a password on this platform (Read-only)
        /// </summary>
        /// <value>Whether a service account can login using a password on this platform (Read-only)</value>

        [DataMember(Name="SupportsPasswordAuthentication")]
        public bool? SupportsPasswordAuthentication { get; set; }

        /// <summary>
        /// Whether a service account can login using an SSH key (Read-only)
        /// </summary>
        /// <value>Whether a service account can login using an SSH key (Read-only)</value>

        [DataMember(Name="SupportsSshKeyAuthentication")]
        public bool? SupportsSshKeyAuthentication { get; set; }

        /// <summary>
        /// Whether a service account can login using an account on the hosted server with a password (Read-only)
        /// </summary>
        /// <value>Whether a service account can login using an account on the hosted server with a password (Read-only)</value>

        [DataMember(Name="SupportsLocalhostPasswordAuthentication")]
        public bool? SupportsLocalhostPasswordAuthentication { get; set; }

        /// <summary>
        /// Whether a service account can login using an account from a directory server with a password (Read-only)
        /// </summary>
        /// <value>Whether a service account can login using an account from a directory server with a password (Read-only)</value>

        [DataMember(Name="SupportsDirectoryPasswordAuthentication")]
        public bool? SupportsDirectoryPasswordAuthentication { get; set; }

        /// <summary>
        /// Whether this platform requires access key credentials
        /// </summary>
        /// <value>Whether this platform requires access key credentials</value>

        [DataMember(Name="SupportsAccessKeyAuthentication")]
        public bool? SupportsAccessKeyAuthentication { get; set; }

        /// <summary>
        /// Whether this platform requires the current account password for check/change
        /// </summary>
        /// <value>Whether this platform requires the current account password for check/change</value>

        [DataMember(Name="SupportsAccountPasswordAuthentication")]
        public bool? SupportsAccountPasswordAuthentication { get; set; }

        /// <summary>
        /// Whether this platform can use the starling join credential for authentication
        /// </summary>
        /// <value>Whether this platform can use the starling join credential for authentication</value>

        [DataMember(Name="SupportsStarlingConnectAuthentication")]
        public bool? SupportsStarlingConnectAuthentication { get; set; }

        /// <summary>
        /// Whether or not the platform supports delegation of commands (e.g. sudo.) The command is used to preface  commands requiring privileged access on the asset. Note that this must be non-interactive.  Valid for most unix-compatible platforms (Read-only)
        /// </summary>
        /// <value>Whether or not the platform supports delegation of commands (e.g. sudo.) The command is used to preface  commands requiring privileged access on the asset. Note that this must be non-interactive.  Valid for most unix-compatible platforms (Read-only)</value>

        [DataMember(Name="SupportsPrivilegeElevationCommand")]
        public bool? SupportsPrivilegeElevationCommand { get; set; }

        /// <summary>
        /// Whether the platform supports encryption of telnet data
        /// </summary>
        /// <value>Whether the platform supports encryption of telnet data</value>

        [DataMember(Name="SupportsSslEncryption")]
        public bool? SupportsSslEncryption { get; set; }

        /// <summary>
        /// Whether the platform supports assigning a workstation ID to the telnet session  Valid for AS/400 platforms (Read-only)
        /// </summary>
        /// <value>Whether the platform supports assigning a workstation ID to the telnet session  Valid for AS/400 platforms (Read-only)</value>

        [DataMember(Name="SupportsWorkstationId")]
        public bool? SupportsWorkstationId { get; set; }

        /// <summary>
        /// Whether this platform uses SSH to connect to the target machine
        /// </summary>
        /// <value>Whether this platform uses SSH to connect to the target machine</value>

        [DataMember(Name="SupportsSshTransport")]
        public bool? SupportsSshTransport { get; set; }

        /// <summary>
        /// Cisco routers support an extra password to enable password changes
        /// </summary>
        /// <value>Cisco routers support an extra password to enable password changes</value>

        [DataMember(Name="SupportsEnablePassword")]
        public bool? SupportsEnablePassword { get; set; }

        /// <summary>
        /// Whether this ODBC platform supports an Instance name to identify the target
        /// </summary>
        /// <value>Whether this ODBC platform supports an Instance name to identify the target</value>

        [DataMember(Name="SupportsInstance")]
        public bool? SupportsInstance { get; set; }

        /// <summary>
        /// Whether this ODBC platform supports a Service name to identify the target
        /// </summary>
        /// <value>Whether this ODBC platform supports a Service name to identify the target</value>

        [DataMember(Name="SupportsServiceName")]
        public bool? SupportsServiceName { get; set; }

        /// <summary>
        /// Whether this platform supports verification of the SSL certificate
        /// </summary>
        /// <value>Whether this platform supports verification of the SSL certificate</value>

        [DataMember(Name="SupportsSslCertificateVerification")]
        public bool? SupportsSslCertificateVerification { get; set; }

        /// <summary>
        /// Whether this platform uses a nominated SSL CA certificate
        /// </summary>
        /// <value>Whether this platform uses a nominated SSL CA certificate</value>

        [DataMember(Name="SupportsSslThumbprint")]
        public bool? SupportsSslThumbprint { get; set; }

        /// <summary>
        /// Whether the platform requires a client ID to be specified  Valid for SAP platforms (Read-only)
        /// </summary>
        /// <value>Whether the platform requires a client ID to be specified  Valid for SAP platforms (Read-only)</value>

        [DataMember(Name="SupportsClientId")]
        public bool? SupportsClientId { get; set; }

        /// <summary>
        /// Whether a distinguished name is required for accounts  Valid for LDAP-based platforms (Read-only)
        /// </summary>
        /// <value>Whether a distinguished name is required for accounts  Valid for LDAP-based platforms (Read-only)</value>

        [DataMember(Name="RequiresDistinguishedName")]
        public bool? RequiresDistinguishedName { get; set; }

        /// <summary>
        /// Whether this platform supports &#x27;as privileges&#x27; property (Oracle only)
        /// </summary>
        /// <value>Whether this platform supports &#x27;as privileges&#x27; property (Oracle only)</value>

        [DataMember(Name="SupportsOraclePrivileges")]
        public bool? SupportsOraclePrivileges { get; set; }

        /// <summary>
        /// Whether this platform supports Tacacs Secret (Cisco ISE only)
        /// </summary>
        /// <value>Whether this platform supports Tacacs Secret (Cisco ISE only)</value>

        [DataMember(Name="SupportsTacacsSecret")]
        public bool? SupportsTacacsSecret { get; set; }

        /// <summary>
        /// Set to true if this platform is a directory that supports LDAP (read-only)
        /// </summary>
        /// <value>Set to true if this platform is a directory that supports LDAP (read-only)</value>

        [DataMember(Name="SupportsLdap")]
        public bool? SupportsLdap { get; set; }

        /// <summary>
        /// Set to true if this platform is a directory that supports directory synchronization (read-only)
        /// </summary>
        /// <value>Set to true if this platform is a directory that supports directory synchronization (read-only)</value>

        [DataMember(Name="SupportsDirectorySync")]
        public bool? SupportsDirectorySync { get; set; }

        /// <summary>
        /// Set to true if this platform is a directory that supports asset discovery (read-only)
        /// </summary>
        /// <value>Set to true if this platform is a directory that supports asset discovery (read-only)</value>

        [DataMember(Name="SupportsDirectoryAssetDiscovery")]
        public bool? SupportsDirectoryAssetDiscovery { get; set; }

        /// <summary>
        /// Whether named pipes or TcpIp is used for service account connection to the platform  Valid for Sql Server platforms
        /// </summary>
        /// <value>Whether named pipes or TcpIp is used for service account connection to the platform  Valid for Sql Server platforms</value>

        [DataMember(Name="SupportsNamedPipeForServiceAccountConnection")]
        public bool? SupportsNamedPipeForServiceAccountConnection { get; set; }

        /// <summary>
        /// Whether to use the profile&#x27;s next change date as the interval on a Top Secret mainframe
        /// </summary>
        /// <value>Whether to use the profile&#x27;s next change date as the interval on a Top Secret mainframe</value>

        [DataMember(Name="SupportsTopSecretInterval")]
        public bool? SupportsTopSecretInterval { get; set; }

        /// <summary>
        /// Whether this platform supports a privileged account that can be managed, but cannot be used as a service account  Valid for Checkpoint platforms
        /// </summary>
        /// <value>Whether this platform supports a privileged account that can be managed, but cannot be used as a service account  Valid for Checkpoint platforms</value>

        [DataMember(Name="SupportsPrivilegedAccount")]
        public bool? SupportsPrivilegedAccount { get; set; }

        /// <summary>
        /// WThe name of the privileged account, if supported  Valid for Checkpoint platforms
        /// </summary>
        /// <value>WThe name of the privileged account, if supported  Valid for Checkpoint platforms</value>

        [DataMember(Name="PrivilegedAccountName")]
        public string PrivilegedAccountName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlatformConnectionProperties {\n");
            sb.Append("  DefaultPort: ").Append(DefaultPort).Append("\n");
            sb.Append("  DefaultSslPort: ").Append(DefaultSslPort).Append("\n");
            sb.Append("  AllowCustomPort: ").Append(AllowCustomPort).Append("\n");
            sb.Append("  SupportsTimeout: ").Append(SupportsTimeout).Append("\n");
            sb.Append("  SupportsPasswordAuthentication: ").Append(SupportsPasswordAuthentication).Append("\n");
            sb.Append("  SupportsSshKeyAuthentication: ").Append(SupportsSshKeyAuthentication).Append("\n");
            sb.Append("  SupportsLocalhostPasswordAuthentication: ").Append(SupportsLocalhostPasswordAuthentication).Append("\n");
            sb.Append("  SupportsDirectoryPasswordAuthentication: ").Append(SupportsDirectoryPasswordAuthentication).Append("\n");
            sb.Append("  SupportsAccessKeyAuthentication: ").Append(SupportsAccessKeyAuthentication).Append("\n");
            sb.Append("  SupportsAccountPasswordAuthentication: ").Append(SupportsAccountPasswordAuthentication).Append("\n");
            sb.Append("  SupportsStarlingConnectAuthentication: ").Append(SupportsStarlingConnectAuthentication).Append("\n");
            sb.Append("  SupportsPrivilegeElevationCommand: ").Append(SupportsPrivilegeElevationCommand).Append("\n");
            sb.Append("  SupportsSslEncryption: ").Append(SupportsSslEncryption).Append("\n");
            sb.Append("  SupportsWorkstationId: ").Append(SupportsWorkstationId).Append("\n");
            sb.Append("  SupportsSshTransport: ").Append(SupportsSshTransport).Append("\n");
            sb.Append("  SupportsEnablePassword: ").Append(SupportsEnablePassword).Append("\n");
            sb.Append("  SupportsInstance: ").Append(SupportsInstance).Append("\n");
            sb.Append("  SupportsServiceName: ").Append(SupportsServiceName).Append("\n");
            sb.Append("  SupportsSslCertificateVerification: ").Append(SupportsSslCertificateVerification).Append("\n");
            sb.Append("  SupportsSslThumbprint: ").Append(SupportsSslThumbprint).Append("\n");
            sb.Append("  SupportsClientId: ").Append(SupportsClientId).Append("\n");
            sb.Append("  RequiresDistinguishedName: ").Append(RequiresDistinguishedName).Append("\n");
            sb.Append("  SupportsOraclePrivileges: ").Append(SupportsOraclePrivileges).Append("\n");
            sb.Append("  SupportsTacacsSecret: ").Append(SupportsTacacsSecret).Append("\n");
            sb.Append("  SupportsLdap: ").Append(SupportsLdap).Append("\n");
            sb.Append("  SupportsDirectorySync: ").Append(SupportsDirectorySync).Append("\n");
            sb.Append("  SupportsDirectoryAssetDiscovery: ").Append(SupportsDirectoryAssetDiscovery).Append("\n");
            sb.Append("  SupportsNamedPipeForServiceAccountConnection: ").Append(SupportsNamedPipeForServiceAccountConnection).Append("\n");
            sb.Append("  SupportsTopSecretInterval: ").Append(SupportsTopSecretInterval).Append("\n");
            sb.Append("  SupportsPrivilegedAccount: ").Append(SupportsPrivilegedAccount).Append("\n");
            sb.Append("  PrivilegedAccountName: ").Append(PrivilegedAccountName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlatformConnectionProperties)obj);
        }

        /// <summary>
        /// Returns true if PlatformConnectionProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PlatformConnectionProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformConnectionProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DefaultPort == other.DefaultPort ||
                    DefaultPort != null &&
                    DefaultPort.Equals(other.DefaultPort)
                ) && 
                (
                    DefaultSslPort == other.DefaultSslPort ||
                    DefaultSslPort != null &&
                    DefaultSslPort.Equals(other.DefaultSslPort)
                ) && 
                (
                    AllowCustomPort == other.AllowCustomPort ||
                    AllowCustomPort != null &&
                    AllowCustomPort.Equals(other.AllowCustomPort)
                ) && 
                (
                    SupportsTimeout == other.SupportsTimeout ||
                    SupportsTimeout != null &&
                    SupportsTimeout.Equals(other.SupportsTimeout)
                ) && 
                (
                    SupportsPasswordAuthentication == other.SupportsPasswordAuthentication ||
                    SupportsPasswordAuthentication != null &&
                    SupportsPasswordAuthentication.Equals(other.SupportsPasswordAuthentication)
                ) && 
                (
                    SupportsSshKeyAuthentication == other.SupportsSshKeyAuthentication ||
                    SupportsSshKeyAuthentication != null &&
                    SupportsSshKeyAuthentication.Equals(other.SupportsSshKeyAuthentication)
                ) && 
                (
                    SupportsLocalhostPasswordAuthentication == other.SupportsLocalhostPasswordAuthentication ||
                    SupportsLocalhostPasswordAuthentication != null &&
                    SupportsLocalhostPasswordAuthentication.Equals(other.SupportsLocalhostPasswordAuthentication)
                ) && 
                (
                    SupportsDirectoryPasswordAuthentication == other.SupportsDirectoryPasswordAuthentication ||
                    SupportsDirectoryPasswordAuthentication != null &&
                    SupportsDirectoryPasswordAuthentication.Equals(other.SupportsDirectoryPasswordAuthentication)
                ) && 
                (
                    SupportsAccessKeyAuthentication == other.SupportsAccessKeyAuthentication ||
                    SupportsAccessKeyAuthentication != null &&
                    SupportsAccessKeyAuthentication.Equals(other.SupportsAccessKeyAuthentication)
                ) && 
                (
                    SupportsAccountPasswordAuthentication == other.SupportsAccountPasswordAuthentication ||
                    SupportsAccountPasswordAuthentication != null &&
                    SupportsAccountPasswordAuthentication.Equals(other.SupportsAccountPasswordAuthentication)
                ) && 
                (
                    SupportsStarlingConnectAuthentication == other.SupportsStarlingConnectAuthentication ||
                    SupportsStarlingConnectAuthentication != null &&
                    SupportsStarlingConnectAuthentication.Equals(other.SupportsStarlingConnectAuthentication)
                ) && 
                (
                    SupportsPrivilegeElevationCommand == other.SupportsPrivilegeElevationCommand ||
                    SupportsPrivilegeElevationCommand != null &&
                    SupportsPrivilegeElevationCommand.Equals(other.SupportsPrivilegeElevationCommand)
                ) && 
                (
                    SupportsSslEncryption == other.SupportsSslEncryption ||
                    SupportsSslEncryption != null &&
                    SupportsSslEncryption.Equals(other.SupportsSslEncryption)
                ) && 
                (
                    SupportsWorkstationId == other.SupportsWorkstationId ||
                    SupportsWorkstationId != null &&
                    SupportsWorkstationId.Equals(other.SupportsWorkstationId)
                ) && 
                (
                    SupportsSshTransport == other.SupportsSshTransport ||
                    SupportsSshTransport != null &&
                    SupportsSshTransport.Equals(other.SupportsSshTransport)
                ) && 
                (
                    SupportsEnablePassword == other.SupportsEnablePassword ||
                    SupportsEnablePassword != null &&
                    SupportsEnablePassword.Equals(other.SupportsEnablePassword)
                ) && 
                (
                    SupportsInstance == other.SupportsInstance ||
                    SupportsInstance != null &&
                    SupportsInstance.Equals(other.SupportsInstance)
                ) && 
                (
                    SupportsServiceName == other.SupportsServiceName ||
                    SupportsServiceName != null &&
                    SupportsServiceName.Equals(other.SupportsServiceName)
                ) && 
                (
                    SupportsSslCertificateVerification == other.SupportsSslCertificateVerification ||
                    SupportsSslCertificateVerification != null &&
                    SupportsSslCertificateVerification.Equals(other.SupportsSslCertificateVerification)
                ) && 
                (
                    SupportsSslThumbprint == other.SupportsSslThumbprint ||
                    SupportsSslThumbprint != null &&
                    SupportsSslThumbprint.Equals(other.SupportsSslThumbprint)
                ) && 
                (
                    SupportsClientId == other.SupportsClientId ||
                    SupportsClientId != null &&
                    SupportsClientId.Equals(other.SupportsClientId)
                ) && 
                (
                    RequiresDistinguishedName == other.RequiresDistinguishedName ||
                    RequiresDistinguishedName != null &&
                    RequiresDistinguishedName.Equals(other.RequiresDistinguishedName)
                ) && 
                (
                    SupportsOraclePrivileges == other.SupportsOraclePrivileges ||
                    SupportsOraclePrivileges != null &&
                    SupportsOraclePrivileges.Equals(other.SupportsOraclePrivileges)
                ) && 
                (
                    SupportsTacacsSecret == other.SupportsTacacsSecret ||
                    SupportsTacacsSecret != null &&
                    SupportsTacacsSecret.Equals(other.SupportsTacacsSecret)
                ) && 
                (
                    SupportsLdap == other.SupportsLdap ||
                    SupportsLdap != null &&
                    SupportsLdap.Equals(other.SupportsLdap)
                ) && 
                (
                    SupportsDirectorySync == other.SupportsDirectorySync ||
                    SupportsDirectorySync != null &&
                    SupportsDirectorySync.Equals(other.SupportsDirectorySync)
                ) && 
                (
                    SupportsDirectoryAssetDiscovery == other.SupportsDirectoryAssetDiscovery ||
                    SupportsDirectoryAssetDiscovery != null &&
                    SupportsDirectoryAssetDiscovery.Equals(other.SupportsDirectoryAssetDiscovery)
                ) && 
                (
                    SupportsNamedPipeForServiceAccountConnection == other.SupportsNamedPipeForServiceAccountConnection ||
                    SupportsNamedPipeForServiceAccountConnection != null &&
                    SupportsNamedPipeForServiceAccountConnection.Equals(other.SupportsNamedPipeForServiceAccountConnection)
                ) && 
                (
                    SupportsTopSecretInterval == other.SupportsTopSecretInterval ||
                    SupportsTopSecretInterval != null &&
                    SupportsTopSecretInterval.Equals(other.SupportsTopSecretInterval)
                ) && 
                (
                    SupportsPrivilegedAccount == other.SupportsPrivilegedAccount ||
                    SupportsPrivilegedAccount != null &&
                    SupportsPrivilegedAccount.Equals(other.SupportsPrivilegedAccount)
                ) && 
                (
                    PrivilegedAccountName == other.PrivilegedAccountName ||
                    PrivilegedAccountName != null &&
                    PrivilegedAccountName.Equals(other.PrivilegedAccountName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DefaultPort != null)
                    hashCode = hashCode * 59 + DefaultPort.GetHashCode();
                    if (DefaultSslPort != null)
                    hashCode = hashCode * 59 + DefaultSslPort.GetHashCode();
                    if (AllowCustomPort != null)
                    hashCode = hashCode * 59 + AllowCustomPort.GetHashCode();
                    if (SupportsTimeout != null)
                    hashCode = hashCode * 59 + SupportsTimeout.GetHashCode();
                    if (SupportsPasswordAuthentication != null)
                    hashCode = hashCode * 59 + SupportsPasswordAuthentication.GetHashCode();
                    if (SupportsSshKeyAuthentication != null)
                    hashCode = hashCode * 59 + SupportsSshKeyAuthentication.GetHashCode();
                    if (SupportsLocalhostPasswordAuthentication != null)
                    hashCode = hashCode * 59 + SupportsLocalhostPasswordAuthentication.GetHashCode();
                    if (SupportsDirectoryPasswordAuthentication != null)
                    hashCode = hashCode * 59 + SupportsDirectoryPasswordAuthentication.GetHashCode();
                    if (SupportsAccessKeyAuthentication != null)
                    hashCode = hashCode * 59 + SupportsAccessKeyAuthentication.GetHashCode();
                    if (SupportsAccountPasswordAuthentication != null)
                    hashCode = hashCode * 59 + SupportsAccountPasswordAuthentication.GetHashCode();
                    if (SupportsStarlingConnectAuthentication != null)
                    hashCode = hashCode * 59 + SupportsStarlingConnectAuthentication.GetHashCode();
                    if (SupportsPrivilegeElevationCommand != null)
                    hashCode = hashCode * 59 + SupportsPrivilegeElevationCommand.GetHashCode();
                    if (SupportsSslEncryption != null)
                    hashCode = hashCode * 59 + SupportsSslEncryption.GetHashCode();
                    if (SupportsWorkstationId != null)
                    hashCode = hashCode * 59 + SupportsWorkstationId.GetHashCode();
                    if (SupportsSshTransport != null)
                    hashCode = hashCode * 59 + SupportsSshTransport.GetHashCode();
                    if (SupportsEnablePassword != null)
                    hashCode = hashCode * 59 + SupportsEnablePassword.GetHashCode();
                    if (SupportsInstance != null)
                    hashCode = hashCode * 59 + SupportsInstance.GetHashCode();
                    if (SupportsServiceName != null)
                    hashCode = hashCode * 59 + SupportsServiceName.GetHashCode();
                    if (SupportsSslCertificateVerification != null)
                    hashCode = hashCode * 59 + SupportsSslCertificateVerification.GetHashCode();
                    if (SupportsSslThumbprint != null)
                    hashCode = hashCode * 59 + SupportsSslThumbprint.GetHashCode();
                    if (SupportsClientId != null)
                    hashCode = hashCode * 59 + SupportsClientId.GetHashCode();
                    if (RequiresDistinguishedName != null)
                    hashCode = hashCode * 59 + RequiresDistinguishedName.GetHashCode();
                    if (SupportsOraclePrivileges != null)
                    hashCode = hashCode * 59 + SupportsOraclePrivileges.GetHashCode();
                    if (SupportsTacacsSecret != null)
                    hashCode = hashCode * 59 + SupportsTacacsSecret.GetHashCode();
                    if (SupportsLdap != null)
                    hashCode = hashCode * 59 + SupportsLdap.GetHashCode();
                    if (SupportsDirectorySync != null)
                    hashCode = hashCode * 59 + SupportsDirectorySync.GetHashCode();
                    if (SupportsDirectoryAssetDiscovery != null)
                    hashCode = hashCode * 59 + SupportsDirectoryAssetDiscovery.GetHashCode();
                    if (SupportsNamedPipeForServiceAccountConnection != null)
                    hashCode = hashCode * 59 + SupportsNamedPipeForServiceAccountConnection.GetHashCode();
                    if (SupportsTopSecretInterval != null)
                    hashCode = hashCode * 59 + SupportsTopSecretInterval.GetHashCode();
                    if (SupportsPrivilegedAccount != null)
                    hashCode = hashCode * 59 + SupportsPrivilegedAccount.GetHashCode();
                    if (PrivilegedAccountName != null)
                    hashCode = hashCode * 59 + PrivilegedAccountName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlatformConnectionProperties left, PlatformConnectionProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlatformConnectionProperties left, PlatformConnectionProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
