/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Properties used when using Directory DiscoveryType
    /// </summary>
    [DataContract]
    public partial class DirectoryDiscoveryProperties : IEquatable<DirectoryDiscoveryProperties>
    { 
        /// <summary>
        /// The directory this job belongs to. Required with &#x27;Directory&#x27; discovery type.
        /// </summary>
        /// <value>The directory this job belongs to. Required with &#x27;Directory&#x27; discovery type.</value>

        [DataMember(Name="DirectoryId")]
        public int? DirectoryId { get; set; }

        /// <summary>
        /// Name of the directory this job belongs to (Read-only)
        /// </summary>
        /// <value>Name of the directory this job belongs to (Read-only)</value>

        [DataMember(Name="DirectoryName")]
        public string DirectoryName { get; set; }

        /// <summary>
        /// NetworkAddress of the directory this job belongs to (Read-only)
        /// </summary>
        /// <value>NetworkAddress of the directory this job belongs to (Read-only)</value>

        [DataMember(Name="DirectoryNetworkAddress")]
        public string DirectoryNetworkAddress { get; set; }

        /// <summary>
        /// Platform ID of the directory this job belongs to (Read-only)
        /// </summary>
        /// <value>Platform ID of the directory this job belongs to (Read-only)</value>

        [DataMember(Name="DirectoryPlatformId")]
        public int? DirectoryPlatformId { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryPlatformType
        /// </summary>

        [DataMember(Name="DirectoryPlatformType")]
        public PlatformType DirectoryPlatformType { get; set; }

        /// <summary>
        /// Platform display name of the directory this job belongs to (Read-only)
        /// </summary>
        /// <value>Platform display name of the directory this job belongs to (Read-only)</value>

        [DataMember(Name="DirectoryPlatformDisplayName")]
        public string DirectoryPlatformDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectoryDiscoveryProperties {\n");
            sb.Append("  DirectoryId: ").Append(DirectoryId).Append("\n");
            sb.Append("  DirectoryName: ").Append(DirectoryName).Append("\n");
            sb.Append("  DirectoryNetworkAddress: ").Append(DirectoryNetworkAddress).Append("\n");
            sb.Append("  DirectoryPlatformId: ").Append(DirectoryPlatformId).Append("\n");
            sb.Append("  DirectoryPlatformType: ").Append(DirectoryPlatformType).Append("\n");
            sb.Append("  DirectoryPlatformDisplayName: ").Append(DirectoryPlatformDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DirectoryDiscoveryProperties)obj);
        }

        /// <summary>
        /// Returns true if DirectoryDiscoveryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectoryDiscoveryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectoryDiscoveryProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DirectoryId == other.DirectoryId ||
                    DirectoryId != null &&
                    DirectoryId.Equals(other.DirectoryId)
                ) && 
                (
                    DirectoryName == other.DirectoryName ||
                    DirectoryName != null &&
                    DirectoryName.Equals(other.DirectoryName)
                ) && 
                (
                    DirectoryNetworkAddress == other.DirectoryNetworkAddress ||
                    DirectoryNetworkAddress != null &&
                    DirectoryNetworkAddress.Equals(other.DirectoryNetworkAddress)
                ) && 
                (
                    DirectoryPlatformId == other.DirectoryPlatformId ||
                    DirectoryPlatformId != null &&
                    DirectoryPlatformId.Equals(other.DirectoryPlatformId)
                ) && 
                (
                    DirectoryPlatformType == other.DirectoryPlatformType ||
                    DirectoryPlatformType != null &&
                    DirectoryPlatformType.Equals(other.DirectoryPlatformType)
                ) && 
                (
                    DirectoryPlatformDisplayName == other.DirectoryPlatformDisplayName ||
                    DirectoryPlatformDisplayName != null &&
                    DirectoryPlatformDisplayName.Equals(other.DirectoryPlatformDisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DirectoryId != null)
                    hashCode = hashCode * 59 + DirectoryId.GetHashCode();
                    if (DirectoryName != null)
                    hashCode = hashCode * 59 + DirectoryName.GetHashCode();
                    if (DirectoryNetworkAddress != null)
                    hashCode = hashCode * 59 + DirectoryNetworkAddress.GetHashCode();
                    if (DirectoryPlatformId != null)
                    hashCode = hashCode * 59 + DirectoryPlatformId.GetHashCode();
                    if (DirectoryPlatformType != null)
                    hashCode = hashCode * 59 + DirectoryPlatformType.GetHashCode();
                    if (DirectoryPlatformDisplayName != null)
                    hashCode = hashCode * 59 + DirectoryPlatformDisplayName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DirectoryDiscoveryProperties left, DirectoryDiscoveryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectoryDiscoveryProperties left, DirectoryDiscoveryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
