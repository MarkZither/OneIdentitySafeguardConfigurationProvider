/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Descriptors for group schema properties
    /// </summary>
    [DataContract]
    public partial class GroupAssetSchemaDescriptors : IEquatable<GroupAssetSchemaDescriptors>
    { 
        /// <summary>
        /// Gets or Sets GroupClassTypeDescriptor
        /// </summary>

        [DataMember(Name="GroupClassTypeDescriptor")]
        public SchemaDescriptor GroupClassTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets MemberAttributeDescriptor
        /// </summary>

        [DataMember(Name="MemberAttributeDescriptor")]
        public SchemaDescriptor MemberAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets NameAttributeDescriptor
        /// </summary>

        [DataMember(Name="NameAttributeDescriptor")]
        public SchemaDescriptor NameAttributeDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupAssetSchemaDescriptors {\n");
            sb.Append("  GroupClassTypeDescriptor: ").Append(GroupClassTypeDescriptor).Append("\n");
            sb.Append("  MemberAttributeDescriptor: ").Append(MemberAttributeDescriptor).Append("\n");
            sb.Append("  NameAttributeDescriptor: ").Append(NameAttributeDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GroupAssetSchemaDescriptors)obj);
        }

        /// <summary>
        /// Returns true if GroupAssetSchemaDescriptors instances are equal
        /// </summary>
        /// <param name="other">Instance of GroupAssetSchemaDescriptors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupAssetSchemaDescriptors other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GroupClassTypeDescriptor == other.GroupClassTypeDescriptor ||
                    GroupClassTypeDescriptor != null &&
                    GroupClassTypeDescriptor.Equals(other.GroupClassTypeDescriptor)
                ) && 
                (
                    MemberAttributeDescriptor == other.MemberAttributeDescriptor ||
                    MemberAttributeDescriptor != null &&
                    MemberAttributeDescriptor.Equals(other.MemberAttributeDescriptor)
                ) && 
                (
                    NameAttributeDescriptor == other.NameAttributeDescriptor ||
                    NameAttributeDescriptor != null &&
                    NameAttributeDescriptor.Equals(other.NameAttributeDescriptor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GroupClassTypeDescriptor != null)
                    hashCode = hashCode * 59 + GroupClassTypeDescriptor.GetHashCode();
                    if (MemberAttributeDescriptor != null)
                    hashCode = hashCode * 59 + MemberAttributeDescriptor.GetHashCode();
                    if (NameAttributeDescriptor != null)
                    hashCode = hashCode * 59 + NameAttributeDescriptor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GroupAssetSchemaDescriptors left, GroupAssetSchemaDescriptors right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GroupAssetSchemaDescriptors left, GroupAssetSchemaDescriptors right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
