/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Appliance in the cluster
    /// </summary>
    [DataContract]
    public partial class Appliance : IEquatable<Appliance>
    { 
        /// <summary>
        /// Appliance unique ID
        /// </summary>
        /// <value>Appliance unique ID</value>
        [Required]

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// Appliance display name
        /// </summary>
        /// <value>Appliance display name</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// IPv4 address of this appliance
        /// </summary>
        /// <value>IPv4 address of this appliance</value>

        [DataMember(Name="Ipv4Address")]
        public string Ipv4Address { get; set; }

        /// <summary>
        /// IPv6 address of this appliance
        /// </summary>
        /// <value>IPv6 address of this appliance</value>

        [DataMember(Name="Ipv6Address")]
        public string Ipv6Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Appliance {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ipv4Address: ").Append(Ipv4Address).Append("\n");
            sb.Append("  Ipv6Address: ").Append(Ipv6Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Appliance)obj);
        }

        /// <summary>
        /// Returns true if Appliance instances are equal
        /// </summary>
        /// <param name="other">Instance of Appliance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Appliance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Ipv4Address == other.Ipv4Address ||
                    Ipv4Address != null &&
                    Ipv4Address.Equals(other.Ipv4Address)
                ) && 
                (
                    Ipv6Address == other.Ipv6Address ||
                    Ipv6Address != null &&
                    Ipv6Address.Equals(other.Ipv6Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Ipv4Address != null)
                    hashCode = hashCode * 59 + Ipv4Address.GetHashCode();
                    if (Ipv6Address != null)
                    hashCode = hashCode * 59 + Ipv6Address.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Appliance left, Appliance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Appliance left, Appliance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
