/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents configuration for an SNMP event subscriber
    /// </summary>
    [DataContract]
    public partial class SnmpSubscriberProperties : IEquatable<SnmpSubscriberProperties>
    { 
        /// <summary>
        /// Subscriber SNMP network address
        /// </summary>
        /// <value>Subscriber SNMP network address</value>

        [MaxLength(255)]
        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// UDP port number for SNMP traps
        /// </summary>
        /// <value>UDP port number for SNMP traps</value>

        [DataMember(Name="Port")]
        public int? Port { get; set; }

        /// <summary>
        /// SNMP community
        /// </summary>
        /// <value>SNMP community</value>

        [MaxLength(255)]
        [DataMember(Name="Community")]
        public string Community { get; set; }

        /// <summary>
        /// SNMP version
        /// </summary>
        /// <value>SNMP version</value>

        [Range(1, 3)]
        [DataMember(Name="Version")]
        public int? Version { get; set; }

        /// <summary>
        /// SNMP engine ID (between 10 and 64 hex characters, 0x is optional). Will be generated based on ApplianceId if not supplied. (v3 only)
        /// </summary>
        /// <value>SNMP engine ID (between 10 and 64 hex characters, 0x is optional). Will be generated based on ApplianceId if not supplied. (v3 only)</value>

        [StringLength(66, MinimumLength=10)]
        [DataMember(Name="EngineId")]
        public string EngineId { get; set; }

        /// <summary>
        /// SNMP authentication username (v3 only)
        /// </summary>
        /// <value>SNMP authentication username (v3 only)</value>

        [MaxLength(50)]
        [DataMember(Name="AuthenticationUserName")]
        public string AuthenticationUserName { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>

        [DataMember(Name="AuthenticationType")]
        public SnmpAuthenticationType AuthenticationType { get; set; }

        /// <summary>
        /// SNMP authentication password (v3 only)
        /// </summary>
        /// <value>SNMP authentication password (v3 only)</value>

        [MaxLength(255)]
        [DataMember(Name="AuthenticationPassword")]
        public string AuthenticationPassword { get; set; }

        /// <summary>
        /// Has SNMP authentication password (v3 only) (Read-Only)
        /// </summary>
        /// <value>Has SNMP authentication password (v3 only) (Read-Only)</value>

        [DataMember(Name="HasAuthenticationPassword")]
        public bool? HasAuthenticationPassword { get; set; }

        /// <summary>
        /// Gets or Sets EncryptionType
        /// </summary>

        [DataMember(Name="EncryptionType")]
        public SnmpEncryptionType EncryptionType { get; set; }

        /// <summary>
        /// SNMP encryption password (v3 only)
        /// </summary>
        /// <value>SNMP encryption password (v3 only)</value>

        [MaxLength(255)]
        [DataMember(Name="EncryptionPassword")]
        public string EncryptionPassword { get; set; }

        /// <summary>
        /// Has SNMP encryption password (v3 only) (Read-Only)
        /// </summary>
        /// <value>Has SNMP encryption password (v3 only) (Read-Only)</value>

        [DataMember(Name="HasEncryptionPassword")]
        public bool? HasEncryptionPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnmpSubscriberProperties {\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Community: ").Append(Community).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  EngineId: ").Append(EngineId).Append("\n");
            sb.Append("  AuthenticationUserName: ").Append(AuthenticationUserName).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  AuthenticationPassword: ").Append(AuthenticationPassword).Append("\n");
            sb.Append("  HasAuthenticationPassword: ").Append(HasAuthenticationPassword).Append("\n");
            sb.Append("  EncryptionType: ").Append(EncryptionType).Append("\n");
            sb.Append("  EncryptionPassword: ").Append(EncryptionPassword).Append("\n");
            sb.Append("  HasEncryptionPassword: ").Append(HasEncryptionPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SnmpSubscriberProperties)obj);
        }

        /// <summary>
        /// Returns true if SnmpSubscriberProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of SnmpSubscriberProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnmpSubscriberProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    Community == other.Community ||
                    Community != null &&
                    Community.Equals(other.Community)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    EngineId == other.EngineId ||
                    EngineId != null &&
                    EngineId.Equals(other.EngineId)
                ) && 
                (
                    AuthenticationUserName == other.AuthenticationUserName ||
                    AuthenticationUserName != null &&
                    AuthenticationUserName.Equals(other.AuthenticationUserName)
                ) && 
                (
                    AuthenticationType == other.AuthenticationType ||
                    AuthenticationType != null &&
                    AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    AuthenticationPassword == other.AuthenticationPassword ||
                    AuthenticationPassword != null &&
                    AuthenticationPassword.Equals(other.AuthenticationPassword)
                ) && 
                (
                    HasAuthenticationPassword == other.HasAuthenticationPassword ||
                    HasAuthenticationPassword != null &&
                    HasAuthenticationPassword.Equals(other.HasAuthenticationPassword)
                ) && 
                (
                    EncryptionType == other.EncryptionType ||
                    EncryptionType != null &&
                    EncryptionType.Equals(other.EncryptionType)
                ) && 
                (
                    EncryptionPassword == other.EncryptionPassword ||
                    EncryptionPassword != null &&
                    EncryptionPassword.Equals(other.EncryptionPassword)
                ) && 
                (
                    HasEncryptionPassword == other.HasEncryptionPassword ||
                    HasEncryptionPassword != null &&
                    HasEncryptionPassword.Equals(other.HasEncryptionPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (Community != null)
                    hashCode = hashCode * 59 + Community.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (EngineId != null)
                    hashCode = hashCode * 59 + EngineId.GetHashCode();
                    if (AuthenticationUserName != null)
                    hashCode = hashCode * 59 + AuthenticationUserName.GetHashCode();
                    if (AuthenticationType != null)
                    hashCode = hashCode * 59 + AuthenticationType.GetHashCode();
                    if (AuthenticationPassword != null)
                    hashCode = hashCode * 59 + AuthenticationPassword.GetHashCode();
                    if (HasAuthenticationPassword != null)
                    hashCode = hashCode * 59 + HasAuthenticationPassword.GetHashCode();
                    if (EncryptionType != null)
                    hashCode = hashCode * 59 + EncryptionType.GetHashCode();
                    if (EncryptionPassword != null)
                    hashCode = hashCode * 59 + EncryptionPassword.GetHashCode();
                    if (HasEncryptionPassword != null)
                    hashCode = hashCode * 59 + HasEncryptionPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SnmpSubscriberProperties left, SnmpSubscriberProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SnmpSubscriberProperties left, SnmpSubscriberProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
