/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents security configuration governing the access to assets and accounts
    /// </summary>
    [DataContract]
    public partial class AccessPolicy : IEquatable<AccessPolicy>
    { 
        /// <summary>
        /// The database ID of the policy (Read-only)
        /// </summary>
        /// <value>The database ID of the policy (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the policy
        /// </summary>
        /// <value>The name of the policy</value>
        [Required]

        [StringLength(50, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The description of the policy
        /// </summary>
        /// <value>The description of the policy</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Database ID of the role this policy is assigned to
        /// </summary>
        /// <value>Database ID of the role this policy is assigned to</value>
        [Required]

        [DataMember(Name="RoleId")]
        public int? RoleId { get; set; }

        /// <summary>
        /// Name of the role this policy is assigned to (Read-only)
        /// </summary>
        /// <value>Name of the role this policy is assigned to (Read-only)</value>

        [DataMember(Name="RoleName")]
        public string RoleName { get; set; }

        /// <summary>
        /// Priority of the role this policy is assigned to (Read-only)
        /// </summary>
        /// <value>Priority of the role this policy is assigned to (Read-only)</value>

        [DataMember(Name="RolePriority")]
        public int? RolePriority { get; set; }

        /// <summary>
        /// The priority of this policy compared to other policies in this role  Set to 0 to add as the lowest priority policy. Default is max role priority plus 1.
        /// </summary>
        /// <value>The priority of this policy compared to other policies in this role  Set to 0 to add as the lowest priority policy. Default is max role priority plus 1.</value>

        [Range(0, 2147483647)]
        [DataMember(Name="Priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Number of accounts that have been assigned to this policy
        /// </summary>
        /// <value>Number of accounts that have been assigned to this policy</value>

        [DataMember(Name="AccountCount")]
        public int? AccountCount { get; set; }

        /// <summary>
        /// Number of assets that have been assigned to this policy
        /// </summary>
        /// <value>Number of assets that have been assigned to this policy</value>

        [DataMember(Name="AssetCount")]
        public int? AssetCount { get; set; }

        /// <summary>
        /// Number of account groups that have been assigned to this policy
        /// </summary>
        /// <value>Number of account groups that have been assigned to this policy</value>

        [DataMember(Name="AccountGroupCount")]
        public int? AccountGroupCount { get; set; }

        /// <summary>
        /// Number of asset groups that have been assigned to this policy
        /// </summary>
        /// <value>Number of asset groups that have been assigned to this policy</value>

        [DataMember(Name="AssetGroupCount")]
        public int? AssetGroupCount { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets RequesterProperties
        /// </summary>

        [DataMember(Name="RequesterProperties")]
        public PolicyRequesterProperties RequesterProperties { get; set; }

        /// <summary>
        /// Gets or Sets ApproverProperties
        /// </summary>

        [DataMember(Name="ApproverProperties")]
        public PolicyApproverProperties ApproverProperties { get; set; }

        /// <summary>
        /// Gets or Sets ReviewerProperties
        /// </summary>

        [DataMember(Name="ReviewerProperties")]
        public PolicyReviewerProperties ReviewerProperties { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequestProperties
        /// </summary>

        [DataMember(Name="AccessRequestProperties")]
        public AccessRequestProperties AccessRequestProperties { get; set; }

        /// <summary>
        /// Gets or Sets SessionProperties
        /// </summary>

        [DataMember(Name="SessionProperties")]
        public SessionProperties SessionProperties { get; set; }

        /// <summary>
        /// Gets or Sets EmergencyAccessProperties
        /// </summary>

        [DataMember(Name="EmergencyAccessProperties")]
        public PolicyEmergencyAccessProperties EmergencyAccessProperties { get; set; }

        /// <summary>
        /// Sets of approvers required to approve requests granted by this policy
        /// </summary>
        /// <value>Sets of approvers required to approve requests granted by this policy</value>

        [DataMember(Name="ApproverSets")]
        public List<ApproverSet> ApproverSets { get; set; }

        /// <summary>
        /// List of identities allowed to review requests allowed by this policy
        /// </summary>
        /// <value>List of identities allowed to review requests allowed by this policy</value>

        [DataMember(Name="Reviewers")]
        public List<Identity> Reviewers { get; set; }

        /// <summary>
        /// List of contacts that will be notified when requests need to be escalated, etc.
        /// </summary>
        /// <value>List of contacts that will be notified when requests need to be escalated, etc.</value>

        [DataMember(Name="NotificationContacts")]
        public List<NotificationContact> NotificationContacts { get; set; }

        /// <summary>
        /// List of reason codes that may be used when making password requests
        /// </summary>
        /// <value>List of reason codes that may be used when making password requests</value>

        [DataMember(Name="ReasonCodes")]
        public List<ReasonCode> ReasonCodes { get; set; }

        /// <summary>
        /// List of scope items that be requested by this policy
        /// </summary>
        /// <value>List of scope items that be requested by this policy</value>

        [DataMember(Name="ScopeItems")]
        public List<PolicyScopeItem> ScopeItems { get; set; }

        /// <summary>
        /// Date/time after which the associated policy/role will cease to be active
        /// </summary>
        /// <value>Date/time after which the associated policy/role will cease to be active</value>

        [DataMember(Name="ExpirationDate")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Whether this policy is expired.  (Read-only)
        /// </summary>
        /// <value>Whether this policy is expired.  (Read-only)</value>

        [DataMember(Name="IsExpired")]
        public bool? IsExpired { get; set; }

        /// <summary>
        /// Whether this policy has an invalid connection policy.
        /// </summary>
        /// <value>Whether this policy has an invalid connection policy.</value>

        [DataMember(Name="InvalidConnectionPolicy")]
        public bool? InvalidConnectionPolicy { get; set; }

        /// <summary>
        /// Gets or Sets HourlyRestrictionProperties
        /// </summary>

        [DataMember(Name="HourlyRestrictionProperties")]
        public HourlyRestrictionProperties HourlyRestrictionProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessPolicy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RolePriority: ").Append(RolePriority).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  AccountCount: ").Append(AccountCount).Append("\n");
            sb.Append("  AssetCount: ").Append(AssetCount).Append("\n");
            sb.Append("  AccountGroupCount: ").Append(AccountGroupCount).Append("\n");
            sb.Append("  AssetGroupCount: ").Append(AssetGroupCount).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  RequesterProperties: ").Append(RequesterProperties).Append("\n");
            sb.Append("  ApproverProperties: ").Append(ApproverProperties).Append("\n");
            sb.Append("  ReviewerProperties: ").Append(ReviewerProperties).Append("\n");
            sb.Append("  AccessRequestProperties: ").Append(AccessRequestProperties).Append("\n");
            sb.Append("  SessionProperties: ").Append(SessionProperties).Append("\n");
            sb.Append("  EmergencyAccessProperties: ").Append(EmergencyAccessProperties).Append("\n");
            sb.Append("  ApproverSets: ").Append(ApproverSets).Append("\n");
            sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            sb.Append("  NotificationContacts: ").Append(NotificationContacts).Append("\n");
            sb.Append("  ReasonCodes: ").Append(ReasonCodes).Append("\n");
            sb.Append("  ScopeItems: ").Append(ScopeItems).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  IsExpired: ").Append(IsExpired).Append("\n");
            sb.Append("  InvalidConnectionPolicy: ").Append(InvalidConnectionPolicy).Append("\n");
            sb.Append("  HourlyRestrictionProperties: ").Append(HourlyRestrictionProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessPolicy)obj);
        }

        /// <summary>
        /// Returns true if AccessPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessPolicy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    RoleName == other.RoleName ||
                    RoleName != null &&
                    RoleName.Equals(other.RoleName)
                ) && 
                (
                    RolePriority == other.RolePriority ||
                    RolePriority != null &&
                    RolePriority.Equals(other.RolePriority)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    AccountCount == other.AccountCount ||
                    AccountCount != null &&
                    AccountCount.Equals(other.AccountCount)
                ) && 
                (
                    AssetCount == other.AssetCount ||
                    AssetCount != null &&
                    AssetCount.Equals(other.AssetCount)
                ) && 
                (
                    AccountGroupCount == other.AccountGroupCount ||
                    AccountGroupCount != null &&
                    AccountGroupCount.Equals(other.AccountGroupCount)
                ) && 
                (
                    AssetGroupCount == other.AssetGroupCount ||
                    AssetGroupCount != null &&
                    AssetGroupCount.Equals(other.AssetGroupCount)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    RequesterProperties == other.RequesterProperties ||
                    RequesterProperties != null &&
                    RequesterProperties.Equals(other.RequesterProperties)
                ) && 
                (
                    ApproverProperties == other.ApproverProperties ||
                    ApproverProperties != null &&
                    ApproverProperties.Equals(other.ApproverProperties)
                ) && 
                (
                    ReviewerProperties == other.ReviewerProperties ||
                    ReviewerProperties != null &&
                    ReviewerProperties.Equals(other.ReviewerProperties)
                ) && 
                (
                    AccessRequestProperties == other.AccessRequestProperties ||
                    AccessRequestProperties != null &&
                    AccessRequestProperties.Equals(other.AccessRequestProperties)
                ) && 
                (
                    SessionProperties == other.SessionProperties ||
                    SessionProperties != null &&
                    SessionProperties.Equals(other.SessionProperties)
                ) && 
                (
                    EmergencyAccessProperties == other.EmergencyAccessProperties ||
                    EmergencyAccessProperties != null &&
                    EmergencyAccessProperties.Equals(other.EmergencyAccessProperties)
                ) && 
                (
                    ApproverSets == other.ApproverSets ||
                    ApproverSets != null &&
                    ApproverSets.SequenceEqual(other.ApproverSets)
                ) && 
                (
                    Reviewers == other.Reviewers ||
                    Reviewers != null &&
                    Reviewers.SequenceEqual(other.Reviewers)
                ) && 
                (
                    NotificationContacts == other.NotificationContacts ||
                    NotificationContacts != null &&
                    NotificationContacts.SequenceEqual(other.NotificationContacts)
                ) && 
                (
                    ReasonCodes == other.ReasonCodes ||
                    ReasonCodes != null &&
                    ReasonCodes.SequenceEqual(other.ReasonCodes)
                ) && 
                (
                    ScopeItems == other.ScopeItems ||
                    ScopeItems != null &&
                    ScopeItems.SequenceEqual(other.ScopeItems)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    IsExpired == other.IsExpired ||
                    IsExpired != null &&
                    IsExpired.Equals(other.IsExpired)
                ) && 
                (
                    InvalidConnectionPolicy == other.InvalidConnectionPolicy ||
                    InvalidConnectionPolicy != null &&
                    InvalidConnectionPolicy.Equals(other.InvalidConnectionPolicy)
                ) && 
                (
                    HourlyRestrictionProperties == other.HourlyRestrictionProperties ||
                    HourlyRestrictionProperties != null &&
                    HourlyRestrictionProperties.Equals(other.HourlyRestrictionProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (RoleName != null)
                    hashCode = hashCode * 59 + RoleName.GetHashCode();
                    if (RolePriority != null)
                    hashCode = hashCode * 59 + RolePriority.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (AccountCount != null)
                    hashCode = hashCode * 59 + AccountCount.GetHashCode();
                    if (AssetCount != null)
                    hashCode = hashCode * 59 + AssetCount.GetHashCode();
                    if (AccountGroupCount != null)
                    hashCode = hashCode * 59 + AccountGroupCount.GetHashCode();
                    if (AssetGroupCount != null)
                    hashCode = hashCode * 59 + AssetGroupCount.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (RequesterProperties != null)
                    hashCode = hashCode * 59 + RequesterProperties.GetHashCode();
                    if (ApproverProperties != null)
                    hashCode = hashCode * 59 + ApproverProperties.GetHashCode();
                    if (ReviewerProperties != null)
                    hashCode = hashCode * 59 + ReviewerProperties.GetHashCode();
                    if (AccessRequestProperties != null)
                    hashCode = hashCode * 59 + AccessRequestProperties.GetHashCode();
                    if (SessionProperties != null)
                    hashCode = hashCode * 59 + SessionProperties.GetHashCode();
                    if (EmergencyAccessProperties != null)
                    hashCode = hashCode * 59 + EmergencyAccessProperties.GetHashCode();
                    if (ApproverSets != null)
                    hashCode = hashCode * 59 + ApproverSets.GetHashCode();
                    if (Reviewers != null)
                    hashCode = hashCode * 59 + Reviewers.GetHashCode();
                    if (NotificationContacts != null)
                    hashCode = hashCode * 59 + NotificationContacts.GetHashCode();
                    if (ReasonCodes != null)
                    hashCode = hashCode * 59 + ReasonCodes.GetHashCode();
                    if (ScopeItems != null)
                    hashCode = hashCode * 59 + ScopeItems.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (IsExpired != null)
                    hashCode = hashCode * 59 + IsExpired.GetHashCode();
                    if (InvalidConnectionPolicy != null)
                    hashCode = hashCode * 59 + InvalidConnectionPolicy.GetHashCode();
                    if (HourlyRestrictionProperties != null)
                    hashCode = hashCode * 59 + HourlyRestrictionProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessPolicy left, AccessPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessPolicy left, AccessPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
