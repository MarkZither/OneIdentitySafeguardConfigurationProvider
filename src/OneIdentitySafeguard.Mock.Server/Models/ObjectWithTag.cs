/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ObjectWithTag : IEquatable<ObjectWithTag>
    { 
        /// <summary>
        /// Id of the object
        /// </summary>
        /// <value>Id of the object</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the object
        /// </summary>
        /// <value>Name of the object</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Domain name of the object
        /// </summary>
        /// <value>Domain name of the object</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="Type")]
        public TaggingGroupingObjectType Type { get; set; }

        /// <summary>
        /// Whether the tag was statically or dynamically assigned
        /// </summary>
        /// <value>Whether the tag was statically or dynamically assigned</value>

        [DataMember(Name="IsStatic")]
        public bool? IsStatic { get; set; }

        /// <summary>
        /// Asset Id, intent is to clarify when we have multiple asset accounts with the same name, which one.  Will be null for directory accounts and redundant for assets.
        /// </summary>
        /// <value>Asset Id, intent is to clarify when we have multiple asset accounts with the same name, which one.  Will be null for directory accounts and redundant for assets.</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Asset Name, intent is to clarify when we have multiple asset accounts with the same name, which one.  Will be null for directory accounts and redundant for assets.
        /// </summary>
        /// <value>Asset Name, intent is to clarify when we have multiple asset accounts with the same name, which one.  Will be null for directory accounts and redundant for assets.</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectWithTag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsStatic: ").Append(IsStatic).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObjectWithTag)obj);
        }

        /// <summary>
        /// Returns true if ObjectWithTag instances are equal
        /// </summary>
        /// <param name="other">Instance of ObjectWithTag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectWithTag other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    IsStatic == other.IsStatic ||
                    IsStatic != null &&
                    IsStatic.Equals(other.IsStatic)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (IsStatic != null)
                    hashCode = hashCode * 59 + IsStatic.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ObjectWithTag left, ObjectWithTag right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObjectWithTag left, ObjectWithTag right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
