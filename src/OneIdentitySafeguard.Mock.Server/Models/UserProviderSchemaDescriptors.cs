/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Descriptors for user schema properties
    /// </summary>
    [DataContract]
    public partial class UserProviderSchemaDescriptors : IEquatable<UserProviderSchemaDescriptors>
    { 
        /// <summary>
        /// Gets or Sets UserClassTypeDescriptor
        /// </summary>

        [DataMember(Name="UserClassTypeDescriptor")]
        public SchemaDescriptor UserClassTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets UserNameAttributeDescriptor
        /// </summary>

        [DataMember(Name="UserNameAttributeDescriptor")]
        public SchemaDescriptor UserNameAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets FirstNameAttributeDescriptor
        /// </summary>

        [DataMember(Name="FirstNameAttributeDescriptor")]
        public SchemaDescriptor FirstNameAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets LastNameAttributeDescriptor
        /// </summary>

        [DataMember(Name="LastNameAttributeDescriptor")]
        public SchemaDescriptor LastNameAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionAttributeDescriptor
        /// </summary>

        [DataMember(Name="DescriptionAttributeDescriptor")]
        public SchemaDescriptor DescriptionAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets MailAttributeDescriptor
        /// </summary>

        [DataMember(Name="MailAttributeDescriptor")]
        public SchemaDescriptor MailAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets PhoneAttributeDescriptor
        /// </summary>

        [DataMember(Name="PhoneAttributeDescriptor")]
        public SchemaDescriptor PhoneAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets MobileAttributeDescriptor
        /// </summary>

        [DataMember(Name="MobileAttributeDescriptor")]
        public SchemaDescriptor MobileAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor
        /// </summary>

        [DataMember(Name="DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor")]
        public SchemaDescriptor DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor
        /// </summary>

        [DataMember(Name="DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor")]
        public SchemaDescriptor DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryGroupSyncAttributeForManagedObjectsDescriptor
        /// </summary>

        [DataMember(Name="DirectoryGroupSyncAttributeForManagedObjectsDescriptor")]
        public SchemaDescriptor DirectoryGroupSyncAttributeForManagedObjectsDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserProviderSchemaDescriptors {\n");
            sb.Append("  UserClassTypeDescriptor: ").Append(UserClassTypeDescriptor).Append("\n");
            sb.Append("  UserNameAttributeDescriptor: ").Append(UserNameAttributeDescriptor).Append("\n");
            sb.Append("  FirstNameAttributeDescriptor: ").Append(FirstNameAttributeDescriptor).Append("\n");
            sb.Append("  LastNameAttributeDescriptor: ").Append(LastNameAttributeDescriptor).Append("\n");
            sb.Append("  DescriptionAttributeDescriptor: ").Append(DescriptionAttributeDescriptor).Append("\n");
            sb.Append("  MailAttributeDescriptor: ").Append(MailAttributeDescriptor).Append("\n");
            sb.Append("  PhoneAttributeDescriptor: ").Append(PhoneAttributeDescriptor).Append("\n");
            sb.Append("  MobileAttributeDescriptor: ").Append(MobileAttributeDescriptor).Append("\n");
            sb.Append("  DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor: ").Append(DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor).Append("\n");
            sb.Append("  DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor: ").Append(DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor).Append("\n");
            sb.Append("  DirectoryGroupSyncAttributeForManagedObjectsDescriptor: ").Append(DirectoryGroupSyncAttributeForManagedObjectsDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserProviderSchemaDescriptors)obj);
        }

        /// <summary>
        /// Returns true if UserProviderSchemaDescriptors instances are equal
        /// </summary>
        /// <param name="other">Instance of UserProviderSchemaDescriptors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserProviderSchemaDescriptors other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserClassTypeDescriptor == other.UserClassTypeDescriptor ||
                    UserClassTypeDescriptor != null &&
                    UserClassTypeDescriptor.Equals(other.UserClassTypeDescriptor)
                ) && 
                (
                    UserNameAttributeDescriptor == other.UserNameAttributeDescriptor ||
                    UserNameAttributeDescriptor != null &&
                    UserNameAttributeDescriptor.Equals(other.UserNameAttributeDescriptor)
                ) && 
                (
                    FirstNameAttributeDescriptor == other.FirstNameAttributeDescriptor ||
                    FirstNameAttributeDescriptor != null &&
                    FirstNameAttributeDescriptor.Equals(other.FirstNameAttributeDescriptor)
                ) && 
                (
                    LastNameAttributeDescriptor == other.LastNameAttributeDescriptor ||
                    LastNameAttributeDescriptor != null &&
                    LastNameAttributeDescriptor.Equals(other.LastNameAttributeDescriptor)
                ) && 
                (
                    DescriptionAttributeDescriptor == other.DescriptionAttributeDescriptor ||
                    DescriptionAttributeDescriptor != null &&
                    DescriptionAttributeDescriptor.Equals(other.DescriptionAttributeDescriptor)
                ) && 
                (
                    MailAttributeDescriptor == other.MailAttributeDescriptor ||
                    MailAttributeDescriptor != null &&
                    MailAttributeDescriptor.Equals(other.MailAttributeDescriptor)
                ) && 
                (
                    PhoneAttributeDescriptor == other.PhoneAttributeDescriptor ||
                    PhoneAttributeDescriptor != null &&
                    PhoneAttributeDescriptor.Equals(other.PhoneAttributeDescriptor)
                ) && 
                (
                    MobileAttributeDescriptor == other.MobileAttributeDescriptor ||
                    MobileAttributeDescriptor != null &&
                    MobileAttributeDescriptor.Equals(other.MobileAttributeDescriptor)
                ) && 
                (
                    DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor == other.DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor ||
                    DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor != null &&
                    DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor.Equals(other.DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor)
                ) && 
                (
                    DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor == other.DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor ||
                    DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor != null &&
                    DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor.Equals(other.DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor)
                ) && 
                (
                    DirectoryGroupSyncAttributeForManagedObjectsDescriptor == other.DirectoryGroupSyncAttributeForManagedObjectsDescriptor ||
                    DirectoryGroupSyncAttributeForManagedObjectsDescriptor != null &&
                    DirectoryGroupSyncAttributeForManagedObjectsDescriptor.Equals(other.DirectoryGroupSyncAttributeForManagedObjectsDescriptor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserClassTypeDescriptor != null)
                    hashCode = hashCode * 59 + UserClassTypeDescriptor.GetHashCode();
                    if (UserNameAttributeDescriptor != null)
                    hashCode = hashCode * 59 + UserNameAttributeDescriptor.GetHashCode();
                    if (FirstNameAttributeDescriptor != null)
                    hashCode = hashCode * 59 + FirstNameAttributeDescriptor.GetHashCode();
                    if (LastNameAttributeDescriptor != null)
                    hashCode = hashCode * 59 + LastNameAttributeDescriptor.GetHashCode();
                    if (DescriptionAttributeDescriptor != null)
                    hashCode = hashCode * 59 + DescriptionAttributeDescriptor.GetHashCode();
                    if (MailAttributeDescriptor != null)
                    hashCode = hashCode * 59 + MailAttributeDescriptor.GetHashCode();
                    if (PhoneAttributeDescriptor != null)
                    hashCode = hashCode * 59 + PhoneAttributeDescriptor.GetHashCode();
                    if (MobileAttributeDescriptor != null)
                    hashCode = hashCode * 59 + MobileAttributeDescriptor.GetHashCode();
                    if (DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor != null)
                    hashCode = hashCode * 59 + DirectoryGroupSyncAttributeForExternalFederationAuthenticationDescriptor.GetHashCode();
                    if (DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor != null)
                    hashCode = hashCode * 59 + DirectoryGroupSyncAttributeForRadiusAuthenticationDescriptor.GetHashCode();
                    if (DirectoryGroupSyncAttributeForManagedObjectsDescriptor != null)
                    hashCode = hashCode * 59 + DirectoryGroupSyncAttributeForManagedObjectsDescriptor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserProviderSchemaDescriptors left, UserProviderSchemaDescriptors right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserProviderSchemaDescriptors left, UserProviderSchemaDescriptors right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
