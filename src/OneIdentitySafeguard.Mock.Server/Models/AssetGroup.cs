/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a group of assets on the appliance for use in session policy.  NOTE: Only assets that support session access are allowed
    /// </summary>
    [DataContract]
    public partial class AssetGroup : IEquatable<AssetGroup>
    { 
        /// <summary>
        /// Id of the table entry
        /// </summary>
        /// <value>Id of the table entry</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the asset group
        /// </summary>
        /// <value>The name of the asset group</value>
        [Required]

        [StringLength(50, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description regarding the asset group
        /// </summary>
        /// <value>Description regarding the asset group</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Whether or not this is a dynamic asset group
        /// </summary>
        /// <value>Whether or not this is a dynamic asset group</value>

        [DataMember(Name="IsDynamic")]
        public bool? IsDynamic { get; set; }

        /// <summary>
        /// Set of policy assets that are assigned to this asset group
        /// </summary>
        /// <value>Set of policy assets that are assigned to this asset group</value>

        [DataMember(Name="Assets")]
        public List<PolicyAsset> Assets { get; set; }

        /// <summary>
        /// Gets or Sets AssetGroupingRule
        /// </summary>

        [DataMember(Name="AssetGroupingRule")]
        public TaggingGroupingRule AssetGroupingRule { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsDynamic: ").Append(IsDynamic).Append("\n");
            sb.Append("  Assets: ").Append(Assets).Append("\n");
            sb.Append("  AssetGroupingRule: ").Append(AssetGroupingRule).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetGroup)obj);
        }

        /// <summary>
        /// Returns true if AssetGroup instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetGroup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetGroup other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IsDynamic == other.IsDynamic ||
                    IsDynamic != null &&
                    IsDynamic.Equals(other.IsDynamic)
                ) && 
                (
                    Assets == other.Assets ||
                    Assets != null &&
                    Assets.SequenceEqual(other.Assets)
                ) && 
                (
                    AssetGroupingRule == other.AssetGroupingRule ||
                    AssetGroupingRule != null &&
                    AssetGroupingRule.Equals(other.AssetGroupingRule)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsDynamic != null)
                    hashCode = hashCode * 59 + IsDynamic.GetHashCode();
                    if (Assets != null)
                    hashCode = hashCode * 59 + Assets.GetHashCode();
                    if (AssetGroupingRule != null)
                    hashCode = hashCode * 59 + AssetGroupingRule.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetGroup left, AssetGroup right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetGroup left, AssetGroup right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
