/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an asynchronous task on the appliance that is running
    /// </summary>
    [DataContract]
    public partial class RunningTask : IEquatable<RunningTask>
    { 
        /// <summary>
        /// Unique ID of the task
        /// </summary>
        /// <value>Unique ID of the task</value>

        [DataMember(Name="TaskId")]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="Name")]
        public TaskNames Name { get; set; }

        /// <summary>
        /// Appliance that task is running on
        /// </summary>
        /// <value>Appliance that task is running on</value>

        [DataMember(Name="ApplianceId")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Gets or Sets RequestStatus
        /// </summary>

        [DataMember(Name="RequestStatus")]
        public RequestStatus RequestStatus { get; set; }

        /// <summary>
        /// Gets or Sets UserProperties
        /// </summary>

        [DataMember(Name="UserProperties")]
        public UserLogProperties UserProperties { get; set; }

        /// <summary>
        /// Name of the asset discovery job (Read-only)
        /// </summary>
        /// <value>Name of the asset discovery job (Read-only)</value>

        [DataMember(Name="AssetDiscoveryJobName")]
        public string AssetDiscoveryJobName { get; set; }

        /// <summary>
        /// Gets or Sets AssetDiscoveryType
        /// </summary>

        [DataMember(Name="AssetDiscoveryType")]
        public AssetDiscoveryType AssetDiscoveryType { get; set; }

        /// <summary>
        /// The asset partition this job belongs to (Read-only)
        /// </summary>
        /// <value>The asset partition this job belongs to (Read-only)</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of the asset partition this job belongs to (Read-only)
        /// </summary>
        /// <value>Name of the asset partition this job belongs to (Read-only)</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Database ID of the asset or directory to execute this task on
        /// </summary>
        /// <value>Database ID of the asset or directory to execute this task on</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the asset or directory name the task was executed against (Read-only)
        /// </summary>
        /// <value>Name of the asset or directory name the task was executed against (Read-only)</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Account to run this task for
        /// </summary>
        /// <value>Account to run this task for</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the account this task is for (Read-only)
        /// </summary>
        /// <value>Name of the account this task is for (Read-only)</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// ID of the profile to run this task for
        /// </summary>
        /// <value>ID of the profile to run this task for</value>

        [DataMember(Name="ProfileId")]
        public int? ProfileId { get; set; }

        /// <summary>
        /// Name of the profile this task is for (Read-only)
        /// </summary>
        /// <value>Name of the profile this task is for (Read-only)</value>

        [DataMember(Name="ProfileName")]
        public string ProfileName { get; set; }

        /// <summary>
        /// ID of the sync group to run this task for
        /// </summary>
        /// <value>ID of the sync group to run this task for</value>

        [DataMember(Name="SyncGroupId")]
        public int? SyncGroupId { get; set; }

        /// <summary>
        /// Name of the sync group this task is for (Read-only)
        /// </summary>
        /// <value>Name of the sync group this task is for (Read-only)</value>

        [DataMember(Name="SyncGroupName")]
        public string SyncGroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunningTask {\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  RequestStatus: ").Append(RequestStatus).Append("\n");
            sb.Append("  UserProperties: ").Append(UserProperties).Append("\n");
            sb.Append("  AssetDiscoveryJobName: ").Append(AssetDiscoveryJobName).Append("\n");
            sb.Append("  AssetDiscoveryType: ").Append(AssetDiscoveryType).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  SyncGroupId: ").Append(SyncGroupId).Append("\n");
            sb.Append("  SyncGroupName: ").Append(SyncGroupName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RunningTask)obj);
        }

        /// <summary>
        /// Returns true if RunningTask instances are equal
        /// </summary>
        /// <param name="other">Instance of RunningTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunningTask other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TaskId == other.TaskId ||
                    TaskId != null &&
                    TaskId.Equals(other.TaskId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    RequestStatus == other.RequestStatus ||
                    RequestStatus != null &&
                    RequestStatus.Equals(other.RequestStatus)
                ) && 
                (
                    UserProperties == other.UserProperties ||
                    UserProperties != null &&
                    UserProperties.Equals(other.UserProperties)
                ) && 
                (
                    AssetDiscoveryJobName == other.AssetDiscoveryJobName ||
                    AssetDiscoveryJobName != null &&
                    AssetDiscoveryJobName.Equals(other.AssetDiscoveryJobName)
                ) && 
                (
                    AssetDiscoveryType == other.AssetDiscoveryType ||
                    AssetDiscoveryType != null &&
                    AssetDiscoveryType.Equals(other.AssetDiscoveryType)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    ProfileId == other.ProfileId ||
                    ProfileId != null &&
                    ProfileId.Equals(other.ProfileId)
                ) && 
                (
                    ProfileName == other.ProfileName ||
                    ProfileName != null &&
                    ProfileName.Equals(other.ProfileName)
                ) && 
                (
                    SyncGroupId == other.SyncGroupId ||
                    SyncGroupId != null &&
                    SyncGroupId.Equals(other.SyncGroupId)
                ) && 
                (
                    SyncGroupName == other.SyncGroupName ||
                    SyncGroupName != null &&
                    SyncGroupName.Equals(other.SyncGroupName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TaskId != null)
                    hashCode = hashCode * 59 + TaskId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (RequestStatus != null)
                    hashCode = hashCode * 59 + RequestStatus.GetHashCode();
                    if (UserProperties != null)
                    hashCode = hashCode * 59 + UserProperties.GetHashCode();
                    if (AssetDiscoveryJobName != null)
                    hashCode = hashCode * 59 + AssetDiscoveryJobName.GetHashCode();
                    if (AssetDiscoveryType != null)
                    hashCode = hashCode * 59 + AssetDiscoveryType.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (ProfileId != null)
                    hashCode = hashCode * 59 + ProfileId.GetHashCode();
                    if (ProfileName != null)
                    hashCode = hashCode * 59 + ProfileName.GetHashCode();
                    if (SyncGroupId != null)
                    hashCode = hashCode * 59 + SyncGroupId.GetHashCode();
                    if (SyncGroupName != null)
                    hashCode = hashCode * 59 + SyncGroupName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RunningTask left, RunningTask right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RunningTask left, RunningTask right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
