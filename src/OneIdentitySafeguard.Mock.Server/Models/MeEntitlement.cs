/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MeEntitlement : IEquatable<MeEntitlement>
    { 
        /// <summary>
        /// Gets or Sets Account
        /// </summary>

        [DataMember(Name="Account")]
        public MeEntitlementAccount Account { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>

        [DataMember(Name="Asset")]
        public MeEntitlementAsset Asset { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>

        [DataMember(Name="Policy")]
        public MeEntitlementPolicy Policy { get; set; }

        /// <summary>
        /// Gets or Sets ActiveRequests
        /// </summary>

        [DataMember(Name="ActiveRequests")]
        public List<ActiveRequest> ActiveRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeEntitlement {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  ActiveRequests: ").Append(ActiveRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MeEntitlement)obj);
        }

        /// <summary>
        /// Returns true if MeEntitlement instances are equal
        /// </summary>
        /// <param name="other">Instance of MeEntitlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeEntitlement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Asset == other.Asset ||
                    Asset != null &&
                    Asset.Equals(other.Asset)
                ) && 
                (
                    Policy == other.Policy ||
                    Policy != null &&
                    Policy.Equals(other.Policy)
                ) && 
                (
                    ActiveRequests == other.ActiveRequests ||
                    ActiveRequests != null &&
                    ActiveRequests.SequenceEqual(other.ActiveRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Asset != null)
                    hashCode = hashCode * 59 + Asset.GetHashCode();
                    if (Policy != null)
                    hashCode = hashCode * 59 + Policy.GetHashCode();
                    if (ActiveRequests != null)
                    hashCode = hashCode * 59 + ActiveRequests.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MeEntitlement left, MeEntitlement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MeEntitlement left, MeEntitlement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
