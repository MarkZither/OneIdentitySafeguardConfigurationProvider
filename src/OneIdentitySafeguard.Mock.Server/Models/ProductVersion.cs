/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Product version of the code/image of the appliance
    /// </summary>
    [DataContract]
    public partial class ProductVersion : IEquatable<ProductVersion>
    { 
        /// <summary>
        /// Major version (Read-only)
        /// </summary>
        /// <value>Major version (Read-only)</value>

        [DataMember(Name="Major")]
        public int? Major { get; set; }

        /// <summary>
        /// Minor version (Read-only)
        /// </summary>
        /// <value>Minor version (Read-only)</value>

        [DataMember(Name="Minor")]
        public int? Minor { get; set; }

        /// <summary>
        /// Revision number (Read-only)
        /// </summary>
        /// <value>Revision number (Read-only)</value>

        [DataMember(Name="Revision")]
        public int? Revision { get; set; }

        /// <summary>
        /// Build number (Read-only)
        /// </summary>
        /// <value>Build number (Read-only)</value>

        [DataMember(Name="Build")]
        public int? Build { get; set; }

        /// <summary>
        /// Date the code/image was built (Read-only)
        /// </summary>
        /// <value>Date the code/image was built (Read-only)</value>

        [DataMember(Name="BuildDate")]
        public DateTime? BuildDate { get; set; }

        /// <summary>
        /// Type of build (Read-only)
        /// </summary>
        /// <value>Type of build (Read-only)</value>

        [DataMember(Name="BuildVariant")]
        public string BuildVariant { get; set; }

        /// <summary>
        /// Output type of build (Read-only)
        /// </summary>
        /// <value>Output type of build (Read-only)</value>

        [DataMember(Name="BuildPlatform")]
        public string BuildPlatform { get; set; }

        /// <summary>
        /// Gets or Sets RsmsVersion
        /// </summary>

        [DataMember(Name="RsmsVersion")]
        public string RsmsVersion { get; set; }

        /// <summary>
        /// Gets or Sets OsPatchLevel
        /// </summary>

        [DataMember(Name="OsPatchLevel")]
        public int? OsPatchLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductVersion {\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  BuildDate: ").Append(BuildDate).Append("\n");
            sb.Append("  BuildVariant: ").Append(BuildVariant).Append("\n");
            sb.Append("  BuildPlatform: ").Append(BuildPlatform).Append("\n");
            sb.Append("  RsmsVersion: ").Append(RsmsVersion).Append("\n");
            sb.Append("  OsPatchLevel: ").Append(OsPatchLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductVersion)obj);
        }

        /// <summary>
        /// Returns true if ProductVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductVersion other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Major == other.Major ||
                    Major != null &&
                    Major.Equals(other.Major)
                ) && 
                (
                    Minor == other.Minor ||
                    Minor != null &&
                    Minor.Equals(other.Minor)
                ) && 
                (
                    Revision == other.Revision ||
                    Revision != null &&
                    Revision.Equals(other.Revision)
                ) && 
                (
                    Build == other.Build ||
                    Build != null &&
                    Build.Equals(other.Build)
                ) && 
                (
                    BuildDate == other.BuildDate ||
                    BuildDate != null &&
                    BuildDate.Equals(other.BuildDate)
                ) && 
                (
                    BuildVariant == other.BuildVariant ||
                    BuildVariant != null &&
                    BuildVariant.Equals(other.BuildVariant)
                ) && 
                (
                    BuildPlatform == other.BuildPlatform ||
                    BuildPlatform != null &&
                    BuildPlatform.Equals(other.BuildPlatform)
                ) && 
                (
                    RsmsVersion == other.RsmsVersion ||
                    RsmsVersion != null &&
                    RsmsVersion.Equals(other.RsmsVersion)
                ) && 
                (
                    OsPatchLevel == other.OsPatchLevel ||
                    OsPatchLevel != null &&
                    OsPatchLevel.Equals(other.OsPatchLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Major != null)
                    hashCode = hashCode * 59 + Major.GetHashCode();
                    if (Minor != null)
                    hashCode = hashCode * 59 + Minor.GetHashCode();
                    if (Revision != null)
                    hashCode = hashCode * 59 + Revision.GetHashCode();
                    if (Build != null)
                    hashCode = hashCode * 59 + Build.GetHashCode();
                    if (BuildDate != null)
                    hashCode = hashCode * 59 + BuildDate.GetHashCode();
                    if (BuildVariant != null)
                    hashCode = hashCode * 59 + BuildVariant.GetHashCode();
                    if (BuildPlatform != null)
                    hashCode = hashCode * 59 + BuildPlatform.GetHashCode();
                    if (RsmsVersion != null)
                    hashCode = hashCode * 59 + RsmsVersion.GetHashCode();
                    if (OsPatchLevel != null)
                    hashCode = hashCode * 59 + OsPatchLevel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductVersion left, ProductVersion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductVersion left, ProductVersion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
