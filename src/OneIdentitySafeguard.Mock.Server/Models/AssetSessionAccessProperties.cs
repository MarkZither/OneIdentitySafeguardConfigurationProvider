/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AssetSessionAccessProperties : IEquatable<AssetSessionAccessProperties>
    { 
        /// <summary>
        /// Whether to allow session requests to be made to this asset using linked or policy-specific accounts
        /// </summary>
        /// <value>Whether to allow session requests to be made to this asset using linked or policy-specific accounts</value>

        [DataMember(Name="AllowSessionRequests")]
        public bool? AllowSessionRequests { get; set; }

        /// <summary>
        /// Port for SSH sessions
        /// </summary>
        /// <value>Port for SSH sessions</value>

        [Range(1, 65535)]
        [DataMember(Name="SshSessionPort")]
        public int? SshSessionPort { get; set; }

        /// <summary>
        /// Port for Remote Desktop sessions
        /// </summary>
        /// <value>Port for Remote Desktop sessions</value>

        [Range(1, 65535)]
        [DataMember(Name="RemoteDesktopSessionPort")]
        public int? RemoteDesktopSessionPort { get; set; }

        /// <summary>
        /// Port for Telnet sessions
        /// </summary>
        /// <value>Port for Telnet sessions</value>

        [Range(1, 65535)]
        [DataMember(Name="TelnetSessionPort")]
        public int? TelnetSessionPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetSessionAccessProperties {\n");
            sb.Append("  AllowSessionRequests: ").Append(AllowSessionRequests).Append("\n");
            sb.Append("  SshSessionPort: ").Append(SshSessionPort).Append("\n");
            sb.Append("  RemoteDesktopSessionPort: ").Append(RemoteDesktopSessionPort).Append("\n");
            sb.Append("  TelnetSessionPort: ").Append(TelnetSessionPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetSessionAccessProperties)obj);
        }

        /// <summary>
        /// Returns true if AssetSessionAccessProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetSessionAccessProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetSessionAccessProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowSessionRequests == other.AllowSessionRequests ||
                    AllowSessionRequests != null &&
                    AllowSessionRequests.Equals(other.AllowSessionRequests)
                ) && 
                (
                    SshSessionPort == other.SshSessionPort ||
                    SshSessionPort != null &&
                    SshSessionPort.Equals(other.SshSessionPort)
                ) && 
                (
                    RemoteDesktopSessionPort == other.RemoteDesktopSessionPort ||
                    RemoteDesktopSessionPort != null &&
                    RemoteDesktopSessionPort.Equals(other.RemoteDesktopSessionPort)
                ) && 
                (
                    TelnetSessionPort == other.TelnetSessionPort ||
                    TelnetSessionPort != null &&
                    TelnetSessionPort.Equals(other.TelnetSessionPort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllowSessionRequests != null)
                    hashCode = hashCode * 59 + AllowSessionRequests.GetHashCode();
                    if (SshSessionPort != null)
                    hashCode = hashCode * 59 + SshSessionPort.GetHashCode();
                    if (RemoteDesktopSessionPort != null)
                    hashCode = hashCode * 59 + RemoteDesktopSessionPort.GetHashCode();
                    if (TelnetSessionPort != null)
                    hashCode = hashCode * 59 + TelnetSessionPort.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetSessionAccessProperties left, AssetSessionAccessProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetSessionAccessProperties left, AssetSessionAccessProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
