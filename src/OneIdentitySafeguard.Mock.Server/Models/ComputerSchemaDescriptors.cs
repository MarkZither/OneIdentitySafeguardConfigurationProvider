/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Descriptors for computer schema properties
    /// </summary>
    [DataContract]
    public partial class ComputerSchemaDescriptors : IEquatable<ComputerSchemaDescriptors>
    { 
        /// <summary>
        /// Gets or Sets ComputerClassTypeDescriptor
        /// </summary>

        [DataMember(Name="ComputerClassTypeDescriptor")]
        public SchemaDescriptor ComputerClassTypeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets NameAttributeDescriptor
        /// </summary>

        [DataMember(Name="NameAttributeDescriptor")]
        public SchemaDescriptor NameAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets DescriptionAttributeDescriptor
        /// </summary>

        [DataMember(Name="DescriptionAttributeDescriptor")]
        public SchemaDescriptor DescriptionAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets NetworkAddressAttributeDescriptor
        /// </summary>

        [DataMember(Name="NetworkAddressAttributeDescriptor")]
        public SchemaDescriptor NetworkAddressAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets OperatingSystemAttributeDescriptor
        /// </summary>

        [DataMember(Name="OperatingSystemAttributeDescriptor")]
        public SchemaDescriptor OperatingSystemAttributeDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets OperatingSystemVersionAttributeDescriptor
        /// </summary>

        [DataMember(Name="OperatingSystemVersionAttributeDescriptor")]
        public SchemaDescriptor OperatingSystemVersionAttributeDescriptor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComputerSchemaDescriptors {\n");
            sb.Append("  ComputerClassTypeDescriptor: ").Append(ComputerClassTypeDescriptor).Append("\n");
            sb.Append("  NameAttributeDescriptor: ").Append(NameAttributeDescriptor).Append("\n");
            sb.Append("  DescriptionAttributeDescriptor: ").Append(DescriptionAttributeDescriptor).Append("\n");
            sb.Append("  NetworkAddressAttributeDescriptor: ").Append(NetworkAddressAttributeDescriptor).Append("\n");
            sb.Append("  OperatingSystemAttributeDescriptor: ").Append(OperatingSystemAttributeDescriptor).Append("\n");
            sb.Append("  OperatingSystemVersionAttributeDescriptor: ").Append(OperatingSystemVersionAttributeDescriptor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComputerSchemaDescriptors)obj);
        }

        /// <summary>
        /// Returns true if ComputerSchemaDescriptors instances are equal
        /// </summary>
        /// <param name="other">Instance of ComputerSchemaDescriptors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComputerSchemaDescriptors other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ComputerClassTypeDescriptor == other.ComputerClassTypeDescriptor ||
                    ComputerClassTypeDescriptor != null &&
                    ComputerClassTypeDescriptor.Equals(other.ComputerClassTypeDescriptor)
                ) && 
                (
                    NameAttributeDescriptor == other.NameAttributeDescriptor ||
                    NameAttributeDescriptor != null &&
                    NameAttributeDescriptor.Equals(other.NameAttributeDescriptor)
                ) && 
                (
                    DescriptionAttributeDescriptor == other.DescriptionAttributeDescriptor ||
                    DescriptionAttributeDescriptor != null &&
                    DescriptionAttributeDescriptor.Equals(other.DescriptionAttributeDescriptor)
                ) && 
                (
                    NetworkAddressAttributeDescriptor == other.NetworkAddressAttributeDescriptor ||
                    NetworkAddressAttributeDescriptor != null &&
                    NetworkAddressAttributeDescriptor.Equals(other.NetworkAddressAttributeDescriptor)
                ) && 
                (
                    OperatingSystemAttributeDescriptor == other.OperatingSystemAttributeDescriptor ||
                    OperatingSystemAttributeDescriptor != null &&
                    OperatingSystemAttributeDescriptor.Equals(other.OperatingSystemAttributeDescriptor)
                ) && 
                (
                    OperatingSystemVersionAttributeDescriptor == other.OperatingSystemVersionAttributeDescriptor ||
                    OperatingSystemVersionAttributeDescriptor != null &&
                    OperatingSystemVersionAttributeDescriptor.Equals(other.OperatingSystemVersionAttributeDescriptor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ComputerClassTypeDescriptor != null)
                    hashCode = hashCode * 59 + ComputerClassTypeDescriptor.GetHashCode();
                    if (NameAttributeDescriptor != null)
                    hashCode = hashCode * 59 + NameAttributeDescriptor.GetHashCode();
                    if (DescriptionAttributeDescriptor != null)
                    hashCode = hashCode * 59 + DescriptionAttributeDescriptor.GetHashCode();
                    if (NetworkAddressAttributeDescriptor != null)
                    hashCode = hashCode * 59 + NetworkAddressAttributeDescriptor.GetHashCode();
                    if (OperatingSystemAttributeDescriptor != null)
                    hashCode = hashCode * 59 + OperatingSystemAttributeDescriptor.GetHashCode();
                    if (OperatingSystemVersionAttributeDescriptor != null)
                    hashCode = hashCode * 59 + OperatingSystemVersionAttributeDescriptor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComputerSchemaDescriptors left, ComputerSchemaDescriptors right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComputerSchemaDescriptors left, ComputerSchemaDescriptors right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
