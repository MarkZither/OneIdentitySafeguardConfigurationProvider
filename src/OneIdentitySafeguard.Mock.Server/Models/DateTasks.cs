/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// The count of all tasks occurring in a given summary interval
    /// </summary>
    [DataContract]
    public partial class DateTasks : IEquatable<DateTasks>
    { 
        /// <summary>
        /// Sum of all TaskSummary.Count for this summary interval
        /// </summary>
        /// <value>Sum of all TaskSummary.Count for this summary interval</value>

        [DataMember(Name="TotalDateTaskCount")]
        public int? TotalDateTaskCount { get; set; }

        /// <summary>
        /// Beginning of interval being summarized
        /// </summary>
        /// <value>Beginning of interval being summarized</value>

        [DataMember(Name="SummaryDateTime")]
        public DateTime? SummaryDateTime { get; set; }

        /// <summary>
        /// List of task names and counts for this summary interval
        /// </summary>
        /// <value>List of task names and counts for this summary interval</value>

        [DataMember(Name="Counts")]
        public List<TaskSummary> Counts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateTasks {\n");
            sb.Append("  TotalDateTaskCount: ").Append(TotalDateTaskCount).Append("\n");
            sb.Append("  SummaryDateTime: ").Append(SummaryDateTime).Append("\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DateTasks)obj);
        }

        /// <summary>
        /// Returns true if DateTasks instances are equal
        /// </summary>
        /// <param name="other">Instance of DateTasks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateTasks other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TotalDateTaskCount == other.TotalDateTaskCount ||
                    TotalDateTaskCount != null &&
                    TotalDateTaskCount.Equals(other.TotalDateTaskCount)
                ) && 
                (
                    SummaryDateTime == other.SummaryDateTime ||
                    SummaryDateTime != null &&
                    SummaryDateTime.Equals(other.SummaryDateTime)
                ) && 
                (
                    Counts == other.Counts ||
                    Counts != null &&
                    Counts.SequenceEqual(other.Counts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TotalDateTaskCount != null)
                    hashCode = hashCode * 59 + TotalDateTaskCount.GetHashCode();
                    if (SummaryDateTime != null)
                    hashCode = hashCode * 59 + SummaryDateTime.GetHashCode();
                    if (Counts != null)
                    hashCode = hashCode * 59 + Counts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DateTasks left, DateTasks right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DateTasks left, DateTasks right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
