/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a physical server where backups, etc. may be stored
    /// </summary>
    [DataContract]
    public partial class ArchiveServer : IEquatable<ArchiveServer>
    { 
        /// <summary>
        /// Unique ID of this archive server configuration
        /// </summary>
        /// <value>Unique ID of this archive server configuration</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Display name of the server
        /// </summary>
        /// <value>Display name of the server</value>
        [Required]

        [MaxLength(100)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the server
        /// </summary>
        /// <value>Description of the server</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Network address to connect to.
        /// </summary>
        /// <value>Network address to connect to.</value>
        [Required]

        [MaxLength(255)]
        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// Database ID of the manage network this asset is explicitly assigned to. If null then   managed network will be calculated dynamically.
        /// </summary>
        /// <value>Database ID of the manage network this asset is explicitly assigned to. If null then   managed network will be calculated dynamically.</value>

        [DataMember(Name="ManagedNetworkId")]
        public int? ManagedNetworkId { get; set; }

        /// <summary>
        /// Display name managed network (Read-only)
        /// </summary>
        /// <value>Display name managed network (Read-only)</value>

        [DataMember(Name="ManagedNetworkName")]
        public string ManagedNetworkName { get; set; }

        /// <summary>
        /// The file path where backups, etc. should be stored
        /// </summary>
        /// <value>The file path where backups, etc. should be stored</value>

        [MaxLength(255)]
        [DataMember(Name="StoragePath")]
        public string StoragePath { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>
        [Required]

        [DataMember(Name="ConnectionProperties")]
        public ArchiveServerConnectionProperties ConnectionProperties { get; set; }

        /// <summary>
        /// SSH Public Host Key
        /// </summary>
        /// <value>SSH Public Host Key</value>

        [MaxLength(8000)]
        [DataMember(Name="SshHostKey")]
        public string SshHostKey { get; set; }

        /// <summary>
        /// The MD5 fingerprint hash of the SSH host key (Read-only)
        /// </summary>
        /// <value>The MD5 fingerprint hash of the SSH host key (Read-only)</value>

        [DataMember(Name="SshHostKeyFingerprint")]
        public string SshHostKeyFingerprint { get; set; }

        /// <summary>
        /// The SHA256 fingerprint hash, Base64 encoded, of the SSH host key (Read-only)
        /// </summary>
        /// <value>The SHA256 fingerprint hash, Base64 encoded, of the SSH host key (Read-only)</value>

        [DataMember(Name="SshHostKeyFingerprintSha256")]
        public string SshHostKeyFingerprintSha256 { get; set; }

        /// <summary>
        /// Gets or Sets TransferProtocol
        /// </summary>

        [DataMember(Name="TransferProtocol")]
        public TransferProtocol TransferProtocol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArchiveServer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  ManagedNetworkId: ").Append(ManagedNetworkId).Append("\n");
            sb.Append("  ManagedNetworkName: ").Append(ManagedNetworkName).Append("\n");
            sb.Append("  StoragePath: ").Append(StoragePath).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  SshHostKey: ").Append(SshHostKey).Append("\n");
            sb.Append("  SshHostKeyFingerprint: ").Append(SshHostKeyFingerprint).Append("\n");
            sb.Append("  SshHostKeyFingerprintSha256: ").Append(SshHostKeyFingerprintSha256).Append("\n");
            sb.Append("  TransferProtocol: ").Append(TransferProtocol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArchiveServer)obj);
        }

        /// <summary>
        /// Returns true if ArchiveServer instances are equal
        /// </summary>
        /// <param name="other">Instance of ArchiveServer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArchiveServer other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    ManagedNetworkId == other.ManagedNetworkId ||
                    ManagedNetworkId != null &&
                    ManagedNetworkId.Equals(other.ManagedNetworkId)
                ) && 
                (
                    ManagedNetworkName == other.ManagedNetworkName ||
                    ManagedNetworkName != null &&
                    ManagedNetworkName.Equals(other.ManagedNetworkName)
                ) && 
                (
                    StoragePath == other.StoragePath ||
                    StoragePath != null &&
                    StoragePath.Equals(other.StoragePath)
                ) && 
                (
                    ConnectionProperties == other.ConnectionProperties ||
                    ConnectionProperties != null &&
                    ConnectionProperties.Equals(other.ConnectionProperties)
                ) && 
                (
                    SshHostKey == other.SshHostKey ||
                    SshHostKey != null &&
                    SshHostKey.Equals(other.SshHostKey)
                ) && 
                (
                    SshHostKeyFingerprint == other.SshHostKeyFingerprint ||
                    SshHostKeyFingerprint != null &&
                    SshHostKeyFingerprint.Equals(other.SshHostKeyFingerprint)
                ) && 
                (
                    SshHostKeyFingerprintSha256 == other.SshHostKeyFingerprintSha256 ||
                    SshHostKeyFingerprintSha256 != null &&
                    SshHostKeyFingerprintSha256.Equals(other.SshHostKeyFingerprintSha256)
                ) && 
                (
                    TransferProtocol == other.TransferProtocol ||
                    TransferProtocol != null &&
                    TransferProtocol.Equals(other.TransferProtocol)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (ManagedNetworkId != null)
                    hashCode = hashCode * 59 + ManagedNetworkId.GetHashCode();
                    if (ManagedNetworkName != null)
                    hashCode = hashCode * 59 + ManagedNetworkName.GetHashCode();
                    if (StoragePath != null)
                    hashCode = hashCode * 59 + StoragePath.GetHashCode();
                    if (ConnectionProperties != null)
                    hashCode = hashCode * 59 + ConnectionProperties.GetHashCode();
                    if (SshHostKey != null)
                    hashCode = hashCode * 59 + SshHostKey.GetHashCode();
                    if (SshHostKeyFingerprint != null)
                    hashCode = hashCode * 59 + SshHostKeyFingerprint.GetHashCode();
                    if (SshHostKeyFingerprintSha256 != null)
                    hashCode = hashCode * 59 + SshHostKeyFingerprintSha256.GetHashCode();
                    if (TransferProtocol != null)
                    hashCode = hashCode * 59 + TransferProtocol.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ArchiveServer left, ArchiveServer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArchiveServer left, ArchiveServer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
