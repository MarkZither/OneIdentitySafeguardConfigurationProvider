/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an application user ownership.
    /// </summary>
    [DataContract]
    public partial class UserOwnership : IEquatable<UserOwnership>
    { 
        /// <summary>
        /// The owned items&#x27;s unique id.  This is a system-assigned value that is generated from the sql view. (Read-only)
        /// </summary>
        /// <value>The owned items&#x27;s unique id.  This is a system-assigned value that is generated from the sql view. (Read-only)</value>

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// Ownership item Id; Asset, Account, Partition.
        /// </summary>
        /// <value>Ownership item Id; Asset, Account, Partition.</value>

        [DataMember(Name="OwnerId")]
        public int? OwnerId { get; set; }

        /// <summary>
        /// Ownership User Id.
        /// </summary>
        /// <value>Ownership User Id.</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets OwnershipType
        /// </summary>

        [DataMember(Name="OwnershipType")]
        public OwnershipType OwnershipType { get; set; }

        /// <summary>
        /// Ownership Object Name.
        /// </summary>
        /// <value>Ownership Object Name.</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Ownership was granted via the user account directly.
        /// </summary>
        /// <value>Ownership was granted via the user account directly.</value>

        [DataMember(Name="ViaSelf")]
        public bool? ViaSelf { get; set; }

        /// <summary>
        /// Ownership was granted via group(s) membership directly.
        /// </summary>
        /// <value>Ownership was granted via group(s) membership directly.</value>

        [DataMember(Name="ViaGroups")]
        public List<Identity> ViaGroups { get; set; }

        /// <summary>
        /// Ownership was granted via tag(s), either due to the user being an assigned owner of the tag or   a group the user belongs to is an assigned owner of the tag.
        /// </summary>
        /// <value>Ownership was granted via tag(s), either due to the user being an assigned owner of the tag or   a group the user belongs to is an assigned owner of the tag.</value>

        [DataMember(Name="ViaTags")]
        public List<PartitionTag> ViaTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserOwnership {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  OwnershipType: ").Append(OwnershipType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ViaSelf: ").Append(ViaSelf).Append("\n");
            sb.Append("  ViaGroups: ").Append(ViaGroups).Append("\n");
            sb.Append("  ViaTags: ").Append(ViaTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserOwnership)obj);
        }

        /// <summary>
        /// Returns true if UserOwnership instances are equal
        /// </summary>
        /// <param name="other">Instance of UserOwnership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserOwnership other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    OwnershipType == other.OwnershipType ||
                    OwnershipType != null &&
                    OwnershipType.Equals(other.OwnershipType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ViaSelf == other.ViaSelf ||
                    ViaSelf != null &&
                    ViaSelf.Equals(other.ViaSelf)
                ) && 
                (
                    ViaGroups == other.ViaGroups ||
                    ViaGroups != null &&
                    ViaGroups.SequenceEqual(other.ViaGroups)
                ) && 
                (
                    ViaTags == other.ViaTags ||
                    ViaTags != null &&
                    ViaTags.SequenceEqual(other.ViaTags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (OwnerId != null)
                    hashCode = hashCode * 59 + OwnerId.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (OwnershipType != null)
                    hashCode = hashCode * 59 + OwnershipType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ViaSelf != null)
                    hashCode = hashCode * 59 + ViaSelf.GetHashCode();
                    if (ViaGroups != null)
                    hashCode = hashCode * 59 + ViaGroups.GetHashCode();
                    if (ViaTags != null)
                    hashCode = hashCode * 59 + ViaTags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserOwnership left, UserOwnership right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserOwnership left, UserOwnership right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
