/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PatchPreconditionResult : IEquatable<PatchPreconditionResult>
    { 
        /// <summary>
        /// The Appliance Id of the appliance the patch precondition check was run on.
        /// </summary>
        /// <value>The Appliance Id of the appliance the patch precondition check was run on.</value>

        [DataMember(Name="ApplianceId")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// True if this is an Operating System Patch, in which case use Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.TargetOsLevel.  False if this a Safeguard Patch, in which case use Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.PatchVersion.  Null if the patch metadata is unavailable
        /// </summary>
        /// <value>True if this is an Operating System Patch, in which case use Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.TargetOsLevel.  False if this a Safeguard Patch, in which case use Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.PatchVersion.  Null if the patch metadata is unavailable</value>

        [DataMember(Name="IsOsPatch")]
        public bool? IsOsPatch { get; set; }

        /// <summary>
        /// Gets or Sets PatchVersion
        /// </summary>

        [DataMember(Name="PatchVersion")]
        public PatchVersion PatchVersion { get; set; }

        /// <summary>
        /// Contains the Operating System target level if Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.IsOsPatch is true.
        /// </summary>
        /// <value>Contains the Operating System target level if Pangaea.Data.Transfer.V3.Patch.PatchPreconditionResult.IsOsPatch is true.</value>

        [DataMember(Name="TargetOsLevel")]
        public int? TargetOsLevel { get; set; }

        /// <summary>
        /// Errors which were detected when running the patch precondition check.
        /// </summary>
        /// <value>Errors which were detected when running the patch precondition check.</value>

        [DataMember(Name="Errors")]
        public List<string> Errors { get; set; }

        /// <summary>
        /// Warnings which were detected when running the patch precondition check.
        /// </summary>
        /// <value>Warnings which were detected when running the patch precondition check.</value>

        [DataMember(Name="Warnings")]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchPreconditionResult {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  IsOsPatch: ").Append(IsOsPatch).Append("\n");
            sb.Append("  PatchVersion: ").Append(PatchVersion).Append("\n");
            sb.Append("  TargetOsLevel: ").Append(TargetOsLevel).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PatchPreconditionResult)obj);
        }

        /// <summary>
        /// Returns true if PatchPreconditionResult instances are equal
        /// </summary>
        /// <param name="other">Instance of PatchPreconditionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchPreconditionResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    IsOsPatch == other.IsOsPatch ||
                    IsOsPatch != null &&
                    IsOsPatch.Equals(other.IsOsPatch)
                ) && 
                (
                    PatchVersion == other.PatchVersion ||
                    PatchVersion != null &&
                    PatchVersion.Equals(other.PatchVersion)
                ) && 
                (
                    TargetOsLevel == other.TargetOsLevel ||
                    TargetOsLevel != null &&
                    TargetOsLevel.Equals(other.TargetOsLevel)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (IsOsPatch != null)
                    hashCode = hashCode * 59 + IsOsPatch.GetHashCode();
                    if (PatchVersion != null)
                    hashCode = hashCode * 59 + PatchVersion.GetHashCode();
                    if (TargetOsLevel != null)
                    hashCode = hashCode * 59 + TargetOsLevel.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PatchPreconditionResult left, PatchPreconditionResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PatchPreconditionResult left, PatchPreconditionResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
