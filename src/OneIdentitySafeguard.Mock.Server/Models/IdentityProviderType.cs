/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents the read-only property values of a supported identity provider
    /// </summary>
    [DataContract]
    public partial class IdentityProviderType : IEquatable<IdentityProviderType>
    { 
        /// <summary>
        /// The name of the identity provider type. (Read-only)
        /// </summary>
        /// <value>The name of the identity provider type. (Read-only)</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>

        [DataMember(Name="ReferenceName")]
        public IdentityProviderTypeReferenceName ReferenceName { get; set; }

        /// <summary>
        /// A flag indicating whether or not this identity provider type supports primary authentication. (Read-only)
        /// </summary>
        /// <value>A flag indicating whether or not this identity provider type supports primary authentication. (Read-only)</value>

        [DataMember(Name="AllowPrimaryAuthFlag")]
        public bool? AllowPrimaryAuthFlag { get; set; }

        /// <summary>
        /// A flag indicating whether or not this identity provider type supports secondary authentication. (Read-only)
        /// </summary>
        /// <value>A flag indicating whether or not this identity provider type supports secondary authentication. (Read-only)</value>

        [DataMember(Name="AllowSecondaryAuthFlag")]
        public bool? AllowSecondaryAuthFlag { get; set; }

        /// <summary>
        /// A flag indicating whether or not multiple identity providers of this type may be configured. (Read-only)
        /// </summary>
        /// <value>A flag indicating whether or not multiple identity providers of this type may be configured. (Read-only)</value>

        [DataMember(Name="AllowMultipleConfigsFlag")]
        public bool? AllowMultipleConfigsFlag { get; set; }

        /// <summary>
        /// When given, provides the default server port number for the identity provider configuration. (Read-only)
        /// </summary>
        /// <value>When given, provides the default server port number for the identity provider configuration. (Read-only)</value>

        [DataMember(Name="DefaultServerPort")]
        public int? DefaultServerPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityProviderType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  AllowPrimaryAuthFlag: ").Append(AllowPrimaryAuthFlag).Append("\n");
            sb.Append("  AllowSecondaryAuthFlag: ").Append(AllowSecondaryAuthFlag).Append("\n");
            sb.Append("  AllowMultipleConfigsFlag: ").Append(AllowMultipleConfigsFlag).Append("\n");
            sb.Append("  DefaultServerPort: ").Append(DefaultServerPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IdentityProviderType)obj);
        }

        /// <summary>
        /// Returns true if IdentityProviderType instances are equal
        /// </summary>
        /// <param name="other">Instance of IdentityProviderType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProviderType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ReferenceName == other.ReferenceName ||
                    ReferenceName != null &&
                    ReferenceName.Equals(other.ReferenceName)
                ) && 
                (
                    AllowPrimaryAuthFlag == other.AllowPrimaryAuthFlag ||
                    AllowPrimaryAuthFlag != null &&
                    AllowPrimaryAuthFlag.Equals(other.AllowPrimaryAuthFlag)
                ) && 
                (
                    AllowSecondaryAuthFlag == other.AllowSecondaryAuthFlag ||
                    AllowSecondaryAuthFlag != null &&
                    AllowSecondaryAuthFlag.Equals(other.AllowSecondaryAuthFlag)
                ) && 
                (
                    AllowMultipleConfigsFlag == other.AllowMultipleConfigsFlag ||
                    AllowMultipleConfigsFlag != null &&
                    AllowMultipleConfigsFlag.Equals(other.AllowMultipleConfigsFlag)
                ) && 
                (
                    DefaultServerPort == other.DefaultServerPort ||
                    DefaultServerPort != null &&
                    DefaultServerPort.Equals(other.DefaultServerPort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ReferenceName != null)
                    hashCode = hashCode * 59 + ReferenceName.GetHashCode();
                    if (AllowPrimaryAuthFlag != null)
                    hashCode = hashCode * 59 + AllowPrimaryAuthFlag.GetHashCode();
                    if (AllowSecondaryAuthFlag != null)
                    hashCode = hashCode * 59 + AllowSecondaryAuthFlag.GetHashCode();
                    if (AllowMultipleConfigsFlag != null)
                    hashCode = hashCode * 59 + AllowMultipleConfigsFlag.GetHashCode();
                    if (DefaultServerPort != null)
                    hashCode = hashCode * 59 + DefaultServerPort.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IdentityProviderType left, IdentityProviderType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IdentityProviderType left, IdentityProviderType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
