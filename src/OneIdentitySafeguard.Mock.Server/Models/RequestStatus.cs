/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RequestStatus : IEquatable<RequestStatus>
    { 
        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="State")]
        public RequestState State { get; set; }

        /// <summary>
        /// How much of work associated with the request is complete (Read-only)
        /// </summary>
        /// <value>How much of work associated with the request is complete (Read-only)</value>

        [DataMember(Name="PercentComplete")]
        public int? PercentComplete { get; set; }

        /// <summary>
        /// Is the request cancellable? (Read-only). The value of this flag is a suggestion only.
        /// </summary>
        /// <value>Is the request cancellable? (Read-only). The value of this flag is a suggestion only.</value>

        [DataMember(Name="Cancellable")]
        public bool? Cancellable { get; set; }

        /// <summary>
        /// When was this request accepted (Read-only)
        /// </summary>
        /// <value>When was this request accepted (Read-only)</value>

        [DataMember(Name="AcceptedTime")]
        public DateTime? AcceptedTime { get; set; }

        /// <summary>
        /// Duration that request was being validated for acceptance (Read-only)
        /// </summary>
        /// <value>Duration that request was being validated for acceptance (Read-only)</value>

        [DataMember(Name="AcceptanceDuration")]
        public string AcceptanceDuration { get; set; }

        /// <summary>
        /// When was the request work started (Read-only)
        /// </summary>
        /// <value>When was the request work started (Read-only)</value>

        [DataMember(Name="StartTime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Duration that request was queued (Read-only)
        /// </summary>
        /// <value>Duration that request was queued (Read-only)</value>

        [DataMember(Name="QueuedDuration")]
        public string QueuedDuration { get; set; }

        /// <summary>
        /// When was the request completed (Read-only)
        /// </summary>
        /// <value>When was the request completed (Read-only)</value>

        [DataMember(Name="EndTime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Duration that request was running (Read-only)
        /// </summary>
        /// <value>Duration that request was running (Read-only)</value>

        [DataMember(Name="RunningDuration")]
        public string RunningDuration { get; set; }

        /// <summary>
        /// Total duration that request was active (Read-only)
        /// </summary>
        /// <value>Total duration that request was active (Read-only)</value>

        [DataMember(Name="TotalDuration")]
        public string TotalDuration { get; set; }

        /// <summary>
        /// Last message associated with the request (Read-only)
        /// </summary>
        /// <value>Last message associated with the request (Read-only)</value>

        [DataMember(Name="Message")]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestStatus {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PercentComplete: ").Append(PercentComplete).Append("\n");
            sb.Append("  Cancellable: ").Append(Cancellable).Append("\n");
            sb.Append("  AcceptedTime: ").Append(AcceptedTime).Append("\n");
            sb.Append("  AcceptanceDuration: ").Append(AcceptanceDuration).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  QueuedDuration: ").Append(QueuedDuration).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  RunningDuration: ").Append(RunningDuration).Append("\n");
            sb.Append("  TotalDuration: ").Append(TotalDuration).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RequestStatus)obj);
        }

        /// <summary>
        /// Returns true if RequestStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of RequestStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestStatus other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    PercentComplete == other.PercentComplete ||
                    PercentComplete != null &&
                    PercentComplete.Equals(other.PercentComplete)
                ) && 
                (
                    Cancellable == other.Cancellable ||
                    Cancellable != null &&
                    Cancellable.Equals(other.Cancellable)
                ) && 
                (
                    AcceptedTime == other.AcceptedTime ||
                    AcceptedTime != null &&
                    AcceptedTime.Equals(other.AcceptedTime)
                ) && 
                (
                    AcceptanceDuration == other.AcceptanceDuration ||
                    AcceptanceDuration != null &&
                    AcceptanceDuration.Equals(other.AcceptanceDuration)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    QueuedDuration == other.QueuedDuration ||
                    QueuedDuration != null &&
                    QueuedDuration.Equals(other.QueuedDuration)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    RunningDuration == other.RunningDuration ||
                    RunningDuration != null &&
                    RunningDuration.Equals(other.RunningDuration)
                ) && 
                (
                    TotalDuration == other.TotalDuration ||
                    TotalDuration != null &&
                    TotalDuration.Equals(other.TotalDuration)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (PercentComplete != null)
                    hashCode = hashCode * 59 + PercentComplete.GetHashCode();
                    if (Cancellable != null)
                    hashCode = hashCode * 59 + Cancellable.GetHashCode();
                    if (AcceptedTime != null)
                    hashCode = hashCode * 59 + AcceptedTime.GetHashCode();
                    if (AcceptanceDuration != null)
                    hashCode = hashCode * 59 + AcceptanceDuration.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (QueuedDuration != null)
                    hashCode = hashCode * 59 + QueuedDuration.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (RunningDuration != null)
                    hashCode = hashCode * 59 + RunningDuration.GetHashCode();
                    if (TotalDuration != null)
                    hashCode = hashCode * 59 + TotalDuration.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RequestStatus left, RequestStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RequestStatus left, RequestStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
