/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Directory attribute mappings for computers
    /// </summary>
    [DataContract]
    public partial class ComputerSchemaProperties : IEquatable<ComputerSchemaProperties>
    { 
        /// <summary>
        /// LDAP objects that have all of the specified objectClass types will be treated as computers.  These objectClass types will also be used to validate the attributes mapped to computer properties.
        /// </summary>
        /// <value>LDAP objects that have all of the specified objectClass types will be treated as computers.  These objectClass types will also be used to validate the attributes mapped to computer properties.</value>

        [DataMember(Name="ComputerClassType")]
        public List<string> ComputerClassType { get; set; }

        /// <summary>
        /// Name of host name schema attribute
        /// </summary>
        /// <value>Name of host name schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="NameAttribute")]
        public string NameAttribute { get; set; }

        /// <summary>
        /// Name of description schema attribute
        /// </summary>
        /// <value>Name of description schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="DescriptionAttribute")]
        public string DescriptionAttribute { get; set; }

        /// <summary>
        /// Name of host schema attribute
        /// </summary>
        /// <value>Name of host schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="NetworkAddressAttribute")]
        public string NetworkAddressAttribute { get; set; }

        /// <summary>
        /// Name of host AD schema attribute
        /// </summary>
        /// <value>Name of host AD schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="OperatingSystemAttribute")]
        public string OperatingSystemAttribute { get; set; }

        /// <summary>
        /// Name of host schema attribute
        /// </summary>
        /// <value>Name of host schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="OperatingSystemVersionAttribute")]
        public string OperatingSystemVersionAttribute { get; set; }

        /// <summary>
        /// Member of group schema attribute
        /// </summary>
        /// <value>Member of group schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="MemberOfAttribute")]
        public string MemberOfAttribute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComputerSchemaProperties {\n");
            sb.Append("  ComputerClassType: ").Append(ComputerClassType).Append("\n");
            sb.Append("  NameAttribute: ").Append(NameAttribute).Append("\n");
            sb.Append("  DescriptionAttribute: ").Append(DescriptionAttribute).Append("\n");
            sb.Append("  NetworkAddressAttribute: ").Append(NetworkAddressAttribute).Append("\n");
            sb.Append("  OperatingSystemAttribute: ").Append(OperatingSystemAttribute).Append("\n");
            sb.Append("  OperatingSystemVersionAttribute: ").Append(OperatingSystemVersionAttribute).Append("\n");
            sb.Append("  MemberOfAttribute: ").Append(MemberOfAttribute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComputerSchemaProperties)obj);
        }

        /// <summary>
        /// Returns true if ComputerSchemaProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ComputerSchemaProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComputerSchemaProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ComputerClassType == other.ComputerClassType ||
                    ComputerClassType != null &&
                    ComputerClassType.SequenceEqual(other.ComputerClassType)
                ) && 
                (
                    NameAttribute == other.NameAttribute ||
                    NameAttribute != null &&
                    NameAttribute.Equals(other.NameAttribute)
                ) && 
                (
                    DescriptionAttribute == other.DescriptionAttribute ||
                    DescriptionAttribute != null &&
                    DescriptionAttribute.Equals(other.DescriptionAttribute)
                ) && 
                (
                    NetworkAddressAttribute == other.NetworkAddressAttribute ||
                    NetworkAddressAttribute != null &&
                    NetworkAddressAttribute.Equals(other.NetworkAddressAttribute)
                ) && 
                (
                    OperatingSystemAttribute == other.OperatingSystemAttribute ||
                    OperatingSystemAttribute != null &&
                    OperatingSystemAttribute.Equals(other.OperatingSystemAttribute)
                ) && 
                (
                    OperatingSystemVersionAttribute == other.OperatingSystemVersionAttribute ||
                    OperatingSystemVersionAttribute != null &&
                    OperatingSystemVersionAttribute.Equals(other.OperatingSystemVersionAttribute)
                ) && 
                (
                    MemberOfAttribute == other.MemberOfAttribute ||
                    MemberOfAttribute != null &&
                    MemberOfAttribute.Equals(other.MemberOfAttribute)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ComputerClassType != null)
                    hashCode = hashCode * 59 + ComputerClassType.GetHashCode();
                    if (NameAttribute != null)
                    hashCode = hashCode * 59 + NameAttribute.GetHashCode();
                    if (DescriptionAttribute != null)
                    hashCode = hashCode * 59 + DescriptionAttribute.GetHashCode();
                    if (NetworkAddressAttribute != null)
                    hashCode = hashCode * 59 + NetworkAddressAttribute.GetHashCode();
                    if (OperatingSystemAttribute != null)
                    hashCode = hashCode * 59 + OperatingSystemAttribute.GetHashCode();
                    if (OperatingSystemVersionAttribute != null)
                    hashCode = hashCode * 59 + OperatingSystemVersionAttribute.GetHashCode();
                    if (MemberOfAttribute != null)
                    hashCode = hashCode * 59 + MemberOfAttribute.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComputerSchemaProperties left, ComputerSchemaProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComputerSchemaProperties left, ComputerSchemaProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
