/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents asset requests that the current user can perform some action on
    /// </summary>
    [DataContract]
    public partial class ActionableAccessRequests : IEquatable<ActionableAccessRequests>
    { 
        /// <summary>
        /// Requests the the Policy Admin my close if necessary
        /// </summary>
        /// <value>Requests the the Policy Admin my close if necessary</value>

        [DataMember(Name="Admin")]
        public List<AccessRequest> Admin { get; set; }

        /// <summary>
        /// Requests that are awaiting approval from the current user
        /// </summary>
        /// <value>Requests that are awaiting approval from the current user</value>

        [DataMember(Name="Approver")]
        public List<AccessRequest> Approver { get; set; }

        /// <summary>
        /// Requests submitted by the current user that are either open or  have had activity needing acknowledgement
        /// </summary>
        /// <value>Requests submitted by the current user that are either open or  have had activity needing acknowledgement</value>

        [DataMember(Name="Requester")]
        public List<AccessRequest> Requester { get; set; }

        /// <summary>
        /// Requests that are awaiting review from the current user
        /// </summary>
        /// <value>Requests that are awaiting review from the current user</value>

        [DataMember(Name="Reviewer")]
        public List<AccessRequest> Reviewer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionableAccessRequests {\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Approver: ").Append(Approver).Append("\n");
            sb.Append("  Requester: ").Append(Requester).Append("\n");
            sb.Append("  Reviewer: ").Append(Reviewer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActionableAccessRequests)obj);
        }

        /// <summary>
        /// Returns true if ActionableAccessRequests instances are equal
        /// </summary>
        /// <param name="other">Instance of ActionableAccessRequests to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionableAccessRequests other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Admin == other.Admin ||
                    Admin != null &&
                    Admin.SequenceEqual(other.Admin)
                ) && 
                (
                    Approver == other.Approver ||
                    Approver != null &&
                    Approver.SequenceEqual(other.Approver)
                ) && 
                (
                    Requester == other.Requester ||
                    Requester != null &&
                    Requester.SequenceEqual(other.Requester)
                ) && 
                (
                    Reviewer == other.Reviewer ||
                    Reviewer != null &&
                    Reviewer.SequenceEqual(other.Reviewer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Admin != null)
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    if (Approver != null)
                    hashCode = hashCode * 59 + Approver.GetHashCode();
                    if (Requester != null)
                    hashCode = hashCode * 59 + Requester.GetHashCode();
                    if (Reviewer != null)
                    hashCode = hashCode * 59 + Reviewer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActionableAccessRequests left, ActionableAccessRequests right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActionableAccessRequests left, ActionableAccessRequests right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
