/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a setting used to configure the appliance or application
    /// </summary>
    [DataContract]
    public partial class Setting : IEquatable<Setting>
    { 
        /// <summary>
        /// The setting&#x27;s name (Read-only)
        /// </summary>
        /// <value>The setting&#x27;s name (Read-only)</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The setting&#x27;s category (Read-only)
        /// </summary>
        /// <value>The setting&#x27;s category (Read-only)</value>

        [DataMember(Name="Category")]
        public string Category { get; set; }

        /// <summary>
        /// The setting&#x27;s current value
        /// </summary>
        /// <value>The setting&#x27;s current value</value>

        [MaxLength(512)]
        [DataMember(Name="Value")]
        public string Value { get; set; }

        /// <summary>
        /// The setting&#x27;s default value (Read-only)
        /// </summary>
        /// <value>The setting&#x27;s default value (Read-only)</value>

        [DataMember(Name="DefaultValue")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The setting&#x27;s minimum limit value, if the value is numeric in nature. When null, the value is either non-numeric or there is no minimum limit. (Read-only)
        /// </summary>
        /// <value>The setting&#x27;s minimum limit value, if the value is numeric in nature. When null, the value is either non-numeric or there is no minimum limit. (Read-only)</value>

        [DataMember(Name="MinValue")]
        public int? MinValue { get; set; }

        /// <summary>
        /// The setting&#x27;s maximum limit value, if the setting is numeric in nature. When null, the value is either non-numeric or there is no maximum limit. (Read-only)
        /// </summary>
        /// <value>The setting&#x27;s maximum limit value, if the setting is numeric in nature. When null, the value is either non-numeric or there is no maximum limit. (Read-only)</value>

        [DataMember(Name="MaxValue")]
        public int? MaxValue { get; set; }

        /// <summary>
        /// Valid options for this setting. Empty for many settings. (Read-only)
        /// </summary>
        /// <value>Valid options for this setting. Empty for many settings. (Read-only)</value>

        [DataMember(Name="Options")]
        public List<SettingOption> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Setting {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Setting)obj);
        }

        /// <summary>
        /// Returns true if Setting instances are equal
        /// </summary>
        /// <param name="other">Instance of Setting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Setting other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    DefaultValue == other.DefaultValue ||
                    DefaultValue != null &&
                    DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    MinValue == other.MinValue ||
                    MinValue != null &&
                    MinValue.Equals(other.MinValue)
                ) && 
                (
                    MaxValue == other.MaxValue ||
                    MaxValue != null &&
                    MaxValue.Equals(other.MaxValue)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    Options.SequenceEqual(other.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                    if (MinValue != null)
                    hashCode = hashCode * 59 + MinValue.GetHashCode();
                    if (MaxValue != null)
                    hashCode = hashCode * 59 + MaxValue.GetHashCode();
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Setting left, Setting right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Setting left, Setting right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
