/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Settings related to reviewing a password request
    /// </summary>
    [DataContract]
    public partial class PolicyReviewerProperties : IEquatable<PolicyReviewerProperties>
    { 
        /// <summary>
        /// The minimum number of reviews required before a password request is closed
        /// </summary>
        /// <value>The minimum number of reviews required before a password request is closed</value>

        [Range(0, 2147483647)]
        [DataMember(Name="RequiredReviewers")]
        public int? RequiredReviewers { get; set; }

        /// <summary>
        /// Whether a reviewer is required to supply a comment
        /// </summary>
        /// <value>Whether a reviewer is required to supply a comment</value>

        [DataMember(Name="RequireReviewerComment")]
        public bool? RequireReviewerComment { get; set; }

        /// <summary>
        /// Whether this policy will allow bypassing any pending reviews in order to create new requests.
        /// </summary>
        /// <value>Whether this policy will allow bypassing any pending reviews in order to create new requests.</value>

        [DataMember(Name="AllowSubsequentAccessRequestsWithoutReview")]
        public bool? AllowSubsequentAccessRequestsWithoutReview { get; set; }

        /// <summary>
        /// Whether email notifications should be sent for approval escalation
        /// </summary>
        /// <value>Whether email notifications should be sent for approval escalation</value>

        [DataMember(Name="PendingReviewEscalationEnabled")]
        public bool? PendingReviewEscalationEnabled { get; set; }

        /// <summary>
        /// The maximum duration (days) an expired password release may be pending review before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (days) an expired password release may be pending review before notifying escalation contacts</value>

        [Range(0, 32767)]
        [DataMember(Name="PendingReviewDurationBeforeEscalationDays")]
        public int? PendingReviewDurationBeforeEscalationDays { get; set; }

        /// <summary>
        /// The maximum duration (hours) a expired password release may be pending review before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (hours) a expired password release may be pending review before notifying escalation contacts</value>

        [Range(0, 23)]
        [DataMember(Name="PendingReviewDurationBeforeEscalationHours")]
        public int? PendingReviewDurationBeforeEscalationHours { get; set; }

        /// <summary>
        /// The maximum duration (minutes) a expired password release may be pending review before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (minutes) a expired password release may be pending review before notifying escalation contacts</value>

        [Range(0, 59)]
        [DataMember(Name="PendingReviewDurationBeforeEscalationMinutes")]
        public int? PendingReviewDurationBeforeEscalationMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyReviewerProperties {\n");
            sb.Append("  RequiredReviewers: ").Append(RequiredReviewers).Append("\n");
            sb.Append("  RequireReviewerComment: ").Append(RequireReviewerComment).Append("\n");
            sb.Append("  AllowSubsequentAccessRequestsWithoutReview: ").Append(AllowSubsequentAccessRequestsWithoutReview).Append("\n");
            sb.Append("  PendingReviewEscalationEnabled: ").Append(PendingReviewEscalationEnabled).Append("\n");
            sb.Append("  PendingReviewDurationBeforeEscalationDays: ").Append(PendingReviewDurationBeforeEscalationDays).Append("\n");
            sb.Append("  PendingReviewDurationBeforeEscalationHours: ").Append(PendingReviewDurationBeforeEscalationHours).Append("\n");
            sb.Append("  PendingReviewDurationBeforeEscalationMinutes: ").Append(PendingReviewDurationBeforeEscalationMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicyReviewerProperties)obj);
        }

        /// <summary>
        /// Returns true if PolicyReviewerProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicyReviewerProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyReviewerProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequiredReviewers == other.RequiredReviewers ||
                    RequiredReviewers != null &&
                    RequiredReviewers.Equals(other.RequiredReviewers)
                ) && 
                (
                    RequireReviewerComment == other.RequireReviewerComment ||
                    RequireReviewerComment != null &&
                    RequireReviewerComment.Equals(other.RequireReviewerComment)
                ) && 
                (
                    AllowSubsequentAccessRequestsWithoutReview == other.AllowSubsequentAccessRequestsWithoutReview ||
                    AllowSubsequentAccessRequestsWithoutReview != null &&
                    AllowSubsequentAccessRequestsWithoutReview.Equals(other.AllowSubsequentAccessRequestsWithoutReview)
                ) && 
                (
                    PendingReviewEscalationEnabled == other.PendingReviewEscalationEnabled ||
                    PendingReviewEscalationEnabled != null &&
                    PendingReviewEscalationEnabled.Equals(other.PendingReviewEscalationEnabled)
                ) && 
                (
                    PendingReviewDurationBeforeEscalationDays == other.PendingReviewDurationBeforeEscalationDays ||
                    PendingReviewDurationBeforeEscalationDays != null &&
                    PendingReviewDurationBeforeEscalationDays.Equals(other.PendingReviewDurationBeforeEscalationDays)
                ) && 
                (
                    PendingReviewDurationBeforeEscalationHours == other.PendingReviewDurationBeforeEscalationHours ||
                    PendingReviewDurationBeforeEscalationHours != null &&
                    PendingReviewDurationBeforeEscalationHours.Equals(other.PendingReviewDurationBeforeEscalationHours)
                ) && 
                (
                    PendingReviewDurationBeforeEscalationMinutes == other.PendingReviewDurationBeforeEscalationMinutes ||
                    PendingReviewDurationBeforeEscalationMinutes != null &&
                    PendingReviewDurationBeforeEscalationMinutes.Equals(other.PendingReviewDurationBeforeEscalationMinutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequiredReviewers != null)
                    hashCode = hashCode * 59 + RequiredReviewers.GetHashCode();
                    if (RequireReviewerComment != null)
                    hashCode = hashCode * 59 + RequireReviewerComment.GetHashCode();
                    if (AllowSubsequentAccessRequestsWithoutReview != null)
                    hashCode = hashCode * 59 + AllowSubsequentAccessRequestsWithoutReview.GetHashCode();
                    if (PendingReviewEscalationEnabled != null)
                    hashCode = hashCode * 59 + PendingReviewEscalationEnabled.GetHashCode();
                    if (PendingReviewDurationBeforeEscalationDays != null)
                    hashCode = hashCode * 59 + PendingReviewDurationBeforeEscalationDays.GetHashCode();
                    if (PendingReviewDurationBeforeEscalationHours != null)
                    hashCode = hashCode * 59 + PendingReviewDurationBeforeEscalationHours.GetHashCode();
                    if (PendingReviewDurationBeforeEscalationMinutes != null)
                    hashCode = hashCode * 59 + PendingReviewDurationBeforeEscalationMinutes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicyReviewerProperties left, PolicyReviewerProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicyReviewerProperties left, PolicyReviewerProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
