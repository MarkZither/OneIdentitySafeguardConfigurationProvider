/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Settings related to approving a access request
    /// </summary>
    [DataContract]
    public partial class PolicyApproverProperties : IEquatable<PolicyApproverProperties>
    { 
        /// <summary>
        /// Password requests must be approved before the password may be released
        /// </summary>
        /// <value>Password requests must be approved before the password may be released</value>

        [DataMember(Name="RequireApproval")]
        public bool? RequireApproval { get; set; }

        /// <summary>
        /// Whether email notifications should be sent for approval escalation
        /// </summary>
        /// <value>Whether email notifications should be sent for approval escalation</value>

        [DataMember(Name="PendingApprovalEscalationEnabled")]
        public bool? PendingApprovalEscalationEnabled { get; set; }

        /// <summary>
        /// The maximum duration (days) a access request may be pending approval before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (days) a access request may be pending approval before notifying escalation contacts</value>

        [Range(0, 32767)]
        [DataMember(Name="PendingApprovalDurationBeforeEscalationDays")]
        public int? PendingApprovalDurationBeforeEscalationDays { get; set; }

        /// <summary>
        /// The maximum duration (hours) a access request may be pending approval before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (hours) a access request may be pending approval before notifying escalation contacts</value>

        [Range(0, 23)]
        [DataMember(Name="PendingApprovalDurationBeforeEscalationHours")]
        public int? PendingApprovalDurationBeforeEscalationHours { get; set; }

        /// <summary>
        /// The maximum duration (minutes) a access request may be pending approval before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (minutes) a access request may be pending approval before notifying escalation contacts</value>

        [Range(0, 59)]
        [DataMember(Name="PendingApprovalDurationBeforeEscalationMinutes")]
        public int? PendingApprovalDurationBeforeEscalationMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyApproverProperties {\n");
            sb.Append("  RequireApproval: ").Append(RequireApproval).Append("\n");
            sb.Append("  PendingApprovalEscalationEnabled: ").Append(PendingApprovalEscalationEnabled).Append("\n");
            sb.Append("  PendingApprovalDurationBeforeEscalationDays: ").Append(PendingApprovalDurationBeforeEscalationDays).Append("\n");
            sb.Append("  PendingApprovalDurationBeforeEscalationHours: ").Append(PendingApprovalDurationBeforeEscalationHours).Append("\n");
            sb.Append("  PendingApprovalDurationBeforeEscalationMinutes: ").Append(PendingApprovalDurationBeforeEscalationMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicyApproverProperties)obj);
        }

        /// <summary>
        /// Returns true if PolicyApproverProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicyApproverProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyApproverProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequireApproval == other.RequireApproval ||
                    RequireApproval != null &&
                    RequireApproval.Equals(other.RequireApproval)
                ) && 
                (
                    PendingApprovalEscalationEnabled == other.PendingApprovalEscalationEnabled ||
                    PendingApprovalEscalationEnabled != null &&
                    PendingApprovalEscalationEnabled.Equals(other.PendingApprovalEscalationEnabled)
                ) && 
                (
                    PendingApprovalDurationBeforeEscalationDays == other.PendingApprovalDurationBeforeEscalationDays ||
                    PendingApprovalDurationBeforeEscalationDays != null &&
                    PendingApprovalDurationBeforeEscalationDays.Equals(other.PendingApprovalDurationBeforeEscalationDays)
                ) && 
                (
                    PendingApprovalDurationBeforeEscalationHours == other.PendingApprovalDurationBeforeEscalationHours ||
                    PendingApprovalDurationBeforeEscalationHours != null &&
                    PendingApprovalDurationBeforeEscalationHours.Equals(other.PendingApprovalDurationBeforeEscalationHours)
                ) && 
                (
                    PendingApprovalDurationBeforeEscalationMinutes == other.PendingApprovalDurationBeforeEscalationMinutes ||
                    PendingApprovalDurationBeforeEscalationMinutes != null &&
                    PendingApprovalDurationBeforeEscalationMinutes.Equals(other.PendingApprovalDurationBeforeEscalationMinutes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequireApproval != null)
                    hashCode = hashCode * 59 + RequireApproval.GetHashCode();
                    if (PendingApprovalEscalationEnabled != null)
                    hashCode = hashCode * 59 + PendingApprovalEscalationEnabled.GetHashCode();
                    if (PendingApprovalDurationBeforeEscalationDays != null)
                    hashCode = hashCode * 59 + PendingApprovalDurationBeforeEscalationDays.GetHashCode();
                    if (PendingApprovalDurationBeforeEscalationHours != null)
                    hashCode = hashCode * 59 + PendingApprovalDurationBeforeEscalationHours.GetHashCode();
                    if (PendingApprovalDurationBeforeEscalationMinutes != null)
                    hashCode = hashCode * 59 + PendingApprovalDurationBeforeEscalationMinutes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicyApproverProperties left, PolicyApproverProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicyApproverProperties left, PolicyApproverProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
