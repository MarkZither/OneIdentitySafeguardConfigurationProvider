/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AssetAccountBatchResult : IEquatable<AssetAccountBatchResult>
    { 
        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>

        [DataMember(Name="StatusCode")]
        public HttpStatusCode StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets StatusCodeNumber
        /// </summary>

        [DataMember(Name="StatusCodeNumber")]
        public int? StatusCodeNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsSuccess
        /// </summary>

        [DataMember(Name="IsSuccess")]
        public bool? IsSuccess { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>

        [DataMember(Name="Error")]
        public ApiError Error { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>

        [DataMember(Name="Request")]
        public int? Request { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetAccountBatchResult {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusCodeNumber: ").Append(StatusCodeNumber).Append("\n");
            sb.Append("  IsSuccess: ").Append(IsSuccess).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetAccountBatchResult)obj);
        }

        /// <summary>
        /// Returns true if AssetAccountBatchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetAccountBatchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetAccountBatchResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    StatusCodeNumber == other.StatusCodeNumber ||
                    StatusCodeNumber != null &&
                    StatusCodeNumber.Equals(other.StatusCodeNumber)
                ) && 
                (
                    IsSuccess == other.IsSuccess ||
                    IsSuccess != null &&
                    IsSuccess.Equals(other.IsSuccess)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Request == other.Request ||
                    Request != null &&
                    Request.Equals(other.Request)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (StatusCodeNumber != null)
                    hashCode = hashCode * 59 + StatusCodeNumber.GetHashCode();
                    if (IsSuccess != null)
                    hashCode = hashCode * 59 + IsSuccess.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (Request != null)
                    hashCode = hashCode * 59 + Request.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetAccountBatchResult left, AssetAccountBatchResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetAccountBatchResult left, AssetAccountBatchResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
