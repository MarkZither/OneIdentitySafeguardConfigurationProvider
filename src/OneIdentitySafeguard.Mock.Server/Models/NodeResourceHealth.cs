/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NodeResourceHealth : IEquatable<NodeResourceHealth>
    { 
        /// <summary>
        /// Gets or Sets DiskFreeBytes
        /// </summary>

        [DataMember(Name="DiskFreeBytes")]
        public long? DiskFreeBytes { get; set; }

        /// <summary>
        /// Gets or Sets DiskPercentFree
        /// </summary>

        [DataMember(Name="DiskPercentFree")]
        public float? DiskPercentFree { get; set; }

        /// <summary>
        /// Gets or Sets DiskTotalBytes
        /// </summary>

        [DataMember(Name="DiskTotalBytes")]
        public long? DiskTotalBytes { get; set; }

        /// <summary>
        /// Gets or Sets MemoryFreeBytes
        /// </summary>

        [DataMember(Name="MemoryFreeBytes")]
        public long? MemoryFreeBytes { get; set; }

        /// <summary>
        /// Gets or Sets MemoryPercentFree
        /// </summary>

        [DataMember(Name="MemoryPercentFree")]
        public float? MemoryPercentFree { get; set; }

        /// <summary>
        /// Gets or Sets MemoryTotalBytes
        /// </summary>

        [DataMember(Name="MemoryTotalBytes")]
        public long? MemoryTotalBytes { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorCount
        /// </summary>

        [DataMember(Name="ProcessorCount")]
        public int? ProcessorCount { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorPercentUsed
        /// </summary>

        [DataMember(Name="ProcessorPercentUsed")]
        public float? ProcessorPercentUsed { get; set; }

        /// <summary>
        /// Gets or Sets Temperatures
        /// </summary>

        [DataMember(Name="Temperatures")]
        public List<TemperatureStatistic> Temperatures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeResourceHealth {\n");
            sb.Append("  DiskFreeBytes: ").Append(DiskFreeBytes).Append("\n");
            sb.Append("  DiskPercentFree: ").Append(DiskPercentFree).Append("\n");
            sb.Append("  DiskTotalBytes: ").Append(DiskTotalBytes).Append("\n");
            sb.Append("  MemoryFreeBytes: ").Append(MemoryFreeBytes).Append("\n");
            sb.Append("  MemoryPercentFree: ").Append(MemoryPercentFree).Append("\n");
            sb.Append("  MemoryTotalBytes: ").Append(MemoryTotalBytes).Append("\n");
            sb.Append("  ProcessorCount: ").Append(ProcessorCount).Append("\n");
            sb.Append("  ProcessorPercentUsed: ").Append(ProcessorPercentUsed).Append("\n");
            sb.Append("  Temperatures: ").Append(Temperatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NodeResourceHealth)obj);
        }

        /// <summary>
        /// Returns true if NodeResourceHealth instances are equal
        /// </summary>
        /// <param name="other">Instance of NodeResourceHealth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeResourceHealth other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiskFreeBytes == other.DiskFreeBytes ||
                    DiskFreeBytes != null &&
                    DiskFreeBytes.Equals(other.DiskFreeBytes)
                ) && 
                (
                    DiskPercentFree == other.DiskPercentFree ||
                    DiskPercentFree != null &&
                    DiskPercentFree.Equals(other.DiskPercentFree)
                ) && 
                (
                    DiskTotalBytes == other.DiskTotalBytes ||
                    DiskTotalBytes != null &&
                    DiskTotalBytes.Equals(other.DiskTotalBytes)
                ) && 
                (
                    MemoryFreeBytes == other.MemoryFreeBytes ||
                    MemoryFreeBytes != null &&
                    MemoryFreeBytes.Equals(other.MemoryFreeBytes)
                ) && 
                (
                    MemoryPercentFree == other.MemoryPercentFree ||
                    MemoryPercentFree != null &&
                    MemoryPercentFree.Equals(other.MemoryPercentFree)
                ) && 
                (
                    MemoryTotalBytes == other.MemoryTotalBytes ||
                    MemoryTotalBytes != null &&
                    MemoryTotalBytes.Equals(other.MemoryTotalBytes)
                ) && 
                (
                    ProcessorCount == other.ProcessorCount ||
                    ProcessorCount != null &&
                    ProcessorCount.Equals(other.ProcessorCount)
                ) && 
                (
                    ProcessorPercentUsed == other.ProcessorPercentUsed ||
                    ProcessorPercentUsed != null &&
                    ProcessorPercentUsed.Equals(other.ProcessorPercentUsed)
                ) && 
                (
                    Temperatures == other.Temperatures ||
                    Temperatures != null &&
                    Temperatures.SequenceEqual(other.Temperatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiskFreeBytes != null)
                    hashCode = hashCode * 59 + DiskFreeBytes.GetHashCode();
                    if (DiskPercentFree != null)
                    hashCode = hashCode * 59 + DiskPercentFree.GetHashCode();
                    if (DiskTotalBytes != null)
                    hashCode = hashCode * 59 + DiskTotalBytes.GetHashCode();
                    if (MemoryFreeBytes != null)
                    hashCode = hashCode * 59 + MemoryFreeBytes.GetHashCode();
                    if (MemoryPercentFree != null)
                    hashCode = hashCode * 59 + MemoryPercentFree.GetHashCode();
                    if (MemoryTotalBytes != null)
                    hashCode = hashCode * 59 + MemoryTotalBytes.GetHashCode();
                    if (ProcessorCount != null)
                    hashCode = hashCode * 59 + ProcessorCount.GetHashCode();
                    if (ProcessorPercentUsed != null)
                    hashCode = hashCode * 59 + ProcessorPercentUsed.GetHashCode();
                    if (Temperatures != null)
                    hashCode = hashCode * 59 + Temperatures.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NodeResourceHealth left, NodeResourceHealth right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NodeResourceHealth left, NodeResourceHealth right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
