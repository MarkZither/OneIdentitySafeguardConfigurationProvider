/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Default ldap schema for a directory
    /// </summary>
    [DataContract]
    public partial class DefaultProviderLdapSchema : IEquatable<DefaultProviderLdapSchema>
    { 
        /// <summary>
        /// Gets or Sets DefaultSchema
        /// </summary>

        [DataMember(Name="DefaultSchema")]
        public IdentityProviderLdapSchema DefaultSchema { get; set; }

        /// <summary>
        /// Gets or Sets UserSchemaDescriptors
        /// </summary>

        [DataMember(Name="UserSchemaDescriptors")]
        public UserProviderSchemaDescriptors UserSchemaDescriptors { get; set; }

        /// <summary>
        /// Gets or Sets GroupSchemaDescriptors
        /// </summary>

        [DataMember(Name="GroupSchemaDescriptors")]
        public GroupSchemaDescriptors GroupSchemaDescriptors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultProviderLdapSchema {\n");
            sb.Append("  DefaultSchema: ").Append(DefaultSchema).Append("\n");
            sb.Append("  UserSchemaDescriptors: ").Append(UserSchemaDescriptors).Append("\n");
            sb.Append("  GroupSchemaDescriptors: ").Append(GroupSchemaDescriptors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DefaultProviderLdapSchema)obj);
        }

        /// <summary>
        /// Returns true if DefaultProviderLdapSchema instances are equal
        /// </summary>
        /// <param name="other">Instance of DefaultProviderLdapSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultProviderLdapSchema other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DefaultSchema == other.DefaultSchema ||
                    DefaultSchema != null &&
                    DefaultSchema.Equals(other.DefaultSchema)
                ) && 
                (
                    UserSchemaDescriptors == other.UserSchemaDescriptors ||
                    UserSchemaDescriptors != null &&
                    UserSchemaDescriptors.Equals(other.UserSchemaDescriptors)
                ) && 
                (
                    GroupSchemaDescriptors == other.GroupSchemaDescriptors ||
                    GroupSchemaDescriptors != null &&
                    GroupSchemaDescriptors.Equals(other.GroupSchemaDescriptors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DefaultSchema != null)
                    hashCode = hashCode * 59 + DefaultSchema.GetHashCode();
                    if (UserSchemaDescriptors != null)
                    hashCode = hashCode * 59 + UserSchemaDescriptors.GetHashCode();
                    if (GroupSchemaDescriptors != null)
                    hashCode = hashCode * 59 + GroupSchemaDescriptors.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DefaultProviderLdapSchema left, DefaultProviderLdapSchema right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DefaultProviderLdapSchema left, DefaultProviderLdapSchema right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
