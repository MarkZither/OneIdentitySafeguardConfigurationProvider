/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A password rule used to generate account password during password change automation applied to a partition profile.
    /// </summary>
    [DataContract]
    public partial class AccountPasswordRule : IEquatable<AccountPasswordRule>
    { 
        /// <summary>
        /// Database ID of the password rule (Read-only)
        /// </summary>
        /// <value>Database ID of the password rule (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// If owned by the system then this rule cannot be deleted (Read-only)
        /// </summary>
        /// <value>If owned by the system then this rule cannot be deleted (Read-only)</value>

        [DataMember(Name="IsSystemOwned")]
        public bool? IsSystemOwned { get; set; }

        /// <summary>
        /// Database Identifier of this Password Rule&#x27;s Associated Asset Partition (Read-only)
        /// </summary>
        /// <value>Database Identifier of this Password Rule&#x27;s Associated Asset Partition (Read-only)</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of this Password Rule&#x27;s Associated Asset Partition
        /// </summary>
        /// <value>Name of this Password Rule&#x27;s Associated Asset Partition</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Name of the password rule
        /// </summary>
        /// <value>Name of the password rule</value>
        [Required]

        [StringLength(70, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the password rule
        /// </summary>
        /// <value>Description of the password rule</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// The maximum length of the password
        /// </summary>
        /// <value>The maximum length of the password</value>

        [Range(3, 255)]
        [DataMember(Name="MaxCharacters")]
        public int? MaxCharacters { get; set; }

        /// <summary>
        /// The minimum length of the password
        /// </summary>
        /// <value>The minimum length of the password</value>

        [Range(3, 255)]
        [DataMember(Name="MinCharacters")]
        public int? MinCharacters { get; set; }

        /// <summary>
        /// Allow uppercase characters in the password?
        /// </summary>
        /// <value>Allow uppercase characters in the password?</value>

        [DataMember(Name="AllowUppercaseCharacters")]
        public bool? AllowUppercaseCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the minimum number of uppercase characters required
        /// </summary>
        /// <value>If allowed, what is the minimum number of uppercase characters required</value>

        [Range(0, 255)]
        [DataMember(Name="MinUppercaseCharacters")]
        public int? MinUppercaseCharacters { get; set; }

        /// <summary>
        /// List of uppercase alphabet characters that may not be used.
        /// </summary>
        /// <value>List of uppercase alphabet characters that may not be used.</value>

        [DataMember(Name="InvalidUppercaseCharacters")]
        public List<string> InvalidUppercaseCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the maximum number of uppercase characters that may be used consecutively
        /// </summary>
        /// <value>If allowed, what is the maximum number of uppercase characters that may be used consecutively</value>

        [Range(1, 255)]
        [DataMember(Name="MaxConsecutiveUppercaseCharacters")]
        public int? MaxConsecutiveUppercaseCharacters { get; set; }

        /// <summary>
        /// Allow lowercase characters in the password?
        /// </summary>
        /// <value>Allow lowercase characters in the password?</value>

        [DataMember(Name="AllowLowercaseCharacters")]
        public bool? AllowLowercaseCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the minimum number of lowercase characters required
        /// </summary>
        /// <value>If allowed, what is the minimum number of lowercase characters required</value>

        [Range(0, 255)]
        [DataMember(Name="MinLowercaseCharacters")]
        public int? MinLowercaseCharacters { get; set; }

        /// <summary>
        /// List of lowercase alphabet characters that may not be used.
        /// </summary>
        /// <value>List of lowercase alphabet characters that may not be used.</value>

        [DataMember(Name="InvalidLowercaseCharacters")]
        public List<string> InvalidLowercaseCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the maximum number of lowercase characters that may be used consecutively
        /// </summary>
        /// <value>If allowed, what is the maximum number of lowercase characters that may be used consecutively</value>

        [Range(1, 255)]
        [DataMember(Name="MaxConsecutiveLowercaseCharacters")]
        public int? MaxConsecutiveLowercaseCharacters { get; set; }

        /// <summary>
        /// Allow numeric characters in the password?
        /// </summary>
        /// <value>Allow numeric characters in the password?</value>

        [DataMember(Name="AllowNumericCharacters")]
        public bool? AllowNumericCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the minimum number of numeric characters required
        /// </summary>
        /// <value>If allowed, what is the minimum number of numeric characters required</value>

        [Range(0, 255)]
        [DataMember(Name="MinNumericCharacters")]
        public int? MinNumericCharacters { get; set; }

        /// <summary>
        /// List of numeric characters that may not be used.
        /// </summary>
        /// <value>List of numeric characters that may not be used.</value>

        [DataMember(Name="InvalidNumericCharacters")]
        public List<string> InvalidNumericCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the maximum number of numeric characters that may be used consecutively
        /// </summary>
        /// <value>If allowed, what is the maximum number of numeric characters that may be used consecutively</value>

        [Range(1, 255)]
        [DataMember(Name="MaxConsecutiveNumericCharacters")]
        public int? MaxConsecutiveNumericCharacters { get; set; }

        /// <summary>
        /// Allow non-alphanumeric characters in the password?
        /// </summary>
        /// <value>Allow non-alphanumeric characters in the password?</value>

        [DataMember(Name="AllowNonAlphaNumericCharacters")]
        public bool? AllowNonAlphaNumericCharacters { get; set; }

        /// <summary>
        /// If allowed, the minimum number of non-alphanumeric characters required
        /// </summary>
        /// <value>If allowed, the minimum number of non-alphanumeric characters required</value>

        [Range(0, 255)]
        [DataMember(Name="MinNonAlphaNumericCharacters")]
        public int? MinNonAlphaNumericCharacters { get; set; }

        /// <summary>
        /// Gets or Sets NonAlphaNumericRestrictionType
        /// </summary>

        [DataMember(Name="NonAlphaNumericRestrictionType")]
        public NonAlphaNumericRestrictionType NonAlphaNumericRestrictionType { get; set; }

        /// <summary>
        /// List of non-alphanumeric characters that may be used when NonAlphaNumericRestrictionType is set to &#x27;Include&#x27;
        /// </summary>
        /// <value>List of non-alphanumeric characters that may be used when NonAlphaNumericRestrictionType is set to &#x27;Include&#x27;</value>

        [DataMember(Name="AllowedNonAlphaNumericCharacters")]
        public List<string> AllowedNonAlphaNumericCharacters { get; set; }

        /// <summary>
        /// List of numeric characters that may not be used when NonAlphaNumericRestrictionType is set to &#x27;Exclude&#x27;  NOTE: Generated passwords will be restricted to the set of printable ascii characters.
        /// </summary>
        /// <value>List of numeric characters that may not be used when NonAlphaNumericRestrictionType is set to &#x27;Exclude&#x27;  NOTE: Generated passwords will be restricted to the set of printable ascii characters.</value>

        [DataMember(Name="InvalidNonAlphaNumericCharacters")]
        public List<string> InvalidNonAlphaNumericCharacters { get; set; }

        /// <summary>
        /// If allowed, what is the maximum number of non-alphanumeric characters that may be used consecutively
        /// </summary>
        /// <value>If allowed, what is the maximum number of non-alphanumeric characters that may be used consecutively</value>

        [Range(1, 255)]
        [DataMember(Name="MaxConsecutiveNonAlphaNumericCharacters")]
        public int? MaxConsecutiveNonAlphaNumericCharacters { get; set; }

        /// <summary>
        /// Gets or Sets AllowedFirstCharacterType
        /// </summary>

        [DataMember(Name="AllowedFirstCharacterType")]
        public PasswordCharacterType AllowedFirstCharacterType { get; set; }

        /// <summary>
        /// Gets or Sets AllowedLastCharacterType
        /// </summary>

        [DataMember(Name="AllowedLastCharacterType")]
        public PasswordCharacterType AllowedLastCharacterType { get; set; }

        /// <summary>
        /// If upper or lower characters are allowed, what is the maximum number of alphabet characters that may be used consecutively
        /// </summary>
        /// <value>If upper or lower characters are allowed, what is the maximum number of alphabet characters that may be used consecutively</value>

        [Range(1, 255)]
        [DataMember(Name="MaxConsecutiveAlphabeticCharacters")]
        public int? MaxConsecutiveAlphabeticCharacters { get; set; }

        /// <summary>
        /// If upper or lower or numeric characters are allowed, what is the maximum number of alphabet or numeric characters that may be used consecutively
        /// </summary>
        /// <value>If upper or lower or numeric characters are allowed, what is the maximum number of alphabet or numeric characters that may be used consecutively</value>

        [Range(1, 255)]
        [DataMember(Name="MaxConsecutiveAlphaNumericCharacters")]
        public int? MaxConsecutiveAlphaNumericCharacters { get; set; }

        /// <summary>
        /// Gets or Sets RepeatedCharacterRestriction
        /// </summary>

        [DataMember(Name="RepeatedCharacterRestriction")]
        public PasswordCharacterRepeatMode RepeatedCharacterRestriction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountPasswordRule {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSystemOwned: ").Append(IsSystemOwned).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MaxCharacters: ").Append(MaxCharacters).Append("\n");
            sb.Append("  MinCharacters: ").Append(MinCharacters).Append("\n");
            sb.Append("  AllowUppercaseCharacters: ").Append(AllowUppercaseCharacters).Append("\n");
            sb.Append("  MinUppercaseCharacters: ").Append(MinUppercaseCharacters).Append("\n");
            sb.Append("  InvalidUppercaseCharacters: ").Append(InvalidUppercaseCharacters).Append("\n");
            sb.Append("  MaxConsecutiveUppercaseCharacters: ").Append(MaxConsecutiveUppercaseCharacters).Append("\n");
            sb.Append("  AllowLowercaseCharacters: ").Append(AllowLowercaseCharacters).Append("\n");
            sb.Append("  MinLowercaseCharacters: ").Append(MinLowercaseCharacters).Append("\n");
            sb.Append("  InvalidLowercaseCharacters: ").Append(InvalidLowercaseCharacters).Append("\n");
            sb.Append("  MaxConsecutiveLowercaseCharacters: ").Append(MaxConsecutiveLowercaseCharacters).Append("\n");
            sb.Append("  AllowNumericCharacters: ").Append(AllowNumericCharacters).Append("\n");
            sb.Append("  MinNumericCharacters: ").Append(MinNumericCharacters).Append("\n");
            sb.Append("  InvalidNumericCharacters: ").Append(InvalidNumericCharacters).Append("\n");
            sb.Append("  MaxConsecutiveNumericCharacters: ").Append(MaxConsecutiveNumericCharacters).Append("\n");
            sb.Append("  AllowNonAlphaNumericCharacters: ").Append(AllowNonAlphaNumericCharacters).Append("\n");
            sb.Append("  MinNonAlphaNumericCharacters: ").Append(MinNonAlphaNumericCharacters).Append("\n");
            sb.Append("  NonAlphaNumericRestrictionType: ").Append(NonAlphaNumericRestrictionType).Append("\n");
            sb.Append("  AllowedNonAlphaNumericCharacters: ").Append(AllowedNonAlphaNumericCharacters).Append("\n");
            sb.Append("  InvalidNonAlphaNumericCharacters: ").Append(InvalidNonAlphaNumericCharacters).Append("\n");
            sb.Append("  MaxConsecutiveNonAlphaNumericCharacters: ").Append(MaxConsecutiveNonAlphaNumericCharacters).Append("\n");
            sb.Append("  AllowedFirstCharacterType: ").Append(AllowedFirstCharacterType).Append("\n");
            sb.Append("  AllowedLastCharacterType: ").Append(AllowedLastCharacterType).Append("\n");
            sb.Append("  MaxConsecutiveAlphabeticCharacters: ").Append(MaxConsecutiveAlphabeticCharacters).Append("\n");
            sb.Append("  MaxConsecutiveAlphaNumericCharacters: ").Append(MaxConsecutiveAlphaNumericCharacters).Append("\n");
            sb.Append("  RepeatedCharacterRestriction: ").Append(RepeatedCharacterRestriction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountPasswordRule)obj);
        }

        /// <summary>
        /// Returns true if AccountPasswordRule instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountPasswordRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountPasswordRule other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsSystemOwned == other.IsSystemOwned ||
                    IsSystemOwned != null &&
                    IsSystemOwned.Equals(other.IsSystemOwned)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    MaxCharacters == other.MaxCharacters ||
                    MaxCharacters != null &&
                    MaxCharacters.Equals(other.MaxCharacters)
                ) && 
                (
                    MinCharacters == other.MinCharacters ||
                    MinCharacters != null &&
                    MinCharacters.Equals(other.MinCharacters)
                ) && 
                (
                    AllowUppercaseCharacters == other.AllowUppercaseCharacters ||
                    AllowUppercaseCharacters != null &&
                    AllowUppercaseCharacters.Equals(other.AllowUppercaseCharacters)
                ) && 
                (
                    MinUppercaseCharacters == other.MinUppercaseCharacters ||
                    MinUppercaseCharacters != null &&
                    MinUppercaseCharacters.Equals(other.MinUppercaseCharacters)
                ) && 
                (
                    InvalidUppercaseCharacters == other.InvalidUppercaseCharacters ||
                    InvalidUppercaseCharacters != null &&
                    InvalidUppercaseCharacters.SequenceEqual(other.InvalidUppercaseCharacters)
                ) && 
                (
                    MaxConsecutiveUppercaseCharacters == other.MaxConsecutiveUppercaseCharacters ||
                    MaxConsecutiveUppercaseCharacters != null &&
                    MaxConsecutiveUppercaseCharacters.Equals(other.MaxConsecutiveUppercaseCharacters)
                ) && 
                (
                    AllowLowercaseCharacters == other.AllowLowercaseCharacters ||
                    AllowLowercaseCharacters != null &&
                    AllowLowercaseCharacters.Equals(other.AllowLowercaseCharacters)
                ) && 
                (
                    MinLowercaseCharacters == other.MinLowercaseCharacters ||
                    MinLowercaseCharacters != null &&
                    MinLowercaseCharacters.Equals(other.MinLowercaseCharacters)
                ) && 
                (
                    InvalidLowercaseCharacters == other.InvalidLowercaseCharacters ||
                    InvalidLowercaseCharacters != null &&
                    InvalidLowercaseCharacters.SequenceEqual(other.InvalidLowercaseCharacters)
                ) && 
                (
                    MaxConsecutiveLowercaseCharacters == other.MaxConsecutiveLowercaseCharacters ||
                    MaxConsecutiveLowercaseCharacters != null &&
                    MaxConsecutiveLowercaseCharacters.Equals(other.MaxConsecutiveLowercaseCharacters)
                ) && 
                (
                    AllowNumericCharacters == other.AllowNumericCharacters ||
                    AllowNumericCharacters != null &&
                    AllowNumericCharacters.Equals(other.AllowNumericCharacters)
                ) && 
                (
                    MinNumericCharacters == other.MinNumericCharacters ||
                    MinNumericCharacters != null &&
                    MinNumericCharacters.Equals(other.MinNumericCharacters)
                ) && 
                (
                    InvalidNumericCharacters == other.InvalidNumericCharacters ||
                    InvalidNumericCharacters != null &&
                    InvalidNumericCharacters.SequenceEqual(other.InvalidNumericCharacters)
                ) && 
                (
                    MaxConsecutiveNumericCharacters == other.MaxConsecutiveNumericCharacters ||
                    MaxConsecutiveNumericCharacters != null &&
                    MaxConsecutiveNumericCharacters.Equals(other.MaxConsecutiveNumericCharacters)
                ) && 
                (
                    AllowNonAlphaNumericCharacters == other.AllowNonAlphaNumericCharacters ||
                    AllowNonAlphaNumericCharacters != null &&
                    AllowNonAlphaNumericCharacters.Equals(other.AllowNonAlphaNumericCharacters)
                ) && 
                (
                    MinNonAlphaNumericCharacters == other.MinNonAlphaNumericCharacters ||
                    MinNonAlphaNumericCharacters != null &&
                    MinNonAlphaNumericCharacters.Equals(other.MinNonAlphaNumericCharacters)
                ) && 
                (
                    NonAlphaNumericRestrictionType == other.NonAlphaNumericRestrictionType ||
                    NonAlphaNumericRestrictionType != null &&
                    NonAlphaNumericRestrictionType.Equals(other.NonAlphaNumericRestrictionType)
                ) && 
                (
                    AllowedNonAlphaNumericCharacters == other.AllowedNonAlphaNumericCharacters ||
                    AllowedNonAlphaNumericCharacters != null &&
                    AllowedNonAlphaNumericCharacters.SequenceEqual(other.AllowedNonAlphaNumericCharacters)
                ) && 
                (
                    InvalidNonAlphaNumericCharacters == other.InvalidNonAlphaNumericCharacters ||
                    InvalidNonAlphaNumericCharacters != null &&
                    InvalidNonAlphaNumericCharacters.SequenceEqual(other.InvalidNonAlphaNumericCharacters)
                ) && 
                (
                    MaxConsecutiveNonAlphaNumericCharacters == other.MaxConsecutiveNonAlphaNumericCharacters ||
                    MaxConsecutiveNonAlphaNumericCharacters != null &&
                    MaxConsecutiveNonAlphaNumericCharacters.Equals(other.MaxConsecutiveNonAlphaNumericCharacters)
                ) && 
                (
                    AllowedFirstCharacterType == other.AllowedFirstCharacterType ||
                    AllowedFirstCharacterType != null &&
                    AllowedFirstCharacterType.Equals(other.AllowedFirstCharacterType)
                ) && 
                (
                    AllowedLastCharacterType == other.AllowedLastCharacterType ||
                    AllowedLastCharacterType != null &&
                    AllowedLastCharacterType.Equals(other.AllowedLastCharacterType)
                ) && 
                (
                    MaxConsecutiveAlphabeticCharacters == other.MaxConsecutiveAlphabeticCharacters ||
                    MaxConsecutiveAlphabeticCharacters != null &&
                    MaxConsecutiveAlphabeticCharacters.Equals(other.MaxConsecutiveAlphabeticCharacters)
                ) && 
                (
                    MaxConsecutiveAlphaNumericCharacters == other.MaxConsecutiveAlphaNumericCharacters ||
                    MaxConsecutiveAlphaNumericCharacters != null &&
                    MaxConsecutiveAlphaNumericCharacters.Equals(other.MaxConsecutiveAlphaNumericCharacters)
                ) && 
                (
                    RepeatedCharacterRestriction == other.RepeatedCharacterRestriction ||
                    RepeatedCharacterRestriction != null &&
                    RepeatedCharacterRestriction.Equals(other.RepeatedCharacterRestriction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsSystemOwned != null)
                    hashCode = hashCode * 59 + IsSystemOwned.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (MaxCharacters != null)
                    hashCode = hashCode * 59 + MaxCharacters.GetHashCode();
                    if (MinCharacters != null)
                    hashCode = hashCode * 59 + MinCharacters.GetHashCode();
                    if (AllowUppercaseCharacters != null)
                    hashCode = hashCode * 59 + AllowUppercaseCharacters.GetHashCode();
                    if (MinUppercaseCharacters != null)
                    hashCode = hashCode * 59 + MinUppercaseCharacters.GetHashCode();
                    if (InvalidUppercaseCharacters != null)
                    hashCode = hashCode * 59 + InvalidUppercaseCharacters.GetHashCode();
                    if (MaxConsecutiveUppercaseCharacters != null)
                    hashCode = hashCode * 59 + MaxConsecutiveUppercaseCharacters.GetHashCode();
                    if (AllowLowercaseCharacters != null)
                    hashCode = hashCode * 59 + AllowLowercaseCharacters.GetHashCode();
                    if (MinLowercaseCharacters != null)
                    hashCode = hashCode * 59 + MinLowercaseCharacters.GetHashCode();
                    if (InvalidLowercaseCharacters != null)
                    hashCode = hashCode * 59 + InvalidLowercaseCharacters.GetHashCode();
                    if (MaxConsecutiveLowercaseCharacters != null)
                    hashCode = hashCode * 59 + MaxConsecutiveLowercaseCharacters.GetHashCode();
                    if (AllowNumericCharacters != null)
                    hashCode = hashCode * 59 + AllowNumericCharacters.GetHashCode();
                    if (MinNumericCharacters != null)
                    hashCode = hashCode * 59 + MinNumericCharacters.GetHashCode();
                    if (InvalidNumericCharacters != null)
                    hashCode = hashCode * 59 + InvalidNumericCharacters.GetHashCode();
                    if (MaxConsecutiveNumericCharacters != null)
                    hashCode = hashCode * 59 + MaxConsecutiveNumericCharacters.GetHashCode();
                    if (AllowNonAlphaNumericCharacters != null)
                    hashCode = hashCode * 59 + AllowNonAlphaNumericCharacters.GetHashCode();
                    if (MinNonAlphaNumericCharacters != null)
                    hashCode = hashCode * 59 + MinNonAlphaNumericCharacters.GetHashCode();
                    if (NonAlphaNumericRestrictionType != null)
                    hashCode = hashCode * 59 + NonAlphaNumericRestrictionType.GetHashCode();
                    if (AllowedNonAlphaNumericCharacters != null)
                    hashCode = hashCode * 59 + AllowedNonAlphaNumericCharacters.GetHashCode();
                    if (InvalidNonAlphaNumericCharacters != null)
                    hashCode = hashCode * 59 + InvalidNonAlphaNumericCharacters.GetHashCode();
                    if (MaxConsecutiveNonAlphaNumericCharacters != null)
                    hashCode = hashCode * 59 + MaxConsecutiveNonAlphaNumericCharacters.GetHashCode();
                    if (AllowedFirstCharacterType != null)
                    hashCode = hashCode * 59 + AllowedFirstCharacterType.GetHashCode();
                    if (AllowedLastCharacterType != null)
                    hashCode = hashCode * 59 + AllowedLastCharacterType.GetHashCode();
                    if (MaxConsecutiveAlphabeticCharacters != null)
                    hashCode = hashCode * 59 + MaxConsecutiveAlphabeticCharacters.GetHashCode();
                    if (MaxConsecutiveAlphaNumericCharacters != null)
                    hashCode = hashCode * 59 + MaxConsecutiveAlphaNumericCharacters.GetHashCode();
                    if (RepeatedCharacterRestriction != null)
                    hashCode = hashCode * 59 + RepeatedCharacterRestriction.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountPasswordRule left, AccountPasswordRule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountPasswordRule left, AccountPasswordRule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
