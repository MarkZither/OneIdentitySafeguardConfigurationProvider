/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an identity provider. Almost all identity providers are also implicitly authentication providers (depending on  the IdentityProviderType: AllowPrimaryAuthFlag and AllowSecondaryAuthFlag values).
    /// </summary>
    [DataContract]
    public partial class IdentityProvider : IEquatable<IdentityProvider>
    { 
        /// <summary>
        /// The identity provider&#x27;s unique id.  This is a system-assigned value that is generated when an identity provider is first configured. (Read-only)
        /// </summary>
        /// <value>The identity provider&#x27;s unique id.  This is a system-assigned value that is generated when an identity provider is first configured. (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TypeReferenceName
        /// </summary>
        [Required]

        [DataMember(Name="TypeReferenceName")]
        public IdentityProviderTypeReferenceName TypeReferenceName { get; set; }

        /// <summary>
        /// The name of the identity provider.  This value will be user-visible on login dialogs and must be unique across all identity providers.
        /// </summary>
        /// <value>The name of the identity provider.  This value will be user-visible on login dialogs and must be unique across all identity providers.</value>
        [Required]

        [MaxLength(50)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The description of the identity provider.
        /// </summary>
        /// <value>The description of the identity provider.</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Network address of the provider if this is an Ldap directory (Read-only)
        /// </summary>
        /// <value>Network address of the provider if this is an Ldap directory (Read-only)</value>

        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; set; }

        /// <summary>
        /// If this provider is system owned then it cannot be modified. (Read-only)
        /// </summary>
        /// <value>If this provider is system owned then it cannot be modified. (Read-only)</value>

        [DataMember(Name="IsSystemOwned")]
        public bool? IsSystemOwned { get; set; }

        /// <summary>
        /// If this provider represents a directory. (Read-only)
        /// </summary>
        /// <value>If this provider represents a directory. (Read-only)</value>

        [DataMember(Name="IsDirectory")]
        public bool? IsDirectory { get; set; }

        /// <summary>
        /// The RSTS provider id, if this provider supports authentication. This value is for information only and is not normally needed. (Read-only)
        /// </summary>
        /// <value>The RSTS provider id, if this provider supports authentication. This value is for information only and is not normally needed. (Read-only)</value>

        [DataMember(Name="RstsProviderId")]
        public string RstsProviderId { get; set; }

        /// <summary>
        /// The RSTS provider scope, if this provider supports authentication. This value is for information only and is not normally needed. (Read-only)
        /// </summary>
        /// <value>The RSTS provider scope, if this provider supports authentication. This value is for information only and is not normally needed. (Read-only)</value>

        [DataMember(Name="RstsProviderScope")]
        public string RstsProviderScope { get; set; }

        /// <summary>
        /// Gets or Sets StarlingProperties
        /// </summary>

        [DataMember(Name="StarlingProperties")]
        public IdentityProviderStarlingProperties StarlingProperties { get; set; }

        /// <summary>
        /// Gets or Sets RadiusProperties
        /// </summary>

        [DataMember(Name="RadiusProperties")]
        public IdentityProviderConfigRadiusProperties RadiusProperties { get; set; }

        /// <summary>
        /// Gets or Sets ExternalFederationProperties
        /// </summary>

        [DataMember(Name="ExternalFederationProperties")]
        public IdentityProviderConfigExternalFederationProperties ExternalFederationProperties { get; set; }

        /// <summary>
        /// Gets or Sets Fido2Properties
        /// </summary>

        [DataMember(Name="Fido2Properties")]
        public IdentityProviderConfigFido2Properties Fido2Properties { get; set; }

        /// <summary>
        /// Gets or Sets OneLoginMfaProperties
        /// </summary>

        [DataMember(Name="OneLoginMfaProperties")]
        public IdentityProviderConfigOneLoginMfaProperties OneLoginMfaProperties { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryProperties
        /// </summary>

        [DataMember(Name="DirectoryProperties")]
        public IdentityProviderDirectoryProperties DirectoryProperties { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityProvider {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TypeReferenceName: ").Append(TypeReferenceName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  IsSystemOwned: ").Append(IsSystemOwned).Append("\n");
            sb.Append("  IsDirectory: ").Append(IsDirectory).Append("\n");
            sb.Append("  RstsProviderId: ").Append(RstsProviderId).Append("\n");
            sb.Append("  RstsProviderScope: ").Append(RstsProviderScope).Append("\n");
            sb.Append("  StarlingProperties: ").Append(StarlingProperties).Append("\n");
            sb.Append("  RadiusProperties: ").Append(RadiusProperties).Append("\n");
            sb.Append("  ExternalFederationProperties: ").Append(ExternalFederationProperties).Append("\n");
            sb.Append("  Fido2Properties: ").Append(Fido2Properties).Append("\n");
            sb.Append("  OneLoginMfaProperties: ").Append(OneLoginMfaProperties).Append("\n");
            sb.Append("  DirectoryProperties: ").Append(DirectoryProperties).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IdentityProvider)obj);
        }

        /// <summary>
        /// Returns true if IdentityProvider instances are equal
        /// </summary>
        /// <param name="other">Instance of IdentityProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityProvider other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TypeReferenceName == other.TypeReferenceName ||
                    TypeReferenceName != null &&
                    TypeReferenceName.Equals(other.TypeReferenceName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    IsSystemOwned == other.IsSystemOwned ||
                    IsSystemOwned != null &&
                    IsSystemOwned.Equals(other.IsSystemOwned)
                ) && 
                (
                    IsDirectory == other.IsDirectory ||
                    IsDirectory != null &&
                    IsDirectory.Equals(other.IsDirectory)
                ) && 
                (
                    RstsProviderId == other.RstsProviderId ||
                    RstsProviderId != null &&
                    RstsProviderId.Equals(other.RstsProviderId)
                ) && 
                (
                    RstsProviderScope == other.RstsProviderScope ||
                    RstsProviderScope != null &&
                    RstsProviderScope.Equals(other.RstsProviderScope)
                ) && 
                (
                    StarlingProperties == other.StarlingProperties ||
                    StarlingProperties != null &&
                    StarlingProperties.Equals(other.StarlingProperties)
                ) && 
                (
                    RadiusProperties == other.RadiusProperties ||
                    RadiusProperties != null &&
                    RadiusProperties.Equals(other.RadiusProperties)
                ) && 
                (
                    ExternalFederationProperties == other.ExternalFederationProperties ||
                    ExternalFederationProperties != null &&
                    ExternalFederationProperties.Equals(other.ExternalFederationProperties)
                ) && 
                (
                    Fido2Properties == other.Fido2Properties ||
                    Fido2Properties != null &&
                    Fido2Properties.Equals(other.Fido2Properties)
                ) && 
                (
                    OneLoginMfaProperties == other.OneLoginMfaProperties ||
                    OneLoginMfaProperties != null &&
                    OneLoginMfaProperties.Equals(other.OneLoginMfaProperties)
                ) && 
                (
                    DirectoryProperties == other.DirectoryProperties ||
                    DirectoryProperties != null &&
                    DirectoryProperties.Equals(other.DirectoryProperties)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TypeReferenceName != null)
                    hashCode = hashCode * 59 + TypeReferenceName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (IsSystemOwned != null)
                    hashCode = hashCode * 59 + IsSystemOwned.GetHashCode();
                    if (IsDirectory != null)
                    hashCode = hashCode * 59 + IsDirectory.GetHashCode();
                    if (RstsProviderId != null)
                    hashCode = hashCode * 59 + RstsProviderId.GetHashCode();
                    if (RstsProviderScope != null)
                    hashCode = hashCode * 59 + RstsProviderScope.GetHashCode();
                    if (StarlingProperties != null)
                    hashCode = hashCode * 59 + StarlingProperties.GetHashCode();
                    if (RadiusProperties != null)
                    hashCode = hashCode * 59 + RadiusProperties.GetHashCode();
                    if (ExternalFederationProperties != null)
                    hashCode = hashCode * 59 + ExternalFederationProperties.GetHashCode();
                    if (Fido2Properties != null)
                    hashCode = hashCode * 59 + Fido2Properties.GetHashCode();
                    if (OneLoginMfaProperties != null)
                    hashCode = hashCode * 59 + OneLoginMfaProperties.GetHashCode();
                    if (DirectoryProperties != null)
                    hashCode = hashCode * 59 + DirectoryProperties.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IdentityProvider left, IdentityProvider right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IdentityProvider left, IdentityProvider right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
