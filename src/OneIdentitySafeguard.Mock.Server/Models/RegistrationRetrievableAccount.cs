/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an associated account on an application to application registration.
    /// </summary>
    [DataContract]
    public partial class RegistrationRetrievableAccount : IEquatable<RegistrationRetrievableAccount>
    { 
        /// <summary>
        /// The account&#x27;s unique id.
        /// </summary>
        /// <value>The account&#x27;s unique id.</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// The account name.
        /// </summary>
        /// <value>The account name.</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; private set; }

        /// <summary>
        /// The account&#x27;s API key.
        /// </summary>
        /// <value>The account&#x27;s API key.</value>

        [DataMember(Name="ApiKey")]
        public string ApiKey { get; private set; }

        /// <summary>
        /// List of restricted IP addresses
        /// </summary>
        /// <value>List of restricted IP addresses</value>

        [DataMember(Name="IpRestrictions")]
        public List<string> IpRestrictions { get; set; }

        /// <summary>
        /// ID of the asset
        /// </summary>
        /// <value>ID of the asset</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; private set; }

        /// <summary>
        /// Name of the asset
        /// </summary>
        /// <value>Name of the asset</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; private set; }

        /// <summary>
        /// ID of the asset partition
        /// </summary>
        /// <value>ID of the asset partition</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; private set; }

        /// <summary>
        /// Name of the asset partition
        /// </summary>
        /// <value>Name of the asset partition</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; private set; }

        /// <summary>
        /// Description of the asset
        /// </summary>
        /// <value>Description of the asset</value>

        [MaxLength(255)]
        [DataMember(Name="AssetDescription")]
        public string AssetDescription { get; private set; }

        /// <summary>
        /// Description of the account
        /// </summary>
        /// <value>Description of the account</value>

        [MaxLength(255)]
        [DataMember(Name="AccountDescription")]
        public string AccountDescription { get; private set; }

        /// <summary>
        /// Network address of the asset
        /// </summary>
        /// <value>Network address of the asset</value>

        [DataMember(Name="NetworkAddress")]
        public string NetworkAddress { get; private set; }

        /// <summary>
        /// Account disabled flag
        /// </summary>
        /// <value>Account disabled flag</value>

        [DataMember(Name="AccountDisabled")]
        public int? AccountDisabled { get; private set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>

        [DataMember(Name="AccountType")]
        public AccountType AccountType { get; set; }

        /// <summary>
        /// Domain name
        /// </summary>
        /// <value>Domain name</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationRetrievableAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  IpRestrictions: ").Append(IpRestrictions).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  AssetDescription: ").Append(AssetDescription).Append("\n");
            sb.Append("  AccountDescription: ").Append(AccountDescription).Append("\n");
            sb.Append("  NetworkAddress: ").Append(NetworkAddress).Append("\n");
            sb.Append("  AccountDisabled: ").Append(AccountDisabled).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegistrationRetrievableAccount)obj);
        }

        /// <summary>
        /// Returns true if RegistrationRetrievableAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistrationRetrievableAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationRetrievableAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    ApiKey == other.ApiKey ||
                    ApiKey != null &&
                    ApiKey.Equals(other.ApiKey)
                ) && 
                (
                    IpRestrictions == other.IpRestrictions ||
                    IpRestrictions != null &&
                    IpRestrictions.SequenceEqual(other.IpRestrictions)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    AssetDescription == other.AssetDescription ||
                    AssetDescription != null &&
                    AssetDescription.Equals(other.AssetDescription)
                ) && 
                (
                    AccountDescription == other.AccountDescription ||
                    AccountDescription != null &&
                    AccountDescription.Equals(other.AccountDescription)
                ) && 
                (
                    NetworkAddress == other.NetworkAddress ||
                    NetworkAddress != null &&
                    NetworkAddress.Equals(other.NetworkAddress)
                ) && 
                (
                    AccountDisabled == other.AccountDisabled ||
                    AccountDisabled != null &&
                    AccountDisabled.Equals(other.AccountDisabled)
                ) && 
                (
                    AccountType == other.AccountType ||
                    AccountType != null &&
                    AccountType.Equals(other.AccountType)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (ApiKey != null)
                    hashCode = hashCode * 59 + ApiKey.GetHashCode();
                    if (IpRestrictions != null)
                    hashCode = hashCode * 59 + IpRestrictions.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (AssetDescription != null)
                    hashCode = hashCode * 59 + AssetDescription.GetHashCode();
                    if (AccountDescription != null)
                    hashCode = hashCode * 59 + AccountDescription.GetHashCode();
                    if (NetworkAddress != null)
                    hashCode = hashCode * 59 + NetworkAddress.GetHashCode();
                    if (AccountDisabled != null)
                    hashCode = hashCode * 59 + AccountDisabled.GetHashCode();
                    if (AccountType != null)
                    hashCode = hashCode * 59 + AccountType.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RegistrationRetrievableAccount left, RegistrationRetrievableAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegistrationRetrievableAccount left, RegistrationRetrievableAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
