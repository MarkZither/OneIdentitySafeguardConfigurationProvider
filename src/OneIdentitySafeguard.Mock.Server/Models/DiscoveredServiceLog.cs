/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A service discovered as part of a service discovery task
    /// </summary>
    [DataContract]
    public partial class DiscoveredServiceLog : IEquatable<DiscoveredServiceLog>
    { 
        /// <summary>
        /// Account associated with the discovered service
        /// </summary>
        /// <value>Account associated with the discovered service</value>

        [DataMember(Name="DiscoveredAccount")]
        public string DiscoveredAccount { get; set; }

        /// <summary>
        /// Name of the discovered service
        /// </summary>
        /// <value>Name of the discovered service</value>

        [DataMember(Name="ServiceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// Display name of the service
        /// </summary>
        /// <value>Display name of the service</value>

        [DataMember(Name="ServiceDisplayName")]
        public string ServiceDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>

        [DataMember(Name="ServiceType")]
        public DiscoveredServiceType ServiceType { get; set; }

        /// <summary>
        /// Whether the discovered service is enabled
        /// </summary>
        /// <value>Whether the discovered service is enabled</value>

        [DataMember(Name="IsServiceEnabled")]
        public bool? IsServiceEnabled { get; set; }

        /// <summary>
        /// Unique ID of managed account associated with account of discovered service
        /// </summary>
        /// <value>Unique ID of managed account associated with account of discovered service</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of managed account associated with account of discovered service
        /// </summary>
        /// <value>Name of managed account associated with account of discovered service</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Domain name of managed account associated with account of discovered service
        /// </summary>
        /// <value>Domain name of managed account associated with account of discovered service</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// Asset ID of managed account associated with account of discovered service
        /// </summary>
        /// <value>Asset ID of managed account associated with account of discovered service</value>

        [DataMember(Name="AccountAssetId")]
        public int? AccountAssetId { get; set; }

        /// <summary>
        /// Asset name of managed account associated with account of discovered service
        /// </summary>
        /// <value>Asset name of managed account associated with account of discovered service</value>

        [DataMember(Name="AccountAssetName")]
        public string AccountAssetName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredServiceLog {\n");
            sb.Append("  DiscoveredAccount: ").Append(DiscoveredAccount).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ServiceDisplayName: ").Append(ServiceDisplayName).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  IsServiceEnabled: ").Append(IsServiceEnabled).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AccountAssetId: ").Append(AccountAssetId).Append("\n");
            sb.Append("  AccountAssetName: ").Append(AccountAssetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveredServiceLog)obj);
        }

        /// <summary>
        /// Returns true if DiscoveredServiceLog instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveredServiceLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredServiceLog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiscoveredAccount == other.DiscoveredAccount ||
                    DiscoveredAccount != null &&
                    DiscoveredAccount.Equals(other.DiscoveredAccount)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    ServiceDisplayName == other.ServiceDisplayName ||
                    ServiceDisplayName != null &&
                    ServiceDisplayName.Equals(other.ServiceDisplayName)
                ) && 
                (
                    ServiceType == other.ServiceType ||
                    ServiceType != null &&
                    ServiceType.Equals(other.ServiceType)
                ) && 
                (
                    IsServiceEnabled == other.IsServiceEnabled ||
                    IsServiceEnabled != null &&
                    IsServiceEnabled.Equals(other.IsServiceEnabled)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AccountAssetId == other.AccountAssetId ||
                    AccountAssetId != null &&
                    AccountAssetId.Equals(other.AccountAssetId)
                ) && 
                (
                    AccountAssetName == other.AccountAssetName ||
                    AccountAssetName != null &&
                    AccountAssetName.Equals(other.AccountAssetName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiscoveredAccount != null)
                    hashCode = hashCode * 59 + DiscoveredAccount.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    if (ServiceDisplayName != null)
                    hashCode = hashCode * 59 + ServiceDisplayName.GetHashCode();
                    if (ServiceType != null)
                    hashCode = hashCode * 59 + ServiceType.GetHashCode();
                    if (IsServiceEnabled != null)
                    hashCode = hashCode * 59 + IsServiceEnabled.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AccountAssetId != null)
                    hashCode = hashCode * 59 + AccountAssetId.GetHashCode();
                    if (AccountAssetName != null)
                    hashCode = hashCode * 59 + AccountAssetName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveredServiceLog left, DiscoveredServiceLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveredServiceLog left, DiscoveredServiceLog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
