/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Settings related to session access requests
    /// </summary>
    [DataContract]
    public partial class PlatformSessionFeatureProperties : IEquatable<PlatformSessionFeatureProperties>
    { 
        /// <summary>
        /// Whether this platform supports session access requests
        /// </summary>
        /// <value>Whether this platform supports session access requests</value>

        [DataMember(Name="SupportsSessionManagement")]
        public bool? SupportsSessionManagement { get; set; }

        /// <summary>
        /// Default port for SSH sessions
        /// </summary>
        /// <value>Default port for SSH sessions</value>

        [DataMember(Name="DefaultSshSessionPort")]
        public int? DefaultSshSessionPort { get; set; }

        /// <summary>
        /// Default port for Remote Desktop sessions
        /// </summary>
        /// <value>Default port for Remote Desktop sessions</value>

        [DataMember(Name="DefaultRemoteDesktopSessionPort")]
        public int? DefaultRemoteDesktopSessionPort { get; set; }

        /// <summary>
        /// Default port for Telnet sessions
        /// </summary>
        /// <value>Default port for Telnet sessions</value>

        [DataMember(Name="DefaultTelnetSessionPort")]
        public int? DefaultTelnetSessionPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlatformSessionFeatureProperties {\n");
            sb.Append("  SupportsSessionManagement: ").Append(SupportsSessionManagement).Append("\n");
            sb.Append("  DefaultSshSessionPort: ").Append(DefaultSshSessionPort).Append("\n");
            sb.Append("  DefaultRemoteDesktopSessionPort: ").Append(DefaultRemoteDesktopSessionPort).Append("\n");
            sb.Append("  DefaultTelnetSessionPort: ").Append(DefaultTelnetSessionPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlatformSessionFeatureProperties)obj);
        }

        /// <summary>
        /// Returns true if PlatformSessionFeatureProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PlatformSessionFeatureProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformSessionFeatureProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SupportsSessionManagement == other.SupportsSessionManagement ||
                    SupportsSessionManagement != null &&
                    SupportsSessionManagement.Equals(other.SupportsSessionManagement)
                ) && 
                (
                    DefaultSshSessionPort == other.DefaultSshSessionPort ||
                    DefaultSshSessionPort != null &&
                    DefaultSshSessionPort.Equals(other.DefaultSshSessionPort)
                ) && 
                (
                    DefaultRemoteDesktopSessionPort == other.DefaultRemoteDesktopSessionPort ||
                    DefaultRemoteDesktopSessionPort != null &&
                    DefaultRemoteDesktopSessionPort.Equals(other.DefaultRemoteDesktopSessionPort)
                ) && 
                (
                    DefaultTelnetSessionPort == other.DefaultTelnetSessionPort ||
                    DefaultTelnetSessionPort != null &&
                    DefaultTelnetSessionPort.Equals(other.DefaultTelnetSessionPort)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SupportsSessionManagement != null)
                    hashCode = hashCode * 59 + SupportsSessionManagement.GetHashCode();
                    if (DefaultSshSessionPort != null)
                    hashCode = hashCode * 59 + DefaultSshSessionPort.GetHashCode();
                    if (DefaultRemoteDesktopSessionPort != null)
                    hashCode = hashCode * 59 + DefaultRemoteDesktopSessionPort.GetHashCode();
                    if (DefaultTelnetSessionPort != null)
                    hashCode = hashCode * 59 + DefaultTelnetSessionPort.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlatformSessionFeatureProperties left, PlatformSessionFeatureProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlatformSessionFeatureProperties left, PlatformSessionFeatureProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
