/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a request for the password of an account
    /// </summary>
    [DataContract]
    public partial class NewAccessRequest : IEquatable<NewAccessRequest>
    { 
        /// <summary>
        /// Database ID of the account to request password for (or access account for sessions)
        /// </summary>
        /// <value>Database ID of the account to request password for (or access account for sessions)</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Database ID of asset to request access to
        /// </summary>
        /// <value>Database ID of asset to request access to</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// Whether emergency access is being requested
        /// </summary>
        /// <value>Whether emergency access is being requested</value>

        [DataMember(Name="IsEmergency")]
        public bool? IsEmergency { get; set; }

        /// <summary>
        /// Database ID of the pre-defined reason code for why the password access is needed
        /// </summary>
        /// <value>Database ID of the pre-defined reason code for why the password access is needed</value>

        [DataMember(Name="ReasonCodeId")]
        public int? ReasonCodeId { get; set; }

        /// <summary>
        /// Requester&#x27;s reason of why the password access is needed
        /// </summary>
        /// <value>Requester&#x27;s reason of why the password access is needed</value>

        [MaxLength(1000)]
        [DataMember(Name="ReasonComment")]
        public string ReasonComment { get; set; }

        /// <summary>
        /// The number of days requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.
        /// </summary>
        /// <value>The number of days requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.</value>

        [Range(0, 31)]
        [DataMember(Name="RequestedDurationDays")]
        public int? RequestedDurationDays { get; set; }

        /// <summary>
        /// The number of hours requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.
        /// </summary>
        /// <value>The number of hours requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.</value>

        [Range(0, 23)]
        [DataMember(Name="RequestedDurationHours")]
        public int? RequestedDurationHours { get; set; }

        /// <summary>
        /// The number of minutes requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.
        /// </summary>
        /// <value>The number of minutes requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 31 days.</value>

        [Range(0, 59)]
        [DataMember(Name="RequestedDurationMinutes")]
        public int? RequestedDurationMinutes { get; set; }

        /// <summary>
        /// The UTC date-time requested for password access. {null} means \&quot;Right Now!\&quot;
        /// </summary>
        /// <value>The UTC date-time requested for password access. {null} means \&quot;Right Now!\&quot;</value>

        [DataMember(Name="RequestedFor")]
        public DateTime? RequestedFor { get; set; }

        /// <summary>
        /// The help desk ticket number as required by policy
        /// </summary>
        /// <value>The help desk ticket number as required by policy</value>

        [DataMember(Name="TicketNumber")]
        public string TicketNumber { get; set; }

        /// <summary>
        /// Whether SPP can launch an SRA session
        /// </summary>
        /// <value>Whether SPP can launch an SRA session</value>

        [DataMember(Name="AllowSraSessionLaunch")]
        public bool? AllowSraSessionLaunch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NewAccessRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  IsEmergency: ").Append(IsEmergency).Append("\n");
            sb.Append("  ReasonCodeId: ").Append(ReasonCodeId).Append("\n");
            sb.Append("  ReasonComment: ").Append(ReasonComment).Append("\n");
            sb.Append("  RequestedDurationDays: ").Append(RequestedDurationDays).Append("\n");
            sb.Append("  RequestedDurationHours: ").Append(RequestedDurationHours).Append("\n");
            sb.Append("  RequestedDurationMinutes: ").Append(RequestedDurationMinutes).Append("\n");
            sb.Append("  RequestedFor: ").Append(RequestedFor).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  AllowSraSessionLaunch: ").Append(AllowSraSessionLaunch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NewAccessRequest)obj);
        }

        /// <summary>
        /// Returns true if NewAccessRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of NewAccessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewAccessRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    IsEmergency == other.IsEmergency ||
                    IsEmergency != null &&
                    IsEmergency.Equals(other.IsEmergency)
                ) && 
                (
                    ReasonCodeId == other.ReasonCodeId ||
                    ReasonCodeId != null &&
                    ReasonCodeId.Equals(other.ReasonCodeId)
                ) && 
                (
                    ReasonComment == other.ReasonComment ||
                    ReasonComment != null &&
                    ReasonComment.Equals(other.ReasonComment)
                ) && 
                (
                    RequestedDurationDays == other.RequestedDurationDays ||
                    RequestedDurationDays != null &&
                    RequestedDurationDays.Equals(other.RequestedDurationDays)
                ) && 
                (
                    RequestedDurationHours == other.RequestedDurationHours ||
                    RequestedDurationHours != null &&
                    RequestedDurationHours.Equals(other.RequestedDurationHours)
                ) && 
                (
                    RequestedDurationMinutes == other.RequestedDurationMinutes ||
                    RequestedDurationMinutes != null &&
                    RequestedDurationMinutes.Equals(other.RequestedDurationMinutes)
                ) && 
                (
                    RequestedFor == other.RequestedFor ||
                    RequestedFor != null &&
                    RequestedFor.Equals(other.RequestedFor)
                ) && 
                (
                    TicketNumber == other.TicketNumber ||
                    TicketNumber != null &&
                    TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    AllowSraSessionLaunch == other.AllowSraSessionLaunch ||
                    AllowSraSessionLaunch != null &&
                    AllowSraSessionLaunch.Equals(other.AllowSraSessionLaunch)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (IsEmergency != null)
                    hashCode = hashCode * 59 + IsEmergency.GetHashCode();
                    if (ReasonCodeId != null)
                    hashCode = hashCode * 59 + ReasonCodeId.GetHashCode();
                    if (ReasonComment != null)
                    hashCode = hashCode * 59 + ReasonComment.GetHashCode();
                    if (RequestedDurationDays != null)
                    hashCode = hashCode * 59 + RequestedDurationDays.GetHashCode();
                    if (RequestedDurationHours != null)
                    hashCode = hashCode * 59 + RequestedDurationHours.GetHashCode();
                    if (RequestedDurationMinutes != null)
                    hashCode = hashCode * 59 + RequestedDurationMinutes.GetHashCode();
                    if (RequestedFor != null)
                    hashCode = hashCode * 59 + RequestedFor.GetHashCode();
                    if (TicketNumber != null)
                    hashCode = hashCode * 59 + TicketNumber.GetHashCode();
                    if (AllowSraSessionLaunch != null)
                    hashCode = hashCode * 59 + AllowSraSessionLaunch.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NewAccessRequest left, NewAccessRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NewAccessRequest left, NewAccessRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
