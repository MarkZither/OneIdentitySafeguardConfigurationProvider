/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A saved access request that can be used in a user request favorite
    /// </summary>
    [DataContract]
    public partial class SavedAccessRequest : IEquatable<SavedAccessRequest>
    { 
        /// <summary>
        /// Database ID of asset to request access to
        /// </summary>
        /// <value>Database ID of asset to request access to</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Database ID of the account to request password for (or access account for sessions)
        /// </summary>
        /// <value>Database ID of the account to request password for (or access account for sessions)</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the account being requested
        /// </summary>
        /// <value>Name of the account being requested</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; private set; }

        /// <summary>
        /// Name of the domain of the account
        /// </summary>
        /// <value>Name of the domain of the account</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; private set; }

        /// <summary>
        /// Database ID of the asset of the account
        /// </summary>
        /// <value>Database ID of the asset of the account</value>

        [DataMember(Name="AccountAssetId")]
        public int? AccountAssetId { get; private set; }

        /// <summary>
        /// Name of the asset of the account
        /// </summary>
        /// <value>Name of the asset of the account</value>

        [DataMember(Name="AccountAssetName")]
        public string AccountAssetName { get; private set; }

        /// <summary>
        /// Name of the asset to request access for
        /// </summary>
        /// <value>Name of the asset to request access for</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; private set; }

        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// Whether emergency access is being requested
        /// </summary>
        /// <value>Whether emergency access is being requested</value>

        [DataMember(Name="IsEmergency")]
        public bool? IsEmergency { get; set; }

        /// <summary>
        /// Database ID of the pre-defined reason code for why the password access is needed
        /// </summary>
        /// <value>Database ID of the pre-defined reason code for why the password access is needed</value>

        [DataMember(Name="ReasonCodeId")]
        public int? ReasonCodeId { get; set; }

        /// <summary>
        /// Name of the pre-defined reason code for why the password access is needed
        /// </summary>
        /// <value>Name of the pre-defined reason code for why the password access is needed</value>

        [DataMember(Name="ReasonCodeName")]
        public string ReasonCodeName { get; set; }

        /// <summary>
        /// Requester&#x27;s reason of why the password access is needed
        /// </summary>
        /// <value>Requester&#x27;s reason of why the password access is needed</value>

        [DataMember(Name="ReasonComment")]
        public string ReasonComment { get; set; }

        /// <summary>
        /// The number of days requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.
        /// </summary>
        /// <value>The number of days requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.</value>

        [DataMember(Name="RequestedDurationDays")]
        public int? RequestedDurationDays { get; set; }

        /// <summary>
        /// The number of hours requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.
        /// </summary>
        /// <value>The number of hours requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.</value>

        [DataMember(Name="RequestedDurationHours")]
        public int? RequestedDurationHours { get; set; }

        /// <summary>
        /// The number of minutes requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.
        /// </summary>
        /// <value>The number of minutes requested for password access. The sum of Requested Days/Hours/Minutes must not exceed 7 days.</value>

        [DataMember(Name="RequestedDurationMinutes")]
        public int? RequestedDurationMinutes { get; set; }

        /// <summary>
        /// List of requests that are currently active
        /// </summary>
        /// <value>List of requests that are currently active</value>

        [DataMember(Name="ActiveRequests")]
        public List<ActiveRequest> ActiveRequests { get; set; }

        /// <summary>
        /// Gets or Sets AssetPlatformType
        /// </summary>

        [DataMember(Name="AssetPlatformType")]
        public PlatformType AssetPlatformType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SavedAccessRequest {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AccountAssetId: ").Append(AccountAssetId).Append("\n");
            sb.Append("  AccountAssetName: ").Append(AccountAssetName).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  IsEmergency: ").Append(IsEmergency).Append("\n");
            sb.Append("  ReasonCodeId: ").Append(ReasonCodeId).Append("\n");
            sb.Append("  ReasonCodeName: ").Append(ReasonCodeName).Append("\n");
            sb.Append("  ReasonComment: ").Append(ReasonComment).Append("\n");
            sb.Append("  RequestedDurationDays: ").Append(RequestedDurationDays).Append("\n");
            sb.Append("  RequestedDurationHours: ").Append(RequestedDurationHours).Append("\n");
            sb.Append("  RequestedDurationMinutes: ").Append(RequestedDurationMinutes).Append("\n");
            sb.Append("  ActiveRequests: ").Append(ActiveRequests).Append("\n");
            sb.Append("  AssetPlatformType: ").Append(AssetPlatformType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SavedAccessRequest)obj);
        }

        /// <summary>
        /// Returns true if SavedAccessRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SavedAccessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SavedAccessRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AccountAssetId == other.AccountAssetId ||
                    AccountAssetId != null &&
                    AccountAssetId.Equals(other.AccountAssetId)
                ) && 
                (
                    AccountAssetName == other.AccountAssetName ||
                    AccountAssetName != null &&
                    AccountAssetName.Equals(other.AccountAssetName)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    IsEmergency == other.IsEmergency ||
                    IsEmergency != null &&
                    IsEmergency.Equals(other.IsEmergency)
                ) && 
                (
                    ReasonCodeId == other.ReasonCodeId ||
                    ReasonCodeId != null &&
                    ReasonCodeId.Equals(other.ReasonCodeId)
                ) && 
                (
                    ReasonCodeName == other.ReasonCodeName ||
                    ReasonCodeName != null &&
                    ReasonCodeName.Equals(other.ReasonCodeName)
                ) && 
                (
                    ReasonComment == other.ReasonComment ||
                    ReasonComment != null &&
                    ReasonComment.Equals(other.ReasonComment)
                ) && 
                (
                    RequestedDurationDays == other.RequestedDurationDays ||
                    RequestedDurationDays != null &&
                    RequestedDurationDays.Equals(other.RequestedDurationDays)
                ) && 
                (
                    RequestedDurationHours == other.RequestedDurationHours ||
                    RequestedDurationHours != null &&
                    RequestedDurationHours.Equals(other.RequestedDurationHours)
                ) && 
                (
                    RequestedDurationMinutes == other.RequestedDurationMinutes ||
                    RequestedDurationMinutes != null &&
                    RequestedDurationMinutes.Equals(other.RequestedDurationMinutes)
                ) && 
                (
                    ActiveRequests == other.ActiveRequests ||
                    ActiveRequests != null &&
                    ActiveRequests.SequenceEqual(other.ActiveRequests)
                ) && 
                (
                    AssetPlatformType == other.AssetPlatformType ||
                    AssetPlatformType != null &&
                    AssetPlatformType.Equals(other.AssetPlatformType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AccountAssetId != null)
                    hashCode = hashCode * 59 + AccountAssetId.GetHashCode();
                    if (AccountAssetName != null)
                    hashCode = hashCode * 59 + AccountAssetName.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (IsEmergency != null)
                    hashCode = hashCode * 59 + IsEmergency.GetHashCode();
                    if (ReasonCodeId != null)
                    hashCode = hashCode * 59 + ReasonCodeId.GetHashCode();
                    if (ReasonCodeName != null)
                    hashCode = hashCode * 59 + ReasonCodeName.GetHashCode();
                    if (ReasonComment != null)
                    hashCode = hashCode * 59 + ReasonComment.GetHashCode();
                    if (RequestedDurationDays != null)
                    hashCode = hashCode * 59 + RequestedDurationDays.GetHashCode();
                    if (RequestedDurationHours != null)
                    hashCode = hashCode * 59 + RequestedDurationHours.GetHashCode();
                    if (RequestedDurationMinutes != null)
                    hashCode = hashCode * 59 + RequestedDurationMinutes.GetHashCode();
                    if (ActiveRequests != null)
                    hashCode = hashCode * 59 + ActiveRequests.GetHashCode();
                    if (AssetPlatformType != null)
                    hashCode = hashCode * 59 + AssetPlatformType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SavedAccessRequest left, SavedAccessRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SavedAccessRequest left, SavedAccessRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
