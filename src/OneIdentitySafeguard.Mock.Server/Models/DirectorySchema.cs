/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A schema definition from AD
    /// </summary>
    [DataContract]
    public partial class DirectorySchema : IEquatable<DirectorySchema>
    { 
        /// <summary>
        /// The name of the schame attribute
        /// </summary>
        /// <value>The name of the schame attribute</value>

        [DataMember(Name="ObjectClassName")]
        public string ObjectClassName { get; set; }

        /// <summary>
        /// Value type of attribute
        /// </summary>
        /// <value>Value type of attribute</value>

        [DataMember(Name="Attributes")]
        public List<DirectorySchemaAttribute> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectorySchema {\n");
            sb.Append("  ObjectClassName: ").Append(ObjectClassName).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DirectorySchema)obj);
        }

        /// <summary>
        /// Returns true if DirectorySchema instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectorySchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectorySchema other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ObjectClassName == other.ObjectClassName ||
                    ObjectClassName != null &&
                    ObjectClassName.Equals(other.ObjectClassName)
                ) && 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    Attributes.SequenceEqual(other.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ObjectClassName != null)
                    hashCode = hashCode * 59 + ObjectClassName.GetHashCode();
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DirectorySchema left, DirectorySchema right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectorySchema left, DirectorySchema right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
