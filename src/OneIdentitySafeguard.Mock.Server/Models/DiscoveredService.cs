/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DiscoveredService : IEquatable<DiscoveredService>
    { 
        /// <summary>
        /// The account associated with the discovered service
        /// </summary>
        /// <value>The account associated with the discovered service</value>

        [DataMember(Name="DiscoveredAccount")]
        public string DiscoveredAccount { get; set; }

        /// <summary>
        /// Asset partition id
        /// </summary>
        /// <value>Asset partition id</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Asset partition name
        /// </summary>
        /// <value>Asset partition name</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Name of the asset on which this service was discovered
        /// </summary>
        /// <value>Name of the asset on which this service was discovered</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Id of the asset on which this service was discovered
        /// </summary>
        /// <value>Id of the asset on which this service was discovered</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the discovered service
        /// </summary>
        /// <value>Name of the discovered service</value>

        [DataMember(Name="ServiceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// Display Name of the discovered service
        /// </summary>
        /// <value>Display Name of the discovered service</value>

        [DataMember(Name="ServiceDisplayName")]
        public string ServiceDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>

        [DataMember(Name="ServiceType")]
        public DiscoveredServiceType ServiceType { get; set; }

        /// <summary>
        /// Whether the service is enabled
        /// </summary>
        /// <value>Whether the service is enabled</value>

        [DataMember(Name="IsServiceEnabled")]
        public bool? IsServiceEnabled { get; set; }

        /// <summary>
        /// Unique ID of dependent account
        /// </summary>
        /// <value>Unique ID of dependent account</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the dependent account
        /// </summary>
        /// <value>Name of the dependent account</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Domain name of the dependent account
        /// </summary>
        /// <value>Domain name of the dependent account</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// Unique ID of asset of the dependent account
        /// </summary>
        /// <value>Unique ID of asset of the dependent account</value>

        [DataMember(Name="AccountAssetId")]
        public int? AccountAssetId { get; set; }

        /// <summary>
        /// Name of asset of the dependent account
        /// </summary>
        /// <value>Name of asset of the dependent account</value>

        [DataMember(Name="AccountAssetName")]
        public string AccountAssetName { get; set; }

        /// <summary>
        /// Gets or Sets AccountStatus
        /// </summary>

        [DataMember(Name="AccountStatus")]
        public DiscoveredServiceAccountStatus AccountStatus { get; set; }

        /// <summary>
        /// Is the account used by the service also a dependent account on the asset
        /// </summary>
        /// <value>Is the account used by the service also a dependent account on the asset</value>

        [DataMember(Name="IsDependentAccount")]
        public bool? IsDependentAccount { get; set; }

        /// <summary>
        /// Whether this service should be ignored if re-discovered
        /// </summary>
        /// <value>Whether this service should be ignored if re-discovered</value>

        [DataMember(Name="IsIgnored")]
        public bool? IsIgnored { get; set; }

        /// <summary>
        /// The date the service was discovered
        /// </summary>
        /// <value>The date the service was discovered</value>

        [DataMember(Name="DiscoveredDate")]
        public DateTime? DiscoveredDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiscoveredService {\n");
            sb.Append("  DiscoveredAccount: ").Append(DiscoveredAccount).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ServiceDisplayName: ").Append(ServiceDisplayName).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  IsServiceEnabled: ").Append(IsServiceEnabled).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AccountAssetId: ").Append(AccountAssetId).Append("\n");
            sb.Append("  AccountAssetName: ").Append(AccountAssetName).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  IsDependentAccount: ").Append(IsDependentAccount).Append("\n");
            sb.Append("  IsIgnored: ").Append(IsIgnored).Append("\n");
            sb.Append("  DiscoveredDate: ").Append(DiscoveredDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DiscoveredService)obj);
        }

        /// <summary>
        /// Returns true if DiscoveredService instances are equal
        /// </summary>
        /// <param name="other">Instance of DiscoveredService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscoveredService other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiscoveredAccount == other.DiscoveredAccount ||
                    DiscoveredAccount != null &&
                    DiscoveredAccount.Equals(other.DiscoveredAccount)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    ServiceDisplayName == other.ServiceDisplayName ||
                    ServiceDisplayName != null &&
                    ServiceDisplayName.Equals(other.ServiceDisplayName)
                ) && 
                (
                    ServiceType == other.ServiceType ||
                    ServiceType != null &&
                    ServiceType.Equals(other.ServiceType)
                ) && 
                (
                    IsServiceEnabled == other.IsServiceEnabled ||
                    IsServiceEnabled != null &&
                    IsServiceEnabled.Equals(other.IsServiceEnabled)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AccountAssetId == other.AccountAssetId ||
                    AccountAssetId != null &&
                    AccountAssetId.Equals(other.AccountAssetId)
                ) && 
                (
                    AccountAssetName == other.AccountAssetName ||
                    AccountAssetName != null &&
                    AccountAssetName.Equals(other.AccountAssetName)
                ) && 
                (
                    AccountStatus == other.AccountStatus ||
                    AccountStatus != null &&
                    AccountStatus.Equals(other.AccountStatus)
                ) && 
                (
                    IsDependentAccount == other.IsDependentAccount ||
                    IsDependentAccount != null &&
                    IsDependentAccount.Equals(other.IsDependentAccount)
                ) && 
                (
                    IsIgnored == other.IsIgnored ||
                    IsIgnored != null &&
                    IsIgnored.Equals(other.IsIgnored)
                ) && 
                (
                    DiscoveredDate == other.DiscoveredDate ||
                    DiscoveredDate != null &&
                    DiscoveredDate.Equals(other.DiscoveredDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiscoveredAccount != null)
                    hashCode = hashCode * 59 + DiscoveredAccount.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    if (ServiceDisplayName != null)
                    hashCode = hashCode * 59 + ServiceDisplayName.GetHashCode();
                    if (ServiceType != null)
                    hashCode = hashCode * 59 + ServiceType.GetHashCode();
                    if (IsServiceEnabled != null)
                    hashCode = hashCode * 59 + IsServiceEnabled.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AccountAssetId != null)
                    hashCode = hashCode * 59 + AccountAssetId.GetHashCode();
                    if (AccountAssetName != null)
                    hashCode = hashCode * 59 + AccountAssetName.GetHashCode();
                    if (AccountStatus != null)
                    hashCode = hashCode * 59 + AccountStatus.GetHashCode();
                    if (IsDependentAccount != null)
                    hashCode = hashCode * 59 + IsDependentAccount.GetHashCode();
                    if (IsIgnored != null)
                    hashCode = hashCode * 59 + IsIgnored.GetHashCode();
                    if (DiscoveredDate != null)
                    hashCode = hashCode * 59 + DiscoveredDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DiscoveredService left, DiscoveredService right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiscoveredService left, DiscoveredService right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
