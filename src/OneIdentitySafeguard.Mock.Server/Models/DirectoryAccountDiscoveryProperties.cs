/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DirectoryAccountDiscoveryProperties : IEquatable<DirectoryAccountDiscoveryProperties>
    { 
        /// <summary>
        /// Gets or Sets RuleType
        /// </summary>

        [DataMember(Name="RuleType")]
        public DirectoryAccountDiscoveryRuleType RuleType { get; set; }

        /// <summary>
        /// Gets or Sets PropertyConstraintProperties
        /// </summary>

        [DataMember(Name="PropertyConstraintProperties")]
        public DirectoryPropertyConstraintProperties PropertyConstraintProperties { get; set; }

        /// <summary>
        /// AD search base for discovering accounts
        /// </summary>
        /// <value>AD search base for discovering accounts</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="SearchBase")]
        public string SearchBase { get; set; }

        /// <summary>
        /// Gets or Sets SearchScope
        /// </summary>

        [DataMember(Name="SearchScope")]
        public DiscoverySearchScope SearchScope { get; set; }

        /// <summary>
        /// Name to search for &#x27;Name&#x27; RuleType
        /// </summary>
        /// <value>Name to search for &#x27;Name&#x27; RuleType</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="SearchName")]
        public string SearchName { get; set; }

        /// <summary>
        /// Gets or Sets SearchNameType
        /// </summary>

        [DataMember(Name="SearchNameType")]
        public SearchNameType SearchNameType { get; set; }

        /// <summary>
        /// Custom LDAP filter to search for &#x27;LdapFilter&#x27; RuleType
        /// </summary>
        /// <value>Custom LDAP filter to search for &#x27;LdapFilter&#x27; RuleType</value>

        [StringLength(1024, MinimumLength=1)]
        [DataMember(Name="LdapFilter")]
        public string LdapFilter { get; set; }

        /// <summary>
        /// List of group distinguishedNames for searching membership for &#x27;Group&#x27; RuleType
        /// </summary>
        /// <value>List of group distinguishedNames for searching membership for &#x27;Group&#x27; RuleType</value>

        [DataMember(Name="Groups")]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectoryAccountDiscoveryProperties {\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("  PropertyConstraintProperties: ").Append(PropertyConstraintProperties).Append("\n");
            sb.Append("  SearchBase: ").Append(SearchBase).Append("\n");
            sb.Append("  SearchScope: ").Append(SearchScope).Append("\n");
            sb.Append("  SearchName: ").Append(SearchName).Append("\n");
            sb.Append("  SearchNameType: ").Append(SearchNameType).Append("\n");
            sb.Append("  LdapFilter: ").Append(LdapFilter).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DirectoryAccountDiscoveryProperties)obj);
        }

        /// <summary>
        /// Returns true if DirectoryAccountDiscoveryProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectoryAccountDiscoveryProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectoryAccountDiscoveryProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RuleType == other.RuleType ||
                    RuleType != null &&
                    RuleType.Equals(other.RuleType)
                ) && 
                (
                    PropertyConstraintProperties == other.PropertyConstraintProperties ||
                    PropertyConstraintProperties != null &&
                    PropertyConstraintProperties.Equals(other.PropertyConstraintProperties)
                ) && 
                (
                    SearchBase == other.SearchBase ||
                    SearchBase != null &&
                    SearchBase.Equals(other.SearchBase)
                ) && 
                (
                    SearchScope == other.SearchScope ||
                    SearchScope != null &&
                    SearchScope.Equals(other.SearchScope)
                ) && 
                (
                    SearchName == other.SearchName ||
                    SearchName != null &&
                    SearchName.Equals(other.SearchName)
                ) && 
                (
                    SearchNameType == other.SearchNameType ||
                    SearchNameType != null &&
                    SearchNameType.Equals(other.SearchNameType)
                ) && 
                (
                    LdapFilter == other.LdapFilter ||
                    LdapFilter != null &&
                    LdapFilter.Equals(other.LdapFilter)
                ) && 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    Groups.SequenceEqual(other.Groups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RuleType != null)
                    hashCode = hashCode * 59 + RuleType.GetHashCode();
                    if (PropertyConstraintProperties != null)
                    hashCode = hashCode * 59 + PropertyConstraintProperties.GetHashCode();
                    if (SearchBase != null)
                    hashCode = hashCode * 59 + SearchBase.GetHashCode();
                    if (SearchScope != null)
                    hashCode = hashCode * 59 + SearchScope.GetHashCode();
                    if (SearchName != null)
                    hashCode = hashCode * 59 + SearchName.GetHashCode();
                    if (SearchNameType != null)
                    hashCode = hashCode * 59 + SearchNameType.GetHashCode();
                    if (LdapFilter != null)
                    hashCode = hashCode * 59 + LdapFilter.GetHashCode();
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DirectoryAccountDiscoveryProperties left, DirectoryAccountDiscoveryProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectoryAccountDiscoveryProperties left, DirectoryAccountDiscoveryProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
