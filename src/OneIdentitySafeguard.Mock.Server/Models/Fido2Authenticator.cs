/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Details about an individual FIDO2 authenticator (or &#x27;token&#x27; or &#x27;security key&#x27;) that has been registered with our              system.  A user can, and should, have at least two authenticators registered and associated with their account at all times              in case they ever loose or break one, they will have a backup.
    /// </summary>
    [DataContract]
    public partial class Fido2Authenticator : IEquatable<Fido2Authenticator>
    { 
        /// <summary>
        /// The unique identifier for this authenticator against this site and user.  It will be set when the authenticator              is first registered, then never changed.
        /// </summary>
        /// <value>The unique identifier for this authenticator against this site and user.  It will be set when the authenticator              is first registered, then never changed.</value>

        [DataMember(Name="CredentialId")]
        public string CredentialId { get; set; }

        /// <summary>
        /// When the authenticator was first registered in our system.  Afterwards, this value should never change.
        /// </summary>
        /// <value>When the authenticator was first registered in our system.  Afterwards, this value should never change.</value>

        [DataMember(Name="DateRegistered")]
        public DateTime? DateRegistered { get; set; }

        /// <summary>
        /// Updated every time the authenticator is used when logging in.
        /// </summary>
        /// <value>Updated every time the authenticator is used when logging in.</value>

        [DataMember(Name="DateLastAuthenticated")]
        public DateTime? DateLastAuthenticated { get; set; }

        /// <summary>
        /// A user supplied, friendly name, given to the authenticator after it has been registered in the system.
        /// </summary>
        /// <value>A user supplied, friendly name, given to the authenticator after it has been registered in the system.</value>

        [MaxLength(255)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fido2Authenticator {\n");
            sb.Append("  CredentialId: ").Append(CredentialId).Append("\n");
            sb.Append("  DateRegistered: ").Append(DateRegistered).Append("\n");
            sb.Append("  DateLastAuthenticated: ").Append(DateLastAuthenticated).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Fido2Authenticator)obj);
        }

        /// <summary>
        /// Returns true if Fido2Authenticator instances are equal
        /// </summary>
        /// <param name="other">Instance of Fido2Authenticator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fido2Authenticator other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CredentialId == other.CredentialId ||
                    CredentialId != null &&
                    CredentialId.Equals(other.CredentialId)
                ) && 
                (
                    DateRegistered == other.DateRegistered ||
                    DateRegistered != null &&
                    DateRegistered.Equals(other.DateRegistered)
                ) && 
                (
                    DateLastAuthenticated == other.DateLastAuthenticated ||
                    DateLastAuthenticated != null &&
                    DateLastAuthenticated.Equals(other.DateLastAuthenticated)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CredentialId != null)
                    hashCode = hashCode * 59 + CredentialId.GetHashCode();
                    if (DateRegistered != null)
                    hashCode = hashCode * 59 + DateRegistered.GetHashCode();
                    if (DateLastAuthenticated != null)
                    hashCode = hashCode * 59 + DateLastAuthenticated.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Fido2Authenticator left, Fido2Authenticator right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Fido2Authenticator left, Fido2Authenticator right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
