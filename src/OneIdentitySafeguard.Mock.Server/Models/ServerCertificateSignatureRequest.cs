/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a request for getting a certificate signature from a CA
    /// </summary>
    [DataContract]
    public partial class ServerCertificateSignatureRequest : IEquatable<ServerCertificateSignatureRequest>
    { 
        /// <summary>
        /// The Subject as found on the request: \&quot;Subject\&quot;:\&quot;CN&#x3D;fully.qualified.domain.name, OU&#x3D;Organizational Unit, O&#x3D;Company, L&#x3D;City, S&#x3D;State, C&#x3D;Country\&quot;
        /// </summary>
        /// <value>The Subject as found on the request: \&quot;Subject\&quot;:\&quot;CN&#x3D;fully.qualified.domain.name, OU&#x3D;Organizational Unit, O&#x3D;Company, L&#x3D;City, S&#x3D;State, C&#x3D;Country\&quot;</value>
        [Required]

        [StringLength(500, MinimumLength=1)]
        [DataMember(Name="Subject")]
        public string Subject { get; set; }

        /// <summary>
        /// The length of the key  &lt;default&gt;2048&lt;/default&gt;
        /// </summary>
        /// <value>The length of the key  &lt;default&gt;2048&lt;/default&gt;</value>

        [Range(1024, 4096)]
        [DataMember(Name="KeyLength")]
        public int? KeyLength { get; set; }

        /// <summary>
        /// The resulting request data encode in Base64 (Read-only)
        /// </summary>
        /// <value>The resulting request data encode in Base64 (Read-only)</value>

        [DataMember(Name="Base64RequestData")]
        public string Base64RequestData { get; set; }

        /// <summary>
        /// List of alternate DNS names attached to the certificate (Read-only)
        /// </summary>
        /// <value>List of alternate DNS names attached to the certificate (Read-only)</value>

        [DataMember(Name="DnsNames")]
        public List<string> DnsNames { get; set; }

        /// <summary>
        /// List of alternate IP addressesattached to the certificate (Read-only)
        /// </summary>
        /// <value>List of alternate IP addressesattached to the certificate (Read-only)</value>

        [DataMember(Name="IpAddresses")]
        public List<string> IpAddresses { get; set; }

        /// <summary>
        /// Thumbprint of the pending certificate (Read-only)
        /// </summary>
        /// <value>Thumbprint of the pending certificate (Read-only)</value>

        [DataMember(Name="Thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// who the request was issued by (Read-only)
        /// </summary>
        /// <value>who the request was issued by (Read-only)</value>

        [DataMember(Name="IssuedBy")]
        public string IssuedBy { get; set; }

        /// <summary>
        /// When the request becomes valid (Read-only)
        /// </summary>
        /// <value>When the request becomes valid (Read-only)</value>

        [DataMember(Name="NotBefore")]
        public DateTime? NotBefore { get; set; }

        /// <summary>
        /// When the request becomes expired (Read-only)
        /// </summary>
        /// <value>When the request becomes expired (Read-only)</value>

        [DataMember(Name="NotAfter")]
        public DateTime? NotAfter { get; set; }

        /// <summary>
        /// Gets or Sets CertificateType
        /// </summary>

        [DataMember(Name="CertificateType")]
        public ServerCertificateSignatureRequestType CertificateType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerCertificateSignatureRequest {\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  KeyLength: ").Append(KeyLength).Append("\n");
            sb.Append("  Base64RequestData: ").Append(Base64RequestData).Append("\n");
            sb.Append("  DnsNames: ").Append(DnsNames).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  Thumbprint: ").Append(Thumbprint).Append("\n");
            sb.Append("  IssuedBy: ").Append(IssuedBy).Append("\n");
            sb.Append("  NotBefore: ").Append(NotBefore).Append("\n");
            sb.Append("  NotAfter: ").Append(NotAfter).Append("\n");
            sb.Append("  CertificateType: ").Append(CertificateType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServerCertificateSignatureRequest)obj);
        }

        /// <summary>
        /// Returns true if ServerCertificateSignatureRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ServerCertificateSignatureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerCertificateSignatureRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    KeyLength == other.KeyLength ||
                    KeyLength != null &&
                    KeyLength.Equals(other.KeyLength)
                ) && 
                (
                    Base64RequestData == other.Base64RequestData ||
                    Base64RequestData != null &&
                    Base64RequestData.Equals(other.Base64RequestData)
                ) && 
                (
                    DnsNames == other.DnsNames ||
                    DnsNames != null &&
                    DnsNames.SequenceEqual(other.DnsNames)
                ) && 
                (
                    IpAddresses == other.IpAddresses ||
                    IpAddresses != null &&
                    IpAddresses.SequenceEqual(other.IpAddresses)
                ) && 
                (
                    Thumbprint == other.Thumbprint ||
                    Thumbprint != null &&
                    Thumbprint.Equals(other.Thumbprint)
                ) && 
                (
                    IssuedBy == other.IssuedBy ||
                    IssuedBy != null &&
                    IssuedBy.Equals(other.IssuedBy)
                ) && 
                (
                    NotBefore == other.NotBefore ||
                    NotBefore != null &&
                    NotBefore.Equals(other.NotBefore)
                ) && 
                (
                    NotAfter == other.NotAfter ||
                    NotAfter != null &&
                    NotAfter.Equals(other.NotAfter)
                ) && 
                (
                    CertificateType == other.CertificateType ||
                    CertificateType != null &&
                    CertificateType.Equals(other.CertificateType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (KeyLength != null)
                    hashCode = hashCode * 59 + KeyLength.GetHashCode();
                    if (Base64RequestData != null)
                    hashCode = hashCode * 59 + Base64RequestData.GetHashCode();
                    if (DnsNames != null)
                    hashCode = hashCode * 59 + DnsNames.GetHashCode();
                    if (IpAddresses != null)
                    hashCode = hashCode * 59 + IpAddresses.GetHashCode();
                    if (Thumbprint != null)
                    hashCode = hashCode * 59 + Thumbprint.GetHashCode();
                    if (IssuedBy != null)
                    hashCode = hashCode * 59 + IssuedBy.GetHashCode();
                    if (NotBefore != null)
                    hashCode = hashCode * 59 + NotBefore.GetHashCode();
                    if (NotAfter != null)
                    hashCode = hashCode * 59 + NotAfter.GetHashCode();
                    if (CertificateType != null)
                    hashCode = hashCode * 59 + CertificateType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServerCertificateSignatureRequest left, ServerCertificateSignatureRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServerCertificateSignatureRequest left, ServerCertificateSignatureRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
