/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Specific to patching, will get translated to appliance Version after install
    /// </summary>
    [DataContract]
    public partial class PatchVersion : IEquatable<PatchVersion>
    { 
        /// <summary>
        /// Major release number
        /// </summary>
        /// <value>Major release number</value>

        [DataMember(Name="Major")]
        public int? Major { get; set; }

        /// <summary>
        /// Minor feature update number
        /// </summary>
        /// <value>Minor feature update number</value>

        [DataMember(Name="Minor")]
        public int? Minor { get; set; }

        /// <summary>
        /// Bugfix service release number
        /// </summary>
        /// <value>Bugfix service release number</value>

        [DataMember(Name="ServicePack")]
        public int? ServicePack { get; set; }

        /// <summary>
        /// Hotfix/build number
        /// </summary>
        /// <value>Hotfix/build number</value>

        [DataMember(Name="HotfixLevel")]
        public int? HotfixLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatchVersion {\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Minor: ").Append(Minor).Append("\n");
            sb.Append("  ServicePack: ").Append(ServicePack).Append("\n");
            sb.Append("  HotfixLevel: ").Append(HotfixLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PatchVersion)obj);
        }

        /// <summary>
        /// Returns true if PatchVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of PatchVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchVersion other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Major == other.Major ||
                    Major != null &&
                    Major.Equals(other.Major)
                ) && 
                (
                    Minor == other.Minor ||
                    Minor != null &&
                    Minor.Equals(other.Minor)
                ) && 
                (
                    ServicePack == other.ServicePack ||
                    ServicePack != null &&
                    ServicePack.Equals(other.ServicePack)
                ) && 
                (
                    HotfixLevel == other.HotfixLevel ||
                    HotfixLevel != null &&
                    HotfixLevel.Equals(other.HotfixLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Major != null)
                    hashCode = hashCode * 59 + Major.GetHashCode();
                    if (Minor != null)
                    hashCode = hashCode * 59 + Minor.GetHashCode();
                    if (ServicePack != null)
                    hashCode = hashCode * 59 + ServicePack.GetHashCode();
                    if (HotfixLevel != null)
                    hashCode = hashCode * 59 + HotfixLevel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PatchVersion left, PatchVersion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PatchVersion left, PatchVersion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
