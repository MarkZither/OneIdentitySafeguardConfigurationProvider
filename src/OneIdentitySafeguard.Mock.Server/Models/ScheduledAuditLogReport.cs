/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ScheduledAuditLogReport : IEquatable<ScheduledAuditLogReport>
    { 
        /// <summary>
        /// Database ID of the search (Read-only)
        /// </summary>
        /// <value>Database ID of the search (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of this search
        /// </summary>
        /// <value>Name of this search</value>
        [Required]

        [StringLength(50, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of this search
        /// </summary>
        /// <value>Description of this search</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>

        [DataMember(Name="ScheduleType")]
        public ScheduleType ScheduleType { get; set; }

        /// <summary>
        /// The timezone in which the schedule should run. Required when ScheduleType is not Never.
        /// </summary>
        /// <value>The timezone in which the schedule should run. Required when ScheduleType is not Never.</value>

        [DataMember(Name="TimeZoneId")]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// The description of the timezone in which the schedule should run (Read-only)
        /// </summary>
        /// <value>The description of the timezone in which the schedule should run (Read-only)</value>

        [DataMember(Name="TimeZoneDisplayName")]
        public string TimeZoneDisplayName { get; set; }

        /// <summary>
        /// How frequently to run. Units are based on ScheduleType.   e.g. every 2 days, every 3 months, every 4 weeks
        /// </summary>
        /// <value>How frequently to run. Units are based on ScheduleType.   e.g. every 2 days, every 3 months, every 4 weeks</value>

        [Range(1, 2147483647)]
        [DataMember(Name="RepeatInterval")]
        public int? RepeatInterval { get; set; }

        /// <summary>
        /// Gets or Sets RepeatMonthlyScheduleType
        /// </summary>

        [DataMember(Name="RepeatMonthlyScheduleType")]
        public MonthlyScheduleType RepeatMonthlyScheduleType { get; set; }

        /// <summary>
        /// Gets or Sets RepeatWeekOfMonth
        /// </summary>

        [DataMember(Name="RepeatWeekOfMonth")]
        public WeekOfMonth RepeatWeekOfMonth { get; set; }

        /// <summary>
        /// Gets or Sets RepeatDayOfWeek
        /// </summary>

        [DataMember(Name="RepeatDayOfWeek")]
        public DayOfWeek RepeatDayOfWeek { get; set; }

        /// <summary>
        /// Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth
        /// </summary>
        /// <value>Which day of the month the schedule should run. Only valid when RepeatMonthlyScheduleType is DayOfMonth</value>

        [Range(1, 31)]
        [DataMember(Name="RepeatDayOfMonth")]
        public int? RepeatDayOfMonth { get; set; }

        /// <summary>
        /// Which days of the week the schedule should run. Only valid when ScheduleType is Weekly
        /// </summary>
        /// <value>Which days of the week the schedule should run. Only valid when ScheduleType is Weekly</value>

        [DataMember(Name="RepeatDaysOfWeek")]
        public List<DayOfWeek> RepeatDaysOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets TimeOfDayType
        /// </summary>

        [DataMember(Name="TimeOfDayType")]
        public TimeOfDayType TimeOfDayType { get; set; }

        /// <summary>
        /// The hour of the day that the schedule will run (not applicable for &#x27;Hour&#x27; or &#x27;Minute&#x27; schedule type)
        /// </summary>
        /// <value>The hour of the day that the schedule will run (not applicable for &#x27;Hour&#x27; or &#x27;Minute&#x27; schedule type)</value>

        [Range(0, 23)]
        [DataMember(Name="StartHour")]
        public int? StartHour { get; set; }

        /// <summary>
        /// The minute of the hour of the day that the schedule will run (not applicable for &#x27;Minute&#x27; schedule type)
        /// </summary>
        /// <value>The minute of the hour of the day that the schedule will run (not applicable for &#x27;Minute&#x27; schedule type)</value>

        [Range(0, 59)]
        [DataMember(Name="StartMinute")]
        public int? StartMinute { get; set; }

        /// <summary>
        /// Configuration of intervals of time in a day where tasks can be executed.
        /// </summary>
        /// <value>Configuration of intervals of time in a day where tasks can be executed.</value>

        [DataMember(Name="TimeOfDayIntervals")]
        public List<ScheduleInterval> TimeOfDayIntervals { get; set; }

        /// <summary>
        /// Gets or Sets SerializationFormat
        /// </summary>

        [DataMember(Name="SerializationFormat")]
        public SupportedReportDataSerializationFormat SerializationFormat { get; set; }

        /// <summary>
        /// Gets or Sets CategoryOption
        /// </summary>

        [DataMember(Name="CategoryOption")]
        public AuditLogCategory CategoryOption { get; set; }

        /// <summary>
        /// Gets or Sets DateRangeType
        /// </summary>

        [DataMember(Name="DateRangeType")]
        public DateRangeType DateRangeType { get; set; }

        /// <summary>
        /// Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over filter)
        /// </summary>
        /// <value>Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over filter)</value>

        [DataMember(Name="StartDateOption")]
        public DateTime? StartDateOption { get; set; }

        /// <summary>
        /// Get activity that occurred before this date. Defaults to now. (Preferred over filter)
        /// </summary>
        /// <value>Get activity that occurred before this date. Defaults to now. (Preferred over filter)</value>

        [DataMember(Name="EndDateOption")]
        public DateTime? EndDateOption { get; set; }

        /// <summary>
        /// Get activity that occurred for a specific user (Preferred over filter)
        /// </summary>
        /// <value>Get activity that occurred for a specific user (Preferred over filter)</value>

        [DataMember(Name="UserIdOption")]
        public int? UserIdOption { get; set; }

        /// <summary>
        /// Display name for user ID option
        /// </summary>
        /// <value>Display name for user ID option</value>

        [DataMember(Name="UserIdOptionDisplayName")]
        public string UserIdOptionDisplayName { get; set; }

        /// <summary>
        /// Get activity that occurred for a specific asset (Preferred over filter)
        /// </summary>
        /// <value>Get activity that occurred for a specific asset (Preferred over filter)</value>

        [DataMember(Name="AssetIdOption")]
        public int? AssetIdOption { get; set; }

        /// <summary>
        /// Display name for asset ID option
        /// </summary>
        /// <value>Display name for asset ID option</value>

        [DataMember(Name="AssetIdOptionName")]
        public string AssetIdOptionName { get; set; }

        /// <summary>
        /// Get activity that occurred for a specific account (Preferred over filter)
        /// </summary>
        /// <value>Get activity that occurred for a specific account (Preferred over filter)</value>

        [DataMember(Name="AccountIdOption")]
        public int? AccountIdOption { get; set; }

        /// <summary>
        /// Display name for account ID option
        /// </summary>
        /// <value>Display name for account ID option</value>

        [DataMember(Name="AccountIdOptionName")]
        public string AccountIdOptionName { get; set; }

        /// <summary>
        /// Report all activity details as opposed to a summary view. Only valid when CategoryOption is specified.
        /// </summary>
        /// <value>Report all activity details as opposed to a summary view. Only valid when CategoryOption is specified.</value>

        [DataMember(Name="IncludeDetailsOption")]
        public bool? IncludeDetailsOption { get; set; }

        /// <summary>
        /// Filter results. Only V3 DTO properties are supported. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()
        /// </summary>
        /// <value>Filter results. Only V3 DTO properties are supported. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</value>

        [DataMember(Name="FilterOption")]
        public string FilterOption { get; set; }

        /// <summary>
        /// Which page (starting with 0) of data to return
        /// </summary>
        /// <value>Which page (starting with 0) of data to return</value>

        [DataMember(Name="PageOption")]
        public int? PageOption { get; set; }

        /// <summary>
        /// The size of a page of data
        /// </summary>
        /// <value>The size of a page of data</value>

        [DataMember(Name="LimitOption")]
        public int? LimitOption { get; set; }

        /// <summary>
        /// When specified, the method will return a single integer value representing the total number of items that match the given filter criteria.   If specified, the fields and orderby parameter values are ignored.
        /// </summary>
        /// <value>When specified, the method will return a single integer value representing the total number of items that match the given filter criteria.   If specified, the fields and orderby parameter values are ignored.</value>

        [DataMember(Name="CountOption")]
        public bool? CountOption { get; set; }

        /// <summary>
        /// List of property names (comma-separated) to include in entity output. Only V3 DTO properties are supported.
        /// </summary>
        /// <value>List of property names (comma-separated) to include in entity output. Only V3 DTO properties are supported.</value>

        [DataMember(Name="FieldsOption")]
        public string FieldsOption { get; set; }

        /// <summary>
        /// List of property names (comma-separated) to sort entities by. Only V3 DTO properties are supported. Prepend properties with - for descending.
        /// </summary>
        /// <value>List of property names (comma-separated) to sort entities by. Only V3 DTO properties are supported. Prepend properties with - for descending.</value>

        [DataMember(Name="OrderbyOption")]
        public string OrderbyOption { get; set; }

        /// <summary>
        /// Search all string fields for the specified value
        /// </summary>
        /// <value>Search all string fields for the specified value</value>

        [DataMember(Name="QueryStringOption")]
        public string QueryStringOption { get; set; }

        /// <summary>
        /// The last time this report was executed
        /// </summary>
        /// <value>The last time this report was executed</value>

        [DataMember(Name="LastScheduledExecution")]
        public DateTime? LastScheduledExecution { get; set; }

        /// <summary>
        /// The next time this report will be executed
        /// </summary>
        /// <value>The next time this report will be executed</value>

        [DataMember(Name="NextScheduledExecution")]
        public DateTime? NextScheduledExecution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScheduledAuditLogReport {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  TimeZoneDisplayName: ").Append(TimeZoneDisplayName).Append("\n");
            sb.Append("  RepeatInterval: ").Append(RepeatInterval).Append("\n");
            sb.Append("  RepeatMonthlyScheduleType: ").Append(RepeatMonthlyScheduleType).Append("\n");
            sb.Append("  RepeatWeekOfMonth: ").Append(RepeatWeekOfMonth).Append("\n");
            sb.Append("  RepeatDayOfWeek: ").Append(RepeatDayOfWeek).Append("\n");
            sb.Append("  RepeatDayOfMonth: ").Append(RepeatDayOfMonth).Append("\n");
            sb.Append("  RepeatDaysOfWeek: ").Append(RepeatDaysOfWeek).Append("\n");
            sb.Append("  TimeOfDayType: ").Append(TimeOfDayType).Append("\n");
            sb.Append("  StartHour: ").Append(StartHour).Append("\n");
            sb.Append("  StartMinute: ").Append(StartMinute).Append("\n");
            sb.Append("  TimeOfDayIntervals: ").Append(TimeOfDayIntervals).Append("\n");
            sb.Append("  SerializationFormat: ").Append(SerializationFormat).Append("\n");
            sb.Append("  CategoryOption: ").Append(CategoryOption).Append("\n");
            sb.Append("  DateRangeType: ").Append(DateRangeType).Append("\n");
            sb.Append("  StartDateOption: ").Append(StartDateOption).Append("\n");
            sb.Append("  EndDateOption: ").Append(EndDateOption).Append("\n");
            sb.Append("  UserIdOption: ").Append(UserIdOption).Append("\n");
            sb.Append("  UserIdOptionDisplayName: ").Append(UserIdOptionDisplayName).Append("\n");
            sb.Append("  AssetIdOption: ").Append(AssetIdOption).Append("\n");
            sb.Append("  AssetIdOptionName: ").Append(AssetIdOptionName).Append("\n");
            sb.Append("  AccountIdOption: ").Append(AccountIdOption).Append("\n");
            sb.Append("  AccountIdOptionName: ").Append(AccountIdOptionName).Append("\n");
            sb.Append("  IncludeDetailsOption: ").Append(IncludeDetailsOption).Append("\n");
            sb.Append("  FilterOption: ").Append(FilterOption).Append("\n");
            sb.Append("  PageOption: ").Append(PageOption).Append("\n");
            sb.Append("  LimitOption: ").Append(LimitOption).Append("\n");
            sb.Append("  CountOption: ").Append(CountOption).Append("\n");
            sb.Append("  FieldsOption: ").Append(FieldsOption).Append("\n");
            sb.Append("  OrderbyOption: ").Append(OrderbyOption).Append("\n");
            sb.Append("  QueryStringOption: ").Append(QueryStringOption).Append("\n");
            sb.Append("  LastScheduledExecution: ").Append(LastScheduledExecution).Append("\n");
            sb.Append("  NextScheduledExecution: ").Append(NextScheduledExecution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScheduledAuditLogReport)obj);
        }

        /// <summary>
        /// Returns true if ScheduledAuditLogReport instances are equal
        /// </summary>
        /// <param name="other">Instance of ScheduledAuditLogReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduledAuditLogReport other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    ScheduleType == other.ScheduleType ||
                    ScheduleType != null &&
                    ScheduleType.Equals(other.ScheduleType)
                ) && 
                (
                    TimeZoneId == other.TimeZoneId ||
                    TimeZoneId != null &&
                    TimeZoneId.Equals(other.TimeZoneId)
                ) && 
                (
                    TimeZoneDisplayName == other.TimeZoneDisplayName ||
                    TimeZoneDisplayName != null &&
                    TimeZoneDisplayName.Equals(other.TimeZoneDisplayName)
                ) && 
                (
                    RepeatInterval == other.RepeatInterval ||
                    RepeatInterval != null &&
                    RepeatInterval.Equals(other.RepeatInterval)
                ) && 
                (
                    RepeatMonthlyScheduleType == other.RepeatMonthlyScheduleType ||
                    RepeatMonthlyScheduleType != null &&
                    RepeatMonthlyScheduleType.Equals(other.RepeatMonthlyScheduleType)
                ) && 
                (
                    RepeatWeekOfMonth == other.RepeatWeekOfMonth ||
                    RepeatWeekOfMonth != null &&
                    RepeatWeekOfMonth.Equals(other.RepeatWeekOfMonth)
                ) && 
                (
                    RepeatDayOfWeek == other.RepeatDayOfWeek ||
                    RepeatDayOfWeek != null &&
                    RepeatDayOfWeek.Equals(other.RepeatDayOfWeek)
                ) && 
                (
                    RepeatDayOfMonth == other.RepeatDayOfMonth ||
                    RepeatDayOfMonth != null &&
                    RepeatDayOfMonth.Equals(other.RepeatDayOfMonth)
                ) && 
                (
                    RepeatDaysOfWeek == other.RepeatDaysOfWeek ||
                    RepeatDaysOfWeek != null &&
                    RepeatDaysOfWeek.SequenceEqual(other.RepeatDaysOfWeek)
                ) && 
                (
                    TimeOfDayType == other.TimeOfDayType ||
                    TimeOfDayType != null &&
                    TimeOfDayType.Equals(other.TimeOfDayType)
                ) && 
                (
                    StartHour == other.StartHour ||
                    StartHour != null &&
                    StartHour.Equals(other.StartHour)
                ) && 
                (
                    StartMinute == other.StartMinute ||
                    StartMinute != null &&
                    StartMinute.Equals(other.StartMinute)
                ) && 
                (
                    TimeOfDayIntervals == other.TimeOfDayIntervals ||
                    TimeOfDayIntervals != null &&
                    TimeOfDayIntervals.SequenceEqual(other.TimeOfDayIntervals)
                ) && 
                (
                    SerializationFormat == other.SerializationFormat ||
                    SerializationFormat != null &&
                    SerializationFormat.Equals(other.SerializationFormat)
                ) && 
                (
                    CategoryOption == other.CategoryOption ||
                    CategoryOption != null &&
                    CategoryOption.Equals(other.CategoryOption)
                ) && 
                (
                    DateRangeType == other.DateRangeType ||
                    DateRangeType != null &&
                    DateRangeType.Equals(other.DateRangeType)
                ) && 
                (
                    StartDateOption == other.StartDateOption ||
                    StartDateOption != null &&
                    StartDateOption.Equals(other.StartDateOption)
                ) && 
                (
                    EndDateOption == other.EndDateOption ||
                    EndDateOption != null &&
                    EndDateOption.Equals(other.EndDateOption)
                ) && 
                (
                    UserIdOption == other.UserIdOption ||
                    UserIdOption != null &&
                    UserIdOption.Equals(other.UserIdOption)
                ) && 
                (
                    UserIdOptionDisplayName == other.UserIdOptionDisplayName ||
                    UserIdOptionDisplayName != null &&
                    UserIdOptionDisplayName.Equals(other.UserIdOptionDisplayName)
                ) && 
                (
                    AssetIdOption == other.AssetIdOption ||
                    AssetIdOption != null &&
                    AssetIdOption.Equals(other.AssetIdOption)
                ) && 
                (
                    AssetIdOptionName == other.AssetIdOptionName ||
                    AssetIdOptionName != null &&
                    AssetIdOptionName.Equals(other.AssetIdOptionName)
                ) && 
                (
                    AccountIdOption == other.AccountIdOption ||
                    AccountIdOption != null &&
                    AccountIdOption.Equals(other.AccountIdOption)
                ) && 
                (
                    AccountIdOptionName == other.AccountIdOptionName ||
                    AccountIdOptionName != null &&
                    AccountIdOptionName.Equals(other.AccountIdOptionName)
                ) && 
                (
                    IncludeDetailsOption == other.IncludeDetailsOption ||
                    IncludeDetailsOption != null &&
                    IncludeDetailsOption.Equals(other.IncludeDetailsOption)
                ) && 
                (
                    FilterOption == other.FilterOption ||
                    FilterOption != null &&
                    FilterOption.Equals(other.FilterOption)
                ) && 
                (
                    PageOption == other.PageOption ||
                    PageOption != null &&
                    PageOption.Equals(other.PageOption)
                ) && 
                (
                    LimitOption == other.LimitOption ||
                    LimitOption != null &&
                    LimitOption.Equals(other.LimitOption)
                ) && 
                (
                    CountOption == other.CountOption ||
                    CountOption != null &&
                    CountOption.Equals(other.CountOption)
                ) && 
                (
                    FieldsOption == other.FieldsOption ||
                    FieldsOption != null &&
                    FieldsOption.Equals(other.FieldsOption)
                ) && 
                (
                    OrderbyOption == other.OrderbyOption ||
                    OrderbyOption != null &&
                    OrderbyOption.Equals(other.OrderbyOption)
                ) && 
                (
                    QueryStringOption == other.QueryStringOption ||
                    QueryStringOption != null &&
                    QueryStringOption.Equals(other.QueryStringOption)
                ) && 
                (
                    LastScheduledExecution == other.LastScheduledExecution ||
                    LastScheduledExecution != null &&
                    LastScheduledExecution.Equals(other.LastScheduledExecution)
                ) && 
                (
                    NextScheduledExecution == other.NextScheduledExecution ||
                    NextScheduledExecution != null &&
                    NextScheduledExecution.Equals(other.NextScheduledExecution)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (ScheduleType != null)
                    hashCode = hashCode * 59 + ScheduleType.GetHashCode();
                    if (TimeZoneId != null)
                    hashCode = hashCode * 59 + TimeZoneId.GetHashCode();
                    if (TimeZoneDisplayName != null)
                    hashCode = hashCode * 59 + TimeZoneDisplayName.GetHashCode();
                    if (RepeatInterval != null)
                    hashCode = hashCode * 59 + RepeatInterval.GetHashCode();
                    if (RepeatMonthlyScheduleType != null)
                    hashCode = hashCode * 59 + RepeatMonthlyScheduleType.GetHashCode();
                    if (RepeatWeekOfMonth != null)
                    hashCode = hashCode * 59 + RepeatWeekOfMonth.GetHashCode();
                    if (RepeatDayOfWeek != null)
                    hashCode = hashCode * 59 + RepeatDayOfWeek.GetHashCode();
                    if (RepeatDayOfMonth != null)
                    hashCode = hashCode * 59 + RepeatDayOfMonth.GetHashCode();
                    if (RepeatDaysOfWeek != null)
                    hashCode = hashCode * 59 + RepeatDaysOfWeek.GetHashCode();
                    if (TimeOfDayType != null)
                    hashCode = hashCode * 59 + TimeOfDayType.GetHashCode();
                    if (StartHour != null)
                    hashCode = hashCode * 59 + StartHour.GetHashCode();
                    if (StartMinute != null)
                    hashCode = hashCode * 59 + StartMinute.GetHashCode();
                    if (TimeOfDayIntervals != null)
                    hashCode = hashCode * 59 + TimeOfDayIntervals.GetHashCode();
                    if (SerializationFormat != null)
                    hashCode = hashCode * 59 + SerializationFormat.GetHashCode();
                    if (CategoryOption != null)
                    hashCode = hashCode * 59 + CategoryOption.GetHashCode();
                    if (DateRangeType != null)
                    hashCode = hashCode * 59 + DateRangeType.GetHashCode();
                    if (StartDateOption != null)
                    hashCode = hashCode * 59 + StartDateOption.GetHashCode();
                    if (EndDateOption != null)
                    hashCode = hashCode * 59 + EndDateOption.GetHashCode();
                    if (UserIdOption != null)
                    hashCode = hashCode * 59 + UserIdOption.GetHashCode();
                    if (UserIdOptionDisplayName != null)
                    hashCode = hashCode * 59 + UserIdOptionDisplayName.GetHashCode();
                    if (AssetIdOption != null)
                    hashCode = hashCode * 59 + AssetIdOption.GetHashCode();
                    if (AssetIdOptionName != null)
                    hashCode = hashCode * 59 + AssetIdOptionName.GetHashCode();
                    if (AccountIdOption != null)
                    hashCode = hashCode * 59 + AccountIdOption.GetHashCode();
                    if (AccountIdOptionName != null)
                    hashCode = hashCode * 59 + AccountIdOptionName.GetHashCode();
                    if (IncludeDetailsOption != null)
                    hashCode = hashCode * 59 + IncludeDetailsOption.GetHashCode();
                    if (FilterOption != null)
                    hashCode = hashCode * 59 + FilterOption.GetHashCode();
                    if (PageOption != null)
                    hashCode = hashCode * 59 + PageOption.GetHashCode();
                    if (LimitOption != null)
                    hashCode = hashCode * 59 + LimitOption.GetHashCode();
                    if (CountOption != null)
                    hashCode = hashCode * 59 + CountOption.GetHashCode();
                    if (FieldsOption != null)
                    hashCode = hashCode * 59 + FieldsOption.GetHashCode();
                    if (OrderbyOption != null)
                    hashCode = hashCode * 59 + OrderbyOption.GetHashCode();
                    if (QueryStringOption != null)
                    hashCode = hashCode * 59 + QueryStringOption.GetHashCode();
                    if (LastScheduledExecution != null)
                    hashCode = hashCode * 59 + LastScheduledExecution.GetHashCode();
                    if (NextScheduledExecution != null)
                    hashCode = hashCode * 59 + NextScheduledExecution.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScheduledAuditLogReport left, ScheduledAuditLogReport right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScheduledAuditLogReport left, ScheduledAuditLogReport right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
