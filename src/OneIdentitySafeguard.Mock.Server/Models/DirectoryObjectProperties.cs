/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Properties mapping the entity to an object in a directory
    /// </summary>
    [DataContract]
    public partial class DirectoryObjectProperties : IEquatable<DirectoryObjectProperties>
    { 
        /// <summary>
        /// The directory this object was imported from. Required if this is an object to import from a directory.
        /// </summary>
        /// <value>The directory this object was imported from. Required if this is an object to import from a directory.</value>

        [DataMember(Name="DirectoryId")]
        public int? DirectoryId { get; set; }

        /// <summary>
        /// The name of the directory this object was imported from. (Read-only)
        /// </summary>
        /// <value>The name of the directory this object was imported from. (Read-only)</value>

        [DataMember(Name="DirectoryName")]
        public string DirectoryName { get; set; }

        /// <summary>
        /// Name of the domain this object is from. Required if this is an object to import from a directory.
        /// </summary>
        /// <value>Name of the domain this object is from. Required if this is an object to import from a directory.</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Netbios name of the domain this object is from (Read-only)
        /// </summary>
        /// <value>Netbios name of the domain this object is from (Read-only)</value>

        [DataMember(Name="NetbiosName")]
        public string NetbiosName { get; set; }

        /// <summary>
        /// The distinguished name of the object (Read-only)
        /// </summary>
        /// <value>The distinguished name of the object (Read-only)</value>

        [DataMember(Name="DistinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// Unique ID of the object in the directory (Read-only)
        /// </summary>
        /// <value>Unique ID of the object in the directory (Read-only)</value>

        [DataMember(Name="ObjectGuid")]
        public string ObjectGuid { get; set; }

        /// <summary>
        /// Security ID of the object in the directory (Active Directory only) (Read-only)
        /// </summary>
        /// <value>Security ID of the object in the directory (Active Directory only) (Read-only)</value>

        [DataMember(Name="ObjectSid")]
        public string ObjectSid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectoryObjectProperties {\n");
            sb.Append("  DirectoryId: ").Append(DirectoryId).Append("\n");
            sb.Append("  DirectoryName: ").Append(DirectoryName).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  NetbiosName: ").Append(NetbiosName).Append("\n");
            sb.Append("  DistinguishedName: ").Append(DistinguishedName).Append("\n");
            sb.Append("  ObjectGuid: ").Append(ObjectGuid).Append("\n");
            sb.Append("  ObjectSid: ").Append(ObjectSid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DirectoryObjectProperties)obj);
        }

        /// <summary>
        /// Returns true if DirectoryObjectProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of DirectoryObjectProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectoryObjectProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DirectoryId == other.DirectoryId ||
                    DirectoryId != null &&
                    DirectoryId.Equals(other.DirectoryId)
                ) && 
                (
                    DirectoryName == other.DirectoryName ||
                    DirectoryName != null &&
                    DirectoryName.Equals(other.DirectoryName)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    NetbiosName == other.NetbiosName ||
                    NetbiosName != null &&
                    NetbiosName.Equals(other.NetbiosName)
                ) && 
                (
                    DistinguishedName == other.DistinguishedName ||
                    DistinguishedName != null &&
                    DistinguishedName.Equals(other.DistinguishedName)
                ) && 
                (
                    ObjectGuid == other.ObjectGuid ||
                    ObjectGuid != null &&
                    ObjectGuid.Equals(other.ObjectGuid)
                ) && 
                (
                    ObjectSid == other.ObjectSid ||
                    ObjectSid != null &&
                    ObjectSid.Equals(other.ObjectSid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DirectoryId != null)
                    hashCode = hashCode * 59 + DirectoryId.GetHashCode();
                    if (DirectoryName != null)
                    hashCode = hashCode * 59 + DirectoryName.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (NetbiosName != null)
                    hashCode = hashCode * 59 + NetbiosName.GetHashCode();
                    if (DistinguishedName != null)
                    hashCode = hashCode * 59 + DistinguishedName.GetHashCode();
                    if (ObjectGuid != null)
                    hashCode = hashCode * 59 + ObjectGuid.GetHashCode();
                    if (ObjectSid != null)
                    hashCode = hashCode * 59 + ObjectSid.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DirectoryObjectProperties left, DirectoryObjectProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DirectoryObjectProperties left, DirectoryObjectProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
