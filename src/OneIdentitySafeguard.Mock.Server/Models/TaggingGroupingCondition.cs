/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TaggingGroupingCondition : IEquatable<TaggingGroupingCondition>
    { 
        /// <summary>
        /// Gets or Sets ObjectAttribute
        /// </summary>
        [Required]

        [DataMember(Name="ObjectAttribute")]
        public TaggingGroupingObjectAttributes ObjectAttribute { get; set; }

        /// <summary>
        /// Gets or Sets CompareType
        /// </summary>
        [Required]

        [DataMember(Name="CompareType")]
        public ComparisonOperator CompareType { get; set; }

        /// <summary>
        /// The value to compare the ObjectAttribute value against. Always stored/transferred as a string, converted as needed.
        /// </summary>
        /// <value>The value to compare the ObjectAttribute value against. Always stored/transferred as a string, converted as needed.</value>

        [DataMember(Name="CompareValue")]
        public string CompareValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaggingGroupingCondition {\n");
            sb.Append("  ObjectAttribute: ").Append(ObjectAttribute).Append("\n");
            sb.Append("  CompareType: ").Append(CompareType).Append("\n");
            sb.Append("  CompareValue: ").Append(CompareValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaggingGroupingCondition)obj);
        }

        /// <summary>
        /// Returns true if TaggingGroupingCondition instances are equal
        /// </summary>
        /// <param name="other">Instance of TaggingGroupingCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaggingGroupingCondition other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ObjectAttribute == other.ObjectAttribute ||
                    ObjectAttribute != null &&
                    ObjectAttribute.Equals(other.ObjectAttribute)
                ) && 
                (
                    CompareType == other.CompareType ||
                    CompareType != null &&
                    CompareType.Equals(other.CompareType)
                ) && 
                (
                    CompareValue == other.CompareValue ||
                    CompareValue != null &&
                    CompareValue.Equals(other.CompareValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ObjectAttribute != null)
                    hashCode = hashCode * 59 + ObjectAttribute.GetHashCode();
                    if (CompareType != null)
                    hashCode = hashCode * 59 + CompareType.GetHashCode();
                    if (CompareValue != null)
                    hashCode = hashCode * 59 + CompareValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaggingGroupingCondition left, TaggingGroupingCondition right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaggingGroupingCondition left, TaggingGroupingCondition right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
