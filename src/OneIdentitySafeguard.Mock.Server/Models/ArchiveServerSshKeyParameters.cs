/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ArchiveServerSshKeyParameters : IEquatable<ArchiveServerSshKeyParameters>
    { 
        /// <summary>
        /// Whether to auto-accept the ssh host key
        /// </summary>
        /// <value>Whether to auto-accept the ssh host key</value>

        [DataMember(Name="AutoAcceptSshHostKey")]
        public bool? AutoAcceptSshHostKey { get; set; }

        /// <summary>
        /// Public key of the asset
        /// </summary>
        /// <value>Public key of the asset</value>

        [MaxLength(8000)]
        [DataMember(Name="SshHostKey")]
        public string SshHostKey { get; set; }

        /// <summary>
        /// Gets or Sets SshKeyToInstall
        /// </summary>

        [DataMember(Name="SshKeyToInstall")]
        public AccountSshKey SshKeyToInstall { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>

        [DataMember(Name="ConnectionProperties")]
        public ArchivePlatformConnectionProperties ConnectionProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArchiveServerSshKeyParameters {\n");
            sb.Append("  AutoAcceptSshHostKey: ").Append(AutoAcceptSshHostKey).Append("\n");
            sb.Append("  SshHostKey: ").Append(SshHostKey).Append("\n");
            sb.Append("  SshKeyToInstall: ").Append(SshKeyToInstall).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArchiveServerSshKeyParameters)obj);
        }

        /// <summary>
        /// Returns true if ArchiveServerSshKeyParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of ArchiveServerSshKeyParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArchiveServerSshKeyParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AutoAcceptSshHostKey == other.AutoAcceptSshHostKey ||
                    AutoAcceptSshHostKey != null &&
                    AutoAcceptSshHostKey.Equals(other.AutoAcceptSshHostKey)
                ) && 
                (
                    SshHostKey == other.SshHostKey ||
                    SshHostKey != null &&
                    SshHostKey.Equals(other.SshHostKey)
                ) && 
                (
                    SshKeyToInstall == other.SshKeyToInstall ||
                    SshKeyToInstall != null &&
                    SshKeyToInstall.Equals(other.SshKeyToInstall)
                ) && 
                (
                    ConnectionProperties == other.ConnectionProperties ||
                    ConnectionProperties != null &&
                    ConnectionProperties.Equals(other.ConnectionProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AutoAcceptSshHostKey != null)
                    hashCode = hashCode * 59 + AutoAcceptSshHostKey.GetHashCode();
                    if (SshHostKey != null)
                    hashCode = hashCode * 59 + SshHostKey.GetHashCode();
                    if (SshKeyToInstall != null)
                    hashCode = hashCode * 59 + SshKeyToInstall.GetHashCode();
                    if (ConnectionProperties != null)
                    hashCode = hashCode * 59 + ConnectionProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ArchiveServerSshKeyParameters left, ArchiveServerSshKeyParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArchiveServerSshKeyParameters left, ArchiveServerSshKeyParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
