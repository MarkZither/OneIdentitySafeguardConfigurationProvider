/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an application user.
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin
        /// </summary>
        /// <value>Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin</value>

        [DataMember(Name="AdminRoles")]
        public List<AdminRoleName> AdminRoles { get; set; }

        /// <summary>
        /// The user&#x27;s unique id.  This is a system-assigned value that is generated when a user is first created. (Read-only)
        /// </summary>
        /// <value>The user&#x27;s unique id.  This is a system-assigned value that is generated when a user is first created. (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Friendly identifier of the user&#x27;s identity in Safeguard.  Must be unique per identity provider.
        /// </summary>
        /// <value>Friendly identifier of the user&#x27;s identity in Safeguard.  Must be unique per identity provider.</value>
        [Required]

        [MaxLength(255)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of this user
        /// </summary>
        /// <value>Description of this user</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// The user&#x27;s display name (Read-only)
        /// </summary>
        /// <value>The user&#x27;s display name (Read-only)</value>

        [DataMember(Name="DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// The user&#x27;s last name. No double quotes.
        /// </summary>
        /// <value>The user&#x27;s last name. No double quotes.</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// The user&#x27;s first name. No double quotes.
        /// </summary>
        /// <value>The user&#x27;s first name. No double quotes.</value>

        [StringLength(255, MinimumLength=1)]
        [DataMember(Name="FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// The user&#x27;s email address.
        /// </summary>
        /// <value>The user&#x27;s email address.</value>

        [MaxLength(255)]
        [DataMember(Name="EmailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The user&#x27;s work phone number.
        /// </summary>
        /// <value>The user&#x27;s work phone number.</value>

        [MaxLength(30)]
        [DataMember(Name="WorkPhone")]
        public string WorkPhone { get; set; }

        /// <summary>
        /// The user&#x27;s mobile phone number.
        /// </summary>
        /// <value>The user&#x27;s mobile phone number.</value>

        [MaxLength(30)]
        [DataMember(Name="MobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryAuthenticationProvider
        /// </summary>

        [DataMember(Name="PrimaryAuthenticationProvider")]
        public UserPrimaryAuthenticationProvider PrimaryAuthenticationProvider { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryAuthenticationProvider
        /// </summary>

        [DataMember(Name="SecondaryAuthenticationProvider")]
        public UserSecondaryAuthenticationProvider SecondaryAuthenticationProvider { get; set; }

        /// <summary>
        /// Gets or Sets IdentityProvider
        /// </summary>

        [DataMember(Name="IdentityProvider")]
        public UserIdentityProvider IdentityProvider { get; set; }

        /// <summary>
        /// A flag indicating whether or not the user is disabled. Read-only for directory users   for which this will be synchronized with the directory.
        /// </summary>
        /// <value>A flag indicating whether or not the user is disabled. Read-only for directory users   for which this will be synchronized with the directory.</value>

        [DataMember(Name="Disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// The id of the user&#x27;s timezone.
        /// </summary>
        /// <value>The id of the user&#x27;s timezone.</value>

        [DataMember(Name="TimeZoneId")]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// The description of the user&#x27;s timezone (Read-only)
        /// </summary>
        /// <value>The description of the user&#x27;s timezone (Read-only)</value>

        [DataMember(Name="TimeZoneDisplayName")]
        public string TimeZoneDisplayName { get; set; }

        /// <summary>
        /// The IANA name of the user&#x27;s timezone (Read-only)
        /// </summary>
        /// <value>The IANA name of the user&#x27;s timezone (Read-only)</value>

        [DataMember(Name="TimeZoneIanaName")]
        public string TimeZoneIanaName { get; set; }

        /// <summary>
        /// Whether this user owns any partitions (Read-only)
        /// </summary>
        /// <value>Whether this user owns any partitions (Read-only)</value>

        [DataMember(Name="IsPartitionOwner")]
        public bool? IsPartitionOwner { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryProperties
        /// </summary>

        [DataMember(Name="DirectoryProperties")]
        public DirectoryObjectProperties DirectoryProperties { get; set; }

        /// <summary>
        /// Gets or Sets CloudAssistantApproveEnabled
        /// </summary>

        [DataMember(Name="CloudAssistantApproveEnabled")]
        public bool? CloudAssistantApproveEnabled { get; private set; }

        /// <summary>
        /// Gets or Sets CloudAssistantRecipientId
        /// </summary>

        [DataMember(Name="CloudAssistantRecipientId")]
        public string CloudAssistantRecipientId { get; set; }

        /// <summary>
        /// If the user is able to create the personal accounts
        /// </summary>
        /// <value>If the user is able to create the personal accounts</value>

        [DataMember(Name="AllowPersonalAccounts")]
        public bool? AllowPersonalAccounts { get; set; }

        /// <summary>
        /// A read-only flag indicating that the user&#x27;s account is locked.  A locked user account may be unlocked by an administrator. (Read-only)
        /// </summary>
        /// <value>A read-only flag indicating that the user&#x27;s account is locked.  A locked user account may be unlocked by an administrator. (Read-only)</value>

        [DataMember(Name="Locked")]
        public bool? Locked { get; set; }

        /// <summary>
        /// A flag indicating that the user&#x27;s password never expires. Only meaningful for users whose PrimaryAuthenticationType is &#x27;Local&#x27;.
        /// </summary>
        /// <value>A flag indicating that the user&#x27;s password never expires. Only meaningful for users whose PrimaryAuthenticationType is &#x27;Local&#x27;.</value>

        [DataMember(Name="PasswordNeverExpires")]
        public bool? PasswordNeverExpires { get; set; }

        /// <summary>
        /// If set to {true}, then the user must change their password at their next login.  Only meaningful for users whose PrimaryAuthenticationType is &#x27;Local&#x27;.
        /// </summary>
        /// <value>If set to {true}, then the user must change their password at their next login.  Only meaningful for users whose PrimaryAuthenticationType is &#x27;Local&#x27;.</value>

        [DataMember(Name="ChangePasswordAtNextLogin")]
        public bool? ChangePasswordAtNextLogin { get; set; }

        /// <summary>
        /// Binary photo data. Base64 encoded.  Limited to 64 KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image.
        /// </summary>
        /// <value>Binary photo data. Base64 encoded.  Limited to 64 KB when decoded.  Must be a valid BMP, GIF, JPEG, PNG, or TIFF image.</value>

        [DataMember(Name="Base64PhotoData")]
        public string Base64PhotoData { get; set; }

        /// <summary>
        /// Whether this is a built-in user that cannot be modified (Read-only)
        /// </summary>
        /// <value>Whether this is a built-in user that cannot be modified (Read-only)</value>

        [DataMember(Name="IsSystemOwned")]
        public bool? IsSystemOwned { get; set; }

        /// <summary>
        /// Date and Time when the user last successfully logged in (Read-only)
        /// </summary>
        /// <value>Date and Time when the user last successfully logged in (Read-only)</value>

        [DataMember(Name="LastLoginDate")]
        public DateTime? LastLoginDate { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// If set to {true}, then the user must authenticate with a client certificate.  If they attempt to login with a username and  password, for example, if they are using their Active Directory account, access will be denied. Cannot be disabled if enforced  by Active Directory.
        /// </summary>
        /// <value>If set to {true}, then the user must authenticate with a client certificate.  If they attempt to login with a username and  password, for example, if they are using their Active Directory account, access will be denied. Cannot be disabled if enforced  by Active Directory.</value>

        [DataMember(Name="RequireCertificateAuthentication")]
        public bool? RequireCertificateAuthentication { get; set; }

        /// <summary>
        /// If this is an AD user then this will represent the &#x27;Require Smart Card&#x27; attribute of the user in AD. If this is true then   RequireCertificateAuthentication will also be set to true
        /// </summary>
        /// <value>If this is an AD user then this will represent the &#x27;Require Smart Card&#x27; attribute of the user in AD. If this is true then   RequireCertificateAuthentication will also be set to true</value>

        [DataMember(Name="DirectoryRequireCertificateAuthentication")]
        public bool? DirectoryRequireCertificateAuthentication { get; set; }

        /// <summary>
        /// The number of policy accounts linked to the user (Read-only)
        /// </summary>
        /// <value>The number of policy accounts linked to the user (Read-only)</value>

        [DataMember(Name="LinkedAccountsCount")]
        public int? LinkedAccountsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  AdminRoles: ").Append(AdminRoles).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  PrimaryAuthenticationProvider: ").Append(PrimaryAuthenticationProvider).Append("\n");
            sb.Append("  SecondaryAuthenticationProvider: ").Append(SecondaryAuthenticationProvider).Append("\n");
            sb.Append("  IdentityProvider: ").Append(IdentityProvider).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  TimeZoneDisplayName: ").Append(TimeZoneDisplayName).Append("\n");
            sb.Append("  TimeZoneIanaName: ").Append(TimeZoneIanaName).Append("\n");
            sb.Append("  IsPartitionOwner: ").Append(IsPartitionOwner).Append("\n");
            sb.Append("  DirectoryProperties: ").Append(DirectoryProperties).Append("\n");
            sb.Append("  CloudAssistantApproveEnabled: ").Append(CloudAssistantApproveEnabled).Append("\n");
            sb.Append("  CloudAssistantRecipientId: ").Append(CloudAssistantRecipientId).Append("\n");
            sb.Append("  AllowPersonalAccounts: ").Append(AllowPersonalAccounts).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  PasswordNeverExpires: ").Append(PasswordNeverExpires).Append("\n");
            sb.Append("  ChangePasswordAtNextLogin: ").Append(ChangePasswordAtNextLogin).Append("\n");
            sb.Append("  Base64PhotoData: ").Append(Base64PhotoData).Append("\n");
            sb.Append("  IsSystemOwned: ").Append(IsSystemOwned).Append("\n");
            sb.Append("  LastLoginDate: ").Append(LastLoginDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  RequireCertificateAuthentication: ").Append(RequireCertificateAuthentication).Append("\n");
            sb.Append("  DirectoryRequireCertificateAuthentication: ").Append(DirectoryRequireCertificateAuthentication).Append("\n");
            sb.Append("  LinkedAccountsCount: ").Append(LinkedAccountsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdminRoles == other.AdminRoles ||
                    AdminRoles != null &&
                    AdminRoles.SequenceEqual(other.AdminRoles)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    WorkPhone == other.WorkPhone ||
                    WorkPhone != null &&
                    WorkPhone.Equals(other.WorkPhone)
                ) && 
                (
                    MobilePhone == other.MobilePhone ||
                    MobilePhone != null &&
                    MobilePhone.Equals(other.MobilePhone)
                ) && 
                (
                    PrimaryAuthenticationProvider == other.PrimaryAuthenticationProvider ||
                    PrimaryAuthenticationProvider != null &&
                    PrimaryAuthenticationProvider.Equals(other.PrimaryAuthenticationProvider)
                ) && 
                (
                    SecondaryAuthenticationProvider == other.SecondaryAuthenticationProvider ||
                    SecondaryAuthenticationProvider != null &&
                    SecondaryAuthenticationProvider.Equals(other.SecondaryAuthenticationProvider)
                ) && 
                (
                    IdentityProvider == other.IdentityProvider ||
                    IdentityProvider != null &&
                    IdentityProvider.Equals(other.IdentityProvider)
                ) && 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    TimeZoneId == other.TimeZoneId ||
                    TimeZoneId != null &&
                    TimeZoneId.Equals(other.TimeZoneId)
                ) && 
                (
                    TimeZoneDisplayName == other.TimeZoneDisplayName ||
                    TimeZoneDisplayName != null &&
                    TimeZoneDisplayName.Equals(other.TimeZoneDisplayName)
                ) && 
                (
                    TimeZoneIanaName == other.TimeZoneIanaName ||
                    TimeZoneIanaName != null &&
                    TimeZoneIanaName.Equals(other.TimeZoneIanaName)
                ) && 
                (
                    IsPartitionOwner == other.IsPartitionOwner ||
                    IsPartitionOwner != null &&
                    IsPartitionOwner.Equals(other.IsPartitionOwner)
                ) && 
                (
                    DirectoryProperties == other.DirectoryProperties ||
                    DirectoryProperties != null &&
                    DirectoryProperties.Equals(other.DirectoryProperties)
                ) && 
                (
                    CloudAssistantApproveEnabled == other.CloudAssistantApproveEnabled ||
                    CloudAssistantApproveEnabled != null &&
                    CloudAssistantApproveEnabled.Equals(other.CloudAssistantApproveEnabled)
                ) && 
                (
                    CloudAssistantRecipientId == other.CloudAssistantRecipientId ||
                    CloudAssistantRecipientId != null &&
                    CloudAssistantRecipientId.Equals(other.CloudAssistantRecipientId)
                ) && 
                (
                    AllowPersonalAccounts == other.AllowPersonalAccounts ||
                    AllowPersonalAccounts != null &&
                    AllowPersonalAccounts.Equals(other.AllowPersonalAccounts)
                ) && 
                (
                    Locked == other.Locked ||
                    Locked != null &&
                    Locked.Equals(other.Locked)
                ) && 
                (
                    PasswordNeverExpires == other.PasswordNeverExpires ||
                    PasswordNeverExpires != null &&
                    PasswordNeverExpires.Equals(other.PasswordNeverExpires)
                ) && 
                (
                    ChangePasswordAtNextLogin == other.ChangePasswordAtNextLogin ||
                    ChangePasswordAtNextLogin != null &&
                    ChangePasswordAtNextLogin.Equals(other.ChangePasswordAtNextLogin)
                ) && 
                (
                    Base64PhotoData == other.Base64PhotoData ||
                    Base64PhotoData != null &&
                    Base64PhotoData.Equals(other.Base64PhotoData)
                ) && 
                (
                    IsSystemOwned == other.IsSystemOwned ||
                    IsSystemOwned != null &&
                    IsSystemOwned.Equals(other.IsSystemOwned)
                ) && 
                (
                    LastLoginDate == other.LastLoginDate ||
                    LastLoginDate != null &&
                    LastLoginDate.Equals(other.LastLoginDate)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    RequireCertificateAuthentication == other.RequireCertificateAuthentication ||
                    RequireCertificateAuthentication != null &&
                    RequireCertificateAuthentication.Equals(other.RequireCertificateAuthentication)
                ) && 
                (
                    DirectoryRequireCertificateAuthentication == other.DirectoryRequireCertificateAuthentication ||
                    DirectoryRequireCertificateAuthentication != null &&
                    DirectoryRequireCertificateAuthentication.Equals(other.DirectoryRequireCertificateAuthentication)
                ) && 
                (
                    LinkedAccountsCount == other.LinkedAccountsCount ||
                    LinkedAccountsCount != null &&
                    LinkedAccountsCount.Equals(other.LinkedAccountsCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdminRoles != null)
                    hashCode = hashCode * 59 + AdminRoles.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (WorkPhone != null)
                    hashCode = hashCode * 59 + WorkPhone.GetHashCode();
                    if (MobilePhone != null)
                    hashCode = hashCode * 59 + MobilePhone.GetHashCode();
                    if (PrimaryAuthenticationProvider != null)
                    hashCode = hashCode * 59 + PrimaryAuthenticationProvider.GetHashCode();
                    if (SecondaryAuthenticationProvider != null)
                    hashCode = hashCode * 59 + SecondaryAuthenticationProvider.GetHashCode();
                    if (IdentityProvider != null)
                    hashCode = hashCode * 59 + IdentityProvider.GetHashCode();
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (TimeZoneId != null)
                    hashCode = hashCode * 59 + TimeZoneId.GetHashCode();
                    if (TimeZoneDisplayName != null)
                    hashCode = hashCode * 59 + TimeZoneDisplayName.GetHashCode();
                    if (TimeZoneIanaName != null)
                    hashCode = hashCode * 59 + TimeZoneIanaName.GetHashCode();
                    if (IsPartitionOwner != null)
                    hashCode = hashCode * 59 + IsPartitionOwner.GetHashCode();
                    if (DirectoryProperties != null)
                    hashCode = hashCode * 59 + DirectoryProperties.GetHashCode();
                    if (CloudAssistantApproveEnabled != null)
                    hashCode = hashCode * 59 + CloudAssistantApproveEnabled.GetHashCode();
                    if (CloudAssistantRecipientId != null)
                    hashCode = hashCode * 59 + CloudAssistantRecipientId.GetHashCode();
                    if (AllowPersonalAccounts != null)
                    hashCode = hashCode * 59 + AllowPersonalAccounts.GetHashCode();
                    if (Locked != null)
                    hashCode = hashCode * 59 + Locked.GetHashCode();
                    if (PasswordNeverExpires != null)
                    hashCode = hashCode * 59 + PasswordNeverExpires.GetHashCode();
                    if (ChangePasswordAtNextLogin != null)
                    hashCode = hashCode * 59 + ChangePasswordAtNextLogin.GetHashCode();
                    if (Base64PhotoData != null)
                    hashCode = hashCode * 59 + Base64PhotoData.GetHashCode();
                    if (IsSystemOwned != null)
                    hashCode = hashCode * 59 + IsSystemOwned.GetHashCode();
                    if (LastLoginDate != null)
                    hashCode = hashCode * 59 + LastLoginDate.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (RequireCertificateAuthentication != null)
                    hashCode = hashCode * 59 + RequireCertificateAuthentication.GetHashCode();
                    if (DirectoryRequireCertificateAuthentication != null)
                    hashCode = hashCode * 59 + DirectoryRequireCertificateAuthentication.GetHashCode();
                    if (LinkedAccountsCount != null)
                    hashCode = hashCode * 59 + LinkedAccountsCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
