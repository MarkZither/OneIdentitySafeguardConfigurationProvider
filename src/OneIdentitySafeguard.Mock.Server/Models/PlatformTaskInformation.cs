/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Information about the platform task execution (Read-only)
    /// </summary>
    [DataContract]
    public partial class PlatformTaskInformation : IEquatable<PlatformTaskInformation>
    { 
        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>

        [DataMember(Name="TaskName")]
        public TaskNames TaskName { get; set; }

        /// <summary>
        /// The date/time of the last attempt (Read-only)
        /// </summary>
        /// <value>The date/time of the last attempt (Read-only)</value>

        [DataMember(Name="LastTaskDate")]
        public DateTime? LastTaskDate { get; set; }

        /// <summary>
        /// The date/time of the last successful attempt (Read-only)
        /// </summary>
        /// <value>The date/time of the last successful attempt (Read-only)</value>

        [DataMember(Name="LastSuccessTaskDate")]
        public DateTime? LastSuccessTaskDate { get; set; }

        /// <summary>
        /// The date/time of the last failed attempt (Read-only)
        /// </summary>
        /// <value>The date/time of the last failed attempt (Read-only)</value>

        [DataMember(Name="LastFailureTaskDate")]
        public DateTime? LastFailureTaskDate { get; set; }

        /// <summary>
        /// The task audit log ID of the last attempt (Read-only)
        /// </summary>
        /// <value>The task audit log ID of the last attempt (Read-only)</value>

        [DataMember(Name="LastTaskId")]
        public string LastTaskId { get; set; }

        /// <summary>
        /// Number of subsequent failed attempts since last success (Read-only)
        /// </summary>
        /// <value>Number of subsequent failed attempts since last success (Read-only)</value>

        [DataMember(Name="FailedTaskAttempts")]
        public int? FailedTaskAttempts { get; set; }

        /// <summary>
        /// The date/time of the next attempt, if this account is enabled for automatic password management (Read-only)
        /// </summary>
        /// <value>The date/time of the next attempt, if this account is enabled for automatic password management (Read-only)</value>

        [DataMember(Name="NextTaskDate")]
        public DateTime? NextTaskDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlatformTaskInformation {\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  LastTaskDate: ").Append(LastTaskDate).Append("\n");
            sb.Append("  LastSuccessTaskDate: ").Append(LastSuccessTaskDate).Append("\n");
            sb.Append("  LastFailureTaskDate: ").Append(LastFailureTaskDate).Append("\n");
            sb.Append("  LastTaskId: ").Append(LastTaskId).Append("\n");
            sb.Append("  FailedTaskAttempts: ").Append(FailedTaskAttempts).Append("\n");
            sb.Append("  NextTaskDate: ").Append(NextTaskDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlatformTaskInformation)obj);
        }

        /// <summary>
        /// Returns true if PlatformTaskInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of PlatformTaskInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformTaskInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TaskName == other.TaskName ||
                    TaskName != null &&
                    TaskName.Equals(other.TaskName)
                ) && 
                (
                    LastTaskDate == other.LastTaskDate ||
                    LastTaskDate != null &&
                    LastTaskDate.Equals(other.LastTaskDate)
                ) && 
                (
                    LastSuccessTaskDate == other.LastSuccessTaskDate ||
                    LastSuccessTaskDate != null &&
                    LastSuccessTaskDate.Equals(other.LastSuccessTaskDate)
                ) && 
                (
                    LastFailureTaskDate == other.LastFailureTaskDate ||
                    LastFailureTaskDate != null &&
                    LastFailureTaskDate.Equals(other.LastFailureTaskDate)
                ) && 
                (
                    LastTaskId == other.LastTaskId ||
                    LastTaskId != null &&
                    LastTaskId.Equals(other.LastTaskId)
                ) && 
                (
                    FailedTaskAttempts == other.FailedTaskAttempts ||
                    FailedTaskAttempts != null &&
                    FailedTaskAttempts.Equals(other.FailedTaskAttempts)
                ) && 
                (
                    NextTaskDate == other.NextTaskDate ||
                    NextTaskDate != null &&
                    NextTaskDate.Equals(other.NextTaskDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TaskName != null)
                    hashCode = hashCode * 59 + TaskName.GetHashCode();
                    if (LastTaskDate != null)
                    hashCode = hashCode * 59 + LastTaskDate.GetHashCode();
                    if (LastSuccessTaskDate != null)
                    hashCode = hashCode * 59 + LastSuccessTaskDate.GetHashCode();
                    if (LastFailureTaskDate != null)
                    hashCode = hashCode * 59 + LastFailureTaskDate.GetHashCode();
                    if (LastTaskId != null)
                    hashCode = hashCode * 59 + LastTaskId.GetHashCode();
                    if (FailedTaskAttempts != null)
                    hashCode = hashCode * 59 + FailedTaskAttempts.GetHashCode();
                    if (NextTaskDate != null)
                    hashCode = hashCode * 59 + NextTaskDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlatformTaskInformation left, PlatformTaskInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlatformTaskInformation left, PlatformTaskInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
