/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Parameters for testing asset discovery rules
    /// </summary>
    [DataContract]
    public partial class TestAssetDiscoveryParameters : IEquatable<TestAssetDiscoveryParameters>
    { 
        /// <summary>
        /// Name of the discovery job to show in audit log
        /// </summary>
        /// <value>Name of the discovery job to show in audit log</value>
        [Required]

        [DataMember(Name="AssetDiscoveryJobName")]
        public string AssetDiscoveryJobName { get; set; }

        /// <summary>
        /// Gets or Sets DiscoveryType
        /// </summary>
        [Required]

        [DataMember(Name="DiscoveryType")]
        public AssetDiscoveryType DiscoveryType { get; set; }

        /// <summary>
        /// Name of the discovery rule to show in audit log
        /// </summary>
        /// <value>Name of the discovery rule to show in audit log</value>
        [Required]

        [DataMember(Name="RuleName")]
        public string RuleName { get; set; }

        /// <summary>
        /// Discovery conditions to test
        /// </summary>
        /// <value>Discovery conditions to test</value>

        [DataMember(Name="Conditions")]
        public List<AssetDiscoveryCondition> Conditions { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryDiscoveryProperties
        /// </summary>

        [DataMember(Name="DirectoryDiscoveryProperties")]
        public DirectoryDiscoveryProperties DirectoryDiscoveryProperties { get; set; }

        /// <summary>
        /// Gets or Sets NetworkDiscoveryProperties
        /// </summary>

        [DataMember(Name="NetworkDiscoveryProperties")]
        public NetworkDiscoveryProperties NetworkDiscoveryProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestAssetDiscoveryParameters {\n");
            sb.Append("  AssetDiscoveryJobName: ").Append(AssetDiscoveryJobName).Append("\n");
            sb.Append("  DiscoveryType: ").Append(DiscoveryType).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  DirectoryDiscoveryProperties: ").Append(DirectoryDiscoveryProperties).Append("\n");
            sb.Append("  NetworkDiscoveryProperties: ").Append(NetworkDiscoveryProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TestAssetDiscoveryParameters)obj);
        }

        /// <summary>
        /// Returns true if TestAssetDiscoveryParameters instances are equal
        /// </summary>
        /// <param name="other">Instance of TestAssetDiscoveryParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestAssetDiscoveryParameters other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssetDiscoveryJobName == other.AssetDiscoveryJobName ||
                    AssetDiscoveryJobName != null &&
                    AssetDiscoveryJobName.Equals(other.AssetDiscoveryJobName)
                ) && 
                (
                    DiscoveryType == other.DiscoveryType ||
                    DiscoveryType != null &&
                    DiscoveryType.Equals(other.DiscoveryType)
                ) && 
                (
                    RuleName == other.RuleName ||
                    RuleName != null &&
                    RuleName.Equals(other.RuleName)
                ) && 
                (
                    Conditions == other.Conditions ||
                    Conditions != null &&
                    Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    DirectoryDiscoveryProperties == other.DirectoryDiscoveryProperties ||
                    DirectoryDiscoveryProperties != null &&
                    DirectoryDiscoveryProperties.Equals(other.DirectoryDiscoveryProperties)
                ) && 
                (
                    NetworkDiscoveryProperties == other.NetworkDiscoveryProperties ||
                    NetworkDiscoveryProperties != null &&
                    NetworkDiscoveryProperties.Equals(other.NetworkDiscoveryProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssetDiscoveryJobName != null)
                    hashCode = hashCode * 59 + AssetDiscoveryJobName.GetHashCode();
                    if (DiscoveryType != null)
                    hashCode = hashCode * 59 + DiscoveryType.GetHashCode();
                    if (RuleName != null)
                    hashCode = hashCode * 59 + RuleName.GetHashCode();
                    if (Conditions != null)
                    hashCode = hashCode * 59 + Conditions.GetHashCode();
                    if (DirectoryDiscoveryProperties != null)
                    hashCode = hashCode * 59 + DirectoryDiscoveryProperties.GetHashCode();
                    if (NetworkDiscoveryProperties != null)
                    hashCode = hashCode * 59 + NetworkDiscoveryProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TestAssetDiscoveryParameters left, TestAssetDiscoveryParameters right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TestAssetDiscoveryParameters left, TestAssetDiscoveryParameters right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
