/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Access Request Activity Log
    /// </summary>
    [DataContract]
    public partial class AccessRequestActivityLog : IEquatable<AccessRequestActivityLog>
    { 
        /// <summary>
        /// Database ID of this log entry
        /// </summary>
        /// <value>Database ID of this log entry</value>

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// Time the change occurred (Read-only)
        /// </summary>
        /// <value>Time the change occurred (Read-only)</value>

        [DataMember(Name="LogTime")]
        public DateTime? LogTime { get; set; }

        /// <summary>
        /// Unique id of the user that caused the change (Read-only).
        /// </summary>
        /// <value>Unique id of the user that caused the change (Read-only).</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserProperties
        /// </summary>

        [DataMember(Name="UserProperties")]
        public UserLogProperties UserProperties { get; set; }

        /// <summary>
        /// Id of appliance
        /// </summary>
        /// <value>Id of appliance</value>

        [DataMember(Name="ApplianceId")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Name of appliance
        /// </summary>
        /// <value>Name of appliance</value>

        [DataMember(Name="ApplianceName")]
        public string ApplianceName { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>

        [DataMember(Name="EventName")]
        public EventName EventName { get; set; }

        /// <summary>
        /// Name of the event
        /// </summary>
        /// <value>Name of the event</value>

        [DataMember(Name="EventDisplayName")]
        public string EventDisplayName { get; set; }

        /// <summary>
        /// ID of the access request
        /// </summary>
        /// <value>ID of the access request</value>

        [DataMember(Name="RequestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// ID of the requester
        /// </summary>
        /// <value>ID of the requester</value>

        [DataMember(Name="RequesterId")]
        public int? RequesterId { get; set; }

        /// <summary>
        /// Name of the requester
        /// </summary>
        /// <value>Name of the requester</value>

        [DataMember(Name="RequesterName")]
        public string RequesterName { get; set; }

        /// <summary>
        /// ID of the broker
        /// </summary>
        /// <value>ID of the broker</value>

        [DataMember(Name="BrokerId")]
        public int? BrokerId { get; set; }

        /// <summary>
        /// Name of the broker
        /// </summary>
        /// <value>Name of the broker</value>

        [DataMember(Name="BrokerName")]
        public string BrokerName { get; set; }

        /// <summary>
        /// ID of the account being requested
        /// </summary>
        /// <value>ID of the account being requested</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the account being requested
        /// </summary>
        /// <value>Name of the account being requested</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Account domain name
        /// </summary>
        /// <value>Account domain name</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// Id of the asset that has been requested access to
        /// </summary>
        /// <value>Id of the asset that has been requested access to</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the asset that has been requested access to
        /// </summary>
        /// <value>Name of the asset that has been requested access to</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Network address of the asset that has been requested access to
        /// </summary>
        /// <value>Network address of the asset that has been requested access to</value>

        [DataMember(Name="AssetNetworkAddress")]
        public string AssetNetworkAddress { get; set; }

        /// <summary>
        /// Database ID of the partition the asset belongs to
        /// </summary>
        /// <value>Database ID of the partition the asset belongs to</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name  of the partition the asset belongs to
        /// </summary>
        /// <value>Name  of the partition the asset belongs to</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Id of the session that was initialized (if applicable)
        /// </summary>
        /// <value>Id of the session that was initialized (if applicable)</value>

        [DataMember(Name="SessionId")]
        public int? SessionId { get; set; }

        /// <summary>
        /// Time when request was submitted
        /// </summary>
        /// <value>Time when request was submitted</value>

        [DataMember(Name="SubmittedDate")]
        public DateTime? SubmittedDate { get; set; }

        /// <summary>
        /// Gets or Sets OldState
        /// </summary>

        [DataMember(Name="OldState")]
        public AccessRequestState OldState { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>

        [DataMember(Name="Action")]
        public AccessRequestStateAction Action { get; set; }

        /// <summary>
        /// Gets or Sets NewState
        /// </summary>

        [DataMember(Name="NewState")]
        public AccessRequestState NewState { get; set; }

        /// <summary>
        /// Comment supplied with action
        /// </summary>
        /// <value>Comment supplied with action</value>

        [DataMember(Name="Comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets RecordingProperties
        /// </summary>

        [DataMember(Name="RecordingProperties")]
        public SessionRecordingProperties RecordingProperties { get; set; }

        /// <summary>
        /// True if the appliance was in offline workflow mode at the time of the log
        /// </summary>
        /// <value>True if the appliance was in offline workflow mode at the time of the log</value>

        [DataMember(Name="OfflineWorkflow")]
        public bool? OfflineWorkflow { get; set; }

        /// <summary>
        /// Request reason code
        /// </summary>
        /// <value>Request reason code</value>

        [DataMember(Name="ReasonCode")]
        public int? ReasonCode { get; set; }

        /// <summary>
        /// Request reason name
        /// </summary>
        /// <value>Request reason name</value>

        [DataMember(Name="ReasonName")]
        public string ReasonName { get; set; }

        /// <summary>
        /// Request reason comment
        /// </summary>
        /// <value>Request reason comment</value>

        [DataMember(Name="ReasonComment")]
        public string ReasonComment { get; set; }

        /// <summary>
        /// Request ticket number
        /// </summary>
        /// <value>Request ticket number</value>

        [DataMember(Name="TicketNumber")]
        public string TicketNumber { get; set; }

        /// <summary>
        /// If request was for emergency
        /// </summary>
        /// <value>If request was for emergency</value>

        [DataMember(Name="IsEmergency")]
        public bool? IsEmergency { get; set; }

        /// <summary>
        /// Session node IpAddress that serves the session request.
        /// </summary>
        /// <value>Session node IpAddress that serves the session request.</value>

        [DataMember(Name="SessionSpsNodeIpAddress")]
        public string SessionSpsNodeIpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessRequestActivityLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LogTime: ").Append(LogTime).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserProperties: ").Append(UserProperties).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  ApplianceName: ").Append(ApplianceName).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventDisplayName: ").Append(EventDisplayName).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  RequesterId: ").Append(RequesterId).Append("\n");
            sb.Append("  RequesterName: ").Append(RequesterName).Append("\n");
            sb.Append("  BrokerId: ").Append(BrokerId).Append("\n");
            sb.Append("  BrokerName: ").Append(BrokerName).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetNetworkAddress: ").Append(AssetNetworkAddress).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SubmittedDate: ").Append(SubmittedDate).Append("\n");
            sb.Append("  OldState: ").Append(OldState).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  NewState: ").Append(NewState).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  RecordingProperties: ").Append(RecordingProperties).Append("\n");
            sb.Append("  OfflineWorkflow: ").Append(OfflineWorkflow).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonName: ").Append(ReasonName).Append("\n");
            sb.Append("  ReasonComment: ").Append(ReasonComment).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  IsEmergency: ").Append(IsEmergency).Append("\n");
            sb.Append("  SessionSpsNodeIpAddress: ").Append(SessionSpsNodeIpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessRequestActivityLog)obj);
        }

        /// <summary>
        /// Returns true if AccessRequestActivityLog instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessRequestActivityLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessRequestActivityLog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LogTime == other.LogTime ||
                    LogTime != null &&
                    LogTime.Equals(other.LogTime)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserProperties == other.UserProperties ||
                    UserProperties != null &&
                    UserProperties.Equals(other.UserProperties)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    ApplianceName == other.ApplianceName ||
                    ApplianceName != null &&
                    ApplianceName.Equals(other.ApplianceName)
                ) && 
                (
                    EventName == other.EventName ||
                    EventName != null &&
                    EventName.Equals(other.EventName)
                ) && 
                (
                    EventDisplayName == other.EventDisplayName ||
                    EventDisplayName != null &&
                    EventDisplayName.Equals(other.EventDisplayName)
                ) && 
                (
                    RequestId == other.RequestId ||
                    RequestId != null &&
                    RequestId.Equals(other.RequestId)
                ) && 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    RequesterId == other.RequesterId ||
                    RequesterId != null &&
                    RequesterId.Equals(other.RequesterId)
                ) && 
                (
                    RequesterName == other.RequesterName ||
                    RequesterName != null &&
                    RequesterName.Equals(other.RequesterName)
                ) && 
                (
                    BrokerId == other.BrokerId ||
                    BrokerId != null &&
                    BrokerId.Equals(other.BrokerId)
                ) && 
                (
                    BrokerName == other.BrokerName ||
                    BrokerName != null &&
                    BrokerName.Equals(other.BrokerName)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetNetworkAddress == other.AssetNetworkAddress ||
                    AssetNetworkAddress != null &&
                    AssetNetworkAddress.Equals(other.AssetNetworkAddress)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                ) && 
                (
                    SubmittedDate == other.SubmittedDate ||
                    SubmittedDate != null &&
                    SubmittedDate.Equals(other.SubmittedDate)
                ) && 
                (
                    OldState == other.OldState ||
                    OldState != null &&
                    OldState.Equals(other.OldState)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    NewState == other.NewState ||
                    NewState != null &&
                    NewState.Equals(other.NewState)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    RecordingProperties == other.RecordingProperties ||
                    RecordingProperties != null &&
                    RecordingProperties.Equals(other.RecordingProperties)
                ) && 
                (
                    OfflineWorkflow == other.OfflineWorkflow ||
                    OfflineWorkflow != null &&
                    OfflineWorkflow.Equals(other.OfflineWorkflow)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    ReasonName == other.ReasonName ||
                    ReasonName != null &&
                    ReasonName.Equals(other.ReasonName)
                ) && 
                (
                    ReasonComment == other.ReasonComment ||
                    ReasonComment != null &&
                    ReasonComment.Equals(other.ReasonComment)
                ) && 
                (
                    TicketNumber == other.TicketNumber ||
                    TicketNumber != null &&
                    TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    IsEmergency == other.IsEmergency ||
                    IsEmergency != null &&
                    IsEmergency.Equals(other.IsEmergency)
                ) && 
                (
                    SessionSpsNodeIpAddress == other.SessionSpsNodeIpAddress ||
                    SessionSpsNodeIpAddress != null &&
                    SessionSpsNodeIpAddress.Equals(other.SessionSpsNodeIpAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LogTime != null)
                    hashCode = hashCode * 59 + LogTime.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserProperties != null)
                    hashCode = hashCode * 59 + UserProperties.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (ApplianceName != null)
                    hashCode = hashCode * 59 + ApplianceName.GetHashCode();
                    if (EventName != null)
                    hashCode = hashCode * 59 + EventName.GetHashCode();
                    if (EventDisplayName != null)
                    hashCode = hashCode * 59 + EventDisplayName.GetHashCode();
                    if (RequestId != null)
                    hashCode = hashCode * 59 + RequestId.GetHashCode();
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (RequesterId != null)
                    hashCode = hashCode * 59 + RequesterId.GetHashCode();
                    if (RequesterName != null)
                    hashCode = hashCode * 59 + RequesterName.GetHashCode();
                    if (BrokerId != null)
                    hashCode = hashCode * 59 + BrokerId.GetHashCode();
                    if (BrokerName != null)
                    hashCode = hashCode * 59 + BrokerName.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetNetworkAddress != null)
                    hashCode = hashCode * 59 + AssetNetworkAddress.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                    if (SubmittedDate != null)
                    hashCode = hashCode * 59 + SubmittedDate.GetHashCode();
                    if (OldState != null)
                    hashCode = hashCode * 59 + OldState.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (NewState != null)
                    hashCode = hashCode * 59 + NewState.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (RecordingProperties != null)
                    hashCode = hashCode * 59 + RecordingProperties.GetHashCode();
                    if (OfflineWorkflow != null)
                    hashCode = hashCode * 59 + OfflineWorkflow.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (ReasonName != null)
                    hashCode = hashCode * 59 + ReasonName.GetHashCode();
                    if (ReasonComment != null)
                    hashCode = hashCode * 59 + ReasonComment.GetHashCode();
                    if (TicketNumber != null)
                    hashCode = hashCode * 59 + TicketNumber.GetHashCode();
                    if (IsEmergency != null)
                    hashCode = hashCode * 59 + IsEmergency.GetHashCode();
                    if (SessionSpsNodeIpAddress != null)
                    hashCode = hashCode * 59 + SessionSpsNodeIpAddress.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessRequestActivityLog left, AccessRequestActivityLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessRequestActivityLog left, AccessRequestActivityLog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
