/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a time interval
    /// </summary>
    [DataContract]
    public partial class TimeInterval : IEquatable<TimeInterval>
    { 
        /// <summary>
        /// The days component of this time interval
        /// </summary>
        /// <value>The days component of this time interval</value>

        [DataMember(Name="Days")]
        public int? Days { get; set; }

        /// <summary>
        /// The hours component of this time interval
        /// </summary>
        /// <value>The hours component of this time interval</value>

        [DataMember(Name="Hours")]
        public int? Hours { get; set; }

        /// <summary>
        /// The milliseconds component of this time interval
        /// </summary>
        /// <value>The milliseconds component of this time interval</value>

        [DataMember(Name="Milliseconds")]
        public int? Milliseconds { get; set; }

        /// <summary>
        /// The minutes component of this time interval
        /// </summary>
        /// <value>The minutes component of this time interval</value>

        [DataMember(Name="Minutes")]
        public int? Minutes { get; set; }

        /// <summary>
        /// The seconds component of this time interval
        /// </summary>
        /// <value>The seconds component of this time interval</value>

        [DataMember(Name="Seconds")]
        public int? Seconds { get; set; }

        /// <summary>
        /// The value of this time interval in whole and fractional milliseconds
        /// </summary>
        /// <value>The value of this time interval in whole and fractional milliseconds</value>

        [DataMember(Name="TotalMilliseconds")]
        public double? TotalMilliseconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeInterval {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Milliseconds: ").Append(Milliseconds).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  TotalMilliseconds: ").Append(TotalMilliseconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TimeInterval)obj);
        }

        /// <summary>
        /// Returns true if TimeInterval instances are equal
        /// </summary>
        /// <param name="other">Instance of TimeInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeInterval other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Days == other.Days ||
                    Days != null &&
                    Days.Equals(other.Days)
                ) && 
                (
                    Hours == other.Hours ||
                    Hours != null &&
                    Hours.Equals(other.Hours)
                ) && 
                (
                    Milliseconds == other.Milliseconds ||
                    Milliseconds != null &&
                    Milliseconds.Equals(other.Milliseconds)
                ) && 
                (
                    Minutes == other.Minutes ||
                    Minutes != null &&
                    Minutes.Equals(other.Minutes)
                ) && 
                (
                    Seconds == other.Seconds ||
                    Seconds != null &&
                    Seconds.Equals(other.Seconds)
                ) && 
                (
                    TotalMilliseconds == other.TotalMilliseconds ||
                    TotalMilliseconds != null &&
                    TotalMilliseconds.Equals(other.TotalMilliseconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Days != null)
                    hashCode = hashCode * 59 + Days.GetHashCode();
                    if (Hours != null)
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                    if (Milliseconds != null)
                    hashCode = hashCode * 59 + Milliseconds.GetHashCode();
                    if (Minutes != null)
                    hashCode = hashCode * 59 + Minutes.GetHashCode();
                    if (Seconds != null)
                    hashCode = hashCode * 59 + Seconds.GetHashCode();
                    if (TotalMilliseconds != null)
                    hashCode = hashCode * 59 + TotalMilliseconds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TimeInterval left, TimeInterval right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TimeInterval left, TimeInterval right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
