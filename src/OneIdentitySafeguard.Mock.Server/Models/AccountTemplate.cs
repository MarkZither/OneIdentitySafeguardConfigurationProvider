/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountTemplate : IEquatable<AccountTemplate>
    { 
        /// <summary>
        /// Description of the account
        /// </summary>
        /// <value>Description of the account</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Id of a profile to be assigned to the newly managed account. If null then profile used to discover account will be used.
        /// </summary>
        /// <value>Id of a profile to be assigned to the newly managed account. If null then profile used to discover account will be used.</value>

        [DataMember(Name="ProfileId")]
        public int? ProfileId { get; set; }

        /// <summary>
        /// The name of the profile to be assigned to the newly managed account (Read-only)
        /// </summary>
        /// <value>The name of the profile to be assigned to the newly managed account (Read-only)</value>

        [DataMember(Name="ProfileName")]
        public string ProfileName { get; set; }

        /// <summary>
        /// Id of a SSH key profile to be assigned to the newly managed account. If null then profile used to discover account will be used.
        /// </summary>
        /// <value>Id of a SSH key profile to be assigned to the newly managed account. If null then profile used to discover account will be used.</value>

        [DataMember(Name="SshKeyProfileId")]
        public int? SshKeyProfileId { get; set; }

        /// <summary>
        /// The name of the SSH key profile to be assigned to the newly managed account (Read-only)
        /// </summary>
        /// <value>The name of the SSH key profile to be assigned to the newly managed account (Read-only)</value>

        [DataMember(Name="SshKeyProfileName")]
        public string SshKeyProfileName { get; set; }

        /// <summary>
        /// Allow password requests on the newly managed asset account to be released
        /// </summary>
        /// <value>Allow password requests on the newly managed asset account to be released</value>

        [DataMember(Name="AllowPasswordRelease")]
        public bool? AllowPasswordRelease { get; set; }

        /// <summary>
        /// Allow session requests on the newly managed asset account to be released
        /// </summary>
        /// <value>Allow session requests on the newly managed asset account to be released</value>

        [DataMember(Name="AllowSessionRelease")]
        public bool? AllowSessionRelease { get; set; }

        /// <summary>
        /// Allow SSH key requests on the newly managed asset account to be released
        /// </summary>
        /// <value>Allow SSH key requests on the newly managed asset account to be released</value>

        [DataMember(Name="AllowSshKeyRelease")]
        public bool? AllowSshKeyRelease { get; set; }

        /// <summary>
        /// Whether this account can be used as a service account for other assets (only valid for directory accounts)
        /// </summary>
        /// <value>Whether this account can be used as a service account for other assets (only valid for directory accounts)</value>

        [DataMember(Name="SharedServiceAccount")]
        public bool? SharedServiceAccount { get; set; }

        /// <summary>
        /// ID of the sync group to assign this account to. (Read-only)  NOTE: Sync group takes precedence over profile setting above. Profile will be explicitly set.  NOTE: Sync priority will be set to 0.
        /// </summary>
        /// <value>ID of the sync group to assign this account to. (Read-only)  NOTE: Sync group takes precedence over profile setting above. Profile will be explicitly set.  NOTE: Sync priority will be set to 0.</value>

        [DataMember(Name="SyncGroupId")]
        public int? SyncGroupId { get; set; }

        /// <summary>
        /// The name of the sync group to be assigned to the newly managed account (Read-only)
        /// </summary>
        /// <value>The name of the sync group to be assigned to the newly managed account (Read-only)</value>

        [DataMember(Name="SyncGroupName")]
        public string SyncGroupName { get; set; }

        /// <summary>
        /// The priority to assign to discovered accounts in the sync group
        /// </summary>
        /// <value>The priority to assign to discovered accounts in the sync group</value>

        [DataMember(Name="SyncGroupPriority")]
        public int? SyncGroupPriority { get; set; }

        /// <summary>
        /// ID of the SSH key sync group to assign this account to. (Read-only)  NOTE: SSH key Sync group takes precedence over SSH key profile setting above. Profile will be explicitly set.  NOTE: SSH key Sync priority will be set to 0.
        /// </summary>
        /// <value>ID of the SSH key sync group to assign this account to. (Read-only)  NOTE: SSH key Sync group takes precedence over SSH key profile setting above. Profile will be explicitly set.  NOTE: SSH key Sync priority will be set to 0.</value>

        [DataMember(Name="SshKeySyncGroupId")]
        public int? SshKeySyncGroupId { get; set; }

        /// <summary>
        /// The name of the SSH key sync group to be assigned to the newly managed account (Read-only)
        /// </summary>
        /// <value>The name of the SSH key sync group to be assigned to the newly managed account (Read-only)</value>

        [DataMember(Name="SshKeySyncGroupName")]
        public string SshKeySyncGroupName { get; set; }

        /// <summary>
        /// The priority to assign to discovered accounts in the SSH key sync group
        /// </summary>
        /// <value>The priority to assign to discovered accounts in the SSH key sync group</value>

        [DataMember(Name="SshKeySyncGroupPriority")]
        public int? SshKeySyncGroupPriority { get; set; }

        /// <summary>
        /// Whether the initial password of the account should be set
        /// </summary>
        /// <value>Whether the initial password of the account should be set</value>

        [DataMember(Name="SetInitialPassword")]
        public bool? SetInitialPassword { get; set; }

        /// <summary>
        /// The initial password to store for this account (Write-only)
        /// </summary>
        /// <value>The initial password to store for this account (Write-only)</value>

        [DataMember(Name="InitialPassword")]
        public string InitialPassword { get; set; }

        /// <summary>
        /// Whether an initial password value is set (Read-only)
        /// </summary>
        /// <value>Whether an initial password value is set (Read-only)</value>

        [DataMember(Name="HasInitialPassword")]
        public bool? HasInitialPassword { get; set; }

        /// <summary>
        /// Whether the initial SSH key of the account should be set
        /// </summary>
        /// <value>Whether the initial SSH key of the account should be set</value>

        [DataMember(Name="SetInitialSshKey")]
        public bool? SetInitialSshKey { get; set; }

        /// <summary>
        /// Gets or Sets InitialSshKey
        /// </summary>

        [DataMember(Name="InitialSshKey")]
        public SystemSshKey InitialSshKey { get; set; }

        /// <summary>
        /// Whether an initial SSH key value is set (Read-only)
        /// </summary>
        /// <value>Whether an initial SSH key value is set (Read-only)</value>

        [DataMember(Name="HasInitialSshKey")]
        public bool? HasInitialSshKey { get; set; }

        /// <summary>
        /// The tags to be associated with the newly managed account
        /// </summary>
        /// <value>The tags to be associated with the newly managed account</value>

        [DataMember(Name="Tags")]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTemplate {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  SshKeyProfileId: ").Append(SshKeyProfileId).Append("\n");
            sb.Append("  SshKeyProfileName: ").Append(SshKeyProfileName).Append("\n");
            sb.Append("  AllowPasswordRelease: ").Append(AllowPasswordRelease).Append("\n");
            sb.Append("  AllowSessionRelease: ").Append(AllowSessionRelease).Append("\n");
            sb.Append("  AllowSshKeyRelease: ").Append(AllowSshKeyRelease).Append("\n");
            sb.Append("  SharedServiceAccount: ").Append(SharedServiceAccount).Append("\n");
            sb.Append("  SyncGroupId: ").Append(SyncGroupId).Append("\n");
            sb.Append("  SyncGroupName: ").Append(SyncGroupName).Append("\n");
            sb.Append("  SyncGroupPriority: ").Append(SyncGroupPriority).Append("\n");
            sb.Append("  SshKeySyncGroupId: ").Append(SshKeySyncGroupId).Append("\n");
            sb.Append("  SshKeySyncGroupName: ").Append(SshKeySyncGroupName).Append("\n");
            sb.Append("  SshKeySyncGroupPriority: ").Append(SshKeySyncGroupPriority).Append("\n");
            sb.Append("  SetInitialPassword: ").Append(SetInitialPassword).Append("\n");
            sb.Append("  InitialPassword: ").Append(InitialPassword).Append("\n");
            sb.Append("  HasInitialPassword: ").Append(HasInitialPassword).Append("\n");
            sb.Append("  SetInitialSshKey: ").Append(SetInitialSshKey).Append("\n");
            sb.Append("  InitialSshKey: ").Append(InitialSshKey).Append("\n");
            sb.Append("  HasInitialSshKey: ").Append(HasInitialSshKey).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountTemplate)obj);
        }

        /// <summary>
        /// Returns true if AccountTemplate instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTemplate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ProfileId == other.ProfileId ||
                    ProfileId != null &&
                    ProfileId.Equals(other.ProfileId)
                ) && 
                (
                    ProfileName == other.ProfileName ||
                    ProfileName != null &&
                    ProfileName.Equals(other.ProfileName)
                ) && 
                (
                    SshKeyProfileId == other.SshKeyProfileId ||
                    SshKeyProfileId != null &&
                    SshKeyProfileId.Equals(other.SshKeyProfileId)
                ) && 
                (
                    SshKeyProfileName == other.SshKeyProfileName ||
                    SshKeyProfileName != null &&
                    SshKeyProfileName.Equals(other.SshKeyProfileName)
                ) && 
                (
                    AllowPasswordRelease == other.AllowPasswordRelease ||
                    AllowPasswordRelease != null &&
                    AllowPasswordRelease.Equals(other.AllowPasswordRelease)
                ) && 
                (
                    AllowSessionRelease == other.AllowSessionRelease ||
                    AllowSessionRelease != null &&
                    AllowSessionRelease.Equals(other.AllowSessionRelease)
                ) && 
                (
                    AllowSshKeyRelease == other.AllowSshKeyRelease ||
                    AllowSshKeyRelease != null &&
                    AllowSshKeyRelease.Equals(other.AllowSshKeyRelease)
                ) && 
                (
                    SharedServiceAccount == other.SharedServiceAccount ||
                    SharedServiceAccount != null &&
                    SharedServiceAccount.Equals(other.SharedServiceAccount)
                ) && 
                (
                    SyncGroupId == other.SyncGroupId ||
                    SyncGroupId != null &&
                    SyncGroupId.Equals(other.SyncGroupId)
                ) && 
                (
                    SyncGroupName == other.SyncGroupName ||
                    SyncGroupName != null &&
                    SyncGroupName.Equals(other.SyncGroupName)
                ) && 
                (
                    SyncGroupPriority == other.SyncGroupPriority ||
                    SyncGroupPriority != null &&
                    SyncGroupPriority.Equals(other.SyncGroupPriority)
                ) && 
                (
                    SshKeySyncGroupId == other.SshKeySyncGroupId ||
                    SshKeySyncGroupId != null &&
                    SshKeySyncGroupId.Equals(other.SshKeySyncGroupId)
                ) && 
                (
                    SshKeySyncGroupName == other.SshKeySyncGroupName ||
                    SshKeySyncGroupName != null &&
                    SshKeySyncGroupName.Equals(other.SshKeySyncGroupName)
                ) && 
                (
                    SshKeySyncGroupPriority == other.SshKeySyncGroupPriority ||
                    SshKeySyncGroupPriority != null &&
                    SshKeySyncGroupPriority.Equals(other.SshKeySyncGroupPriority)
                ) && 
                (
                    SetInitialPassword == other.SetInitialPassword ||
                    SetInitialPassword != null &&
                    SetInitialPassword.Equals(other.SetInitialPassword)
                ) && 
                (
                    InitialPassword == other.InitialPassword ||
                    InitialPassword != null &&
                    InitialPassword.Equals(other.InitialPassword)
                ) && 
                (
                    HasInitialPassword == other.HasInitialPassword ||
                    HasInitialPassword != null &&
                    HasInitialPassword.Equals(other.HasInitialPassword)
                ) && 
                (
                    SetInitialSshKey == other.SetInitialSshKey ||
                    SetInitialSshKey != null &&
                    SetInitialSshKey.Equals(other.SetInitialSshKey)
                ) && 
                (
                    InitialSshKey == other.InitialSshKey ||
                    InitialSshKey != null &&
                    InitialSshKey.Equals(other.InitialSshKey)
                ) && 
                (
                    HasInitialSshKey == other.HasInitialSshKey ||
                    HasInitialSshKey != null &&
                    HasInitialSshKey.Equals(other.HasInitialSshKey)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ProfileId != null)
                    hashCode = hashCode * 59 + ProfileId.GetHashCode();
                    if (ProfileName != null)
                    hashCode = hashCode * 59 + ProfileName.GetHashCode();
                    if (SshKeyProfileId != null)
                    hashCode = hashCode * 59 + SshKeyProfileId.GetHashCode();
                    if (SshKeyProfileName != null)
                    hashCode = hashCode * 59 + SshKeyProfileName.GetHashCode();
                    if (AllowPasswordRelease != null)
                    hashCode = hashCode * 59 + AllowPasswordRelease.GetHashCode();
                    if (AllowSessionRelease != null)
                    hashCode = hashCode * 59 + AllowSessionRelease.GetHashCode();
                    if (AllowSshKeyRelease != null)
                    hashCode = hashCode * 59 + AllowSshKeyRelease.GetHashCode();
                    if (SharedServiceAccount != null)
                    hashCode = hashCode * 59 + SharedServiceAccount.GetHashCode();
                    if (SyncGroupId != null)
                    hashCode = hashCode * 59 + SyncGroupId.GetHashCode();
                    if (SyncGroupName != null)
                    hashCode = hashCode * 59 + SyncGroupName.GetHashCode();
                    if (SyncGroupPriority != null)
                    hashCode = hashCode * 59 + SyncGroupPriority.GetHashCode();
                    if (SshKeySyncGroupId != null)
                    hashCode = hashCode * 59 + SshKeySyncGroupId.GetHashCode();
                    if (SshKeySyncGroupName != null)
                    hashCode = hashCode * 59 + SshKeySyncGroupName.GetHashCode();
                    if (SshKeySyncGroupPriority != null)
                    hashCode = hashCode * 59 + SshKeySyncGroupPriority.GetHashCode();
                    if (SetInitialPassword != null)
                    hashCode = hashCode * 59 + SetInitialPassword.GetHashCode();
                    if (InitialPassword != null)
                    hashCode = hashCode * 59 + InitialPassword.GetHashCode();
                    if (HasInitialPassword != null)
                    hashCode = hashCode * 59 + HasInitialPassword.GetHashCode();
                    if (SetInitialSshKey != null)
                    hashCode = hashCode * 59 + SetInitialSshKey.GetHashCode();
                    if (InitialSshKey != null)
                    hashCode = hashCode * 59 + InitialSshKey.GetHashCode();
                    if (HasInitialSshKey != null)
                    hashCode = hashCode * 59 + HasInitialSshKey.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountTemplate left, AccountTemplate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountTemplate left, AccountTemplate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
