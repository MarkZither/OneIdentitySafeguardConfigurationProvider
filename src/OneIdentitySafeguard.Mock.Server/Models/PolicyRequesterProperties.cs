/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents settings for requesting asset/accounts
    /// </summary>
    [DataContract]
    public partial class PolicyRequesterProperties : IEquatable<PolicyRequesterProperties>
    { 
        /// <summary>
        /// The default duration (days) a request may be available. Only needed  when AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.
        /// </summary>
        /// <value>The default duration (days) a request may be available. Only needed  when AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.</value>

        [Range(0, 31)]
        [DataMember(Name="DefaultReleaseDurationDays")]
        public int? DefaultReleaseDurationDays { get; set; }

        /// <summary>
        /// The default duration (hours) a request may be available. Only needed  when AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.
        /// </summary>
        /// <value>The default duration (hours) a request may be available. Only needed  when AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.</value>

        [Range(0, 23)]
        [DataMember(Name="DefaultReleaseDurationHours")]
        public int? DefaultReleaseDurationHours { get; set; }

        /// <summary>
        /// The default duration (minutes) a request may be available. Only needed  when AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.
        /// </summary>
        /// <value>The default duration (minutes) a request may be available. Only needed  when AllowCustomDuration is true. DefaultReleaseDuration must be less than 31 days.</value>

        [Range(0, 59)]
        [DataMember(Name="DefaultReleaseDurationMinutes")]
        public int? DefaultReleaseDurationMinutes { get; set; }

        /// <summary>
        /// The maximum duration (days) a request may be available. Only needed  when AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.
        /// </summary>
        /// <value>The maximum duration (days) a request may be available. Only needed  when AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.</value>

        [Range(0, 31)]
        [DataMember(Name="MaximumReleaseDurationDays")]
        public int? MaximumReleaseDurationDays { get; set; }

        /// <summary>
        /// The maximum duration (hours) a request may be available. Only needed  when AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.
        /// </summary>
        /// <value>The maximum duration (hours) a request may be available. Only needed  when AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.</value>

        [Range(0, 23)]
        [DataMember(Name="MaximumReleaseDurationHours")]
        public int? MaximumReleaseDurationHours { get; set; }

        /// <summary>
        /// The maximum duration (minutes) a request may be available. Only needed  when AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.
        /// </summary>
        /// <value>The maximum duration (minutes) a request may be available. Only needed  when AllowCustomDuration is true. MaximumReleaseDuration must be less than 31 days.</value>

        [Range(0, 59)]
        [DataMember(Name="MaximumReleaseDurationMinutes")]
        public int? MaximumReleaseDurationMinutes { get; set; }

        /// <summary>
        /// Whether to allow the release duration to be modified during a   access request.
        /// </summary>
        /// <value>Whether to allow the release duration to be modified during a   access request.</value>

        [DataMember(Name="AllowCustomDuration")]
        public bool? AllowCustomDuration { get; set; }

        /// <summary>
        /// A reason code is required before a access request can be made.
        /// </summary>
        /// <value>A reason code is required before a access request can be made.</value>

        [DataMember(Name="RequireReasonCode")]
        public bool? RequireReasonCode { get; set; }

        /// <summary>
        /// A reason comment is required before a access request can be made.
        /// </summary>
        /// <value>A reason comment is required before a access request can be made.</value>

        [DataMember(Name="RequireReasonComment")]
        public bool? RequireReasonComment { get; set; }

        /// <summary>
        /// Whether a service ticket is required for access requests
        /// </summary>
        /// <value>Whether a service ticket is required for access requests</value>

        [DataMember(Name="RequireServiceTicket")]
        public bool? RequireServiceTicket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyRequesterProperties {\n");
            sb.Append("  DefaultReleaseDurationDays: ").Append(DefaultReleaseDurationDays).Append("\n");
            sb.Append("  DefaultReleaseDurationHours: ").Append(DefaultReleaseDurationHours).Append("\n");
            sb.Append("  DefaultReleaseDurationMinutes: ").Append(DefaultReleaseDurationMinutes).Append("\n");
            sb.Append("  MaximumReleaseDurationDays: ").Append(MaximumReleaseDurationDays).Append("\n");
            sb.Append("  MaximumReleaseDurationHours: ").Append(MaximumReleaseDurationHours).Append("\n");
            sb.Append("  MaximumReleaseDurationMinutes: ").Append(MaximumReleaseDurationMinutes).Append("\n");
            sb.Append("  AllowCustomDuration: ").Append(AllowCustomDuration).Append("\n");
            sb.Append("  RequireReasonCode: ").Append(RequireReasonCode).Append("\n");
            sb.Append("  RequireReasonComment: ").Append(RequireReasonComment).Append("\n");
            sb.Append("  RequireServiceTicket: ").Append(RequireServiceTicket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicyRequesterProperties)obj);
        }

        /// <summary>
        /// Returns true if PolicyRequesterProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicyRequesterProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyRequesterProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DefaultReleaseDurationDays == other.DefaultReleaseDurationDays ||
                    DefaultReleaseDurationDays != null &&
                    DefaultReleaseDurationDays.Equals(other.DefaultReleaseDurationDays)
                ) && 
                (
                    DefaultReleaseDurationHours == other.DefaultReleaseDurationHours ||
                    DefaultReleaseDurationHours != null &&
                    DefaultReleaseDurationHours.Equals(other.DefaultReleaseDurationHours)
                ) && 
                (
                    DefaultReleaseDurationMinutes == other.DefaultReleaseDurationMinutes ||
                    DefaultReleaseDurationMinutes != null &&
                    DefaultReleaseDurationMinutes.Equals(other.DefaultReleaseDurationMinutes)
                ) && 
                (
                    MaximumReleaseDurationDays == other.MaximumReleaseDurationDays ||
                    MaximumReleaseDurationDays != null &&
                    MaximumReleaseDurationDays.Equals(other.MaximumReleaseDurationDays)
                ) && 
                (
                    MaximumReleaseDurationHours == other.MaximumReleaseDurationHours ||
                    MaximumReleaseDurationHours != null &&
                    MaximumReleaseDurationHours.Equals(other.MaximumReleaseDurationHours)
                ) && 
                (
                    MaximumReleaseDurationMinutes == other.MaximumReleaseDurationMinutes ||
                    MaximumReleaseDurationMinutes != null &&
                    MaximumReleaseDurationMinutes.Equals(other.MaximumReleaseDurationMinutes)
                ) && 
                (
                    AllowCustomDuration == other.AllowCustomDuration ||
                    AllowCustomDuration != null &&
                    AllowCustomDuration.Equals(other.AllowCustomDuration)
                ) && 
                (
                    RequireReasonCode == other.RequireReasonCode ||
                    RequireReasonCode != null &&
                    RequireReasonCode.Equals(other.RequireReasonCode)
                ) && 
                (
                    RequireReasonComment == other.RequireReasonComment ||
                    RequireReasonComment != null &&
                    RequireReasonComment.Equals(other.RequireReasonComment)
                ) && 
                (
                    RequireServiceTicket == other.RequireServiceTicket ||
                    RequireServiceTicket != null &&
                    RequireServiceTicket.Equals(other.RequireServiceTicket)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DefaultReleaseDurationDays != null)
                    hashCode = hashCode * 59 + DefaultReleaseDurationDays.GetHashCode();
                    if (DefaultReleaseDurationHours != null)
                    hashCode = hashCode * 59 + DefaultReleaseDurationHours.GetHashCode();
                    if (DefaultReleaseDurationMinutes != null)
                    hashCode = hashCode * 59 + DefaultReleaseDurationMinutes.GetHashCode();
                    if (MaximumReleaseDurationDays != null)
                    hashCode = hashCode * 59 + MaximumReleaseDurationDays.GetHashCode();
                    if (MaximumReleaseDurationHours != null)
                    hashCode = hashCode * 59 + MaximumReleaseDurationHours.GetHashCode();
                    if (MaximumReleaseDurationMinutes != null)
                    hashCode = hashCode * 59 + MaximumReleaseDurationMinutes.GetHashCode();
                    if (AllowCustomDuration != null)
                    hashCode = hashCode * 59 + AllowCustomDuration.GetHashCode();
                    if (RequireReasonCode != null)
                    hashCode = hashCode * 59 + RequireReasonCode.GetHashCode();
                    if (RequireReasonComment != null)
                    hashCode = hashCode * 59 + RequireReasonComment.GetHashCode();
                    if (RequireServiceTicket != null)
                    hashCode = hashCode * 59 + RequireServiceTicket.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicyRequesterProperties left, PolicyRequesterProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicyRequesterProperties left, PolicyRequesterProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
