/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StarlingRegisteredConnector : IEquatable<StarlingRegisteredConnector>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredConnectorId
        /// </summary>

        [DataMember(Name="RegisteredConnectorId")]
        public string RegisteredConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredConnectorDisplayName
        /// </summary>

        [DataMember(Name="RegisteredConnectorDisplayName")]
        public string RegisteredConnectorDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>

        [DataMember(Name="DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets StarlingConnectorId
        /// </summary>

        [DataMember(Name="StarlingConnectorId")]
        public string StarlingConnectorId { get; set; }

        /// <summary>
        /// Gets or Sets StarlingConnectorVersion
        /// </summary>

        [DataMember(Name="StarlingConnectorVersion")]
        public string StarlingConnectorVersion { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>

        [DataMember(Name="Platform")]
        public AssetPlatform Platform { get; set; }

        /// <summary>
        /// Gets or Sets VisibleToAllPartitions
        /// </summary>

        [DataMember(Name="VisibleToAllPartitions")]
        public bool? VisibleToAllPartitions { get; set; }

        /// <summary>
        /// Gets or Sets VisibleToPartitions
        /// </summary>

        [DataMember(Name="VisibleToPartitions")]
        public List<AssetPartition> VisibleToPartitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StarlingRegisteredConnector {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RegisteredConnectorId: ").Append(RegisteredConnectorId).Append("\n");
            sb.Append("  RegisteredConnectorDisplayName: ").Append(RegisteredConnectorDisplayName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  StarlingConnectorId: ").Append(StarlingConnectorId).Append("\n");
            sb.Append("  StarlingConnectorVersion: ").Append(StarlingConnectorVersion).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  VisibleToAllPartitions: ").Append(VisibleToAllPartitions).Append("\n");
            sb.Append("  VisibleToPartitions: ").Append(VisibleToPartitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StarlingRegisteredConnector)obj);
        }

        /// <summary>
        /// Returns true if StarlingRegisteredConnector instances are equal
        /// </summary>
        /// <param name="other">Instance of StarlingRegisteredConnector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StarlingRegisteredConnector other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    RegisteredConnectorId == other.RegisteredConnectorId ||
                    RegisteredConnectorId != null &&
                    RegisteredConnectorId.Equals(other.RegisteredConnectorId)
                ) && 
                (
                    RegisteredConnectorDisplayName == other.RegisteredConnectorDisplayName ||
                    RegisteredConnectorDisplayName != null &&
                    RegisteredConnectorDisplayName.Equals(other.RegisteredConnectorDisplayName)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    StarlingConnectorId == other.StarlingConnectorId ||
                    StarlingConnectorId != null &&
                    StarlingConnectorId.Equals(other.StarlingConnectorId)
                ) && 
                (
                    StarlingConnectorVersion == other.StarlingConnectorVersion ||
                    StarlingConnectorVersion != null &&
                    StarlingConnectorVersion.Equals(other.StarlingConnectorVersion)
                ) && 
                (
                    Platform == other.Platform ||
                    Platform != null &&
                    Platform.Equals(other.Platform)
                ) && 
                (
                    VisibleToAllPartitions == other.VisibleToAllPartitions ||
                    VisibleToAllPartitions != null &&
                    VisibleToAllPartitions.Equals(other.VisibleToAllPartitions)
                ) && 
                (
                    VisibleToPartitions == other.VisibleToPartitions ||
                    VisibleToPartitions != null &&
                    VisibleToPartitions.SequenceEqual(other.VisibleToPartitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (RegisteredConnectorId != null)
                    hashCode = hashCode * 59 + RegisteredConnectorId.GetHashCode();
                    if (RegisteredConnectorDisplayName != null)
                    hashCode = hashCode * 59 + RegisteredConnectorDisplayName.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (StarlingConnectorId != null)
                    hashCode = hashCode * 59 + StarlingConnectorId.GetHashCode();
                    if (StarlingConnectorVersion != null)
                    hashCode = hashCode * 59 + StarlingConnectorVersion.GetHashCode();
                    if (Platform != null)
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (VisibleToAllPartitions != null)
                    hashCode = hashCode * 59 + VisibleToAllPartitions.GetHashCode();
                    if (VisibleToPartitions != null)
                    hashCode = hashCode * 59 + VisibleToPartitions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StarlingRegisteredConnector left, StarlingRegisteredConnector right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StarlingRegisteredConnector left, StarlingRegisteredConnector right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
