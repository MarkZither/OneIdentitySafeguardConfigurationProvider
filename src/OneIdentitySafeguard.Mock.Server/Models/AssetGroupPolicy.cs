/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a policy that an asset group is assigned to
    /// </summary>
    [DataContract]
    public partial class AssetGroupPolicy : IEquatable<AssetGroupPolicy>
    { 
        /// <summary>
        /// Database ID of the policy
        /// </summary>
        /// <value>Database ID of the policy</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the policy
        /// </summary>
        /// <value>Name of the policy</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Database ID of the role the policy belongs to
        /// </summary>
        /// <value>Database ID of the role the policy belongs to</value>

        [DataMember(Name="RoleId")]
        public int? RoleId { get; set; }

        /// <summary>
        /// Name of the role the policy belongs to
        /// </summary>
        /// <value>Name of the role the policy belongs to</value>

        [DataMember(Name="RoleName")]
        public string RoleName { get; set; }

        /// <summary>
        /// Number of assets assigned to the policy
        /// </summary>
        /// <value>Number of assets assigned to the policy</value>

        [DataMember(Name="PolicyAssetCount")]
        public int? PolicyAssetCount { get; set; }

        /// <summary>
        /// Number of asset groups assigned to the policy
        /// </summary>
        /// <value>Number of asset groups assigned to the policy</value>

        [DataMember(Name="PolicyAssetGroupCount")]
        public int? PolicyAssetGroupCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetGroupPolicy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  PolicyAssetCount: ").Append(PolicyAssetCount).Append("\n");
            sb.Append("  PolicyAssetGroupCount: ").Append(PolicyAssetGroupCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetGroupPolicy)obj);
        }

        /// <summary>
        /// Returns true if AssetGroupPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetGroupPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetGroupPolicy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    RoleName == other.RoleName ||
                    RoleName != null &&
                    RoleName.Equals(other.RoleName)
                ) && 
                (
                    PolicyAssetCount == other.PolicyAssetCount ||
                    PolicyAssetCount != null &&
                    PolicyAssetCount.Equals(other.PolicyAssetCount)
                ) && 
                (
                    PolicyAssetGroupCount == other.PolicyAssetGroupCount ||
                    PolicyAssetGroupCount != null &&
                    PolicyAssetGroupCount.Equals(other.PolicyAssetGroupCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (RoleName != null)
                    hashCode = hashCode * 59 + RoleName.GetHashCode();
                    if (PolicyAssetCount != null)
                    hashCode = hashCode * 59 + PolicyAssetCount.GetHashCode();
                    if (PolicyAssetGroupCount != null)
                    hashCode = hashCode * 59 + PolicyAssetGroupCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetGroupPolicy left, AssetGroupPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetGroupPolicy left, AssetGroupPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
