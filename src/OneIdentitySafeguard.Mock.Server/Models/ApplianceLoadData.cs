/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents platform task data for an appliance
    /// </summary>
    [DataContract]
    public partial class ApplianceLoadData : IEquatable<ApplianceLoadData>
    { 
        /// <summary>
        /// Gets or Sets RecordDate
        /// </summary>

        [DataMember(Name="RecordDate")]
        public DateTime? RecordDate { get; set; }

        /// <summary>
        /// The appliance ID the load data is for
        /// </summary>
        /// <value>The appliance ID the load data is for</value>

        [DataMember(Name="ApplianceId")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Gets or Sets ApplianceState
        /// </summary>

        [DataMember(Name="ApplianceState")]
        public ApplianceState ApplianceState { get; set; }

        /// <summary>
        /// Score out of 100 of audit log database when status measurement was taken
        /// </summary>
        /// <value>Score out of 100 of audit log database when status measurement was taken</value>

        [DataMember(Name="AuditLogScore")]
        public int? AuditLogScore { get; set; }

        /// <summary>
        /// Score out of 100 of VPN latency when status measurement was taken
        /// </summary>
        /// <value>Score out of 100 of VPN latency when status measurement was taken</value>

        [DataMember(Name="VpnLatencyScore")]
        public int? VpnLatencyScore { get; set; }

        /// <summary>
        /// When this record information is expired
        /// </summary>
        /// <value>When this record information is expired</value>

        [DataMember(Name="TimeExpires")]
        public DateTime? TimeExpires { get; set; }

        /// <summary>
        /// Fitness score for this appliance
        /// </summary>
        /// <value>Fitness score for this appliance</value>

        [DataMember(Name="Score")]
        public double? Score { get; set; }

        /// <summary>
        /// The appliance name the load data is for
        /// </summary>
        /// <value>The appliance name the load data is for</value>

        [DataMember(Name="ApplianceName")]
        public string ApplianceName { get; set; }

        /// <summary>
        /// The maximum number of task threads allowed (see /service/appliance/Settings)
        /// </summary>
        /// <value>The maximum number of task threads allowed (see /service/appliance/Settings)</value>

        [DataMember(Name="MaxTaskThreads")]
        public int? MaxTaskThreads { get; set; }

        /// <summary>
        /// Total number of threads in use. One thread per unique asset.
        /// </summary>
        /// <value>Total number of threads in use. One thread per unique asset.</value>

        [DataMember(Name="TaskThreads")]
        public int? TaskThreads { get; set; }

        /// <summary>
        /// Number of tasks queued on this appliance
        /// </summary>
        /// <value>Number of tasks queued on this appliance</value>

        [DataMember(Name="QueuedTasks")]
        public int? QueuedTasks { get; set; }

        /// <summary>
        /// IP address of the appliance
        /// </summary>
        /// <value>IP address of the appliance</value>

        [DataMember(Name="ApplianceIpAddress")]
        public string ApplianceIpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplianceLoadData {\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  ApplianceState: ").Append(ApplianceState).Append("\n");
            sb.Append("  AuditLogScore: ").Append(AuditLogScore).Append("\n");
            sb.Append("  VpnLatencyScore: ").Append(VpnLatencyScore).Append("\n");
            sb.Append("  TimeExpires: ").Append(TimeExpires).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ApplianceName: ").Append(ApplianceName).Append("\n");
            sb.Append("  MaxTaskThreads: ").Append(MaxTaskThreads).Append("\n");
            sb.Append("  TaskThreads: ").Append(TaskThreads).Append("\n");
            sb.Append("  QueuedTasks: ").Append(QueuedTasks).Append("\n");
            sb.Append("  ApplianceIpAddress: ").Append(ApplianceIpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplianceLoadData)obj);
        }

        /// <summary>
        /// Returns true if ApplianceLoadData instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplianceLoadData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplianceLoadData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RecordDate == other.RecordDate ||
                    RecordDate != null &&
                    RecordDate.Equals(other.RecordDate)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    ApplianceState == other.ApplianceState ||
                    ApplianceState != null &&
                    ApplianceState.Equals(other.ApplianceState)
                ) && 
                (
                    AuditLogScore == other.AuditLogScore ||
                    AuditLogScore != null &&
                    AuditLogScore.Equals(other.AuditLogScore)
                ) && 
                (
                    VpnLatencyScore == other.VpnLatencyScore ||
                    VpnLatencyScore != null &&
                    VpnLatencyScore.Equals(other.VpnLatencyScore)
                ) && 
                (
                    TimeExpires == other.TimeExpires ||
                    TimeExpires != null &&
                    TimeExpires.Equals(other.TimeExpires)
                ) && 
                (
                    Score == other.Score ||
                    Score != null &&
                    Score.Equals(other.Score)
                ) && 
                (
                    ApplianceName == other.ApplianceName ||
                    ApplianceName != null &&
                    ApplianceName.Equals(other.ApplianceName)
                ) && 
                (
                    MaxTaskThreads == other.MaxTaskThreads ||
                    MaxTaskThreads != null &&
                    MaxTaskThreads.Equals(other.MaxTaskThreads)
                ) && 
                (
                    TaskThreads == other.TaskThreads ||
                    TaskThreads != null &&
                    TaskThreads.Equals(other.TaskThreads)
                ) && 
                (
                    QueuedTasks == other.QueuedTasks ||
                    QueuedTasks != null &&
                    QueuedTasks.Equals(other.QueuedTasks)
                ) && 
                (
                    ApplianceIpAddress == other.ApplianceIpAddress ||
                    ApplianceIpAddress != null &&
                    ApplianceIpAddress.Equals(other.ApplianceIpAddress)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RecordDate != null)
                    hashCode = hashCode * 59 + RecordDate.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (ApplianceState != null)
                    hashCode = hashCode * 59 + ApplianceState.GetHashCode();
                    if (AuditLogScore != null)
                    hashCode = hashCode * 59 + AuditLogScore.GetHashCode();
                    if (VpnLatencyScore != null)
                    hashCode = hashCode * 59 + VpnLatencyScore.GetHashCode();
                    if (TimeExpires != null)
                    hashCode = hashCode * 59 + TimeExpires.GetHashCode();
                    if (Score != null)
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (ApplianceName != null)
                    hashCode = hashCode * 59 + ApplianceName.GetHashCode();
                    if (MaxTaskThreads != null)
                    hashCode = hashCode * 59 + MaxTaskThreads.GetHashCode();
                    if (TaskThreads != null)
                    hashCode = hashCode * 59 + TaskThreads.GetHashCode();
                    if (QueuedTasks != null)
                    hashCode = hashCode * 59 + QueuedTasks.GetHashCode();
                    if (ApplianceIpAddress != null)
                    hashCode = hashCode * 59 + ApplianceIpAddress.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplianceLoadData left, ApplianceLoadData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplianceLoadData left, ApplianceLoadData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
