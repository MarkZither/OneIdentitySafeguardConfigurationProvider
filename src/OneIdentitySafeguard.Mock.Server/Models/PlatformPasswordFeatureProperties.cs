/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Settings related to password management features
    /// </summary>
    [DataContract]
    public partial class PlatformPasswordFeatureProperties : IEquatable<PlatformPasswordFeatureProperties>
    { 
        /// <summary>
        /// Whether this platform supports automated management of account passwords
        /// </summary>
        /// <value>Whether this platform supports automated management of account passwords</value>

        [DataMember(Name="SupportsPasswordManagement")]
        public bool? SupportsPasswordManagement { get; set; }

        /// <summary>
        /// Whether this platform supports automated management of account SSH keys
        /// </summary>
        /// <value>Whether this platform supports automated management of account SSH keys</value>

        [DataMember(Name="SupportsSshKeyManagement")]
        public bool? SupportsSshKeyManagement { get; set; }

        /// <summary>
        /// Whether this platform supports account discovery
        /// </summary>
        /// <value>Whether this platform supports account discovery</value>

        [DataMember(Name="SupportsAccountDiscovery")]
        public bool? SupportsAccountDiscovery { get; set; }

        /// <summary>
        /// Whether this platform allows local service/task updates of directory account passwords
        /// </summary>
        /// <value>Whether this platform allows local service/task updates of directory account passwords</value>

        [DataMember(Name="SupportsDependentSystemTasks")]
        public bool? SupportsDependentSystemTasks { get; set; }

        /// <summary>
        /// Whether this platform supports use of the current account password when managing passwords
        /// </summary>
        /// <value>Whether this platform supports use of the current account password when managing passwords</value>

        [DataMember(Name="AllowRequireCurrentPassword")]
        public bool? AllowRequireCurrentPassword { get; set; }

        /// <summary>
        /// Whether a network address is required for this platform
        /// </summary>
        /// <value>Whether a network address is required for this platform</value>

        [DataMember(Name="RequireNetworkAddress")]
        public bool? RequireNetworkAddress { get; set; }

        /// <summary>
        /// Whether this platform supports service discovery
        /// </summary>
        /// <value>Whether this platform supports service discovery</value>

        [DataMember(Name="SupportsServiceDiscovery")]
        public bool? SupportsServiceDiscovery { get; set; }

        /// <summary>
        /// Set to true if this platform is a directory that supports password hashing management itself (read-only)
        /// </summary>
        /// <value>Set to true if this platform is a directory that supports password hashing management itself (read-only)</value>

        [DataMember(Name="SupportsUsePasswordHash")]
        public bool? SupportsUsePasswordHash { get; set; }

        /// <summary>
        /// Whether this platform allows accounts to be suspended/restored (disabled/enabled)
        /// </summary>
        /// <value>Whether this platform allows accounts to be suspended/restored (disabled/enabled)</value>

        [DataMember(Name="SupportsSuspendRestoreAccount")]
        public bool? SupportsSuspendRestoreAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlatformPasswordFeatureProperties {\n");
            sb.Append("  SupportsPasswordManagement: ").Append(SupportsPasswordManagement).Append("\n");
            sb.Append("  SupportsSshKeyManagement: ").Append(SupportsSshKeyManagement).Append("\n");
            sb.Append("  SupportsAccountDiscovery: ").Append(SupportsAccountDiscovery).Append("\n");
            sb.Append("  SupportsDependentSystemTasks: ").Append(SupportsDependentSystemTasks).Append("\n");
            sb.Append("  AllowRequireCurrentPassword: ").Append(AllowRequireCurrentPassword).Append("\n");
            sb.Append("  RequireNetworkAddress: ").Append(RequireNetworkAddress).Append("\n");
            sb.Append("  SupportsServiceDiscovery: ").Append(SupportsServiceDiscovery).Append("\n");
            sb.Append("  SupportsUsePasswordHash: ").Append(SupportsUsePasswordHash).Append("\n");
            sb.Append("  SupportsSuspendRestoreAccount: ").Append(SupportsSuspendRestoreAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlatformPasswordFeatureProperties)obj);
        }

        /// <summary>
        /// Returns true if PlatformPasswordFeatureProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of PlatformPasswordFeatureProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformPasswordFeatureProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SupportsPasswordManagement == other.SupportsPasswordManagement ||
                    SupportsPasswordManagement != null &&
                    SupportsPasswordManagement.Equals(other.SupportsPasswordManagement)
                ) && 
                (
                    SupportsSshKeyManagement == other.SupportsSshKeyManagement ||
                    SupportsSshKeyManagement != null &&
                    SupportsSshKeyManagement.Equals(other.SupportsSshKeyManagement)
                ) && 
                (
                    SupportsAccountDiscovery == other.SupportsAccountDiscovery ||
                    SupportsAccountDiscovery != null &&
                    SupportsAccountDiscovery.Equals(other.SupportsAccountDiscovery)
                ) && 
                (
                    SupportsDependentSystemTasks == other.SupportsDependentSystemTasks ||
                    SupportsDependentSystemTasks != null &&
                    SupportsDependentSystemTasks.Equals(other.SupportsDependentSystemTasks)
                ) && 
                (
                    AllowRequireCurrentPassword == other.AllowRequireCurrentPassword ||
                    AllowRequireCurrentPassword != null &&
                    AllowRequireCurrentPassword.Equals(other.AllowRequireCurrentPassword)
                ) && 
                (
                    RequireNetworkAddress == other.RequireNetworkAddress ||
                    RequireNetworkAddress != null &&
                    RequireNetworkAddress.Equals(other.RequireNetworkAddress)
                ) && 
                (
                    SupportsServiceDiscovery == other.SupportsServiceDiscovery ||
                    SupportsServiceDiscovery != null &&
                    SupportsServiceDiscovery.Equals(other.SupportsServiceDiscovery)
                ) && 
                (
                    SupportsUsePasswordHash == other.SupportsUsePasswordHash ||
                    SupportsUsePasswordHash != null &&
                    SupportsUsePasswordHash.Equals(other.SupportsUsePasswordHash)
                ) && 
                (
                    SupportsSuspendRestoreAccount == other.SupportsSuspendRestoreAccount ||
                    SupportsSuspendRestoreAccount != null &&
                    SupportsSuspendRestoreAccount.Equals(other.SupportsSuspendRestoreAccount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SupportsPasswordManagement != null)
                    hashCode = hashCode * 59 + SupportsPasswordManagement.GetHashCode();
                    if (SupportsSshKeyManagement != null)
                    hashCode = hashCode * 59 + SupportsSshKeyManagement.GetHashCode();
                    if (SupportsAccountDiscovery != null)
                    hashCode = hashCode * 59 + SupportsAccountDiscovery.GetHashCode();
                    if (SupportsDependentSystemTasks != null)
                    hashCode = hashCode * 59 + SupportsDependentSystemTasks.GetHashCode();
                    if (AllowRequireCurrentPassword != null)
                    hashCode = hashCode * 59 + AllowRequireCurrentPassword.GetHashCode();
                    if (RequireNetworkAddress != null)
                    hashCode = hashCode * 59 + RequireNetworkAddress.GetHashCode();
                    if (SupportsServiceDiscovery != null)
                    hashCode = hashCode * 59 + SupportsServiceDiscovery.GetHashCode();
                    if (SupportsUsePasswordHash != null)
                    hashCode = hashCode * 59 + SupportsUsePasswordHash.GetHashCode();
                    if (SupportsSuspendRestoreAccount != null)
                    hashCode = hashCode * 59 + SupportsSuspendRestoreAccount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlatformPasswordFeatureProperties left, PlatformPasswordFeatureProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlatformPasswordFeatureProperties left, PlatformPasswordFeatureProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
