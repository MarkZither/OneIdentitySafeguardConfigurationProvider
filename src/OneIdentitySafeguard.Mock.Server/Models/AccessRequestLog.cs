/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Password Request Log
    /// </summary>
    [DataContract]
    public partial class AccessRequestLog : IEquatable<AccessRequestLog>
    { 
        /// <summary>
        /// Gets or Sets UserProperties
        /// </summary>

        [DataMember(Name="UserProperties")]
        public UserLogProperties UserProperties { get; set; }

        /// <summary>
        /// ID of the access request
        /// </summary>
        /// <value>ID of the access request</value>

        [DataMember(Name="RequestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// ID of the requester
        /// </summary>
        /// <value>ID of the requester</value>

        [DataMember(Name="RequesterId")]
        public int? RequesterId { get; set; }

        /// <summary>
        /// Name of the requester
        /// </summary>
        /// <value>Name of the requester</value>

        [DataMember(Name="RequesterName")]
        public string RequesterName { get; set; }

        /// <summary>
        /// Username of the requester
        /// </summary>
        /// <value>Username of the requester</value>

        [DataMember(Name="RequesterUsername")]
        public string RequesterUsername { get; set; }

        /// <summary>
        /// Email of the requester
        /// </summary>
        /// <value>Email of the requester</value>

        [DataMember(Name="RequesterEmail")]
        public string RequesterEmail { get; set; }

        /// <summary>
        /// Timezone of the requester
        /// </summary>
        /// <value>Timezone of the requester</value>

        [DataMember(Name="RequesterTimezone")]
        public string RequesterTimezone { get; set; }

        /// <summary>
        /// ID of the account that was requested
        /// </summary>
        /// <value>ID of the account that was requested</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the account that was requested
        /// </summary>
        /// <value>Name of the account that was requested</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// ID of the asset of the account that was requested
        /// </summary>
        /// <value>ID of the asset of the account that was requested</value>

        [DataMember(Name="AccountAssetId")]
        public int? AccountAssetId { get; set; }

        /// <summary>
        /// Name of the asset of the account that was requested
        /// </summary>
        /// <value>Name of the asset of the account that was requested</value>

        [DataMember(Name="AccountAssetName")]
        public string AccountAssetName { get; set; }

        /// <summary>
        /// Domain name of the account that was requested
        /// </summary>
        /// <value>Domain name of the account that was requested</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// Distinguished name of the account that was requested
        /// </summary>
        /// <value>Distinguished name of the account that was requested</value>

        [DataMember(Name="AccountDistinguishedName")]
        public string AccountDistinguishedName { get; set; }

        /// <summary>
        /// Gets or Sets AccountRequestType
        /// </summary>

        [DataMember(Name="AccountRequestType")]
        public AccountRequestType AccountRequestType { get; set; }

        /// <summary>
        /// Id of the asset that was requested
        /// </summary>
        /// <value>Id of the asset that was requested</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the asset that was requested
        /// </summary>
        /// <value>Name of the asset that was requested</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Network address of the asset that was requested
        /// </summary>
        /// <value>Network address of the asset that was requested</value>

        [DataMember(Name="AssetNetworkAddress")]
        public string AssetNetworkAddress { get; set; }

        /// <summary>
        /// Duration requested
        /// </summary>
        /// <value>Duration requested</value>

        [DataMember(Name="RequestDuration")]
        public int? RequestDuration { get; set; }

        /// <summary>
        /// Time when request was submitted
        /// </summary>
        /// <value>Time when request was submitted</value>

        [DataMember(Name="SubmittedAt")]
        public DateTime? SubmittedAt { get; set; }

        /// <summary>
        /// Time when request will available was required
        /// </summary>
        /// <value>Time when request will available was required</value>

        [DataMember(Name="RequiredAt")]
        public DateTime? RequiredAt { get; set; }

        /// <summary>
        /// Time when request expires
        /// </summary>
        /// <value>Time when request expires</value>

        [DataMember(Name="RequestExpiresAt")]
        public DateTime? RequestExpiresAt { get; set; }

        /// <summary>
        /// Time when request was approved
        /// </summary>
        /// <value>Time when request was approved</value>

        [DataMember(Name="ApprovedAt")]
        public DateTime? ApprovedAt { get; set; }

        /// <summary>
        /// If request was for emergency
        /// </summary>
        /// <value>If request was for emergency</value>

        [DataMember(Name="IsEmergency")]
        public bool? IsEmergency { get; set; }

        /// <summary>
        /// If request was cancelled
        /// </summary>
        /// <value>If request was cancelled</value>

        [DataMember(Name="WasCancelled")]
        public bool? WasCancelled { get; set; }

        /// <summary>
        /// If request was denied
        /// </summary>
        /// <value>If request was denied</value>

        [DataMember(Name="WasDenied")]
        public bool? WasDenied { get; set; }

        /// <summary>
        /// If request was expired normally
        /// </summary>
        /// <value>If request was expired normally</value>

        [DataMember(Name="WasExpired")]
        public bool? WasExpired { get; set; }

        /// <summary>
        /// If request was revoked
        /// </summary>
        /// <value>If request was revoked</value>

        [DataMember(Name="WasRevoked")]
        public bool? WasRevoked { get; set; }

        /// <summary>
        /// If request was checked out
        /// </summary>
        /// <value>If request was checked out</value>

        [DataMember(Name="WasCheckedOut")]
        public bool? WasCheckedOut { get; set; }

        /// <summary>
        /// If request was evicted
        /// </summary>
        /// <value>If request was evicted</value>

        [DataMember(Name="WasEvicted")]
        public bool? WasEvicted { get; set; }

        /// <summary>
        /// Request reason code
        /// </summary>
        /// <value>Request reason code</value>

        [DataMember(Name="ReasonCode")]
        public int? ReasonCode { get; set; }

        /// <summary>
        /// Request reason name
        /// </summary>
        /// <value>Request reason name</value>

        [DataMember(Name="ReasonName")]
        public string ReasonName { get; set; }

        /// <summary>
        /// Request reason comment
        /// </summary>
        /// <value>Request reason comment</value>

        [DataMember(Name="ReasonComment")]
        public string ReasonComment { get; set; }

        /// <summary>
        /// Request ticket number
        /// </summary>
        /// <value>Request ticket number</value>

        [DataMember(Name="TicketNumber")]
        public string TicketNumber { get; set; }

        /// <summary>
        /// True if the appliance was in offline workflow mode at the time of the log
        /// </summary>
        /// <value>True if the appliance was in offline workflow mode at the time of the log</value>

        [DataMember(Name="OfflineWorkflow")]
        public bool? OfflineWorkflow { get; set; }

        /// <summary>
        /// Id of access policy used for this request
        /// </summary>
        /// <value>Id of access policy used for this request</value>

        [DataMember(Name="PolicyId")]
        public int? PolicyId { get; set; }

        /// <summary>
        /// Name of access policy used for this request
        /// </summary>
        /// <value>Name of access policy used for this request</value>

        [DataMember(Name="PolicyName")]
        public string PolicyName { get; set; }

        /// <summary>
        /// Id of role used for this request
        /// </summary>
        /// <value>Id of role used for this request</value>

        [DataMember(Name="RoleId")]
        public int? RoleId { get; set; }

        /// <summary>
        /// Name of role used for this request
        /// </summary>
        /// <value>Name of role used for this request</value>

        [DataMember(Name="RoleName")]
        public string RoleName { get; set; }

        /// <summary>
        /// Default duration (days) the request will be available.
        /// </summary>
        /// <value>Default duration (days) the request will be available.</value>

        [DataMember(Name="DefaultReleaseDurationDays")]
        public int? DefaultReleaseDurationDays { get; private set; }

        /// <summary>
        /// Default duration (hours) the request will be available.
        /// </summary>
        /// <value>Default duration (hours) the request will be available.</value>

        [DataMember(Name="DefaultReleaseDurationHours")]
        public int? DefaultReleaseDurationHours { get; private set; }

        /// <summary>
        /// Default duration (minutes) the request will be available.
        /// </summary>
        /// <value>Default duration (minutes) the request will be available.</value>

        [DataMember(Name="DefaultReleaseDurationMinutes")]
        public int? DefaultReleaseDurationMinutes { get; private set; }

        /// <summary>
        /// The maximum duration (days) the request will be available
        /// </summary>
        /// <value>The maximum duration (days) the request will be available</value>

        [DataMember(Name="MaximumReleaseDurationDays")]
        public int? MaximumReleaseDurationDays { get; private set; }

        /// <summary>
        /// The maximum duration (hours) the request will be available.
        /// </summary>
        /// <value>The maximum duration (hours) the request will be available.</value>

        [DataMember(Name="MaximumReleaseDurationHours")]
        public int? MaximumReleaseDurationHours { get; private set; }

        /// <summary>
        /// The maximum duration (minutes) the request will be available.
        /// </summary>
        /// <value>The maximum duration (minutes) the request will be available.</value>

        [DataMember(Name="MaximumReleaseDurationMinutes")]
        public int? MaximumReleaseDurationMinutes { get; private set; }

        /// <summary>
        /// Gets or Sets HourlyRestrictionProperties
        /// </summary>

        [DataMember(Name="HourlyRestrictionProperties")]
        public HourlyRestrictionProperties HourlyRestrictionProperties { get; set; }

        /// <summary>
        /// Date/time after which the associated policy/role will cease to be active
        /// </summary>
        /// <value>Date/time after which the associated policy/role will cease to be active</value>

        [DataMember(Name="PolicyExpirationDate")]
        public DateTime? PolicyExpirationDate { get; set; }

        /// <summary>
        /// Whether to allow the release duration to be modified during a request.
        /// </summary>
        /// <value>Whether to allow the release duration to be modified during a request.</value>

        [DataMember(Name="AllowCustomDuration")]
        public bool? AllowCustomDuration { get; set; }

        /// <summary>
        /// Requests must be approved before becoming available
        /// </summary>
        /// <value>Requests must be approved before becoming available</value>

        [DataMember(Name="RequiresApproval")]
        public bool? RequiresApproval { get; set; }

        /// <summary>
        /// A reason code is required for request to be made.
        /// </summary>
        /// <value>A reason code is required for request to be made.</value>

        [DataMember(Name="RequiresReasonCode")]
        public bool? RequiresReasonCode { get; set; }

        /// <summary>
        /// A reason comment is required before a request can be made.
        /// </summary>
        /// <value>A reason comment is required before a request can be made.</value>

        [DataMember(Name="RequiresReasonComment")]
        public bool? RequiresReasonComment { get; set; }

        /// <summary>
        /// Whether the members of this role can request emergency access
        /// </summary>
        /// <value>Whether the members of this role can request emergency access</value>

        [DataMember(Name="EmergencyAccessEnabled")]
        public bool? EmergencyAccessEnabled { get; set; }

        /// <summary>
        /// Ignore hourly restrictions when requesting emergency access
        /// </summary>
        /// <value>Ignore hourly restrictions when requesting emergency access</value>

        [DataMember(Name="EmergencyAccessAnytime")]
        public bool? EmergencyAccessAnytime { get; set; }

        /// <summary>
        /// Allow multiple users to request emergency access simultaneously for same account
        /// </summary>
        /// <value>Allow multiple users to request emergency access simultaneously for same account</value>

        [DataMember(Name="EmergencyAccessSimultaneous")]
        public bool? EmergencyAccessSimultaneous { get; set; }

        /// <summary>
        /// The minimum number of reviews required before a request is closed
        /// </summary>
        /// <value>The minimum number of reviews required before a request is closed</value>

        [DataMember(Name="RequiredReviewers")]
        public int? RequiredReviewers { get; set; }

        /// <summary>
        /// Whether to change the account password after a release has expired
        /// </summary>
        /// <value>Whether to change the account password after a release has expired</value>

        [DataMember(Name="ChangePasswordAfterRelease")]
        public bool? ChangePasswordAfterRelease { get; set; }

        /// <summary>
        /// Whether to change the account SSH key after a release has expired
        /// </summary>
        /// <value>Whether to change the account SSH key after a release has expired</value>

        [DataMember(Name="ChangeSshKeyAfterRelease")]
        public bool? ChangeSshKeyAfterRelease { get; set; }

        /// <summary>
        /// Allow password release during session request
        /// </summary>
        /// <value>Allow password release during session request</value>

        [DataMember(Name="AllowSessionPasswordRelease")]
        public bool? AllowSessionPasswordRelease { get; set; }

        /// <summary>
        /// Allow SSH key release during session request
        /// </summary>
        /// <value>Allow SSH key release during session request</value>

        [DataMember(Name="AllowSessionSshKeyRelease")]
        public bool? AllowSessionSshKeyRelease { get; set; }

        /// <summary>
        /// Maximum number of requests during the same time period
        /// </summary>
        /// <value>Maximum number of requests during the same time period</value>

        [DataMember(Name="MaximumSimultaneousReleases")]
        public int? MaximumSimultaneousReleases { get; set; }

        /// <summary>
        /// The maximum duration (days) an expired request may be pending review before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (days) an expired request may be pending review before notifying escalation contacts</value>

        [DataMember(Name="PendingReviewDurationBeforeEscalationDays")]
        public int? PendingReviewDurationBeforeEscalationDays { get; private set; }

        /// <summary>
        /// The maximum duration (hours) a expired request may be pending review before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (hours) a expired request may be pending review before notifying escalation contacts</value>

        [DataMember(Name="PendingReviewDurationBeforeEscalationHours")]
        public int? PendingReviewDurationBeforeEscalationHours { get; private set; }

        /// <summary>
        /// The maximum duration (minutes) a expired request may be pending review before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (minutes) a expired request may be pending review before notifying escalation contacts</value>

        [DataMember(Name="PendingReviewDurationBeforeEscalationMinutes")]
        public int? PendingReviewDurationBeforeEscalationMinutes { get; private set; }

        /// <summary>
        /// The maximum duration (days) a request may be pending approval before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (days) a request may be pending approval before notifying escalation contacts</value>

        [DataMember(Name="PendingApprovalDurationBeforeEscalationDays")]
        public int? PendingApprovalDurationBeforeEscalationDays { get; private set; }

        /// <summary>
        /// The maximum duration (hours) a request may be pending approval before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (hours) a request may be pending approval before notifying escalation contacts</value>

        [DataMember(Name="PendingApprovalDurationBeforeEscalationHours")]
        public int? PendingApprovalDurationBeforeEscalationHours { get; private set; }

        /// <summary>
        /// The maximum duration (minutes) a request may be pending approval before notifying escalation contacts
        /// </summary>
        /// <value>The maximum duration (minutes) a request may be pending approval before notifying escalation contacts</value>

        [DataMember(Name="PendingApprovalDurationBeforeEscalationMinutes")]
        public int? PendingApprovalDurationBeforeEscalationMinutes { get; private set; }

        /// <summary>
        /// Policy reviewers
        /// </summary>
        /// <value>Policy reviewers</value>

        [DataMember(Name="Reviewers")]
        public List<AccessRequestLogIdentity> Reviewers { get; set; }

        /// <summary>
        /// Policy approver sets
        /// </summary>
        /// <value>Policy approver sets</value>

        [DataMember(Name="ApproverSets")]
        public List<AccessRequestLogApproverSet> ApproverSets { get; set; }

        /// <summary>
        /// Gets or Sets RequestState
        /// </summary>

        [DataMember(Name="RequestState")]
        public AccessRequestState RequestState { get; set; }

        /// <summary>
        /// Gets or Sets SessionProperties
        /// </summary>

        [DataMember(Name="SessionProperties")]
        public SessionProperties SessionProperties { get; set; }

        /// <summary>
        /// ID of the broker
        /// </summary>
        /// <value>ID of the broker</value>

        [DataMember(Name="BrokerId")]
        public int? BrokerId { get; set; }

        /// <summary>
        /// Name of the broker
        /// </summary>
        /// <value>Name of the broker</value>

        [DataMember(Name="BrokerName")]
        public string BrokerName { get; set; }

        /// <summary>
        /// Allow Sra session launch
        /// </summary>
        /// <value>Allow Sra session launch</value>

        [DataMember(Name="AllowSraSessionLaunch")]
        public bool? AllowSraSessionLaunch { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationSessionProperties
        /// </summary>

        [DataMember(Name="ApplicationSessionProperties")]
        public ApplicationSessionProperties ApplicationSessionProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessRequestLog {\n");
            sb.Append("  UserProperties: ").Append(UserProperties).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  RequesterId: ").Append(RequesterId).Append("\n");
            sb.Append("  RequesterName: ").Append(RequesterName).Append("\n");
            sb.Append("  RequesterUsername: ").Append(RequesterUsername).Append("\n");
            sb.Append("  RequesterEmail: ").Append(RequesterEmail).Append("\n");
            sb.Append("  RequesterTimezone: ").Append(RequesterTimezone).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountAssetId: ").Append(AccountAssetId).Append("\n");
            sb.Append("  AccountAssetName: ").Append(AccountAssetName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AccountDistinguishedName: ").Append(AccountDistinguishedName).Append("\n");
            sb.Append("  AccountRequestType: ").Append(AccountRequestType).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetNetworkAddress: ").Append(AssetNetworkAddress).Append("\n");
            sb.Append("  RequestDuration: ").Append(RequestDuration).Append("\n");
            sb.Append("  SubmittedAt: ").Append(SubmittedAt).Append("\n");
            sb.Append("  RequiredAt: ").Append(RequiredAt).Append("\n");
            sb.Append("  RequestExpiresAt: ").Append(RequestExpiresAt).Append("\n");
            sb.Append("  ApprovedAt: ").Append(ApprovedAt).Append("\n");
            sb.Append("  IsEmergency: ").Append(IsEmergency).Append("\n");
            sb.Append("  WasCancelled: ").Append(WasCancelled).Append("\n");
            sb.Append("  WasDenied: ").Append(WasDenied).Append("\n");
            sb.Append("  WasExpired: ").Append(WasExpired).Append("\n");
            sb.Append("  WasRevoked: ").Append(WasRevoked).Append("\n");
            sb.Append("  WasCheckedOut: ").Append(WasCheckedOut).Append("\n");
            sb.Append("  WasEvicted: ").Append(WasEvicted).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonName: ").Append(ReasonName).Append("\n");
            sb.Append("  ReasonComment: ").Append(ReasonComment).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  OfflineWorkflow: ").Append(OfflineWorkflow).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  PolicyName: ").Append(PolicyName).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  DefaultReleaseDurationDays: ").Append(DefaultReleaseDurationDays).Append("\n");
            sb.Append("  DefaultReleaseDurationHours: ").Append(DefaultReleaseDurationHours).Append("\n");
            sb.Append("  DefaultReleaseDurationMinutes: ").Append(DefaultReleaseDurationMinutes).Append("\n");
            sb.Append("  MaximumReleaseDurationDays: ").Append(MaximumReleaseDurationDays).Append("\n");
            sb.Append("  MaximumReleaseDurationHours: ").Append(MaximumReleaseDurationHours).Append("\n");
            sb.Append("  MaximumReleaseDurationMinutes: ").Append(MaximumReleaseDurationMinutes).Append("\n");
            sb.Append("  HourlyRestrictionProperties: ").Append(HourlyRestrictionProperties).Append("\n");
            sb.Append("  PolicyExpirationDate: ").Append(PolicyExpirationDate).Append("\n");
            sb.Append("  AllowCustomDuration: ").Append(AllowCustomDuration).Append("\n");
            sb.Append("  RequiresApproval: ").Append(RequiresApproval).Append("\n");
            sb.Append("  RequiresReasonCode: ").Append(RequiresReasonCode).Append("\n");
            sb.Append("  RequiresReasonComment: ").Append(RequiresReasonComment).Append("\n");
            sb.Append("  EmergencyAccessEnabled: ").Append(EmergencyAccessEnabled).Append("\n");
            sb.Append("  EmergencyAccessAnytime: ").Append(EmergencyAccessAnytime).Append("\n");
            sb.Append("  EmergencyAccessSimultaneous: ").Append(EmergencyAccessSimultaneous).Append("\n");
            sb.Append("  RequiredReviewers: ").Append(RequiredReviewers).Append("\n");
            sb.Append("  ChangePasswordAfterRelease: ").Append(ChangePasswordAfterRelease).Append("\n");
            sb.Append("  ChangeSshKeyAfterRelease: ").Append(ChangeSshKeyAfterRelease).Append("\n");
            sb.Append("  AllowSessionPasswordRelease: ").Append(AllowSessionPasswordRelease).Append("\n");
            sb.Append("  AllowSessionSshKeyRelease: ").Append(AllowSessionSshKeyRelease).Append("\n");
            sb.Append("  MaximumSimultaneousReleases: ").Append(MaximumSimultaneousReleases).Append("\n");
            sb.Append("  PendingReviewDurationBeforeEscalationDays: ").Append(PendingReviewDurationBeforeEscalationDays).Append("\n");
            sb.Append("  PendingReviewDurationBeforeEscalationHours: ").Append(PendingReviewDurationBeforeEscalationHours).Append("\n");
            sb.Append("  PendingReviewDurationBeforeEscalationMinutes: ").Append(PendingReviewDurationBeforeEscalationMinutes).Append("\n");
            sb.Append("  PendingApprovalDurationBeforeEscalationDays: ").Append(PendingApprovalDurationBeforeEscalationDays).Append("\n");
            sb.Append("  PendingApprovalDurationBeforeEscalationHours: ").Append(PendingApprovalDurationBeforeEscalationHours).Append("\n");
            sb.Append("  PendingApprovalDurationBeforeEscalationMinutes: ").Append(PendingApprovalDurationBeforeEscalationMinutes).Append("\n");
            sb.Append("  Reviewers: ").Append(Reviewers).Append("\n");
            sb.Append("  ApproverSets: ").Append(ApproverSets).Append("\n");
            sb.Append("  RequestState: ").Append(RequestState).Append("\n");
            sb.Append("  SessionProperties: ").Append(SessionProperties).Append("\n");
            sb.Append("  BrokerId: ").Append(BrokerId).Append("\n");
            sb.Append("  BrokerName: ").Append(BrokerName).Append("\n");
            sb.Append("  AllowSraSessionLaunch: ").Append(AllowSraSessionLaunch).Append("\n");
            sb.Append("  ApplicationSessionProperties: ").Append(ApplicationSessionProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessRequestLog)obj);
        }

        /// <summary>
        /// Returns true if AccessRequestLog instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessRequestLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessRequestLog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserProperties == other.UserProperties ||
                    UserProperties != null &&
                    UserProperties.Equals(other.UserProperties)
                ) && 
                (
                    RequestId == other.RequestId ||
                    RequestId != null &&
                    RequestId.Equals(other.RequestId)
                ) && 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    RequesterId == other.RequesterId ||
                    RequesterId != null &&
                    RequesterId.Equals(other.RequesterId)
                ) && 
                (
                    RequesterName == other.RequesterName ||
                    RequesterName != null &&
                    RequesterName.Equals(other.RequesterName)
                ) && 
                (
                    RequesterUsername == other.RequesterUsername ||
                    RequesterUsername != null &&
                    RequesterUsername.Equals(other.RequesterUsername)
                ) && 
                (
                    RequesterEmail == other.RequesterEmail ||
                    RequesterEmail != null &&
                    RequesterEmail.Equals(other.RequesterEmail)
                ) && 
                (
                    RequesterTimezone == other.RequesterTimezone ||
                    RequesterTimezone != null &&
                    RequesterTimezone.Equals(other.RequesterTimezone)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountAssetId == other.AccountAssetId ||
                    AccountAssetId != null &&
                    AccountAssetId.Equals(other.AccountAssetId)
                ) && 
                (
                    AccountAssetName == other.AccountAssetName ||
                    AccountAssetName != null &&
                    AccountAssetName.Equals(other.AccountAssetName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AccountDistinguishedName == other.AccountDistinguishedName ||
                    AccountDistinguishedName != null &&
                    AccountDistinguishedName.Equals(other.AccountDistinguishedName)
                ) && 
                (
                    AccountRequestType == other.AccountRequestType ||
                    AccountRequestType != null &&
                    AccountRequestType.Equals(other.AccountRequestType)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetNetworkAddress == other.AssetNetworkAddress ||
                    AssetNetworkAddress != null &&
                    AssetNetworkAddress.Equals(other.AssetNetworkAddress)
                ) && 
                (
                    RequestDuration == other.RequestDuration ||
                    RequestDuration != null &&
                    RequestDuration.Equals(other.RequestDuration)
                ) && 
                (
                    SubmittedAt == other.SubmittedAt ||
                    SubmittedAt != null &&
                    SubmittedAt.Equals(other.SubmittedAt)
                ) && 
                (
                    RequiredAt == other.RequiredAt ||
                    RequiredAt != null &&
                    RequiredAt.Equals(other.RequiredAt)
                ) && 
                (
                    RequestExpiresAt == other.RequestExpiresAt ||
                    RequestExpiresAt != null &&
                    RequestExpiresAt.Equals(other.RequestExpiresAt)
                ) && 
                (
                    ApprovedAt == other.ApprovedAt ||
                    ApprovedAt != null &&
                    ApprovedAt.Equals(other.ApprovedAt)
                ) && 
                (
                    IsEmergency == other.IsEmergency ||
                    IsEmergency != null &&
                    IsEmergency.Equals(other.IsEmergency)
                ) && 
                (
                    WasCancelled == other.WasCancelled ||
                    WasCancelled != null &&
                    WasCancelled.Equals(other.WasCancelled)
                ) && 
                (
                    WasDenied == other.WasDenied ||
                    WasDenied != null &&
                    WasDenied.Equals(other.WasDenied)
                ) && 
                (
                    WasExpired == other.WasExpired ||
                    WasExpired != null &&
                    WasExpired.Equals(other.WasExpired)
                ) && 
                (
                    WasRevoked == other.WasRevoked ||
                    WasRevoked != null &&
                    WasRevoked.Equals(other.WasRevoked)
                ) && 
                (
                    WasCheckedOut == other.WasCheckedOut ||
                    WasCheckedOut != null &&
                    WasCheckedOut.Equals(other.WasCheckedOut)
                ) && 
                (
                    WasEvicted == other.WasEvicted ||
                    WasEvicted != null &&
                    WasEvicted.Equals(other.WasEvicted)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    ReasonName == other.ReasonName ||
                    ReasonName != null &&
                    ReasonName.Equals(other.ReasonName)
                ) && 
                (
                    ReasonComment == other.ReasonComment ||
                    ReasonComment != null &&
                    ReasonComment.Equals(other.ReasonComment)
                ) && 
                (
                    TicketNumber == other.TicketNumber ||
                    TicketNumber != null &&
                    TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    OfflineWorkflow == other.OfflineWorkflow ||
                    OfflineWorkflow != null &&
                    OfflineWorkflow.Equals(other.OfflineWorkflow)
                ) && 
                (
                    PolicyId == other.PolicyId ||
                    PolicyId != null &&
                    PolicyId.Equals(other.PolicyId)
                ) && 
                (
                    PolicyName == other.PolicyName ||
                    PolicyName != null &&
                    PolicyName.Equals(other.PolicyName)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    RoleName == other.RoleName ||
                    RoleName != null &&
                    RoleName.Equals(other.RoleName)
                ) && 
                (
                    DefaultReleaseDurationDays == other.DefaultReleaseDurationDays ||
                    DefaultReleaseDurationDays != null &&
                    DefaultReleaseDurationDays.Equals(other.DefaultReleaseDurationDays)
                ) && 
                (
                    DefaultReleaseDurationHours == other.DefaultReleaseDurationHours ||
                    DefaultReleaseDurationHours != null &&
                    DefaultReleaseDurationHours.Equals(other.DefaultReleaseDurationHours)
                ) && 
                (
                    DefaultReleaseDurationMinutes == other.DefaultReleaseDurationMinutes ||
                    DefaultReleaseDurationMinutes != null &&
                    DefaultReleaseDurationMinutes.Equals(other.DefaultReleaseDurationMinutes)
                ) && 
                (
                    MaximumReleaseDurationDays == other.MaximumReleaseDurationDays ||
                    MaximumReleaseDurationDays != null &&
                    MaximumReleaseDurationDays.Equals(other.MaximumReleaseDurationDays)
                ) && 
                (
                    MaximumReleaseDurationHours == other.MaximumReleaseDurationHours ||
                    MaximumReleaseDurationHours != null &&
                    MaximumReleaseDurationHours.Equals(other.MaximumReleaseDurationHours)
                ) && 
                (
                    MaximumReleaseDurationMinutes == other.MaximumReleaseDurationMinutes ||
                    MaximumReleaseDurationMinutes != null &&
                    MaximumReleaseDurationMinutes.Equals(other.MaximumReleaseDurationMinutes)
                ) && 
                (
                    HourlyRestrictionProperties == other.HourlyRestrictionProperties ||
                    HourlyRestrictionProperties != null &&
                    HourlyRestrictionProperties.Equals(other.HourlyRestrictionProperties)
                ) && 
                (
                    PolicyExpirationDate == other.PolicyExpirationDate ||
                    PolicyExpirationDate != null &&
                    PolicyExpirationDate.Equals(other.PolicyExpirationDate)
                ) && 
                (
                    AllowCustomDuration == other.AllowCustomDuration ||
                    AllowCustomDuration != null &&
                    AllowCustomDuration.Equals(other.AllowCustomDuration)
                ) && 
                (
                    RequiresApproval == other.RequiresApproval ||
                    RequiresApproval != null &&
                    RequiresApproval.Equals(other.RequiresApproval)
                ) && 
                (
                    RequiresReasonCode == other.RequiresReasonCode ||
                    RequiresReasonCode != null &&
                    RequiresReasonCode.Equals(other.RequiresReasonCode)
                ) && 
                (
                    RequiresReasonComment == other.RequiresReasonComment ||
                    RequiresReasonComment != null &&
                    RequiresReasonComment.Equals(other.RequiresReasonComment)
                ) && 
                (
                    EmergencyAccessEnabled == other.EmergencyAccessEnabled ||
                    EmergencyAccessEnabled != null &&
                    EmergencyAccessEnabled.Equals(other.EmergencyAccessEnabled)
                ) && 
                (
                    EmergencyAccessAnytime == other.EmergencyAccessAnytime ||
                    EmergencyAccessAnytime != null &&
                    EmergencyAccessAnytime.Equals(other.EmergencyAccessAnytime)
                ) && 
                (
                    EmergencyAccessSimultaneous == other.EmergencyAccessSimultaneous ||
                    EmergencyAccessSimultaneous != null &&
                    EmergencyAccessSimultaneous.Equals(other.EmergencyAccessSimultaneous)
                ) && 
                (
                    RequiredReviewers == other.RequiredReviewers ||
                    RequiredReviewers != null &&
                    RequiredReviewers.Equals(other.RequiredReviewers)
                ) && 
                (
                    ChangePasswordAfterRelease == other.ChangePasswordAfterRelease ||
                    ChangePasswordAfterRelease != null &&
                    ChangePasswordAfterRelease.Equals(other.ChangePasswordAfterRelease)
                ) && 
                (
                    ChangeSshKeyAfterRelease == other.ChangeSshKeyAfterRelease ||
                    ChangeSshKeyAfterRelease != null &&
                    ChangeSshKeyAfterRelease.Equals(other.ChangeSshKeyAfterRelease)
                ) && 
                (
                    AllowSessionPasswordRelease == other.AllowSessionPasswordRelease ||
                    AllowSessionPasswordRelease != null &&
                    AllowSessionPasswordRelease.Equals(other.AllowSessionPasswordRelease)
                ) && 
                (
                    AllowSessionSshKeyRelease == other.AllowSessionSshKeyRelease ||
                    AllowSessionSshKeyRelease != null &&
                    AllowSessionSshKeyRelease.Equals(other.AllowSessionSshKeyRelease)
                ) && 
                (
                    MaximumSimultaneousReleases == other.MaximumSimultaneousReleases ||
                    MaximumSimultaneousReleases != null &&
                    MaximumSimultaneousReleases.Equals(other.MaximumSimultaneousReleases)
                ) && 
                (
                    PendingReviewDurationBeforeEscalationDays == other.PendingReviewDurationBeforeEscalationDays ||
                    PendingReviewDurationBeforeEscalationDays != null &&
                    PendingReviewDurationBeforeEscalationDays.Equals(other.PendingReviewDurationBeforeEscalationDays)
                ) && 
                (
                    PendingReviewDurationBeforeEscalationHours == other.PendingReviewDurationBeforeEscalationHours ||
                    PendingReviewDurationBeforeEscalationHours != null &&
                    PendingReviewDurationBeforeEscalationHours.Equals(other.PendingReviewDurationBeforeEscalationHours)
                ) && 
                (
                    PendingReviewDurationBeforeEscalationMinutes == other.PendingReviewDurationBeforeEscalationMinutes ||
                    PendingReviewDurationBeforeEscalationMinutes != null &&
                    PendingReviewDurationBeforeEscalationMinutes.Equals(other.PendingReviewDurationBeforeEscalationMinutes)
                ) && 
                (
                    PendingApprovalDurationBeforeEscalationDays == other.PendingApprovalDurationBeforeEscalationDays ||
                    PendingApprovalDurationBeforeEscalationDays != null &&
                    PendingApprovalDurationBeforeEscalationDays.Equals(other.PendingApprovalDurationBeforeEscalationDays)
                ) && 
                (
                    PendingApprovalDurationBeforeEscalationHours == other.PendingApprovalDurationBeforeEscalationHours ||
                    PendingApprovalDurationBeforeEscalationHours != null &&
                    PendingApprovalDurationBeforeEscalationHours.Equals(other.PendingApprovalDurationBeforeEscalationHours)
                ) && 
                (
                    PendingApprovalDurationBeforeEscalationMinutes == other.PendingApprovalDurationBeforeEscalationMinutes ||
                    PendingApprovalDurationBeforeEscalationMinutes != null &&
                    PendingApprovalDurationBeforeEscalationMinutes.Equals(other.PendingApprovalDurationBeforeEscalationMinutes)
                ) && 
                (
                    Reviewers == other.Reviewers ||
                    Reviewers != null &&
                    Reviewers.SequenceEqual(other.Reviewers)
                ) && 
                (
                    ApproverSets == other.ApproverSets ||
                    ApproverSets != null &&
                    ApproverSets.SequenceEqual(other.ApproverSets)
                ) && 
                (
                    RequestState == other.RequestState ||
                    RequestState != null &&
                    RequestState.Equals(other.RequestState)
                ) && 
                (
                    SessionProperties == other.SessionProperties ||
                    SessionProperties != null &&
                    SessionProperties.Equals(other.SessionProperties)
                ) && 
                (
                    BrokerId == other.BrokerId ||
                    BrokerId != null &&
                    BrokerId.Equals(other.BrokerId)
                ) && 
                (
                    BrokerName == other.BrokerName ||
                    BrokerName != null &&
                    BrokerName.Equals(other.BrokerName)
                ) && 
                (
                    AllowSraSessionLaunch == other.AllowSraSessionLaunch ||
                    AllowSraSessionLaunch != null &&
                    AllowSraSessionLaunch.Equals(other.AllowSraSessionLaunch)
                ) && 
                (
                    ApplicationSessionProperties == other.ApplicationSessionProperties ||
                    ApplicationSessionProperties != null &&
                    ApplicationSessionProperties.Equals(other.ApplicationSessionProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserProperties != null)
                    hashCode = hashCode * 59 + UserProperties.GetHashCode();
                    if (RequestId != null)
                    hashCode = hashCode * 59 + RequestId.GetHashCode();
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (RequesterId != null)
                    hashCode = hashCode * 59 + RequesterId.GetHashCode();
                    if (RequesterName != null)
                    hashCode = hashCode * 59 + RequesterName.GetHashCode();
                    if (RequesterUsername != null)
                    hashCode = hashCode * 59 + RequesterUsername.GetHashCode();
                    if (RequesterEmail != null)
                    hashCode = hashCode * 59 + RequesterEmail.GetHashCode();
                    if (RequesterTimezone != null)
                    hashCode = hashCode * 59 + RequesterTimezone.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountAssetId != null)
                    hashCode = hashCode * 59 + AccountAssetId.GetHashCode();
                    if (AccountAssetName != null)
                    hashCode = hashCode * 59 + AccountAssetName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AccountDistinguishedName != null)
                    hashCode = hashCode * 59 + AccountDistinguishedName.GetHashCode();
                    if (AccountRequestType != null)
                    hashCode = hashCode * 59 + AccountRequestType.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetNetworkAddress != null)
                    hashCode = hashCode * 59 + AssetNetworkAddress.GetHashCode();
                    if (RequestDuration != null)
                    hashCode = hashCode * 59 + RequestDuration.GetHashCode();
                    if (SubmittedAt != null)
                    hashCode = hashCode * 59 + SubmittedAt.GetHashCode();
                    if (RequiredAt != null)
                    hashCode = hashCode * 59 + RequiredAt.GetHashCode();
                    if (RequestExpiresAt != null)
                    hashCode = hashCode * 59 + RequestExpiresAt.GetHashCode();
                    if (ApprovedAt != null)
                    hashCode = hashCode * 59 + ApprovedAt.GetHashCode();
                    if (IsEmergency != null)
                    hashCode = hashCode * 59 + IsEmergency.GetHashCode();
                    if (WasCancelled != null)
                    hashCode = hashCode * 59 + WasCancelled.GetHashCode();
                    if (WasDenied != null)
                    hashCode = hashCode * 59 + WasDenied.GetHashCode();
                    if (WasExpired != null)
                    hashCode = hashCode * 59 + WasExpired.GetHashCode();
                    if (WasRevoked != null)
                    hashCode = hashCode * 59 + WasRevoked.GetHashCode();
                    if (WasCheckedOut != null)
                    hashCode = hashCode * 59 + WasCheckedOut.GetHashCode();
                    if (WasEvicted != null)
                    hashCode = hashCode * 59 + WasEvicted.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (ReasonName != null)
                    hashCode = hashCode * 59 + ReasonName.GetHashCode();
                    if (ReasonComment != null)
                    hashCode = hashCode * 59 + ReasonComment.GetHashCode();
                    if (TicketNumber != null)
                    hashCode = hashCode * 59 + TicketNumber.GetHashCode();
                    if (OfflineWorkflow != null)
                    hashCode = hashCode * 59 + OfflineWorkflow.GetHashCode();
                    if (PolicyId != null)
                    hashCode = hashCode * 59 + PolicyId.GetHashCode();
                    if (PolicyName != null)
                    hashCode = hashCode * 59 + PolicyName.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (RoleName != null)
                    hashCode = hashCode * 59 + RoleName.GetHashCode();
                    if (DefaultReleaseDurationDays != null)
                    hashCode = hashCode * 59 + DefaultReleaseDurationDays.GetHashCode();
                    if (DefaultReleaseDurationHours != null)
                    hashCode = hashCode * 59 + DefaultReleaseDurationHours.GetHashCode();
                    if (DefaultReleaseDurationMinutes != null)
                    hashCode = hashCode * 59 + DefaultReleaseDurationMinutes.GetHashCode();
                    if (MaximumReleaseDurationDays != null)
                    hashCode = hashCode * 59 + MaximumReleaseDurationDays.GetHashCode();
                    if (MaximumReleaseDurationHours != null)
                    hashCode = hashCode * 59 + MaximumReleaseDurationHours.GetHashCode();
                    if (MaximumReleaseDurationMinutes != null)
                    hashCode = hashCode * 59 + MaximumReleaseDurationMinutes.GetHashCode();
                    if (HourlyRestrictionProperties != null)
                    hashCode = hashCode * 59 + HourlyRestrictionProperties.GetHashCode();
                    if (PolicyExpirationDate != null)
                    hashCode = hashCode * 59 + PolicyExpirationDate.GetHashCode();
                    if (AllowCustomDuration != null)
                    hashCode = hashCode * 59 + AllowCustomDuration.GetHashCode();
                    if (RequiresApproval != null)
                    hashCode = hashCode * 59 + RequiresApproval.GetHashCode();
                    if (RequiresReasonCode != null)
                    hashCode = hashCode * 59 + RequiresReasonCode.GetHashCode();
                    if (RequiresReasonComment != null)
                    hashCode = hashCode * 59 + RequiresReasonComment.GetHashCode();
                    if (EmergencyAccessEnabled != null)
                    hashCode = hashCode * 59 + EmergencyAccessEnabled.GetHashCode();
                    if (EmergencyAccessAnytime != null)
                    hashCode = hashCode * 59 + EmergencyAccessAnytime.GetHashCode();
                    if (EmergencyAccessSimultaneous != null)
                    hashCode = hashCode * 59 + EmergencyAccessSimultaneous.GetHashCode();
                    if (RequiredReviewers != null)
                    hashCode = hashCode * 59 + RequiredReviewers.GetHashCode();
                    if (ChangePasswordAfterRelease != null)
                    hashCode = hashCode * 59 + ChangePasswordAfterRelease.GetHashCode();
                    if (ChangeSshKeyAfterRelease != null)
                    hashCode = hashCode * 59 + ChangeSshKeyAfterRelease.GetHashCode();
                    if (AllowSessionPasswordRelease != null)
                    hashCode = hashCode * 59 + AllowSessionPasswordRelease.GetHashCode();
                    if (AllowSessionSshKeyRelease != null)
                    hashCode = hashCode * 59 + AllowSessionSshKeyRelease.GetHashCode();
                    if (MaximumSimultaneousReleases != null)
                    hashCode = hashCode * 59 + MaximumSimultaneousReleases.GetHashCode();
                    if (PendingReviewDurationBeforeEscalationDays != null)
                    hashCode = hashCode * 59 + PendingReviewDurationBeforeEscalationDays.GetHashCode();
                    if (PendingReviewDurationBeforeEscalationHours != null)
                    hashCode = hashCode * 59 + PendingReviewDurationBeforeEscalationHours.GetHashCode();
                    if (PendingReviewDurationBeforeEscalationMinutes != null)
                    hashCode = hashCode * 59 + PendingReviewDurationBeforeEscalationMinutes.GetHashCode();
                    if (PendingApprovalDurationBeforeEscalationDays != null)
                    hashCode = hashCode * 59 + PendingApprovalDurationBeforeEscalationDays.GetHashCode();
                    if (PendingApprovalDurationBeforeEscalationHours != null)
                    hashCode = hashCode * 59 + PendingApprovalDurationBeforeEscalationHours.GetHashCode();
                    if (PendingApprovalDurationBeforeEscalationMinutes != null)
                    hashCode = hashCode * 59 + PendingApprovalDurationBeforeEscalationMinutes.GetHashCode();
                    if (Reviewers != null)
                    hashCode = hashCode * 59 + Reviewers.GetHashCode();
                    if (ApproverSets != null)
                    hashCode = hashCode * 59 + ApproverSets.GetHashCode();
                    if (RequestState != null)
                    hashCode = hashCode * 59 + RequestState.GetHashCode();
                    if (SessionProperties != null)
                    hashCode = hashCode * 59 + SessionProperties.GetHashCode();
                    if (BrokerId != null)
                    hashCode = hashCode * 59 + BrokerId.GetHashCode();
                    if (BrokerName != null)
                    hashCode = hashCode * 59 + BrokerName.GetHashCode();
                    if (AllowSraSessionLaunch != null)
                    hashCode = hashCode * 59 + AllowSraSessionLaunch.GetHashCode();
                    if (ApplicationSessionProperties != null)
                    hashCode = hashCode * 59 + ApplicationSessionProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessRequestLog left, AccessRequestLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessRequestLog left, AccessRequestLog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
