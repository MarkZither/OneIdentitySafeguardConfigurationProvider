/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserAccountEntitlement : IEquatable<UserAccountEntitlement>
    { 
        /// <summary>
        /// ID of the user granted access
        /// </summary>
        /// <value>ID of the user granted access</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// DisplayName of the user granted access
        /// </summary>
        /// <value>DisplayName of the user granted access</value>

        [DataMember(Name="UserDisplayName")]
        public string UserDisplayName { get; set; }

        /// <summary>
        /// UserName of user granted access
        /// </summary>
        /// <value>UserName of user granted access</value>

        [DataMember(Name="UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// DomainName of user granted access
        /// </summary>
        /// <value>DomainName of user granted access</value>

        [DataMember(Name="UserDomainName")]
        public string UserDomainName { get; set; }

        /// <summary>
        /// Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin
        /// </summary>
        /// <value>Administrative roles this user has been granted. e.g. GlobalAdmin, Auditor, ApplicationAuditor, SystemAuditor, AssetAdmin, ApplianceAdmin, PolicyAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin</value>

        [DataMember(Name="AdminRoles")]
        public List<AdminRoleName> AdminRoles { get; set; }

        /// <summary>
        /// Whether this user owns any partitions
        /// </summary>
        /// <value>Whether this user owns any partitions</value>

        [DataMember(Name="IsPartitionOwner")]
        public bool? IsPartitionOwner { get; set; }

        /// <summary>
        /// ID of the asset granted access to
        /// </summary>
        /// <value>ID of the asset granted access to</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the asset granted access to
        /// </summary>
        /// <value>Name of the asset granted access to</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Network address of the asset granted access to
        /// </summary>
        /// <value>Network address of the asset granted access to</value>

        [DataMember(Name="AssetNetworkAddress")]
        public string AssetNetworkAddress { get; set; }

        /// <summary>
        /// ID of the partition of the asset
        /// </summary>
        /// <value>ID of the partition of the asset</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of the partition of the asset
        /// </summary>
        /// <value>Name of the partition of the asset</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// ID of the account granted access to
        /// </summary>
        /// <value>ID of the account granted access to</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the account granted access to
        /// </summary>
        /// <value>Name of the account granted access to</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Domain name of the account granted access to
        /// </summary>
        /// <value>Domain name of the account granted access to</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// ID of the asset the account belongs to
        /// </summary>
        /// <value>ID of the asset the account belongs to</value>

        [DataMember(Name="AccountAssetId")]
        public int? AccountAssetId { get; set; }

        /// <summary>
        /// Name of the asset the account belongs to
        /// </summary>
        /// <value>Name of the asset the account belongs to</value>

        [DataMember(Name="AccountAssetName")]
        public string AccountAssetName { get; set; }

        /// <summary>
        /// ID of the policy granting access
        /// </summary>
        /// <value>ID of the policy granting access</value>

        [DataMember(Name="AccessPolicyId")]
        public int? AccessPolicyId { get; set; }

        /// <summary>
        /// Name of the policy granting access
        /// </summary>
        /// <value>Name of the policy granting access</value>

        [DataMember(Name="AccessPolicyName")]
        public string AccessPolicyName { get; set; }

        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// Whether password access is also granted for session requests
        /// </summary>
        /// <value>Whether password access is also granted for session requests</value>

        [DataMember(Name="AllowSessionPasswordRelease")]
        public bool? AllowSessionPasswordRelease { get; set; }

        /// <summary>
        /// Whether SSH key access is also granted for session requests
        /// </summary>
        /// <value>Whether SSH key access is also granted for session requests</value>

        [DataMember(Name="AllowSessionSshKeyRelease")]
        public bool? AllowSessionSshKeyRelease { get; set; }

        /// <summary>
        /// Whether password will be changed after requests are checked in
        /// </summary>
        /// <value>Whether password will be changed after requests are checked in</value>

        [DataMember(Name="ChangePasswordAfterCheckin")]
        public bool? ChangePasswordAfterCheckin { get; set; }

        /// <summary>
        /// Whether the SSH key will be changed after requests are checked in
        /// </summary>
        /// <value>Whether the SSH key will be changed after requests are checked in</value>

        [DataMember(Name="ChangeSshKeyAfterCheckin")]
        public bool? ChangeSshKeyAfterCheckin { get; set; }

        /// <summary>
        /// Whether the SSH key will be protected with a passphrase each time it is checked out
        /// </summary>
        /// <value>Whether the SSH key will be protected with a passphrase each time it is checked out</value>

        [DataMember(Name="PassphraseProtectSshKey")]
        public bool? PassphraseProtectSshKey { get; set; }

        /// <summary>
        /// ID of the role the policy belongs to
        /// </summary>
        /// <value>ID of the role the policy belongs to</value>

        [DataMember(Name="RoleId")]
        public int? RoleId { get; set; }

        /// <summary>
        /// Name of the role the policy belongs to
        /// </summary>
        /// <value>Name of the role the policy belongs to</value>

        [DataMember(Name="RoleName")]
        public string RoleName { get; set; }

        /// <summary>
        /// Effective expiration date of role/policy
        /// </summary>
        /// <value>Effective expiration date of role/policy</value>

        [DataMember(Name="EffectiveExpirationDate")]
        public DateTime? EffectiveExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveHourlyRestrictionProperties
        /// </summary>

        [DataMember(Name="EffectiveHourlyRestrictionProperties")]
        public HourlyRestrictionProperties EffectiveHourlyRestrictionProperties { get; set; }

        /// <summary>
        /// ID of role member in the role granting access to user
        /// </summary>
        /// <value>ID of role member in the role granting access to user</value>

        [DataMember(Name="RoleIdentityId")]
        public int? RoleIdentityId { get; set; }

        /// <summary>
        /// Name of role member in the role granting access to user
        /// </summary>
        /// <value>Name of role member in the role granting access to user</value>

        [DataMember(Name="RoleIdentityName")]
        public string RoleIdentityName { get; set; }

        /// <summary>
        /// Gets or Sets RoleIdentityType
        /// </summary>

        [DataMember(Name="RoleIdentityType")]
        public PrincipalKind RoleIdentityType { get; set; }

        /// <summary>
        /// Whether account is linked to the user
        /// </summary>
        /// <value>Whether account is linked to the user</value>

        [DataMember(Name="FromLinkedAccount")]
        public bool? FromLinkedAccount { get; set; }

        /// <summary>
        /// Gets or Sets AccountRequestType
        /// </summary>

        [DataMember(Name="AccountRequestType")]
        public AccountRequestType AccountRequestType { get; set; }

        /// <summary>
        /// Last time the user last used password
        /// </summary>
        /// <value>Last time the user last used password</value>

        [DataMember(Name="PasswordLastAccessedDate")]
        public DateTime? PasswordLastAccessedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAccountEntitlement {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserDisplayName: ").Append(UserDisplayName).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  UserDomainName: ").Append(UserDomainName).Append("\n");
            sb.Append("  AdminRoles: ").Append(AdminRoles).Append("\n");
            sb.Append("  IsPartitionOwner: ").Append(IsPartitionOwner).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetNetworkAddress: ").Append(AssetNetworkAddress).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AccountAssetId: ").Append(AccountAssetId).Append("\n");
            sb.Append("  AccountAssetName: ").Append(AccountAssetName).Append("\n");
            sb.Append("  AccessPolicyId: ").Append(AccessPolicyId).Append("\n");
            sb.Append("  AccessPolicyName: ").Append(AccessPolicyName).Append("\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  AllowSessionPasswordRelease: ").Append(AllowSessionPasswordRelease).Append("\n");
            sb.Append("  AllowSessionSshKeyRelease: ").Append(AllowSessionSshKeyRelease).Append("\n");
            sb.Append("  ChangePasswordAfterCheckin: ").Append(ChangePasswordAfterCheckin).Append("\n");
            sb.Append("  ChangeSshKeyAfterCheckin: ").Append(ChangeSshKeyAfterCheckin).Append("\n");
            sb.Append("  PassphraseProtectSshKey: ").Append(PassphraseProtectSshKey).Append("\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  EffectiveExpirationDate: ").Append(EffectiveExpirationDate).Append("\n");
            sb.Append("  EffectiveHourlyRestrictionProperties: ").Append(EffectiveHourlyRestrictionProperties).Append("\n");
            sb.Append("  RoleIdentityId: ").Append(RoleIdentityId).Append("\n");
            sb.Append("  RoleIdentityName: ").Append(RoleIdentityName).Append("\n");
            sb.Append("  RoleIdentityType: ").Append(RoleIdentityType).Append("\n");
            sb.Append("  FromLinkedAccount: ").Append(FromLinkedAccount).Append("\n");
            sb.Append("  AccountRequestType: ").Append(AccountRequestType).Append("\n");
            sb.Append("  PasswordLastAccessedDate: ").Append(PasswordLastAccessedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserAccountEntitlement)obj);
        }

        /// <summary>
        /// Returns true if UserAccountEntitlement instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAccountEntitlement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAccountEntitlement other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserDisplayName == other.UserDisplayName ||
                    UserDisplayName != null &&
                    UserDisplayName.Equals(other.UserDisplayName)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    UserDomainName == other.UserDomainName ||
                    UserDomainName != null &&
                    UserDomainName.Equals(other.UserDomainName)
                ) && 
                (
                    AdminRoles == other.AdminRoles ||
                    AdminRoles != null &&
                    AdminRoles.SequenceEqual(other.AdminRoles)
                ) && 
                (
                    IsPartitionOwner == other.IsPartitionOwner ||
                    IsPartitionOwner != null &&
                    IsPartitionOwner.Equals(other.IsPartitionOwner)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetNetworkAddress == other.AssetNetworkAddress ||
                    AssetNetworkAddress != null &&
                    AssetNetworkAddress.Equals(other.AssetNetworkAddress)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AccountAssetId == other.AccountAssetId ||
                    AccountAssetId != null &&
                    AccountAssetId.Equals(other.AccountAssetId)
                ) && 
                (
                    AccountAssetName == other.AccountAssetName ||
                    AccountAssetName != null &&
                    AccountAssetName.Equals(other.AccountAssetName)
                ) && 
                (
                    AccessPolicyId == other.AccessPolicyId ||
                    AccessPolicyId != null &&
                    AccessPolicyId.Equals(other.AccessPolicyId)
                ) && 
                (
                    AccessPolicyName == other.AccessPolicyName ||
                    AccessPolicyName != null &&
                    AccessPolicyName.Equals(other.AccessPolicyName)
                ) && 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    AllowSessionPasswordRelease == other.AllowSessionPasswordRelease ||
                    AllowSessionPasswordRelease != null &&
                    AllowSessionPasswordRelease.Equals(other.AllowSessionPasswordRelease)
                ) && 
                (
                    AllowSessionSshKeyRelease == other.AllowSessionSshKeyRelease ||
                    AllowSessionSshKeyRelease != null &&
                    AllowSessionSshKeyRelease.Equals(other.AllowSessionSshKeyRelease)
                ) && 
                (
                    ChangePasswordAfterCheckin == other.ChangePasswordAfterCheckin ||
                    ChangePasswordAfterCheckin != null &&
                    ChangePasswordAfterCheckin.Equals(other.ChangePasswordAfterCheckin)
                ) && 
                (
                    ChangeSshKeyAfterCheckin == other.ChangeSshKeyAfterCheckin ||
                    ChangeSshKeyAfterCheckin != null &&
                    ChangeSshKeyAfterCheckin.Equals(other.ChangeSshKeyAfterCheckin)
                ) && 
                (
                    PassphraseProtectSshKey == other.PassphraseProtectSshKey ||
                    PassphraseProtectSshKey != null &&
                    PassphraseProtectSshKey.Equals(other.PassphraseProtectSshKey)
                ) && 
                (
                    RoleId == other.RoleId ||
                    RoleId != null &&
                    RoleId.Equals(other.RoleId)
                ) && 
                (
                    RoleName == other.RoleName ||
                    RoleName != null &&
                    RoleName.Equals(other.RoleName)
                ) && 
                (
                    EffectiveExpirationDate == other.EffectiveExpirationDate ||
                    EffectiveExpirationDate != null &&
                    EffectiveExpirationDate.Equals(other.EffectiveExpirationDate)
                ) && 
                (
                    EffectiveHourlyRestrictionProperties == other.EffectiveHourlyRestrictionProperties ||
                    EffectiveHourlyRestrictionProperties != null &&
                    EffectiveHourlyRestrictionProperties.Equals(other.EffectiveHourlyRestrictionProperties)
                ) && 
                (
                    RoleIdentityId == other.RoleIdentityId ||
                    RoleIdentityId != null &&
                    RoleIdentityId.Equals(other.RoleIdentityId)
                ) && 
                (
                    RoleIdentityName == other.RoleIdentityName ||
                    RoleIdentityName != null &&
                    RoleIdentityName.Equals(other.RoleIdentityName)
                ) && 
                (
                    RoleIdentityType == other.RoleIdentityType ||
                    RoleIdentityType != null &&
                    RoleIdentityType.Equals(other.RoleIdentityType)
                ) && 
                (
                    FromLinkedAccount == other.FromLinkedAccount ||
                    FromLinkedAccount != null &&
                    FromLinkedAccount.Equals(other.FromLinkedAccount)
                ) && 
                (
                    AccountRequestType == other.AccountRequestType ||
                    AccountRequestType != null &&
                    AccountRequestType.Equals(other.AccountRequestType)
                ) && 
                (
                    PasswordLastAccessedDate == other.PasswordLastAccessedDate ||
                    PasswordLastAccessedDate != null &&
                    PasswordLastAccessedDate.Equals(other.PasswordLastAccessedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserDisplayName != null)
                    hashCode = hashCode * 59 + UserDisplayName.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (UserDomainName != null)
                    hashCode = hashCode * 59 + UserDomainName.GetHashCode();
                    if (AdminRoles != null)
                    hashCode = hashCode * 59 + AdminRoles.GetHashCode();
                    if (IsPartitionOwner != null)
                    hashCode = hashCode * 59 + IsPartitionOwner.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetNetworkAddress != null)
                    hashCode = hashCode * 59 + AssetNetworkAddress.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AccountAssetId != null)
                    hashCode = hashCode * 59 + AccountAssetId.GetHashCode();
                    if (AccountAssetName != null)
                    hashCode = hashCode * 59 + AccountAssetName.GetHashCode();
                    if (AccessPolicyId != null)
                    hashCode = hashCode * 59 + AccessPolicyId.GetHashCode();
                    if (AccessPolicyName != null)
                    hashCode = hashCode * 59 + AccessPolicyName.GetHashCode();
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (AllowSessionPasswordRelease != null)
                    hashCode = hashCode * 59 + AllowSessionPasswordRelease.GetHashCode();
                    if (AllowSessionSshKeyRelease != null)
                    hashCode = hashCode * 59 + AllowSessionSshKeyRelease.GetHashCode();
                    if (ChangePasswordAfterCheckin != null)
                    hashCode = hashCode * 59 + ChangePasswordAfterCheckin.GetHashCode();
                    if (ChangeSshKeyAfterCheckin != null)
                    hashCode = hashCode * 59 + ChangeSshKeyAfterCheckin.GetHashCode();
                    if (PassphraseProtectSshKey != null)
                    hashCode = hashCode * 59 + PassphraseProtectSshKey.GetHashCode();
                    if (RoleId != null)
                    hashCode = hashCode * 59 + RoleId.GetHashCode();
                    if (RoleName != null)
                    hashCode = hashCode * 59 + RoleName.GetHashCode();
                    if (EffectiveExpirationDate != null)
                    hashCode = hashCode * 59 + EffectiveExpirationDate.GetHashCode();
                    if (EffectiveHourlyRestrictionProperties != null)
                    hashCode = hashCode * 59 + EffectiveHourlyRestrictionProperties.GetHashCode();
                    if (RoleIdentityId != null)
                    hashCode = hashCode * 59 + RoleIdentityId.GetHashCode();
                    if (RoleIdentityName != null)
                    hashCode = hashCode * 59 + RoleIdentityName.GetHashCode();
                    if (RoleIdentityType != null)
                    hashCode = hashCode * 59 + RoleIdentityType.GetHashCode();
                    if (FromLinkedAccount != null)
                    hashCode = hashCode * 59 + FromLinkedAccount.GetHashCode();
                    if (AccountRequestType != null)
                    hashCode = hashCode * 59 + AccountRequestType.GetHashCode();
                    if (PasswordLastAccessedDate != null)
                    hashCode = hashCode * 59 + PasswordLastAccessedDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserAccountEntitlement left, UserAccountEntitlement right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserAccountEntitlement left, UserAccountEntitlement right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
