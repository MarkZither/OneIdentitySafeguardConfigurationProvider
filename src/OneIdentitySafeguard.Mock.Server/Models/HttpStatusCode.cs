/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
        /// <summary>
        /// Gets or Sets HttpStatusCode
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum HttpStatusCode
        {
            /// <summary>
            /// Enum ContinueEnum for Continue
            /// </summary>
            [EnumMember(Value = "Continue")]
            ContinueEnum = 0,
            /// <summary>
            /// Enum SwitchingProtocolsEnum for SwitchingProtocols
            /// </summary>
            [EnumMember(Value = "SwitchingProtocols")]
            SwitchingProtocolsEnum = 1,
            /// <summary>
            /// Enum ProcessingEnum for Processing
            /// </summary>
            [EnumMember(Value = "Processing")]
            ProcessingEnum = 2,
            /// <summary>
            /// Enum EarlyHintsEnum for EarlyHints
            /// </summary>
            [EnumMember(Value = "EarlyHints")]
            EarlyHintsEnum = 3,
            /// <summary>
            /// Enum OKEnum for OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OKEnum = 4,
            /// <summary>
            /// Enum CreatedEnum for Created
            /// </summary>
            [EnumMember(Value = "Created")]
            CreatedEnum = 5,
            /// <summary>
            /// Enum AcceptedEnum for Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            AcceptedEnum = 6,
            /// <summary>
            /// Enum NonAuthoritativeInformationEnum for NonAuthoritativeInformation
            /// </summary>
            [EnumMember(Value = "NonAuthoritativeInformation")]
            NonAuthoritativeInformationEnum = 7,
            /// <summary>
            /// Enum NoContentEnum for NoContent
            /// </summary>
            [EnumMember(Value = "NoContent")]
            NoContentEnum = 8,
            /// <summary>
            /// Enum ResetContentEnum for ResetContent
            /// </summary>
            [EnumMember(Value = "ResetContent")]
            ResetContentEnum = 9,
            /// <summary>
            /// Enum PartialContentEnum for PartialContent
            /// </summary>
            [EnumMember(Value = "PartialContent")]
            PartialContentEnum = 10,
            /// <summary>
            /// Enum MultiStatusEnum for MultiStatus
            /// </summary>
            [EnumMember(Value = "MultiStatus")]
            MultiStatusEnum = 11,
            /// <summary>
            /// Enum AlreadyReportedEnum for AlreadyReported
            /// </summary>
            [EnumMember(Value = "AlreadyReported")]
            AlreadyReportedEnum = 12,
            /// <summary>
            /// Enum IMUsedEnum for IMUsed
            /// </summary>
            [EnumMember(Value = "IMUsed")]
            IMUsedEnum = 13,
            /// <summary>
            /// Enum MultipleChoicesEnum for MultipleChoices
            /// </summary>
            [EnumMember(Value = "MultipleChoices")]
            MultipleChoicesEnum = 14,
            /// <summary>
            /// Enum AmbiguousEnum for Ambiguous
            /// </summary>
            [EnumMember(Value = "Ambiguous")]
            AmbiguousEnum = 15,
            /// <summary>
            /// Enum MovedPermanentlyEnum for MovedPermanently
            /// </summary>
            [EnumMember(Value = "MovedPermanently")]
            MovedPermanentlyEnum = 16,
            /// <summary>
            /// Enum MovedEnum for Moved
            /// </summary>
            [EnumMember(Value = "Moved")]
            MovedEnum = 17,
            /// <summary>
            /// Enum FoundEnum for Found
            /// </summary>
            [EnumMember(Value = "Found")]
            FoundEnum = 18,
            /// <summary>
            /// Enum RedirectEnum for Redirect
            /// </summary>
            [EnumMember(Value = "Redirect")]
            RedirectEnum = 19,
            /// <summary>
            /// Enum SeeOtherEnum for SeeOther
            /// </summary>
            [EnumMember(Value = "SeeOther")]
            SeeOtherEnum = 20,
            /// <summary>
            /// Enum RedirectMethodEnum for RedirectMethod
            /// </summary>
            [EnumMember(Value = "RedirectMethod")]
            RedirectMethodEnum = 21,
            /// <summary>
            /// Enum NotModifiedEnum for NotModified
            /// </summary>
            [EnumMember(Value = "NotModified")]
            NotModifiedEnum = 22,
            /// <summary>
            /// Enum UseProxyEnum for UseProxy
            /// </summary>
            [EnumMember(Value = "UseProxy")]
            UseProxyEnum = 23,
            /// <summary>
            /// Enum UnusedEnum for Unused
            /// </summary>
            [EnumMember(Value = "Unused")]
            UnusedEnum = 24,
            /// <summary>
            /// Enum TemporaryRedirectEnum for TemporaryRedirect
            /// </summary>
            [EnumMember(Value = "TemporaryRedirect")]
            TemporaryRedirectEnum = 25,
            /// <summary>
            /// Enum RedirectKeepVerbEnum for RedirectKeepVerb
            /// </summary>
            [EnumMember(Value = "RedirectKeepVerb")]
            RedirectKeepVerbEnum = 26,
            /// <summary>
            /// Enum PermanentRedirectEnum for PermanentRedirect
            /// </summary>
            [EnumMember(Value = "PermanentRedirect")]
            PermanentRedirectEnum = 27,
            /// <summary>
            /// Enum BadRequestEnum for BadRequest
            /// </summary>
            [EnumMember(Value = "BadRequest")]
            BadRequestEnum = 28,
            /// <summary>
            /// Enum UnauthorizedEnum for Unauthorized
            /// </summary>
            [EnumMember(Value = "Unauthorized")]
            UnauthorizedEnum = 29,
            /// <summary>
            /// Enum PaymentRequiredEnum for PaymentRequired
            /// </summary>
            [EnumMember(Value = "PaymentRequired")]
            PaymentRequiredEnum = 30,
            /// <summary>
            /// Enum ForbiddenEnum for Forbidden
            /// </summary>
            [EnumMember(Value = "Forbidden")]
            ForbiddenEnum = 31,
            /// <summary>
            /// Enum NotFoundEnum for NotFound
            /// </summary>
            [EnumMember(Value = "NotFound")]
            NotFoundEnum = 32,
            /// <summary>
            /// Enum MethodNotAllowedEnum for MethodNotAllowed
            /// </summary>
            [EnumMember(Value = "MethodNotAllowed")]
            MethodNotAllowedEnum = 33,
            /// <summary>
            /// Enum NotAcceptableEnum for NotAcceptable
            /// </summary>
            [EnumMember(Value = "NotAcceptable")]
            NotAcceptableEnum = 34,
            /// <summary>
            /// Enum ProxyAuthenticationRequiredEnum for ProxyAuthenticationRequired
            /// </summary>
            [EnumMember(Value = "ProxyAuthenticationRequired")]
            ProxyAuthenticationRequiredEnum = 35,
            /// <summary>
            /// Enum RequestTimeoutEnum for RequestTimeout
            /// </summary>
            [EnumMember(Value = "RequestTimeout")]
            RequestTimeoutEnum = 36,
            /// <summary>
            /// Enum ConflictEnum for Conflict
            /// </summary>
            [EnumMember(Value = "Conflict")]
            ConflictEnum = 37,
            /// <summary>
            /// Enum GoneEnum for Gone
            /// </summary>
            [EnumMember(Value = "Gone")]
            GoneEnum = 38,
            /// <summary>
            /// Enum LengthRequiredEnum for LengthRequired
            /// </summary>
            [EnumMember(Value = "LengthRequired")]
            LengthRequiredEnum = 39,
            /// <summary>
            /// Enum PreconditionFailedEnum for PreconditionFailed
            /// </summary>
            [EnumMember(Value = "PreconditionFailed")]
            PreconditionFailedEnum = 40,
            /// <summary>
            /// Enum RequestEntityTooLargeEnum for RequestEntityTooLarge
            /// </summary>
            [EnumMember(Value = "RequestEntityTooLarge")]
            RequestEntityTooLargeEnum = 41,
            /// <summary>
            /// Enum RequestUriTooLongEnum for RequestUriTooLong
            /// </summary>
            [EnumMember(Value = "RequestUriTooLong")]
            RequestUriTooLongEnum = 42,
            /// <summary>
            /// Enum UnsupportedMediaTypeEnum for UnsupportedMediaType
            /// </summary>
            [EnumMember(Value = "UnsupportedMediaType")]
            UnsupportedMediaTypeEnum = 43,
            /// <summary>
            /// Enum RequestedRangeNotSatisfiableEnum for RequestedRangeNotSatisfiable
            /// </summary>
            [EnumMember(Value = "RequestedRangeNotSatisfiable")]
            RequestedRangeNotSatisfiableEnum = 44,
            /// <summary>
            /// Enum ExpectationFailedEnum for ExpectationFailed
            /// </summary>
            [EnumMember(Value = "ExpectationFailed")]
            ExpectationFailedEnum = 45,
            /// <summary>
            /// Enum MisdirectedRequestEnum for MisdirectedRequest
            /// </summary>
            [EnumMember(Value = "MisdirectedRequest")]
            MisdirectedRequestEnum = 46,
            /// <summary>
            /// Enum UnprocessableEntityEnum for UnprocessableEntity
            /// </summary>
            [EnumMember(Value = "UnprocessableEntity")]
            UnprocessableEntityEnum = 47,
            /// <summary>
            /// Enum LockedEnum for Locked
            /// </summary>
            [EnumMember(Value = "Locked")]
            LockedEnum = 48,
            /// <summary>
            /// Enum FailedDependencyEnum for FailedDependency
            /// </summary>
            [EnumMember(Value = "FailedDependency")]
            FailedDependencyEnum = 49,
            /// <summary>
            /// Enum UpgradeRequiredEnum for UpgradeRequired
            /// </summary>
            [EnumMember(Value = "UpgradeRequired")]
            UpgradeRequiredEnum = 50,
            /// <summary>
            /// Enum PreconditionRequiredEnum for PreconditionRequired
            /// </summary>
            [EnumMember(Value = "PreconditionRequired")]
            PreconditionRequiredEnum = 51,
            /// <summary>
            /// Enum TooManyRequestsEnum for TooManyRequests
            /// </summary>
            [EnumMember(Value = "TooManyRequests")]
            TooManyRequestsEnum = 52,
            /// <summary>
            /// Enum RequestHeaderFieldsTooLargeEnum for RequestHeaderFieldsTooLarge
            /// </summary>
            [EnumMember(Value = "RequestHeaderFieldsTooLarge")]
            RequestHeaderFieldsTooLargeEnum = 53,
            /// <summary>
            /// Enum UnavailableForLegalReasonsEnum for UnavailableForLegalReasons
            /// </summary>
            [EnumMember(Value = "UnavailableForLegalReasons")]
            UnavailableForLegalReasonsEnum = 54,
            /// <summary>
            /// Enum InternalServerErrorEnum for InternalServerError
            /// </summary>
            [EnumMember(Value = "InternalServerError")]
            InternalServerErrorEnum = 55,
            /// <summary>
            /// Enum NotImplementedEnum for NotImplemented
            /// </summary>
            [EnumMember(Value = "NotImplemented")]
            NotImplementedEnum = 56,
            /// <summary>
            /// Enum BadGatewayEnum for BadGateway
            /// </summary>
            [EnumMember(Value = "BadGateway")]
            BadGatewayEnum = 57,
            /// <summary>
            /// Enum ServiceUnavailableEnum for ServiceUnavailable
            /// </summary>
            [EnumMember(Value = "ServiceUnavailable")]
            ServiceUnavailableEnum = 58,
            /// <summary>
            /// Enum GatewayTimeoutEnum for GatewayTimeout
            /// </summary>
            [EnumMember(Value = "GatewayTimeout")]
            GatewayTimeoutEnum = 59,
            /// <summary>
            /// Enum HttpVersionNotSupportedEnum for HttpVersionNotSupported
            /// </summary>
            [EnumMember(Value = "HttpVersionNotSupported")]
            HttpVersionNotSupportedEnum = 60,
            /// <summary>
            /// Enum VariantAlsoNegotiatesEnum for VariantAlsoNegotiates
            /// </summary>
            [EnumMember(Value = "VariantAlsoNegotiates")]
            VariantAlsoNegotiatesEnum = 61,
            /// <summary>
            /// Enum InsufficientStorageEnum for InsufficientStorage
            /// </summary>
            [EnumMember(Value = "InsufficientStorage")]
            InsufficientStorageEnum = 62,
            /// <summary>
            /// Enum LoopDetectedEnum for LoopDetected
            /// </summary>
            [EnumMember(Value = "LoopDetected")]
            LoopDetectedEnum = 63,
            /// <summary>
            /// Enum NotExtendedEnum for NotExtended
            /// </summary>
            [EnumMember(Value = "NotExtended")]
            NotExtendedEnum = 64,
            /// <summary>
            /// Enum NetworkAuthenticationRequiredEnum for NetworkAuthenticationRequired
            /// </summary>
            [EnumMember(Value = "NetworkAuthenticationRequired")]
            NetworkAuthenticationRequiredEnum = 65        }
}
