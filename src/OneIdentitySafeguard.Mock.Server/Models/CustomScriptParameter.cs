/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A parameters that should be provided to the custom platform script when invoked
    /// </summary>
    [DataContract]
    public partial class CustomScriptParameter : IEquatable<CustomScriptParameter>
    { 
        /// <summary>
        /// The name of the parameter
        /// </summary>
        /// <value>The name of the parameter</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Short explanation of the parameter
        /// </summary>
        /// <value>Short explanation of the parameter</value>

        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Default value of the parameter
        /// </summary>
        /// <value>Default value of the parameter</value>

        [DataMember(Name="DefaultValue")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="Type")]
        public CustomScriptParameterType Type { get; set; }

        /// <summary>
        /// Gets or Sets TaskName
        /// </summary>

        [DataMember(Name="TaskName")]
        public TaskNames TaskName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomScriptParameter {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomScriptParameter)obj);
        }

        /// <summary>
        /// Returns true if CustomScriptParameter instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomScriptParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomScriptParameter other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DefaultValue == other.DefaultValue ||
                    DefaultValue != null &&
                    DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    TaskName == other.TaskName ||
                    TaskName != null &&
                    TaskName.Equals(other.TaskName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (TaskName != null)
                    hashCode = hashCode * 59 + TaskName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomScriptParameter left, CustomScriptParameter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomScriptParameter left, CustomScriptParameter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
