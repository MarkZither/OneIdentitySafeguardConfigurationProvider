/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a member of a policy
    /// </summary>
    [DataContract]
    public partial class AccountPolicyMembership : IEquatable<AccountPolicyMembership>
    { 
        /// <summary>
        /// Database ID of the policy
        /// </summary>
        /// <value>Database ID of the policy</value>

        [DataMember(Name="PolicyId")]
        public int? PolicyId { get; set; }

        /// <summary>
        /// Database ID of the account that is managed by the policy
        /// </summary>
        /// <value>Database ID of the account that is managed by the policy</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Database ID of the policy member that manages the account
        /// </summary>
        /// <value>Database ID of the policy member that manages the account</value>

        [DataMember(Name="PolicyMemberId")]
        public int? PolicyMemberId { get; set; }

        /// <summary>
        /// Name of the policy member
        /// </summary>
        /// <value>Name of the policy member</value>

        [DataMember(Name="PolicyMemberName")]
        public string PolicyMemberName { get; set; }

        /// <summary>
        /// Whether the policy member is an account or a account group
        /// </summary>
        /// <value>Whether the policy member is an account or a account group</value>

        [DataMember(Name="PolicyMemberIsAccountGroup")]
        public bool? PolicyMemberIsAccountGroup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountPolicyMembership {\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  PolicyMemberId: ").Append(PolicyMemberId).Append("\n");
            sb.Append("  PolicyMemberName: ").Append(PolicyMemberName).Append("\n");
            sb.Append("  PolicyMemberIsAccountGroup: ").Append(PolicyMemberIsAccountGroup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountPolicyMembership)obj);
        }

        /// <summary>
        /// Returns true if AccountPolicyMembership instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountPolicyMembership to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountPolicyMembership other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PolicyId == other.PolicyId ||
                    PolicyId != null &&
                    PolicyId.Equals(other.PolicyId)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    PolicyMemberId == other.PolicyMemberId ||
                    PolicyMemberId != null &&
                    PolicyMemberId.Equals(other.PolicyMemberId)
                ) && 
                (
                    PolicyMemberName == other.PolicyMemberName ||
                    PolicyMemberName != null &&
                    PolicyMemberName.Equals(other.PolicyMemberName)
                ) && 
                (
                    PolicyMemberIsAccountGroup == other.PolicyMemberIsAccountGroup ||
                    PolicyMemberIsAccountGroup != null &&
                    PolicyMemberIsAccountGroup.Equals(other.PolicyMemberIsAccountGroup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PolicyId != null)
                    hashCode = hashCode * 59 + PolicyId.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (PolicyMemberId != null)
                    hashCode = hashCode * 59 + PolicyMemberId.GetHashCode();
                    if (PolicyMemberName != null)
                    hashCode = hashCode * 59 + PolicyMemberName.GetHashCode();
                    if (PolicyMemberIsAccountGroup != null)
                    hashCode = hashCode * 59 + PolicyMemberIsAccountGroup.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountPolicyMembership left, AccountPolicyMembership right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountPolicyMembership left, AccountPolicyMembership right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
