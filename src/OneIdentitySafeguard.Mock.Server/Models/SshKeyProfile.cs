/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Configuration for managing SSH keys for accounts/assets in a partition
    /// </summary>
    [DataContract]
    public partial class SshKeyProfile : IEquatable<SshKeyProfile>
    { 
        /// <summary>
        /// Database ID of the profile (Read-only)
        /// </summary>
        /// <value>Database ID of the profile (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of this profile
        /// </summary>
        /// <value>Name of this profile</value>
        [Required]

        [StringLength(70, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of this profile
        /// </summary>
        /// <value>Description of this profile</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The database ID of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The database ID of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserId")]
        public int? CreatedByUserId { get; set; }

        /// <summary>
        /// The display name of the user that created this entity (Read-only)
        /// </summary>
        /// <value>The display name of the user that created this entity (Read-only)</value>

        [DataMember(Name="CreatedByUserDisplayName")]
        public string CreatedByUserDisplayName { get; set; }

        /// <summary>
        /// Id of the SSH key Check Schedule
        /// </summary>
        /// <value>Id of the SSH key Check Schedule</value>

        [DataMember(Name="CheckScheduleId")]
        public int? CheckScheduleId { get; set; }

        /// <summary>
        /// Name of the SSH key Check Schedule
        /// </summary>
        /// <value>Name of the SSH key Check Schedule</value>

        [DataMember(Name="CheckScheduleName")]
        public string CheckScheduleName { get; set; }

        /// <summary>
        /// Id of the SSH key Change Schedule
        /// </summary>
        /// <value>Id of the SSH key Change Schedule</value>

        [DataMember(Name="ChangeScheduleId")]
        public int? ChangeScheduleId { get; set; }

        /// <summary>
        /// Name of the SSH key Change Schedule
        /// </summary>
        /// <value>Name of the SSH key Change Schedule</value>

        [DataMember(Name="ChangeScheduleName")]
        public string ChangeScheduleName { get; set; }

        /// <summary>
        /// Id of the SSH key discovery Schedule
        /// </summary>
        /// <value>Id of the SSH key discovery Schedule</value>

        [DataMember(Name="DiscoveryScheduleId")]
        public int? DiscoveryScheduleId { get; set; }

        /// <summary>
        /// Name of the SSH key discovery Schedule
        /// </summary>
        /// <value>Name of the SSH key discovery Schedule</value>

        [DataMember(Name="DiscoveryScheduleName")]
        public string DiscoveryScheduleName { get; set; }

        /// <summary>
        /// Gets or Sets CheckSchedule
        /// </summary>

        [DataMember(Name="CheckSchedule")]
        public SshKeyCheckSchedule CheckSchedule { get; set; }

        /// <summary>
        /// Gets or Sets ChangeSchedule
        /// </summary>

        [DataMember(Name="ChangeSchedule")]
        public SshKeyChangeSchedule ChangeSchedule { get; set; }

        /// <summary>
        /// Gets or Sets DiscoverySchedule
        /// </summary>

        [DataMember(Name="DiscoverySchedule")]
        public SshKeyDiscoverySchedule DiscoverySchedule { get; set; }

        /// <summary>
        /// The asset partition this profile belongs to (Read-only)
        /// </summary>
        /// <value>The asset partition this profile belongs to (Read-only)</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of the asset partition this profile belongs to (Read-only)
        /// </summary>
        /// <value>Name of the asset partition this profile belongs to (Read-only)</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// List of partition owners that manage this profile
        /// </summary>
        /// <value>List of partition owners that manage this profile</value>

        [DataMember(Name="Owners")]
        public List<User> Owners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SshKeyProfile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedByUserDisplayName: ").Append(CreatedByUserDisplayName).Append("\n");
            sb.Append("  CheckScheduleId: ").Append(CheckScheduleId).Append("\n");
            sb.Append("  CheckScheduleName: ").Append(CheckScheduleName).Append("\n");
            sb.Append("  ChangeScheduleId: ").Append(ChangeScheduleId).Append("\n");
            sb.Append("  ChangeScheduleName: ").Append(ChangeScheduleName).Append("\n");
            sb.Append("  DiscoveryScheduleId: ").Append(DiscoveryScheduleId).Append("\n");
            sb.Append("  DiscoveryScheduleName: ").Append(DiscoveryScheduleName).Append("\n");
            sb.Append("  CheckSchedule: ").Append(CheckSchedule).Append("\n");
            sb.Append("  ChangeSchedule: ").Append(ChangeSchedule).Append("\n");
            sb.Append("  DiscoverySchedule: ").Append(DiscoverySchedule).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  Owners: ").Append(Owners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SshKeyProfile)obj);
        }

        /// <summary>
        /// Returns true if SshKeyProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of SshKeyProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SshKeyProfile other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    CreatedByUserId == other.CreatedByUserId ||
                    CreatedByUserId != null &&
                    CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    CreatedByUserDisplayName == other.CreatedByUserDisplayName ||
                    CreatedByUserDisplayName != null &&
                    CreatedByUserDisplayName.Equals(other.CreatedByUserDisplayName)
                ) && 
                (
                    CheckScheduleId == other.CheckScheduleId ||
                    CheckScheduleId != null &&
                    CheckScheduleId.Equals(other.CheckScheduleId)
                ) && 
                (
                    CheckScheduleName == other.CheckScheduleName ||
                    CheckScheduleName != null &&
                    CheckScheduleName.Equals(other.CheckScheduleName)
                ) && 
                (
                    ChangeScheduleId == other.ChangeScheduleId ||
                    ChangeScheduleId != null &&
                    ChangeScheduleId.Equals(other.ChangeScheduleId)
                ) && 
                (
                    ChangeScheduleName == other.ChangeScheduleName ||
                    ChangeScheduleName != null &&
                    ChangeScheduleName.Equals(other.ChangeScheduleName)
                ) && 
                (
                    DiscoveryScheduleId == other.DiscoveryScheduleId ||
                    DiscoveryScheduleId != null &&
                    DiscoveryScheduleId.Equals(other.DiscoveryScheduleId)
                ) && 
                (
                    DiscoveryScheduleName == other.DiscoveryScheduleName ||
                    DiscoveryScheduleName != null &&
                    DiscoveryScheduleName.Equals(other.DiscoveryScheduleName)
                ) && 
                (
                    CheckSchedule == other.CheckSchedule ||
                    CheckSchedule != null &&
                    CheckSchedule.Equals(other.CheckSchedule)
                ) && 
                (
                    ChangeSchedule == other.ChangeSchedule ||
                    ChangeSchedule != null &&
                    ChangeSchedule.Equals(other.ChangeSchedule)
                ) && 
                (
                    DiscoverySchedule == other.DiscoverySchedule ||
                    DiscoverySchedule != null &&
                    DiscoverySchedule.Equals(other.DiscoverySchedule)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    Owners == other.Owners ||
                    Owners != null &&
                    Owners.SequenceEqual(other.Owners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (CreatedByUserId != null)
                    hashCode = hashCode * 59 + CreatedByUserId.GetHashCode();
                    if (CreatedByUserDisplayName != null)
                    hashCode = hashCode * 59 + CreatedByUserDisplayName.GetHashCode();
                    if (CheckScheduleId != null)
                    hashCode = hashCode * 59 + CheckScheduleId.GetHashCode();
                    if (CheckScheduleName != null)
                    hashCode = hashCode * 59 + CheckScheduleName.GetHashCode();
                    if (ChangeScheduleId != null)
                    hashCode = hashCode * 59 + ChangeScheduleId.GetHashCode();
                    if (ChangeScheduleName != null)
                    hashCode = hashCode * 59 + ChangeScheduleName.GetHashCode();
                    if (DiscoveryScheduleId != null)
                    hashCode = hashCode * 59 + DiscoveryScheduleId.GetHashCode();
                    if (DiscoveryScheduleName != null)
                    hashCode = hashCode * 59 + DiscoveryScheduleName.GetHashCode();
                    if (CheckSchedule != null)
                    hashCode = hashCode * 59 + CheckSchedule.GetHashCode();
                    if (ChangeSchedule != null)
                    hashCode = hashCode * 59 + ChangeSchedule.GetHashCode();
                    if (DiscoverySchedule != null)
                    hashCode = hashCode * 59 + DiscoverySchedule.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (Owners != null)
                    hashCode = hashCode * 59 + Owners.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SshKeyProfile left, SshKeyProfile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SshKeyProfile left, SshKeyProfile right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
