/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a user that an application can impersonate.
    /// </summary>
    [DataContract]
    public partial class RegistrationAlias : IEquatable<RegistrationAlias>
    { 
        /// <summary>
        /// User ID.
        /// </summary>
        /// <value>User ID.</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// User first name.
        /// </summary>
        /// <value>User first name.</value>

        [DataMember(Name="FirstName")]
        public string FirstName { get; private set; }

        /// <summary>
        /// User last name.
        /// </summary>
        /// <value>User last name.</value>

        [DataMember(Name="LastName")]
        public string LastName { get; private set; }

        /// <summary>
        /// User display name.
        /// </summary>
        /// <value>User display name.</value>

        [DataMember(Name="DisplayName")]
        public string DisplayName { get; private set; }

        /// <summary>
        /// User disabled flag.
        /// </summary>
        /// <value>User disabled flag.</value>

        [DataMember(Name="Disabled")]
        public int? Disabled { get; private set; }

        /// <summary>
        /// Directory name.
        /// </summary>
        /// <value>Directory name.</value>

        [DataMember(Name="DirectoryName")]
        public string DirectoryName { get; private set; }

        /// <summary>
        /// Domain name.
        /// </summary>
        /// <value>Domain name.</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; private set; }

        /// <summary>
        /// User name.
        /// </summary>
        /// <value>User name.</value>

        [DataMember(Name="UserName")]
        public string UserName { get; private set; }

        /// <summary>
        /// Provider name.
        /// </summary>
        /// <value>Provider name.</value>

        [DataMember(Name="ProviderName")]
        public string ProviderName { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationAlias {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  DirectoryName: ").Append(DirectoryName).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegistrationAlias)obj);
        }

        /// <summary>
        /// Returns true if RegistrationAlias instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistrationAlias to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationAlias other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    DirectoryName == other.DirectoryName ||
                    DirectoryName != null &&
                    DirectoryName.Equals(other.DirectoryName)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    UserName == other.UserName ||
                    UserName != null &&
                    UserName.Equals(other.UserName)
                ) && 
                (
                    ProviderName == other.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(other.ProviderName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (DirectoryName != null)
                    hashCode = hashCode * 59 + DirectoryName.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (UserName != null)
                    hashCode = hashCode * 59 + UserName.GetHashCode();
                    if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RegistrationAlias left, RegistrationAlias right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegistrationAlias left, RegistrationAlias right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
