/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Account access request properties
    /// </summary>
    [DataContract]
    public partial class AccountRequestProperties : IEquatable<AccountRequestProperties>
    { 
        /// <summary>
        /// When set to {true}, an end user may submit a new Password Access Request for the account.  When set to {false}, an end user will receive an error when trying to submit a new Password Access Request.
        /// </summary>
        /// <value>When set to {true}, an end user may submit a new Password Access Request for the account.  When set to {false}, an end user will receive an error when trying to submit a new Password Access Request.</value>

        [DataMember(Name="AllowPasswordRequest")]
        public bool? AllowPasswordRequest { get; set; }

        /// <summary>
        /// When set to {true}, an end user may submit a new session based Access Request for the account.  When set to {false}, an end user will receive an error when trying to submit a new session based Access Request.
        /// </summary>
        /// <value>When set to {true}, an end user may submit a new session based Access Request for the account.  When set to {false}, an end user will receive an error when trying to submit a new session based Access Request.</value>

        [DataMember(Name="AllowSessionRequest")]
        public bool? AllowSessionRequest { get; set; }

        /// <summary>
        /// When set to {true}, an end user may submit a new SSH Key Access Request for the account.  When set to {false}, an end user will receive an error when trying to submit a new SSH Key Access Request.
        /// </summary>
        /// <value>When set to {true}, an end user may submit a new SSH Key Access Request for the account.  When set to {false}, an end user will receive an error when trying to submit a new SSH Key Access Request.</value>

        [DataMember(Name="AllowSshKeyRequest")]
        public bool? AllowSshKeyRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountRequestProperties {\n");
            sb.Append("  AllowPasswordRequest: ").Append(AllowPasswordRequest).Append("\n");
            sb.Append("  AllowSessionRequest: ").Append(AllowSessionRequest).Append("\n");
            sb.Append("  AllowSshKeyRequest: ").Append(AllowSshKeyRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountRequestProperties)obj);
        }

        /// <summary>
        /// Returns true if AccountRequestProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountRequestProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountRequestProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowPasswordRequest == other.AllowPasswordRequest ||
                    AllowPasswordRequest != null &&
                    AllowPasswordRequest.Equals(other.AllowPasswordRequest)
                ) && 
                (
                    AllowSessionRequest == other.AllowSessionRequest ||
                    AllowSessionRequest != null &&
                    AllowSessionRequest.Equals(other.AllowSessionRequest)
                ) && 
                (
                    AllowSshKeyRequest == other.AllowSshKeyRequest ||
                    AllowSshKeyRequest != null &&
                    AllowSshKeyRequest.Equals(other.AllowSshKeyRequest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllowPasswordRequest != null)
                    hashCode = hashCode * 59 + AllowPasswordRequest.GetHashCode();
                    if (AllowSessionRequest != null)
                    hashCode = hashCode * 59 + AllowSessionRequest.GetHashCode();
                    if (AllowSshKeyRequest != null)
                    hashCode = hashCode * 59 + AllowSshKeyRequest.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountRequestProperties left, AccountRequestProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountRequestProperties left, AccountRequestProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
