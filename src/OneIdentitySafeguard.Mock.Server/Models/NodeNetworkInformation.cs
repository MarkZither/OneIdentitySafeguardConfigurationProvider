/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NodeNetworkInformation : IEquatable<NodeNetworkInformation>
    { 
        /// <summary>
        /// The IPv4 network address
        /// </summary>
        /// <value>The IPv4 network address</value>

        [DataMember(Name="Ipv4Address")]
        public string Ipv4Address { get; set; }

        /// <summary>
        /// The IPv6 network address
        /// </summary>
        /// <value>The IPv6 network address</value>

        [DataMember(Name="Ipv6Address")]
        public string Ipv6Address { get; set; }

        /// <summary>
        /// Whether the link is present
        /// </summary>
        /// <value>Whether the link is present</value>

        [DataMember(Name="LinkPresent")]
        public bool? LinkPresent { get; set; }

        /// <summary>
        /// The speed of the network link.
        /// </summary>
        /// <value>The speed of the network link.</value>

        [DataMember(Name="LinkSpeedMbps")]
        public int? LinkSpeedMbps { get; set; }

        /// <summary>
        /// MAC address of this interface
        /// </summary>
        /// <value>MAC address of this interface</value>

        [DataMember(Name="MacAddress")]
        public string MacAddress { get; set; }

        /// <summary>
        /// Host DNS Suffix
        /// </summary>
        /// <value>Host DNS Suffix</value>

        [DataMember(Name="HostDnsSuffix")]
        public string HostDnsSuffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeNetworkInformation {\n");
            sb.Append("  Ipv4Address: ").Append(Ipv4Address).Append("\n");
            sb.Append("  Ipv6Address: ").Append(Ipv6Address).Append("\n");
            sb.Append("  LinkPresent: ").Append(LinkPresent).Append("\n");
            sb.Append("  LinkSpeedMbps: ").Append(LinkSpeedMbps).Append("\n");
            sb.Append("  MacAddress: ").Append(MacAddress).Append("\n");
            sb.Append("  HostDnsSuffix: ").Append(HostDnsSuffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NodeNetworkInformation)obj);
        }

        /// <summary>
        /// Returns true if NodeNetworkInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of NodeNetworkInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeNetworkInformation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Ipv4Address == other.Ipv4Address ||
                    Ipv4Address != null &&
                    Ipv4Address.Equals(other.Ipv4Address)
                ) && 
                (
                    Ipv6Address == other.Ipv6Address ||
                    Ipv6Address != null &&
                    Ipv6Address.Equals(other.Ipv6Address)
                ) && 
                (
                    LinkPresent == other.LinkPresent ||
                    LinkPresent != null &&
                    LinkPresent.Equals(other.LinkPresent)
                ) && 
                (
                    LinkSpeedMbps == other.LinkSpeedMbps ||
                    LinkSpeedMbps != null &&
                    LinkSpeedMbps.Equals(other.LinkSpeedMbps)
                ) && 
                (
                    MacAddress == other.MacAddress ||
                    MacAddress != null &&
                    MacAddress.Equals(other.MacAddress)
                ) && 
                (
                    HostDnsSuffix == other.HostDnsSuffix ||
                    HostDnsSuffix != null &&
                    HostDnsSuffix.Equals(other.HostDnsSuffix)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Ipv4Address != null)
                    hashCode = hashCode * 59 + Ipv4Address.GetHashCode();
                    if (Ipv6Address != null)
                    hashCode = hashCode * 59 + Ipv6Address.GetHashCode();
                    if (LinkPresent != null)
                    hashCode = hashCode * 59 + LinkPresent.GetHashCode();
                    if (LinkSpeedMbps != null)
                    hashCode = hashCode * 59 + LinkSpeedMbps.GetHashCode();
                    if (MacAddress != null)
                    hashCode = hashCode * 59 + MacAddress.GetHashCode();
                    if (HostDnsSuffix != null)
                    hashCode = hashCode * 59 + HostDnsSuffix.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NodeNetworkInformation left, NodeNetworkInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NodeNetworkInformation left, NodeNetworkInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
