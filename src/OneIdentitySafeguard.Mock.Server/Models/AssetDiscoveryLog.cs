/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a task that may run on a remote machine
    /// </summary>
    [DataContract]
    public partial class AssetDiscoveryLog : IEquatable<AssetDiscoveryLog>
    { 
        /// <summary>
        /// ID of the task (Read-only)
        /// </summary>
        /// <value>ID of the task (Read-only)</value>

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// The date the task was created
        /// </summary>
        /// <value>The date the task was created</value>

        [DataMember(Name="LogTime")]
        public DateTime? LogTime { get; set; }

        /// <summary>
        /// ID of the user that requested the task (Read-only)
        /// </summary>
        /// <value>ID of the user that requested the task (Read-only)</value>

        [DataMember(Name="UserId")]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserProperties
        /// </summary>

        [DataMember(Name="UserProperties")]
        public UserLogProperties UserProperties { get; set; }

        /// <summary>
        /// Id of appliance
        /// </summary>
        /// <value>Id of appliance</value>

        [DataMember(Name="ApplianceId")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Name of appliance
        /// </summary>
        /// <value>Name of appliance</value>

        [DataMember(Name="ApplianceName")]
        public string ApplianceName { get; set; }

        /// <summary>
        /// Gets or Sets EventName
        /// </summary>

        [DataMember(Name="EventName")]
        public EventName EventName { get; set; }

        /// <summary>
        /// Display Name of the event (Read-only)
        /// </summary>
        /// <value>Display Name of the event (Read-only)</value>

        [DataMember(Name="EventDisplayName")]
        public string EventDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets RequestStatus
        /// </summary>

        [DataMember(Name="RequestStatus")]
        public RequestStatus RequestStatus { get; set; }

        /// <summary>
        /// Database ID of the discovery job (Read-only)
        /// </summary>
        /// <value>Database ID of the discovery job (Read-only)</value>

        [DataMember(Name="AssetDiscoveryJobId")]
        public int? AssetDiscoveryJobId { get; set; }

        /// <summary>
        /// Name of the asset discovery job (Read-only)
        /// </summary>
        /// <value>Name of the asset discovery job (Read-only)</value>

        [DataMember(Name="AssetDiscoveryJobName")]
        public string AssetDiscoveryJobName { get; set; }

        /// <summary>
        /// Gets or Sets AssetDiscoveryType
        /// </summary>

        [DataMember(Name="AssetDiscoveryType")]
        public AssetDiscoveryType AssetDiscoveryType { get; set; }

        /// <summary>
        /// The asset partition this job belongs to (Read-only)
        /// </summary>
        /// <value>The asset partition this job belongs to (Read-only)</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of the asset partition this asset belongs to (Read-only)
        /// </summary>
        /// <value>Name of the asset partition this asset belongs to (Read-only)</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryDiscoveryProperties
        /// </summary>

        [DataMember(Name="DirectoryDiscoveryProperties")]
        public DirectoryDiscoveryProperties DirectoryDiscoveryProperties { get; set; }

        /// <summary>
        /// Gets or Sets NetworkDiscoveryProperties
        /// </summary>

        [DataMember(Name="NetworkDiscoveryProperties")]
        public NetworkDiscoveryProperties NetworkDiscoveryProperties { get; set; }

        /// <summary>
        /// Record of assets that were found during discovery
        /// </summary>
        /// <value>Record of assets that were found during discovery</value>

        [DataMember(Name="DiscoveredAssets")]
        public List<DiscoveredAsset> DiscoveredAssets { get; set; }

        /// <summary>
        /// Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)
        /// </summary>
        /// <value>Detailed log of task execution. Only populated in results from the Tasks resource (Read-only)</value>

        [DataMember(Name="Log")]
        public List<TaskLog> Log { get; set; }

        /// <summary>
        /// Set of parameters passed to custom platform script
        /// </summary>
        /// <value>Set of parameters passed to custom platform script</value>

        [DataMember(Name="CustomScriptParameters")]
        public List<TaskCustomScriptParameter> CustomScriptParameters { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="Name")]
        public TaskNames Name { get; set; }

        /// <summary>
        /// Database ID of the asset or directory to execute this task on
        /// </summary>
        /// <value>Database ID of the asset or directory to execute this task on</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the asset or directory name the task was executed against (Read-only)
        /// </summary>
        /// <value>Name of the asset or directory name the task was executed against (Read-only)</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetDiscoveryLog {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LogTime: ").Append(LogTime).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserProperties: ").Append(UserProperties).Append("\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  ApplianceName: ").Append(ApplianceName).Append("\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventDisplayName: ").Append(EventDisplayName).Append("\n");
            sb.Append("  RequestStatus: ").Append(RequestStatus).Append("\n");
            sb.Append("  AssetDiscoveryJobId: ").Append(AssetDiscoveryJobId).Append("\n");
            sb.Append("  AssetDiscoveryJobName: ").Append(AssetDiscoveryJobName).Append("\n");
            sb.Append("  AssetDiscoveryType: ").Append(AssetDiscoveryType).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  DirectoryDiscoveryProperties: ").Append(DirectoryDiscoveryProperties).Append("\n");
            sb.Append("  NetworkDiscoveryProperties: ").Append(NetworkDiscoveryProperties).Append("\n");
            sb.Append("  DiscoveredAssets: ").Append(DiscoveredAssets).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  CustomScriptParameters: ").Append(CustomScriptParameters).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssetDiscoveryLog)obj);
        }

        /// <summary>
        /// Returns true if AssetDiscoveryLog instances are equal
        /// </summary>
        /// <param name="other">Instance of AssetDiscoveryLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetDiscoveryLog other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LogTime == other.LogTime ||
                    LogTime != null &&
                    LogTime.Equals(other.LogTime)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    UserProperties == other.UserProperties ||
                    UserProperties != null &&
                    UserProperties.Equals(other.UserProperties)
                ) && 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    ApplianceName == other.ApplianceName ||
                    ApplianceName != null &&
                    ApplianceName.Equals(other.ApplianceName)
                ) && 
                (
                    EventName == other.EventName ||
                    EventName != null &&
                    EventName.Equals(other.EventName)
                ) && 
                (
                    EventDisplayName == other.EventDisplayName ||
                    EventDisplayName != null &&
                    EventDisplayName.Equals(other.EventDisplayName)
                ) && 
                (
                    RequestStatus == other.RequestStatus ||
                    RequestStatus != null &&
                    RequestStatus.Equals(other.RequestStatus)
                ) && 
                (
                    AssetDiscoveryJobId == other.AssetDiscoveryJobId ||
                    AssetDiscoveryJobId != null &&
                    AssetDiscoveryJobId.Equals(other.AssetDiscoveryJobId)
                ) && 
                (
                    AssetDiscoveryJobName == other.AssetDiscoveryJobName ||
                    AssetDiscoveryJobName != null &&
                    AssetDiscoveryJobName.Equals(other.AssetDiscoveryJobName)
                ) && 
                (
                    AssetDiscoveryType == other.AssetDiscoveryType ||
                    AssetDiscoveryType != null &&
                    AssetDiscoveryType.Equals(other.AssetDiscoveryType)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    DirectoryDiscoveryProperties == other.DirectoryDiscoveryProperties ||
                    DirectoryDiscoveryProperties != null &&
                    DirectoryDiscoveryProperties.Equals(other.DirectoryDiscoveryProperties)
                ) && 
                (
                    NetworkDiscoveryProperties == other.NetworkDiscoveryProperties ||
                    NetworkDiscoveryProperties != null &&
                    NetworkDiscoveryProperties.Equals(other.NetworkDiscoveryProperties)
                ) && 
                (
                    DiscoveredAssets == other.DiscoveredAssets ||
                    DiscoveredAssets != null &&
                    DiscoveredAssets.SequenceEqual(other.DiscoveredAssets)
                ) && 
                (
                    Log == other.Log ||
                    Log != null &&
                    Log.SequenceEqual(other.Log)
                ) && 
                (
                    CustomScriptParameters == other.CustomScriptParameters ||
                    CustomScriptParameters != null &&
                    CustomScriptParameters.SequenceEqual(other.CustomScriptParameters)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LogTime != null)
                    hashCode = hashCode * 59 + LogTime.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (UserProperties != null)
                    hashCode = hashCode * 59 + UserProperties.GetHashCode();
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (ApplianceName != null)
                    hashCode = hashCode * 59 + ApplianceName.GetHashCode();
                    if (EventName != null)
                    hashCode = hashCode * 59 + EventName.GetHashCode();
                    if (EventDisplayName != null)
                    hashCode = hashCode * 59 + EventDisplayName.GetHashCode();
                    if (RequestStatus != null)
                    hashCode = hashCode * 59 + RequestStatus.GetHashCode();
                    if (AssetDiscoveryJobId != null)
                    hashCode = hashCode * 59 + AssetDiscoveryJobId.GetHashCode();
                    if (AssetDiscoveryJobName != null)
                    hashCode = hashCode * 59 + AssetDiscoveryJobName.GetHashCode();
                    if (AssetDiscoveryType != null)
                    hashCode = hashCode * 59 + AssetDiscoveryType.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (DirectoryDiscoveryProperties != null)
                    hashCode = hashCode * 59 + DirectoryDiscoveryProperties.GetHashCode();
                    if (NetworkDiscoveryProperties != null)
                    hashCode = hashCode * 59 + NetworkDiscoveryProperties.GetHashCode();
                    if (DiscoveredAssets != null)
                    hashCode = hashCode * 59 + DiscoveredAssets.GetHashCode();
                    if (Log != null)
                    hashCode = hashCode * 59 + Log.GetHashCode();
                    if (CustomScriptParameters != null)
                    hashCode = hashCode * 59 + CustomScriptParameters.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssetDiscoveryLog left, AssetDiscoveryLog right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssetDiscoveryLog left, AssetDiscoveryLog right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
