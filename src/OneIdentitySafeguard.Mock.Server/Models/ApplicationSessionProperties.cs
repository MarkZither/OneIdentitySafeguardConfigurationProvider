/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Configuration of application session
    /// </summary>
    [DataContract]
    public partial class ApplicationSessionProperties : IEquatable<ApplicationSessionProperties>
    { 
        /// <summary>
        /// Database ID of asset hosting application
        /// </summary>
        /// <value>Database ID of asset hosting application</value>

        [DataMember(Name="ApplicationHostAssetId")]
        public int? ApplicationHostAssetId { get; set; }

        /// <summary>
        /// Name of asset hosting application
        /// </summary>
        /// <value>Name of asset hosting application</value>

        [DataMember(Name="ApplicationHostAssetName")]
        public string ApplicationHostAssetName { get; set; }

        /// <summary>
        /// Network address of asset hosting application
        /// </summary>
        /// <value>Network address of asset hosting application</value>

        [DataMember(Name="ApplicationHostAssetNetworkAddress")]
        public string ApplicationHostAssetNetworkAddress { get; set; }

        /// <summary>
        /// Database ID of login account of application host
        /// </summary>
        /// <value>Database ID of login account of application host</value>

        [DataMember(Name="ApplicationHostAccountId")]
        public int? ApplicationHostAccountId { get; set; }

        /// <summary>
        /// Name of login account of application host
        /// </summary>
        /// <value>Name of login account of application host</value>

        [DataMember(Name="ApplicationHostAccountName")]
        public string ApplicationHostAccountName { get; set; }

        /// <summary>
        /// Name of application
        /// </summary>
        /// <value>Name of application</value>

        [DataMember(Name="ApplicationName")]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Remote application alias
        /// </summary>
        /// <value>Remote application alias</value>

        [DataMember(Name="ApplicationAlias")]
        public string ApplicationAlias { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationSessionProperties {\n");
            sb.Append("  ApplicationHostAssetId: ").Append(ApplicationHostAssetId).Append("\n");
            sb.Append("  ApplicationHostAssetName: ").Append(ApplicationHostAssetName).Append("\n");
            sb.Append("  ApplicationHostAssetNetworkAddress: ").Append(ApplicationHostAssetNetworkAddress).Append("\n");
            sb.Append("  ApplicationHostAccountId: ").Append(ApplicationHostAccountId).Append("\n");
            sb.Append("  ApplicationHostAccountName: ").Append(ApplicationHostAccountName).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ApplicationAlias: ").Append(ApplicationAlias).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplicationSessionProperties)obj);
        }

        /// <summary>
        /// Returns true if ApplicationSessionProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplicationSessionProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationSessionProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplicationHostAssetId == other.ApplicationHostAssetId ||
                    ApplicationHostAssetId != null &&
                    ApplicationHostAssetId.Equals(other.ApplicationHostAssetId)
                ) && 
                (
                    ApplicationHostAssetName == other.ApplicationHostAssetName ||
                    ApplicationHostAssetName != null &&
                    ApplicationHostAssetName.Equals(other.ApplicationHostAssetName)
                ) && 
                (
                    ApplicationHostAssetNetworkAddress == other.ApplicationHostAssetNetworkAddress ||
                    ApplicationHostAssetNetworkAddress != null &&
                    ApplicationHostAssetNetworkAddress.Equals(other.ApplicationHostAssetNetworkAddress)
                ) && 
                (
                    ApplicationHostAccountId == other.ApplicationHostAccountId ||
                    ApplicationHostAccountId != null &&
                    ApplicationHostAccountId.Equals(other.ApplicationHostAccountId)
                ) && 
                (
                    ApplicationHostAccountName == other.ApplicationHostAccountName ||
                    ApplicationHostAccountName != null &&
                    ApplicationHostAccountName.Equals(other.ApplicationHostAccountName)
                ) && 
                (
                    ApplicationName == other.ApplicationName ||
                    ApplicationName != null &&
                    ApplicationName.Equals(other.ApplicationName)
                ) && 
                (
                    ApplicationAlias == other.ApplicationAlias ||
                    ApplicationAlias != null &&
                    ApplicationAlias.Equals(other.ApplicationAlias)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplicationHostAssetId != null)
                    hashCode = hashCode * 59 + ApplicationHostAssetId.GetHashCode();
                    if (ApplicationHostAssetName != null)
                    hashCode = hashCode * 59 + ApplicationHostAssetName.GetHashCode();
                    if (ApplicationHostAssetNetworkAddress != null)
                    hashCode = hashCode * 59 + ApplicationHostAssetNetworkAddress.GetHashCode();
                    if (ApplicationHostAccountId != null)
                    hashCode = hashCode * 59 + ApplicationHostAccountId.GetHashCode();
                    if (ApplicationHostAccountName != null)
                    hashCode = hashCode * 59 + ApplicationHostAccountName.GetHashCode();
                    if (ApplicationName != null)
                    hashCode = hashCode * 59 + ApplicationName.GetHashCode();
                    if (ApplicationAlias != null)
                    hashCode = hashCode * 59 + ApplicationAlias.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplicationSessionProperties left, ApplicationSessionProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplicationSessionProperties left, ApplicationSessionProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
