/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents an personal password account.
    /// </summary>
    [DataContract]
    public partial class PersonalAccount : IEquatable<PersonalAccount>
    { 
        /// <summary>
        /// The personal account&#x27;s unique id.  This is a system-assigned value that is generated when an account is first created. (Read-only)
        /// </summary>
        /// <value>The personal account&#x27;s unique id.  This is a system-assigned value that is generated when an account is first created. (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The descriptive name for the personal account.
        /// </summary>
        /// <value>The descriptive name for the personal account.</value>
        [Required]

        [MaxLength(255)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The personal account name.
        /// </summary>
        /// <value>The personal account name.</value>
        [Required]

        [MaxLength(100)]
        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// The URL that is associated with the personal account.
        /// </summary>
        /// <value>The URL that is associated with the personal account.</value>

        [MaxLength(255)]
        [DataMember(Name="Url")]
        public string Url { get; set; }

        /// <summary>
        /// The notes that are associated with the password account.
        /// </summary>
        /// <value>The notes that are associated with the password account.</value>

        [MaxLength(2000)]
        [DataMember(Name="Notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Expiration date of the personal account password
        /// </summary>
        /// <value>Expiration date of the personal account password</value>

        [DataMember(Name="ExpirationDate")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The date that the personal password was changed (Read-only)
        /// </summary>
        /// <value>The date that the personal password was changed (Read-only)</value>

        [DataMember(Name="LastChangeDate")]
        public DateTime? LastChangeDate { get; set; }

        /// <summary>
        /// A flag indicating whether or not expiration notifications should be sent to the owner of the personal account.
        /// </summary>
        /// <value>A flag indicating whether or not expiration notifications should be sent to the owner of the personal account.</value>

        [DataMember(Name="DisableNotifications")]
        public bool? DisableNotifications { get; set; }

        /// <summary>
        /// Owner Id of the personal account. (Read-Only)
        /// </summary>
        /// <value>Owner Id of the personal account. (Read-Only)</value>

        [DataMember(Name="OwnerId")]
        public int? OwnerId { get; set; }

        /// <summary>
        /// The display name of the owner of the personal account. (Read-only)
        /// </summary>
        /// <value>The display name of the owner of the personal account. (Read-only)</value>

        [DataMember(Name="OwnerDisplayName")]
        public string OwnerDisplayName { get; set; }

        /// <summary>
        /// The email address of the owner of the personal account. (Read-only)
        /// </summary>
        /// <value>The email address of the owner of the personal account. (Read-only)</value>

        [DataMember(Name="OwnerEmailAddress")]
        public string OwnerEmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets SharedWithUser
        /// </summary>

        [DataMember(Name="SharedWithUser")]
        public ShareWithUser SharedWithUser { get; set; }

        /// <summary>
        /// Id of the user with whom the personal account is shared.
        /// </summary>
        /// <value>Id of the user with whom the personal account is shared.</value>

        [DataMember(Name="SharedWithId")]
        public int? SharedWithId { get; set; }

        /// <summary>
        /// Expiration date of the personal account share
        /// </summary>
        /// <value>Expiration date of the personal account share</value>

        [DataMember(Name="ShareExpirationDate")]
        public DateTime? ShareExpirationDate { get; set; }

        /// <summary>
        /// A flag indicating whether the personal account is owned by the current user.
        /// </summary>
        /// <value>A flag indicating whether the personal account is owned by the current user.</value>

        [DataMember(Name="IsOwnedByMe")]
        public bool? IsOwnedByMe { get; set; }

        /// <summary>
        /// A flag indicating whether the personal account is currently being shared.
        /// </summary>
        /// <value>A flag indicating whether the personal account is currently being shared.</value>

        [DataMember(Name="IsSharedByMe")]
        public bool? IsSharedByMe { get; set; }

        /// <summary>
        /// A flag indicating whether the personal account is currently shareable.
        /// </summary>
        /// <value>A flag indicating whether the personal account is currently shareable.</value>

        [DataMember(Name="IsShareable")]
        public bool? IsShareable { get; set; }

        /// <summary>
        /// Date this entity was created (Read-only)
        /// </summary>
        /// <value>Date this entity was created (Read-only)</value>

        [DataMember(Name="CreatedDate")]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalAccount {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  LastChangeDate: ").Append(LastChangeDate).Append("\n");
            sb.Append("  DisableNotifications: ").Append(DisableNotifications).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  OwnerDisplayName: ").Append(OwnerDisplayName).Append("\n");
            sb.Append("  OwnerEmailAddress: ").Append(OwnerEmailAddress).Append("\n");
            sb.Append("  SharedWithUser: ").Append(SharedWithUser).Append("\n");
            sb.Append("  SharedWithId: ").Append(SharedWithId).Append("\n");
            sb.Append("  ShareExpirationDate: ").Append(ShareExpirationDate).Append("\n");
            sb.Append("  IsOwnedByMe: ").Append(IsOwnedByMe).Append("\n");
            sb.Append("  IsSharedByMe: ").Append(IsSharedByMe).Append("\n");
            sb.Append("  IsShareable: ").Append(IsShareable).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalAccount)obj);
        }

        /// <summary>
        /// Returns true if PersonalAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalAccount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    LastChangeDate == other.LastChangeDate ||
                    LastChangeDate != null &&
                    LastChangeDate.Equals(other.LastChangeDate)
                ) && 
                (
                    DisableNotifications == other.DisableNotifications ||
                    DisableNotifications != null &&
                    DisableNotifications.Equals(other.DisableNotifications)
                ) && 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    OwnerDisplayName == other.OwnerDisplayName ||
                    OwnerDisplayName != null &&
                    OwnerDisplayName.Equals(other.OwnerDisplayName)
                ) && 
                (
                    OwnerEmailAddress == other.OwnerEmailAddress ||
                    OwnerEmailAddress != null &&
                    OwnerEmailAddress.Equals(other.OwnerEmailAddress)
                ) && 
                (
                    SharedWithUser == other.SharedWithUser ||
                    SharedWithUser != null &&
                    SharedWithUser.Equals(other.SharedWithUser)
                ) && 
                (
                    SharedWithId == other.SharedWithId ||
                    SharedWithId != null &&
                    SharedWithId.Equals(other.SharedWithId)
                ) && 
                (
                    ShareExpirationDate == other.ShareExpirationDate ||
                    ShareExpirationDate != null &&
                    ShareExpirationDate.Equals(other.ShareExpirationDate)
                ) && 
                (
                    IsOwnedByMe == other.IsOwnedByMe ||
                    IsOwnedByMe != null &&
                    IsOwnedByMe.Equals(other.IsOwnedByMe)
                ) && 
                (
                    IsSharedByMe == other.IsSharedByMe ||
                    IsSharedByMe != null &&
                    IsSharedByMe.Equals(other.IsSharedByMe)
                ) && 
                (
                    IsShareable == other.IsShareable ||
                    IsShareable != null &&
                    IsShareable.Equals(other.IsShareable)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (LastChangeDate != null)
                    hashCode = hashCode * 59 + LastChangeDate.GetHashCode();
                    if (DisableNotifications != null)
                    hashCode = hashCode * 59 + DisableNotifications.GetHashCode();
                    if (OwnerId != null)
                    hashCode = hashCode * 59 + OwnerId.GetHashCode();
                    if (OwnerDisplayName != null)
                    hashCode = hashCode * 59 + OwnerDisplayName.GetHashCode();
                    if (OwnerEmailAddress != null)
                    hashCode = hashCode * 59 + OwnerEmailAddress.GetHashCode();
                    if (SharedWithUser != null)
                    hashCode = hashCode * 59 + SharedWithUser.GetHashCode();
                    if (SharedWithId != null)
                    hashCode = hashCode * 59 + SharedWithId.GetHashCode();
                    if (ShareExpirationDate != null)
                    hashCode = hashCode * 59 + ShareExpirationDate.GetHashCode();
                    if (IsOwnedByMe != null)
                    hashCode = hashCode * 59 + IsOwnedByMe.GetHashCode();
                    if (IsSharedByMe != null)
                    hashCode = hashCode * 59 + IsSharedByMe.GetHashCode();
                    if (IsShareable != null)
                    hashCode = hashCode * 59 + IsShareable.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalAccount left, PersonalAccount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalAccount left, PersonalAccount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
