/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// A license for the password management module.
    /// </summary>
    [DataContract]
    public partial class PasswordManagementLicense : IEquatable<PasswordManagementLicense>
    { 
        /// <summary>
        /// Gets or Sets Model
        /// </summary>

        [DataMember(Name="Model")]
        public PasswordManagementLicenseModel Model { get; set; }

        /// <summary>
        /// The version of SPP licensed
        /// </summary>
        /// <value>The version of SPP licensed</value>

        [DataMember(Name="Version")]
        public int? Version { get; set; }

        /// <summary>
        /// The maximum number of users permitted under this license.
        /// </summary>
        /// <value>The maximum number of users permitted under this license.</value>

        [DataMember(Name="MaxUsers")]
        public int? MaxUsers { get; set; }

        /// <summary>
        /// The number of users currently utilized.
        /// </summary>
        /// <value>The number of users currently utilized.</value>

        [DataMember(Name="UsersUsed")]
        public int? UsersUsed { get; set; }

        /// <summary>
        /// The number of desktop devices permitted under this license.
        /// </summary>
        /// <value>The number of desktop devices permitted under this license.</value>

        [DataMember(Name="MaxDesktops")]
        public int? MaxDesktops { get; set; }

        /// <summary>
        /// The number of desktop devices currently managed by the appliance.
        /// </summary>
        /// <value>The number of desktop devices currently managed by the appliance.</value>

        [DataMember(Name="DesktopsUsed")]
        public int? DesktopsUsed { get; set; }

        /// <summary>
        /// The number of server or other non-desktop devices permitted under this license.
        /// </summary>
        /// <value>The number of server or other non-desktop devices permitted under this license.</value>

        [DataMember(Name="MaxSystems")]
        public int? MaxSystems { get; set; }

        /// <summary>
        /// The number of server or other non-desktop devices currently managed by the appliance.
        /// </summary>
        /// <value>The number of server or other non-desktop devices currently managed by the appliance.</value>

        [DataMember(Name="SystemsUsed")]
        public int? SystemsUsed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordManagementLicense {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  MaxUsers: ").Append(MaxUsers).Append("\n");
            sb.Append("  UsersUsed: ").Append(UsersUsed).Append("\n");
            sb.Append("  MaxDesktops: ").Append(MaxDesktops).Append("\n");
            sb.Append("  DesktopsUsed: ").Append(DesktopsUsed).Append("\n");
            sb.Append("  MaxSystems: ").Append(MaxSystems).Append("\n");
            sb.Append("  SystemsUsed: ").Append(SystemsUsed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PasswordManagementLicense)obj);
        }

        /// <summary>
        /// Returns true if PasswordManagementLicense instances are equal
        /// </summary>
        /// <param name="other">Instance of PasswordManagementLicense to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordManagementLicense other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    MaxUsers == other.MaxUsers ||
                    MaxUsers != null &&
                    MaxUsers.Equals(other.MaxUsers)
                ) && 
                (
                    UsersUsed == other.UsersUsed ||
                    UsersUsed != null &&
                    UsersUsed.Equals(other.UsersUsed)
                ) && 
                (
                    MaxDesktops == other.MaxDesktops ||
                    MaxDesktops != null &&
                    MaxDesktops.Equals(other.MaxDesktops)
                ) && 
                (
                    DesktopsUsed == other.DesktopsUsed ||
                    DesktopsUsed != null &&
                    DesktopsUsed.Equals(other.DesktopsUsed)
                ) && 
                (
                    MaxSystems == other.MaxSystems ||
                    MaxSystems != null &&
                    MaxSystems.Equals(other.MaxSystems)
                ) && 
                (
                    SystemsUsed == other.SystemsUsed ||
                    SystemsUsed != null &&
                    SystemsUsed.Equals(other.SystemsUsed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (MaxUsers != null)
                    hashCode = hashCode * 59 + MaxUsers.GetHashCode();
                    if (UsersUsed != null)
                    hashCode = hashCode * 59 + UsersUsed.GetHashCode();
                    if (MaxDesktops != null)
                    hashCode = hashCode * 59 + MaxDesktops.GetHashCode();
                    if (DesktopsUsed != null)
                    hashCode = hashCode * 59 + DesktopsUsed.GetHashCode();
                    if (MaxSystems != null)
                    hashCode = hashCode * 59 + MaxSystems.GetHashCode();
                    if (SystemsUsed != null)
                    hashCode = hashCode * 59 + SystemsUsed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PasswordManagementLicense left, PasswordManagementLicense right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PasswordManagementLicense left, PasswordManagementLicense right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
