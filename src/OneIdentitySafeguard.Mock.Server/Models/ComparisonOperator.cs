/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
        /// <summary>
        /// Gets or Sets ComparisonOperator
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ComparisonOperator
        {
            /// <summary>
            /// Enum EqualToEnum for EqualTo
            /// </summary>
            [EnumMember(Value = "EqualTo")]
            EqualToEnum = 0,
            /// <summary>
            /// Enum NotEqualToEnum for NotEqualTo
            /// </summary>
            [EnumMember(Value = "NotEqualTo")]
            NotEqualToEnum = 1,
            /// <summary>
            /// Enum StartsWithEnum for StartsWith
            /// </summary>
            [EnumMember(Value = "StartsWith")]
            StartsWithEnum = 2,
            /// <summary>
            /// Enum ContainsEnum for Contains
            /// </summary>
            [EnumMember(Value = "Contains")]
            ContainsEnum = 3,
            /// <summary>
            /// Enum DoesNotContainEnum for DoesNotContain
            /// </summary>
            [EnumMember(Value = "DoesNotContain")]
            DoesNotContainEnum = 4,
            /// <summary>
            /// Enum EndsWithEnum for EndsWith
            /// </summary>
            [EnumMember(Value = "EndsWith")]
            EndsWithEnum = 5,
            /// <summary>
            /// Enum RegexCompareEnum for RegexCompare
            /// </summary>
            [EnumMember(Value = "RegexCompare")]
            RegexCompareEnum = 6,
            /// <summary>
            /// Enum IsTrueEnum for IsTrue
            /// </summary>
            [EnumMember(Value = "IsTrue")]
            IsTrueEnum = 7,
            /// <summary>
            /// Enum IsFalseEnum for IsFalse
            /// </summary>
            [EnumMember(Value = "IsFalse")]
            IsFalseEnum = 8        }
}
