/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Information about session recording
    /// </summary>
    [DataContract]
    public partial class SessionRecordingProperties : IEquatable<SessionRecordingProperties>
    { 
        /// <summary>
        /// Whether session was recorded
        /// </summary>
        /// <value>Whether session was recorded</value>

        [DataMember(Name="HasRecording")]
        public bool? HasRecording { get; set; }

        /// <summary>
        /// ID of the SPS appliance server where the session recording resides
        /// </summary>
        /// <value>ID of the SPS appliance server where the session recording resides</value>

        [DataMember(Name="SpsApplianceId")]
        public int? SpsApplianceId { get; set; }

        /// <summary>
        /// Id of the recording
        /// </summary>
        /// <value>Id of the recording</value>

        [DataMember(Name="RecordingId")]
        public string RecordingId { get; set; }

        /// <summary>
        /// Session result
        /// </summary>
        /// <value>Session result</value>

        [DataMember(Name="SessionResult")]
        public string SessionResult { get; set; }

        /// <summary>
        /// Download URL of the recording
        /// </summary>
        /// <value>Download URL of the recording</value>

        [DataMember(Name="DownloadUrl")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Is the session recording currently live
        /// </summary>
        /// <value>Is the session recording currently live</value>

        [DataMember(Name="IsLive")]
        public bool? IsLive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionRecordingProperties {\n");
            sb.Append("  HasRecording: ").Append(HasRecording).Append("\n");
            sb.Append("  SpsApplianceId: ").Append(SpsApplianceId).Append("\n");
            sb.Append("  RecordingId: ").Append(RecordingId).Append("\n");
            sb.Append("  SessionResult: ").Append(SessionResult).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  IsLive: ").Append(IsLive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionRecordingProperties)obj);
        }

        /// <summary>
        /// Returns true if SessionRecordingProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionRecordingProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionRecordingProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HasRecording == other.HasRecording ||
                    HasRecording != null &&
                    HasRecording.Equals(other.HasRecording)
                ) && 
                (
                    SpsApplianceId == other.SpsApplianceId ||
                    SpsApplianceId != null &&
                    SpsApplianceId.Equals(other.SpsApplianceId)
                ) && 
                (
                    RecordingId == other.RecordingId ||
                    RecordingId != null &&
                    RecordingId.Equals(other.RecordingId)
                ) && 
                (
                    SessionResult == other.SessionResult ||
                    SessionResult != null &&
                    SessionResult.Equals(other.SessionResult)
                ) && 
                (
                    DownloadUrl == other.DownloadUrl ||
                    DownloadUrl != null &&
                    DownloadUrl.Equals(other.DownloadUrl)
                ) && 
                (
                    IsLive == other.IsLive ||
                    IsLive != null &&
                    IsLive.Equals(other.IsLive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HasRecording != null)
                    hashCode = hashCode * 59 + HasRecording.GetHashCode();
                    if (SpsApplianceId != null)
                    hashCode = hashCode * 59 + SpsApplianceId.GetHashCode();
                    if (RecordingId != null)
                    hashCode = hashCode * 59 + RecordingId.GetHashCode();
                    if (SessionResult != null)
                    hashCode = hashCode * 59 + SessionResult.GetHashCode();
                    if (DownloadUrl != null)
                    hashCode = hashCode * 59 + DownloadUrl.GetHashCode();
                    if (IsLive != null)
                    hashCode = hashCode * 59 + IsLive.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionRecordingProperties left, SessionRecordingProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionRecordingProperties left, SessionRecordingProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
