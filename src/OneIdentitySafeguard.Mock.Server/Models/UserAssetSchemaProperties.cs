/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Directory attribute mappings for users
    /// </summary>
    [DataContract]
    public partial class UserAssetSchemaProperties : IEquatable<UserAssetSchemaProperties>
    { 
        /// <summary>
        /// LDAP objects that have all of the specified objectClass types will be treated as users.  These objectClass types will also be used to validate the attributes mapped to user properties.
        /// </summary>
        /// <value>LDAP objects that have all of the specified objectClass types will be treated as users.  These objectClass types will also be used to validate the attributes mapped to user properties.</value>

        [DataMember(Name="UserClassType")]
        public List<string> UserClassType { get; set; }

        /// <summary>
        /// Name of user name schema attribute
        /// </summary>
        /// <value>Name of user name schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="UserNameAttribute")]
        public string UserNameAttribute { get; set; }

        /// <summary>
        /// Name of password schema attribute (Ldap only)
        /// </summary>
        /// <value>Name of password schema attribute (Ldap only)</value>

        [MaxLength(255)]
        [DataMember(Name="PasswordAttribute")]
        public string PasswordAttribute { get; set; }

        /// <summary>
        /// Name of description schema attribute
        /// </summary>
        /// <value>Name of description schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="DescriptionAttribute")]
        public string DescriptionAttribute { get; set; }

        /// <summary>
        /// Name of MemberOf schema attribute
        /// </summary>
        /// <value>Name of MemberOf schema attribute</value>

        [MaxLength(255)]
        [DataMember(Name="MemberOfAttribute")]
        public string MemberOfAttribute { get; set; }

        /// <summary>
        /// Name of user principle
        /// </summary>
        /// <value>Name of user principle</value>

        [MaxLength(255)]
        [DataMember(Name="AltLoginNameAttribute")]
        public string AltLoginNameAttribute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAssetSchemaProperties {\n");
            sb.Append("  UserClassType: ").Append(UserClassType).Append("\n");
            sb.Append("  UserNameAttribute: ").Append(UserNameAttribute).Append("\n");
            sb.Append("  PasswordAttribute: ").Append(PasswordAttribute).Append("\n");
            sb.Append("  DescriptionAttribute: ").Append(DescriptionAttribute).Append("\n");
            sb.Append("  MemberOfAttribute: ").Append(MemberOfAttribute).Append("\n");
            sb.Append("  AltLoginNameAttribute: ").Append(AltLoginNameAttribute).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserAssetSchemaProperties)obj);
        }

        /// <summary>
        /// Returns true if UserAssetSchemaProperties instances are equal
        /// </summary>
        /// <param name="other">Instance of UserAssetSchemaProperties to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAssetSchemaProperties other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserClassType == other.UserClassType ||
                    UserClassType != null &&
                    UserClassType.SequenceEqual(other.UserClassType)
                ) && 
                (
                    UserNameAttribute == other.UserNameAttribute ||
                    UserNameAttribute != null &&
                    UserNameAttribute.Equals(other.UserNameAttribute)
                ) && 
                (
                    PasswordAttribute == other.PasswordAttribute ||
                    PasswordAttribute != null &&
                    PasswordAttribute.Equals(other.PasswordAttribute)
                ) && 
                (
                    DescriptionAttribute == other.DescriptionAttribute ||
                    DescriptionAttribute != null &&
                    DescriptionAttribute.Equals(other.DescriptionAttribute)
                ) && 
                (
                    MemberOfAttribute == other.MemberOfAttribute ||
                    MemberOfAttribute != null &&
                    MemberOfAttribute.Equals(other.MemberOfAttribute)
                ) && 
                (
                    AltLoginNameAttribute == other.AltLoginNameAttribute ||
                    AltLoginNameAttribute != null &&
                    AltLoginNameAttribute.Equals(other.AltLoginNameAttribute)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserClassType != null)
                    hashCode = hashCode * 59 + UserClassType.GetHashCode();
                    if (UserNameAttribute != null)
                    hashCode = hashCode * 59 + UserNameAttribute.GetHashCode();
                    if (PasswordAttribute != null)
                    hashCode = hashCode * 59 + PasswordAttribute.GetHashCode();
                    if (DescriptionAttribute != null)
                    hashCode = hashCode * 59 + DescriptionAttribute.GetHashCode();
                    if (MemberOfAttribute != null)
                    hashCode = hashCode * 59 + MemberOfAttribute.GetHashCode();
                    if (AltLoginNameAttribute != null)
                    hashCode = hashCode * 59 + AltLoginNameAttribute.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserAssetSchemaProperties left, UserAssetSchemaProperties right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserAssetSchemaProperties left, UserAssetSchemaProperties right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
