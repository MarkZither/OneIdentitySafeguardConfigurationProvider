/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// SRS file definition used to playback session recordings from player
    /// </summary>
    [DataContract]
    public partial class SessionPlaybackData : IEquatable<SessionPlaybackData>
    { 
        /// <summary>
        /// Gets or Sets Version
        /// </summary>

        [DataMember(Name="version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>

        [DataMember(Name="download_url")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or Sets TerminateUrl
        /// </summary>

        [DataMember(Name="terminate_url")]
        public string TerminateUrl { get; set; }

        /// <summary>
        /// Client must replace this with their authentication token
        /// </summary>
        /// <value>Client must replace this with their authentication token</value>

        [DataMember(Name="authorization_header")]
        public string AuthorizationHeader { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>

        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>

        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>

        [DataMember(Name="active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveServerAddress
        /// </summary>

        [DataMember(Name="archive_server_address")]
        public string ArchiveServerAddress { get; set; }

        /// <summary>
        /// Gets or Sets ArchiveShareName
        /// </summary>

        [DataMember(Name="archive_share_name")]
        public string ArchiveShareName { get; set; }

        /// <summary>
        /// Gets or Sets SessionRecording
        /// </summary>

        [DataMember(Name="session_recording")]
        public string SessionRecording { get; set; }

        /// <summary>
        /// Gets or Sets PermaLink
        /// </summary>

        [DataMember(Name="perma_link")]
        public string PermaLink { get; set; }

        /// <summary>
        /// Gets or Sets PlaybackUrl
        /// </summary>

        [DataMember(Name="playback_url")]
        public string PlaybackUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionPlaybackData {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  TerminateUrl: ").Append(TerminateUrl).Append("\n");
            sb.Append("  AuthorizationHeader: ").Append(AuthorizationHeader).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ArchiveServerAddress: ").Append(ArchiveServerAddress).Append("\n");
            sb.Append("  ArchiveShareName: ").Append(ArchiveShareName).Append("\n");
            sb.Append("  SessionRecording: ").Append(SessionRecording).Append("\n");
            sb.Append("  PermaLink: ").Append(PermaLink).Append("\n");
            sb.Append("  PlaybackUrl: ").Append(PlaybackUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionPlaybackData)obj);
        }

        /// <summary>
        /// Returns true if SessionPlaybackData instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionPlaybackData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionPlaybackData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    DownloadUrl == other.DownloadUrl ||
                    DownloadUrl != null &&
                    DownloadUrl.Equals(other.DownloadUrl)
                ) && 
                (
                    TerminateUrl == other.TerminateUrl ||
                    TerminateUrl != null &&
                    TerminateUrl.Equals(other.TerminateUrl)
                ) && 
                (
                    AuthorizationHeader == other.AuthorizationHeader ||
                    AuthorizationHeader != null &&
                    AuthorizationHeader.Equals(other.AuthorizationHeader)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    ArchiveServerAddress == other.ArchiveServerAddress ||
                    ArchiveServerAddress != null &&
                    ArchiveServerAddress.Equals(other.ArchiveServerAddress)
                ) && 
                (
                    ArchiveShareName == other.ArchiveShareName ||
                    ArchiveShareName != null &&
                    ArchiveShareName.Equals(other.ArchiveShareName)
                ) && 
                (
                    SessionRecording == other.SessionRecording ||
                    SessionRecording != null &&
                    SessionRecording.Equals(other.SessionRecording)
                ) && 
                (
                    PermaLink == other.PermaLink ||
                    PermaLink != null &&
                    PermaLink.Equals(other.PermaLink)
                ) && 
                (
                    PlaybackUrl == other.PlaybackUrl ||
                    PlaybackUrl != null &&
                    PlaybackUrl.Equals(other.PlaybackUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (DownloadUrl != null)
                    hashCode = hashCode * 59 + DownloadUrl.GetHashCode();
                    if (TerminateUrl != null)
                    hashCode = hashCode * 59 + TerminateUrl.GetHashCode();
                    if (AuthorizationHeader != null)
                    hashCode = hashCode * 59 + AuthorizationHeader.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (ArchiveServerAddress != null)
                    hashCode = hashCode * 59 + ArchiveServerAddress.GetHashCode();
                    if (ArchiveShareName != null)
                    hashCode = hashCode * 59 + ArchiveShareName.GetHashCode();
                    if (SessionRecording != null)
                    hashCode = hashCode * 59 + SessionRecording.GetHashCode();
                    if (PermaLink != null)
                    hashCode = hashCode * 59 + PermaLink.GetHashCode();
                    if (PlaybackUrl != null)
                    hashCode = hashCode * 59 + PlaybackUrl.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionPlaybackData left, SessionPlaybackData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionPlaybackData left, SessionPlaybackData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
