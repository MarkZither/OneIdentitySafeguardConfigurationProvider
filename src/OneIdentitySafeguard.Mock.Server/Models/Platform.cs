/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a set of platform specific properties for an asset
    /// </summary>
    [DataContract]
    public partial class Platform : IEquatable<Platform>
    { 
        /// <summary>
        /// The database ID of the platform version (Read-only)
        /// </summary>
        /// <value>The database ID of the platform version (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets PlatformType
        /// </summary>

        [DataMember(Name="PlatformType")]
        public PlatformType PlatformType { get; set; }

        /// <summary>
        /// Gets or Sets PlatformFamily
        /// </summary>

        [DataMember(Name="PlatformFamily")]
        public PlatformFamily PlatformFamily { get; set; }

        /// <summary>
        /// Display name for the platform (Read-only)
        /// </summary>
        /// <value>Display name for the platform (Read-only)</value>

        [DataMember(Name="DisplayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Name of the platform
        /// </summary>
        /// <value>Name of the platform</value>
        [Required]

        [StringLength(50, MinimumLength=1)]
        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Description of the platform
        /// </summary>
        /// <value>Description of the platform</value>

        [MaxLength(255)]
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Version of platform (readonly)
        /// </summary>
        /// <value>Version of platform (readonly)</value>

        [StringLength(30, MinimumLength=1)]
        [DataMember(Name="Version")]
        public string Version { get; set; }

        /// <summary>
        /// Architecture of platform (readonly)
        /// </summary>
        /// <value>Architecture of platform (readonly)</value>

        [StringLength(30, MinimumLength=1)]
        [DataMember(Name="Architecture")]
        public string Architecture { get; set; }

        /// <summary>
        /// Gets or Sets DeviceClass
        /// </summary>

        [DataMember(Name="DeviceClass")]
        public DeviceClass DeviceClass { get; set; }

        /// <summary>
        /// Does the platform require case sensitive account names?
        /// </summary>
        /// <value>Does the platform require case sensitive account names?</value>

        [DataMember(Name="IsAcctNameCaseSensitive")]
        public bool? IsAcctNameCaseSensitive { get; set; }

        /// <summary>
        /// Gets or Sets LicenseClass
        /// </summary>

        [DataMember(Name="LicenseClass")]
        public LicenseClass LicenseClass { get; set; }

        /// <summary>
        /// If system owned then this platform cannot be modified or deleted (Read-only)
        /// </summary>
        /// <value>If system owned then this platform cannot be modified or deleted (Read-only)</value>

        [DataMember(Name="IsSystemOwned")]
        public bool? IsSystemOwned { get; set; }

        /// <summary>
        /// Operations this custom platform supports (Read-only)
        /// </summary>
        /// <value>Operations this custom platform supports (Read-only)</value>

        [DataMember(Name="SupportedOperations")]
        public List<TaskNames> SupportedOperations { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionProperties
        /// </summary>

        [DataMember(Name="ConnectionProperties")]
        public PlatformConnectionProperties ConnectionProperties { get; set; }

        /// <summary>
        /// Gets or Sets PasswordFeatureProperties
        /// </summary>

        [DataMember(Name="PasswordFeatureProperties")]
        public PlatformPasswordFeatureProperties PasswordFeatureProperties { get; set; }

        /// <summary>
        /// Gets or Sets SessionFeatureProperties
        /// </summary>

        [DataMember(Name="SessionFeatureProperties")]
        public PlatformSessionFeatureProperties SessionFeatureProperties { get; set; }

        /// <summary>
        /// Gets or Sets CustomScriptProperties
        /// </summary>

        [DataMember(Name="CustomScriptProperties")]
        public PlatformCustomScriptProperties CustomScriptProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Platform {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  PlatformFamily: ").Append(PlatformFamily).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  DeviceClass: ").Append(DeviceClass).Append("\n");
            sb.Append("  IsAcctNameCaseSensitive: ").Append(IsAcctNameCaseSensitive).Append("\n");
            sb.Append("  LicenseClass: ").Append(LicenseClass).Append("\n");
            sb.Append("  IsSystemOwned: ").Append(IsSystemOwned).Append("\n");
            sb.Append("  SupportedOperations: ").Append(SupportedOperations).Append("\n");
            sb.Append("  ConnectionProperties: ").Append(ConnectionProperties).Append("\n");
            sb.Append("  PasswordFeatureProperties: ").Append(PasswordFeatureProperties).Append("\n");
            sb.Append("  SessionFeatureProperties: ").Append(SessionFeatureProperties).Append("\n");
            sb.Append("  CustomScriptProperties: ").Append(CustomScriptProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Platform)obj);
        }

        /// <summary>
        /// Returns true if Platform instances are equal
        /// </summary>
        /// <param name="other">Instance of Platform to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Platform other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PlatformType == other.PlatformType ||
                    PlatformType != null &&
                    PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    PlatformFamily == other.PlatformFamily ||
                    PlatformFamily != null &&
                    PlatformFamily.Equals(other.PlatformFamily)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Architecture == other.Architecture ||
                    Architecture != null &&
                    Architecture.Equals(other.Architecture)
                ) && 
                (
                    DeviceClass == other.DeviceClass ||
                    DeviceClass != null &&
                    DeviceClass.Equals(other.DeviceClass)
                ) && 
                (
                    IsAcctNameCaseSensitive == other.IsAcctNameCaseSensitive ||
                    IsAcctNameCaseSensitive != null &&
                    IsAcctNameCaseSensitive.Equals(other.IsAcctNameCaseSensitive)
                ) && 
                (
                    LicenseClass == other.LicenseClass ||
                    LicenseClass != null &&
                    LicenseClass.Equals(other.LicenseClass)
                ) && 
                (
                    IsSystemOwned == other.IsSystemOwned ||
                    IsSystemOwned != null &&
                    IsSystemOwned.Equals(other.IsSystemOwned)
                ) && 
                (
                    SupportedOperations == other.SupportedOperations ||
                    SupportedOperations != null &&
                    SupportedOperations.SequenceEqual(other.SupportedOperations)
                ) && 
                (
                    ConnectionProperties == other.ConnectionProperties ||
                    ConnectionProperties != null &&
                    ConnectionProperties.Equals(other.ConnectionProperties)
                ) && 
                (
                    PasswordFeatureProperties == other.PasswordFeatureProperties ||
                    PasswordFeatureProperties != null &&
                    PasswordFeatureProperties.Equals(other.PasswordFeatureProperties)
                ) && 
                (
                    SessionFeatureProperties == other.SessionFeatureProperties ||
                    SessionFeatureProperties != null &&
                    SessionFeatureProperties.Equals(other.SessionFeatureProperties)
                ) && 
                (
                    CustomScriptProperties == other.CustomScriptProperties ||
                    CustomScriptProperties != null &&
                    CustomScriptProperties.Equals(other.CustomScriptProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PlatformType != null)
                    hashCode = hashCode * 59 + PlatformType.GetHashCode();
                    if (PlatformFamily != null)
                    hashCode = hashCode * 59 + PlatformFamily.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Architecture != null)
                    hashCode = hashCode * 59 + Architecture.GetHashCode();
                    if (DeviceClass != null)
                    hashCode = hashCode * 59 + DeviceClass.GetHashCode();
                    if (IsAcctNameCaseSensitive != null)
                    hashCode = hashCode * 59 + IsAcctNameCaseSensitive.GetHashCode();
                    if (LicenseClass != null)
                    hashCode = hashCode * 59 + LicenseClass.GetHashCode();
                    if (IsSystemOwned != null)
                    hashCode = hashCode * 59 + IsSystemOwned.GetHashCode();
                    if (SupportedOperations != null)
                    hashCode = hashCode * 59 + SupportedOperations.GetHashCode();
                    if (ConnectionProperties != null)
                    hashCode = hashCode * 59 + ConnectionProperties.GetHashCode();
                    if (PasswordFeatureProperties != null)
                    hashCode = hashCode * 59 + PasswordFeatureProperties.GetHashCode();
                    if (SessionFeatureProperties != null)
                    hashCode = hashCode * 59 + SessionFeatureProperties.GetHashCode();
                    if (CustomScriptProperties != null)
                    hashCode = hashCode * 59 + CustomScriptProperties.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Platform left, Platform right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Platform left, Platform right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
