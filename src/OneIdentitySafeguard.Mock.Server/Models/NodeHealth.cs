/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NodeHealth : IEquatable<NodeHealth>
    { 
        /// <summary>
        /// Unique hardware-specific identifier of this node
        /// </summary>
        /// <value>Unique hardware-specific identifier of this node</value>

        [DataMember(Name="ApplianceId")]
        public string ApplianceId { get; set; }

        /// <summary>
        /// Gets or Sets AuditLog
        /// </summary>

        [DataMember(Name="AuditLog")]
        public HealthDetail AuditLog { get; set; }

        /// <summary>
        /// The UTC date/time of this health check
        /// </summary>
        /// <value>The UTC date/time of this health check</value>

        [DataMember(Name="CheckDate")]
        public DateTime? CheckDate { get; set; }

        /// <summary>
        /// Gets or Sets CheckDuration
        /// </summary>

        [DataMember(Name="CheckDuration")]
        public TimeInterval CheckDuration { get; set; }

        /// <summary>
        /// Gets or Sets ClusterCommunication
        /// </summary>

        [DataMember(Name="ClusterCommunication")]
        public HealthDetail ClusterCommunication { get; set; }

        /// <summary>
        /// Gets or Sets ClusterConnectivity
        /// </summary>

        [DataMember(Name="ClusterConnectivity")]
        public ClusterConnectivityHealthDetail ClusterConnectivity { get; set; }

        /// <summary>
        /// Appliance name of this node
        /// </summary>
        /// <value>Appliance name of this node</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NetworkInformation
        /// </summary>

        [DataMember(Name="NetworkInformation")]
        public NodeNetworkInformation NetworkInformation { get; set; }

        /// <summary>
        /// Gets or Sets AccessWorkflow
        /// </summary>

        [DataMember(Name="AccessWorkflow")]
        public HealthDetail AccessWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets PolicyData
        /// </summary>

        [DataMember(Name="PolicyData")]
        public HealthDetail PolicyData { get; set; }

        /// <summary>
        /// Gets or Sets ResourceUsage
        /// </summary>

        [DataMember(Name="ResourceUsage")]
        public NodeResourceHealthDetail ResourceUsage { get; set; }

        /// <summary>
        /// Hardware serial number of this appliance node
        /// </summary>
        /// <value>Hardware serial number of this appliance node</value>

        [DataMember(Name="SerialNumber")]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="State")]
        public ApplianceState State { get; set; }

        /// <summary>
        /// Gets or Sets UpTime
        /// </summary>

        [DataMember(Name="UpTime")]
        public TimeInterval UpTime { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>

        [DataMember(Name="Version")]
        public ProductVersion Version { get; set; }

        /// <summary>
        /// Gets or Sets SessionsModule
        /// </summary>

        [DataMember(Name="SessionsModule")]
        public HealthDetail SessionsModule { get; set; }

        /// <summary>
        /// Gets or Sets HardwareSecurityModule
        /// </summary>

        [DataMember(Name="HardwareSecurityModule")]
        public HealthDetail HardwareSecurityModule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeHealth {\n");
            sb.Append("  ApplianceId: ").Append(ApplianceId).Append("\n");
            sb.Append("  AuditLog: ").Append(AuditLog).Append("\n");
            sb.Append("  CheckDate: ").Append(CheckDate).Append("\n");
            sb.Append("  CheckDuration: ").Append(CheckDuration).Append("\n");
            sb.Append("  ClusterCommunication: ").Append(ClusterCommunication).Append("\n");
            sb.Append("  ClusterConnectivity: ").Append(ClusterConnectivity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NetworkInformation: ").Append(NetworkInformation).Append("\n");
            sb.Append("  AccessWorkflow: ").Append(AccessWorkflow).Append("\n");
            sb.Append("  PolicyData: ").Append(PolicyData).Append("\n");
            sb.Append("  ResourceUsage: ").Append(ResourceUsage).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UpTime: ").Append(UpTime).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SessionsModule: ").Append(SessionsModule).Append("\n");
            sb.Append("  HardwareSecurityModule: ").Append(HardwareSecurityModule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NodeHealth)obj);
        }

        /// <summary>
        /// Returns true if NodeHealth instances are equal
        /// </summary>
        /// <param name="other">Instance of NodeHealth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeHealth other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApplianceId == other.ApplianceId ||
                    ApplianceId != null &&
                    ApplianceId.Equals(other.ApplianceId)
                ) && 
                (
                    AuditLog == other.AuditLog ||
                    AuditLog != null &&
                    AuditLog.Equals(other.AuditLog)
                ) && 
                (
                    CheckDate == other.CheckDate ||
                    CheckDate != null &&
                    CheckDate.Equals(other.CheckDate)
                ) && 
                (
                    CheckDuration == other.CheckDuration ||
                    CheckDuration != null &&
                    CheckDuration.Equals(other.CheckDuration)
                ) && 
                (
                    ClusterCommunication == other.ClusterCommunication ||
                    ClusterCommunication != null &&
                    ClusterCommunication.Equals(other.ClusterCommunication)
                ) && 
                (
                    ClusterConnectivity == other.ClusterConnectivity ||
                    ClusterConnectivity != null &&
                    ClusterConnectivity.Equals(other.ClusterConnectivity)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NetworkInformation == other.NetworkInformation ||
                    NetworkInformation != null &&
                    NetworkInformation.Equals(other.NetworkInformation)
                ) && 
                (
                    AccessWorkflow == other.AccessWorkflow ||
                    AccessWorkflow != null &&
                    AccessWorkflow.Equals(other.AccessWorkflow)
                ) && 
                (
                    PolicyData == other.PolicyData ||
                    PolicyData != null &&
                    PolicyData.Equals(other.PolicyData)
                ) && 
                (
                    ResourceUsage == other.ResourceUsage ||
                    ResourceUsage != null &&
                    ResourceUsage.Equals(other.ResourceUsage)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    UpTime == other.UpTime ||
                    UpTime != null &&
                    UpTime.Equals(other.UpTime)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    SessionsModule == other.SessionsModule ||
                    SessionsModule != null &&
                    SessionsModule.Equals(other.SessionsModule)
                ) && 
                (
                    HardwareSecurityModule == other.HardwareSecurityModule ||
                    HardwareSecurityModule != null &&
                    HardwareSecurityModule.Equals(other.HardwareSecurityModule)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApplianceId != null)
                    hashCode = hashCode * 59 + ApplianceId.GetHashCode();
                    if (AuditLog != null)
                    hashCode = hashCode * 59 + AuditLog.GetHashCode();
                    if (CheckDate != null)
                    hashCode = hashCode * 59 + CheckDate.GetHashCode();
                    if (CheckDuration != null)
                    hashCode = hashCode * 59 + CheckDuration.GetHashCode();
                    if (ClusterCommunication != null)
                    hashCode = hashCode * 59 + ClusterCommunication.GetHashCode();
                    if (ClusterConnectivity != null)
                    hashCode = hashCode * 59 + ClusterConnectivity.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NetworkInformation != null)
                    hashCode = hashCode * 59 + NetworkInformation.GetHashCode();
                    if (AccessWorkflow != null)
                    hashCode = hashCode * 59 + AccessWorkflow.GetHashCode();
                    if (PolicyData != null)
                    hashCode = hashCode * 59 + PolicyData.GetHashCode();
                    if (ResourceUsage != null)
                    hashCode = hashCode * 59 + ResourceUsage.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (UpTime != null)
                    hashCode = hashCode * 59 + UpTime.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (SessionsModule != null)
                    hashCode = hashCode * 59 + SessionsModule.GetHashCode();
                    if (HardwareSecurityModule != null)
                    hashCode = hashCode * 59 + HardwareSecurityModule.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NodeHealth left, NodeHealth right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NodeHealth left, NodeHealth right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
