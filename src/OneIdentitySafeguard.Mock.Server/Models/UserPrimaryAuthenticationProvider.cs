/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Authentication provider information for a user
    /// </summary>
    [DataContract]
    public partial class UserPrimaryAuthenticationProvider : IEquatable<UserPrimaryAuthenticationProvider>
    { 
        /// <summary>
        /// The id of the user&#x27;s primary authentication provider.
        /// </summary>
        /// <value>The id of the user&#x27;s primary authentication provider.</value>
        [Required]

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the user&#x27;s primary authentication provider (Read-only)
        /// </summary>
        /// <value>The name of the user&#x27;s primary authentication provider (Read-only)</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TypeReferenceName
        /// </summary>

        [DataMember(Name="TypeReferenceName")]
        public IdentityProviderTypeReferenceName TypeReferenceName { get; set; }

        /// <summary>
        /// The value required to authenticate the user against the specified authentication provider.  Often this will be  what the user enters when logging in.  However, for some providers such as External Federation, it needs to match  the provider&#x27;s Name Claim that is returned.  This value must be unique per authentication provider.  For Active  Directory and LDAP, you may specify the &#x27;samAccountName&#x27; or &#x27;Username&#x27; attribute when creating a user, but the  value will be overwritten with the &#x27;objectGUID&#x27; or &#x27;entryUuid&#x27;, respectively.
        /// </summary>
        /// <value>The value required to authenticate the user against the specified authentication provider.  Often this will be  what the user enters when logging in.  However, for some providers such as External Federation, it needs to match  the provider&#x27;s Name Claim that is returned.  This value must be unique per authentication provider.  For Active  Directory and LDAP, you may specify the &#x27;samAccountName&#x27; or &#x27;Username&#x27; attribute when creating a user, but the  value will be overwritten with the &#x27;objectGUID&#x27; or &#x27;entryUuid&#x27;, respectively.</value>

        [MaxLength(255)]
        [DataMember(Name="Identity")]
        public string Identity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPrimaryAuthenticationProvider {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TypeReferenceName: ").Append(TypeReferenceName).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserPrimaryAuthenticationProvider)obj);
        }

        /// <summary>
        /// Returns true if UserPrimaryAuthenticationProvider instances are equal
        /// </summary>
        /// <param name="other">Instance of UserPrimaryAuthenticationProvider to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPrimaryAuthenticationProvider other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TypeReferenceName == other.TypeReferenceName ||
                    TypeReferenceName != null &&
                    TypeReferenceName.Equals(other.TypeReferenceName)
                ) && 
                (
                    Identity == other.Identity ||
                    Identity != null &&
                    Identity.Equals(other.Identity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TypeReferenceName != null)
                    hashCode = hashCode * 59 + TypeReferenceName.GetHashCode();
                    if (Identity != null)
                    hashCode = hashCode * 59 + Identity.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserPrimaryAuthenticationProvider left, UserPrimaryAuthenticationProvider right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserPrimaryAuthenticationProvider left, UserPrimaryAuthenticationProvider right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
