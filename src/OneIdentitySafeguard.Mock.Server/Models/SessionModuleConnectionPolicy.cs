/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents a session module connection policy
    /// </summary>
    [DataContract]
    public partial class SessionModuleConnectionPolicy : IEquatable<SessionModuleConnectionPolicy>
    { 
        /// <summary>
        /// Connection policy identifier
        /// </summary>
        /// <value>Connection policy identifier</value>

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// Connection policy name
        /// </summary>
        /// <value>Connection policy name</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// Network address of the linked session module
        /// </summary>
        /// <value>Network address of the linked session module</value>

        [DataMember(Name="SpsNetworkAddress")]
        public string SpsNetworkAddress { get; set; }

        /// <summary>
        /// Target address of the connection policy
        /// </summary>
        /// <value>Target address of the connection policy</value>

        [DataMember(Name="SpsTargetAddress")]
        public string SpsTargetAddress { get; set; }

        /// <summary>
        /// Network port of the linked session module
        /// </summary>
        /// <value>Network port of the linked session module</value>

        [DataMember(Name="SpsNetworkPort")]
        public string SpsNetworkPort { get; set; }

        /// <summary>
        /// SPS host name.
        /// </summary>
        /// <value>SPS host name.</value>

        [DataMember(Name="SpsHostName")]
        public string SpsHostName { get; set; }

        /// <summary>
        /// SPS policy capabilities.
        /// </summary>
        /// <value>SPS policy capabilities.</value>

        [DataMember(Name="PolicyCapabilities")]
        public List<SessionPolicyCapabilities> PolicyCapabilities { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>

        [DataMember(Name="Protocol")]
        public SessionModuleConnectionProtocol Protocol { get; set; }

        /// <summary>
        /// Session module connection ID
        /// </summary>
        /// <value>Session module connection ID</value>

        [DataMember(Name="SessionModuleConnectionId")]
        public int? SessionModuleConnectionId { get; set; }

        /// <summary>
        /// Session module connection policy is disabled or not
        /// </summary>
        /// <value>Session module connection policy is disabled or not</value>

        [DataMember(Name="IsPolicyDisabled")]
        public bool? IsPolicyDisabled { get; set; }

        /// <summary>
        /// Does the session module connection policy require a host key
        /// </summary>
        /// <value>Does the session module connection policy require a host key</value>

        [DataMember(Name="RequiresHostKey")]
        public bool? RequiresHostKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionModuleConnectionPolicy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SpsNetworkAddress: ").Append(SpsNetworkAddress).Append("\n");
            sb.Append("  SpsTargetAddress: ").Append(SpsTargetAddress).Append("\n");
            sb.Append("  SpsNetworkPort: ").Append(SpsNetworkPort).Append("\n");
            sb.Append("  SpsHostName: ").Append(SpsHostName).Append("\n");
            sb.Append("  PolicyCapabilities: ").Append(PolicyCapabilities).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  SessionModuleConnectionId: ").Append(SessionModuleConnectionId).Append("\n");
            sb.Append("  IsPolicyDisabled: ").Append(IsPolicyDisabled).Append("\n");
            sb.Append("  RequiresHostKey: ").Append(RequiresHostKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionModuleConnectionPolicy)obj);
        }

        /// <summary>
        /// Returns true if SessionModuleConnectionPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionModuleConnectionPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionModuleConnectionPolicy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SpsNetworkAddress == other.SpsNetworkAddress ||
                    SpsNetworkAddress != null &&
                    SpsNetworkAddress.Equals(other.SpsNetworkAddress)
                ) && 
                (
                    SpsTargetAddress == other.SpsTargetAddress ||
                    SpsTargetAddress != null &&
                    SpsTargetAddress.Equals(other.SpsTargetAddress)
                ) && 
                (
                    SpsNetworkPort == other.SpsNetworkPort ||
                    SpsNetworkPort != null &&
                    SpsNetworkPort.Equals(other.SpsNetworkPort)
                ) && 
                (
                    SpsHostName == other.SpsHostName ||
                    SpsHostName != null &&
                    SpsHostName.Equals(other.SpsHostName)
                ) && 
                (
                    PolicyCapabilities == other.PolicyCapabilities ||
                    PolicyCapabilities != null &&
                    PolicyCapabilities.SequenceEqual(other.PolicyCapabilities)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    SessionModuleConnectionId == other.SessionModuleConnectionId ||
                    SessionModuleConnectionId != null &&
                    SessionModuleConnectionId.Equals(other.SessionModuleConnectionId)
                ) && 
                (
                    IsPolicyDisabled == other.IsPolicyDisabled ||
                    IsPolicyDisabled != null &&
                    IsPolicyDisabled.Equals(other.IsPolicyDisabled)
                ) && 
                (
                    RequiresHostKey == other.RequiresHostKey ||
                    RequiresHostKey != null &&
                    RequiresHostKey.Equals(other.RequiresHostKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SpsNetworkAddress != null)
                    hashCode = hashCode * 59 + SpsNetworkAddress.GetHashCode();
                    if (SpsTargetAddress != null)
                    hashCode = hashCode * 59 + SpsTargetAddress.GetHashCode();
                    if (SpsNetworkPort != null)
                    hashCode = hashCode * 59 + SpsNetworkPort.GetHashCode();
                    if (SpsHostName != null)
                    hashCode = hashCode * 59 + SpsHostName.GetHashCode();
                    if (PolicyCapabilities != null)
                    hashCode = hashCode * 59 + PolicyCapabilities.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    if (SessionModuleConnectionId != null)
                    hashCode = hashCode * 59 + SessionModuleConnectionId.GetHashCode();
                    if (IsPolicyDisabled != null)
                    hashCode = hashCode * 59 + IsPolicyDisabled.GetHashCode();
                    if (RequiresHostKey != null)
                    hashCode = hashCode * 59 + RequiresHostKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionModuleConnectionPolicy left, SessionModuleConnectionPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionModuleConnectionPolicy left, SessionModuleConnectionPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
