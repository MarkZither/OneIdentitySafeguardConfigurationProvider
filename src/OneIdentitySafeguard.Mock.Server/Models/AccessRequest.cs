/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccessRequest : IEquatable<AccessRequest>
    { 
        /// <summary>
        /// Gets or Sets AccessRequestType
        /// </summary>

        [DataMember(Name="AccessRequestType")]
        public AccessRequestType AccessRequestType { get; set; }

        /// <summary>
        /// Database ID of the account being requested
        /// </summary>
        /// <value>Database ID of the account being requested</value>

        [DataMember(Name="AccountId")]
        public int? AccountId { get; set; }

        /// <summary>
        /// Name of the account being requested
        /// </summary>
        /// <value>Name of the account being requested</value>

        [DataMember(Name="AccountName")]
        public string AccountName { get; set; }

        /// <summary>
        /// Name of the domain of the account
        /// </summary>
        /// <value>Name of the domain of the account</value>

        [DataMember(Name="AccountDomainName")]
        public string AccountDomainName { get; set; }

        /// <summary>
        /// Database ID of the asset of the account
        /// </summary>
        /// <value>Database ID of the asset of the account</value>

        [DataMember(Name="AccountAssetId")]
        public int? AccountAssetId { get; set; }

        /// <summary>
        /// Name of the asset of the account
        /// </summary>
        /// <value>Name of the asset of the account</value>

        [DataMember(Name="AccountAssetName")]
        public string AccountAssetName { get; set; }

        /// <summary>
        /// Gets or Sets AccountRequestType
        /// </summary>

        [DataMember(Name="AccountRequestType")]
        public AccountRequestType AccountRequestType { get; set; }

        /// <summary>
        /// {true} when the access request was approved by the current authenticated user
        /// </summary>
        /// <value>{true} when the access request was approved by the current authenticated user</value>

        [DataMember(Name="ApprovedByMe")]
        public bool? ApprovedByMe { get; set; }

        /// <summary>
        /// Database ID of the asset to request access for
        /// </summary>
        /// <value>Database ID of the asset to request access for</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// Name of the asset to request access for
        /// </summary>
        /// <value>Name of the asset to request access for</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Network address of the asset to request access for
        /// </summary>
        /// <value>Network address of the asset to request access for</value>

        [DataMember(Name="AssetNetworkAddress")]
        public string AssetNetworkAddress { get; set; }

        /// <summary>
        /// SSH host key of the asset to request access for
        /// </summary>
        /// <value>SSH host key of the asset to request access for</value>

        [DataMember(Name="AssetSshHostKey")]
        public string AssetSshHostKey { get; set; }

        /// <summary>
        /// The UTC Date/Time the access request was created
        /// </summary>
        /// <value>The UTC Date/Time the access request was created</value>

        [DataMember(Name="CreatedOn")]
        public DateTime? CreatedOn { get; set; }

        /// <summary>
        /// The current number of approvals for the access request
        /// </summary>
        /// <value>The current number of approvals for the access request</value>

        [DataMember(Name="CurrentApprovalCount")]
        public int? CurrentApprovalCount { get; set; }

        /// <summary>
        /// The current number of reviews for the access request
        /// </summary>
        /// <value>The current number of reviews for the access request</value>

        [DataMember(Name="CurrentReviewerCount")]
        public int? CurrentReviewerCount { get; set; }

        /// <summary>
        /// The duration of the request in minutes.
        /// </summary>
        /// <value>The duration of the request in minutes.</value>

        [DataMember(Name="DurationInMinutes")]
        public int? DurationInMinutes { get; set; }

        /// <summary>
        /// The UTC Date/Time the access request will expire
        /// </summary>
        /// <value>The UTC Date/Time the access request will expire</value>

        [DataMember(Name="ExpiresOn")]
        public DateTime? ExpiresOn { get; set; }

        /// <summary>
        /// Qualified ID of the access request
        /// </summary>
        /// <value>Qualified ID of the access request</value>

        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// {true} when the access request was submitted as being an emergency
        /// </summary>
        /// <value>{true} when the access request was submitted as being an emergency</value>

        [DataMember(Name="IsEmergency")]
        public bool? IsEmergency { get; set; }

        /// <summary>
        /// {true} when the requester needs to acknowledge the access request before it will be \&quot;closed\&quot;
        /// </summary>
        /// <value>{true} when the requester needs to acknowledge the access request before it will be \&quot;closed\&quot;</value>

        [DataMember(Name="NeedsAcknowledgement")]
        public bool? NeedsAcknowledgement { get; set; }

        /// <summary>
        /// DateTimes when the request is available for access.
        /// </summary>
        /// <value>DateTimes when the request is available for access.</value>

        [DataMember(Name="RequestAvailability")]
        public List<DateTimeInterval> RequestAvailability { get; set; }

        /// <summary>
        /// Gets or Sets ReasonCode
        /// </summary>

        [DataMember(Name="ReasonCode")]
        public ReasonCode ReasonCode { get; set; }

        /// <summary>
        /// Description of why the access request is needed
        /// </summary>
        /// <value>Description of why the access request is needed</value>

        [DataMember(Name="ReasonComment")]
        public string ReasonComment { get; set; }

        /// <summary>
        /// The duration of the access request (days)
        /// </summary>
        /// <value>The duration of the access request (days)</value>

        [DataMember(Name="RequestedDurationDays")]
        public int? RequestedDurationDays { get; set; }

        /// <summary>
        /// The duration of the access request (hours)
        /// </summary>
        /// <value>The duration of the access request (hours)</value>

        [DataMember(Name="RequestedDurationHours")]
        public int? RequestedDurationHours { get; set; }

        /// <summary>
        /// The duration of the access request (minutes)
        /// </summary>
        /// <value>The duration of the access request (minutes)</value>

        [DataMember(Name="RequestedDurationMinutes")]
        public int? RequestedDurationMinutes { get; set; }

        /// <summary>
        /// The UTC Date/Time the access request becomes active
        /// </summary>
        /// <value>The UTC Date/Time the access request becomes active</value>

        [DataMember(Name="RequestedFor")]
        public DateTime? RequestedFor { get; set; }

        /// <summary>
        /// Display name of the user that made the access request
        /// </summary>
        /// <value>Display name of the user that made the access request</value>

        [DataMember(Name="RequesterDisplayName")]
        public string RequesterDisplayName { get; set; }

        /// <summary>
        /// Email address of the user that made the access request
        /// </summary>
        /// <value>Email address of the user that made the access request</value>

        [DataMember(Name="RequesterEmailAddress")]
        public string RequesterEmailAddress { get; set; }

        /// <summary>
        /// Database ID of the user that made the access request
        /// </summary>
        /// <value>Database ID of the user that made the access request</value>

        [DataMember(Name="RequesterId")]
        public int? RequesterId { get; set; }

        /// <summary>
        /// Number of approvals required before the access request can become available
        /// </summary>
        /// <value>Number of approvals required before the access request can become available</value>

        [DataMember(Name="RequiredApprovalCount")]
        public int? RequiredApprovalCount { get; set; }

        /// <summary>
        /// Number of reviews required before the access request can be closed
        /// </summary>
        /// <value>Number of reviews required before the access request can be closed</value>

        [DataMember(Name="RequiredReviewerCount")]
        public int? RequiredReviewerCount { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="State")]
        public AccessRequestState State { get; set; }

        /// <summary>
        /// The UTC date/time the Pangaea.Data.Transfer.V4.AccessRequestWorkflow.AccessRequest.State changed
        /// </summary>
        /// <value>The UTC date/time the Pangaea.Data.Transfer.V4.AccessRequestWorkflow.AccessRequest.State changed</value>

        [DataMember(Name="StateChangedOn")]
        public DateTime? StateChangedOn { get; set; }

        /// <summary>
        /// Number of the help desk ticket as required by policy
        /// </summary>
        /// <value>Number of the help desk ticket as required by policy</value>

        [DataMember(Name="TicketNumber")]
        public string TicketNumber { get; set; }

        /// <summary>
        /// {true} when the access request was cancelled by the requester
        /// </summary>
        /// <value>{true} when the access request was cancelled by the requester</value>

        [DataMember(Name="WasCancelled")]
        public bool? WasCancelled { get; set; }

        /// <summary>
        /// {true} when the access was checked out by the requester
        /// </summary>
        /// <value>{true} when the access was checked out by the requester</value>

        [DataMember(Name="WasCheckedOut")]
        public bool? WasCheckedOut { get; set; }

        /// <summary>
        /// {true} when the access request was denied by an approver before the request was approved
        /// </summary>
        /// <value>{true} when the access request was denied by an approver before the request was approved</value>

        [DataMember(Name="WasDenied")]
        public bool? WasDenied { get; set; }

        /// <summary>
        /// {true} when the access request was closed due the requester being deleted or disabled.
        /// </summary>
        /// <value>{true} when the access request was closed due the requester being deleted or disabled.</value>

        [DataMember(Name="WasEvicted")]
        public bool? WasEvicted { get; set; }

        /// <summary>
        /// {true} when the access request expired as defined by {ExpirationUtcDateTime}
        /// </summary>
        /// <value>{true} when the access request expired as defined by {ExpirationUtcDateTime}</value>

        [DataMember(Name="WasExpired")]
        public bool? WasExpired { get; set; }

        /// <summary>
        /// {true} when the access request was revoked by an approver after the request was approved
        /// </summary>
        /// <value>{true} when the access request was revoked by an approver after the request was approved</value>

        [DataMember(Name="WasRevoked")]
        public bool? WasRevoked { get; set; }

        /// <summary>
        /// Actions that have occurred to the access request
        /// </summary>
        /// <value>Actions that have occurred to the access request</value>

        [DataMember(Name="WorkflowActions")]
        public List<AccessRequestWorkflowAction> WorkflowActions { get; set; }

        /// <summary>
        /// Database ID of the winning access policy for this request
        /// </summary>
        /// <value>Database ID of the winning access policy for this request</value>

        [DataMember(Name="PolicyId")]
        public int? PolicyId { get; set; }

        /// <summary>
        /// Name of the winning access policy for this request
        /// </summary>
        /// <value>Name of the winning access policy for this request</value>

        [DataMember(Name="PolicyName")]
        public string PolicyName { get; set; }

        /// <summary>
        /// Whether a reviewer is required to supply a comment
        /// </summary>
        /// <value>Whether a reviewer is required to supply a comment</value>

        [DataMember(Name="RequireReviewerComment")]
        public bool? RequireReviewerComment { get; set; }

        /// <summary>
        /// Whether SRA remote sessions are enabled
        /// </summary>
        /// <value>Whether SRA remote sessions are enabled</value>

        [DataMember(Name="AllowSraSessionLaunch")]
        public bool? AllowSraSessionLaunch { get; set; }

        /// <summary>
        /// Whether password checkouts are allowed for session requests
        /// </summary>
        /// <value>Whether password checkouts are allowed for session requests</value>

        [DataMember(Name="AllowSessionPasswordRelease")]
        public bool? AllowSessionPasswordRelease { get; set; }

        /// <summary>
        /// Information about sessions initialized using this request
        /// </summary>
        /// <value>Information about sessions initialized using this request</value>

        [DataMember(Name="Sessions")]
        public List<AccessRequestSession> Sessions { get; set; }

        /// <summary>
        /// Whether this policy will allow bypassing any pending reviews in order to create new requests.
        /// </summary>
        /// <value>Whether this policy will allow bypassing any pending reviews in order to create new requests.</value>

        [DataMember(Name="AllowSubsequentAccessRequestsWithoutReview")]
        public bool? AllowSubsequentAccessRequestsWithoutReview { get; set; }

        /// <summary>
        /// External session module connection ID
        /// </summary>
        /// <value>External session module connection ID</value>

        [DataMember(Name="SessionModuleConnectionId")]
        public int? SessionModuleConnectionId { get; set; }

        /// <summary>
        /// External session connection policy reference
        /// </summary>
        /// <value>External session connection policy reference</value>

        [DataMember(Name="SessionConnectionPolicyRef")]
        public string SessionConnectionPolicyRef { get; set; }

        /// <summary>
        /// Username of the user that made the access request
        /// </summary>
        /// <value>Username of the user that made the access request</value>

        [DataMember(Name="RequesterUsername")]
        public string RequesterUsername { get; set; }

        /// <summary>
        /// Whether SSH key checkouts are allowed for session requests
        /// </summary>
        /// <value>Whether SSH key checkouts are allowed for session requests</value>

        [DataMember(Name="AllowSessionSshKeyRelease")]
        public bool? AllowSessionSshKeyRelease { get; set; }

        /// <summary>
        /// DistinguishedName of the account
        /// </summary>
        /// <value>DistinguishedName of the account</value>

        [DataMember(Name="AccountDistinguishedName")]
        public string AccountDistinguishedName { get; set; }

        /// <summary>
        /// Platform ID of the asset to request access for
        /// </summary>
        /// <value>Platform ID of the asset to request access for</value>

        [DataMember(Name="AssetPlatformId")]
        public int? AssetPlatformId { get; set; }

        /// <summary>
        /// Gets or Sets AssetPlatformType
        /// </summary>

        [DataMember(Name="AssetPlatformType")]
        public PlatformType AssetPlatformType { get; set; }

        /// <summary>
        /// Platform display name of the asset to request access for
        /// </summary>
        /// <value>Platform display name of the asset to request access for</value>

        [DataMember(Name="AssetPlatformDisplayName")]
        public string AssetPlatformDisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessRequest {\n");
            sb.Append("  AccessRequestType: ").Append(AccessRequestType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountDomainName: ").Append(AccountDomainName).Append("\n");
            sb.Append("  AccountAssetId: ").Append(AccountAssetId).Append("\n");
            sb.Append("  AccountAssetName: ").Append(AccountAssetName).Append("\n");
            sb.Append("  AccountRequestType: ").Append(AccountRequestType).Append("\n");
            sb.Append("  ApprovedByMe: ").Append(ApprovedByMe).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetNetworkAddress: ").Append(AssetNetworkAddress).Append("\n");
            sb.Append("  AssetSshHostKey: ").Append(AssetSshHostKey).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  CurrentApprovalCount: ").Append(CurrentApprovalCount).Append("\n");
            sb.Append("  CurrentReviewerCount: ").Append(CurrentReviewerCount).Append("\n");
            sb.Append("  DurationInMinutes: ").Append(DurationInMinutes).Append("\n");
            sb.Append("  ExpiresOn: ").Append(ExpiresOn).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsEmergency: ").Append(IsEmergency).Append("\n");
            sb.Append("  NeedsAcknowledgement: ").Append(NeedsAcknowledgement).Append("\n");
            sb.Append("  RequestAvailability: ").Append(RequestAvailability).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  ReasonComment: ").Append(ReasonComment).Append("\n");
            sb.Append("  RequestedDurationDays: ").Append(RequestedDurationDays).Append("\n");
            sb.Append("  RequestedDurationHours: ").Append(RequestedDurationHours).Append("\n");
            sb.Append("  RequestedDurationMinutes: ").Append(RequestedDurationMinutes).Append("\n");
            sb.Append("  RequestedFor: ").Append(RequestedFor).Append("\n");
            sb.Append("  RequesterDisplayName: ").Append(RequesterDisplayName).Append("\n");
            sb.Append("  RequesterEmailAddress: ").Append(RequesterEmailAddress).Append("\n");
            sb.Append("  RequesterId: ").Append(RequesterId).Append("\n");
            sb.Append("  RequiredApprovalCount: ").Append(RequiredApprovalCount).Append("\n");
            sb.Append("  RequiredReviewerCount: ").Append(RequiredReviewerCount).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateChangedOn: ").Append(StateChangedOn).Append("\n");
            sb.Append("  TicketNumber: ").Append(TicketNumber).Append("\n");
            sb.Append("  WasCancelled: ").Append(WasCancelled).Append("\n");
            sb.Append("  WasCheckedOut: ").Append(WasCheckedOut).Append("\n");
            sb.Append("  WasDenied: ").Append(WasDenied).Append("\n");
            sb.Append("  WasEvicted: ").Append(WasEvicted).Append("\n");
            sb.Append("  WasExpired: ").Append(WasExpired).Append("\n");
            sb.Append("  WasRevoked: ").Append(WasRevoked).Append("\n");
            sb.Append("  WorkflowActions: ").Append(WorkflowActions).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  PolicyName: ").Append(PolicyName).Append("\n");
            sb.Append("  RequireReviewerComment: ").Append(RequireReviewerComment).Append("\n");
            sb.Append("  AllowSraSessionLaunch: ").Append(AllowSraSessionLaunch).Append("\n");
            sb.Append("  AllowSessionPasswordRelease: ").Append(AllowSessionPasswordRelease).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("  AllowSubsequentAccessRequestsWithoutReview: ").Append(AllowSubsequentAccessRequestsWithoutReview).Append("\n");
            sb.Append("  SessionModuleConnectionId: ").Append(SessionModuleConnectionId).Append("\n");
            sb.Append("  SessionConnectionPolicyRef: ").Append(SessionConnectionPolicyRef).Append("\n");
            sb.Append("  RequesterUsername: ").Append(RequesterUsername).Append("\n");
            sb.Append("  AllowSessionSshKeyRelease: ").Append(AllowSessionSshKeyRelease).Append("\n");
            sb.Append("  AccountDistinguishedName: ").Append(AccountDistinguishedName).Append("\n");
            sb.Append("  AssetPlatformId: ").Append(AssetPlatformId).Append("\n");
            sb.Append("  AssetPlatformType: ").Append(AssetPlatformType).Append("\n");
            sb.Append("  AssetPlatformDisplayName: ").Append(AssetPlatformDisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessRequest)obj);
        }

        /// <summary>
        /// Returns true if AccessRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccessRequestType == other.AccessRequestType ||
                    AccessRequestType != null &&
                    AccessRequestType.Equals(other.AccessRequestType)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    AccountName == other.AccountName ||
                    AccountName != null &&
                    AccountName.Equals(other.AccountName)
                ) && 
                (
                    AccountDomainName == other.AccountDomainName ||
                    AccountDomainName != null &&
                    AccountDomainName.Equals(other.AccountDomainName)
                ) && 
                (
                    AccountAssetId == other.AccountAssetId ||
                    AccountAssetId != null &&
                    AccountAssetId.Equals(other.AccountAssetId)
                ) && 
                (
                    AccountAssetName == other.AccountAssetName ||
                    AccountAssetName != null &&
                    AccountAssetName.Equals(other.AccountAssetName)
                ) && 
                (
                    AccountRequestType == other.AccountRequestType ||
                    AccountRequestType != null &&
                    AccountRequestType.Equals(other.AccountRequestType)
                ) && 
                (
                    ApprovedByMe == other.ApprovedByMe ||
                    ApprovedByMe != null &&
                    ApprovedByMe.Equals(other.ApprovedByMe)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetNetworkAddress == other.AssetNetworkAddress ||
                    AssetNetworkAddress != null &&
                    AssetNetworkAddress.Equals(other.AssetNetworkAddress)
                ) && 
                (
                    AssetSshHostKey == other.AssetSshHostKey ||
                    AssetSshHostKey != null &&
                    AssetSshHostKey.Equals(other.AssetSshHostKey)
                ) && 
                (
                    CreatedOn == other.CreatedOn ||
                    CreatedOn != null &&
                    CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    CurrentApprovalCount == other.CurrentApprovalCount ||
                    CurrentApprovalCount != null &&
                    CurrentApprovalCount.Equals(other.CurrentApprovalCount)
                ) && 
                (
                    CurrentReviewerCount == other.CurrentReviewerCount ||
                    CurrentReviewerCount != null &&
                    CurrentReviewerCount.Equals(other.CurrentReviewerCount)
                ) && 
                (
                    DurationInMinutes == other.DurationInMinutes ||
                    DurationInMinutes != null &&
                    DurationInMinutes.Equals(other.DurationInMinutes)
                ) && 
                (
                    ExpiresOn == other.ExpiresOn ||
                    ExpiresOn != null &&
                    ExpiresOn.Equals(other.ExpiresOn)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsEmergency == other.IsEmergency ||
                    IsEmergency != null &&
                    IsEmergency.Equals(other.IsEmergency)
                ) && 
                (
                    NeedsAcknowledgement == other.NeedsAcknowledgement ||
                    NeedsAcknowledgement != null &&
                    NeedsAcknowledgement.Equals(other.NeedsAcknowledgement)
                ) && 
                (
                    RequestAvailability == other.RequestAvailability ||
                    RequestAvailability != null &&
                    RequestAvailability.SequenceEqual(other.RequestAvailability)
                ) && 
                (
                    ReasonCode == other.ReasonCode ||
                    ReasonCode != null &&
                    ReasonCode.Equals(other.ReasonCode)
                ) && 
                (
                    ReasonComment == other.ReasonComment ||
                    ReasonComment != null &&
                    ReasonComment.Equals(other.ReasonComment)
                ) && 
                (
                    RequestedDurationDays == other.RequestedDurationDays ||
                    RequestedDurationDays != null &&
                    RequestedDurationDays.Equals(other.RequestedDurationDays)
                ) && 
                (
                    RequestedDurationHours == other.RequestedDurationHours ||
                    RequestedDurationHours != null &&
                    RequestedDurationHours.Equals(other.RequestedDurationHours)
                ) && 
                (
                    RequestedDurationMinutes == other.RequestedDurationMinutes ||
                    RequestedDurationMinutes != null &&
                    RequestedDurationMinutes.Equals(other.RequestedDurationMinutes)
                ) && 
                (
                    RequestedFor == other.RequestedFor ||
                    RequestedFor != null &&
                    RequestedFor.Equals(other.RequestedFor)
                ) && 
                (
                    RequesterDisplayName == other.RequesterDisplayName ||
                    RequesterDisplayName != null &&
                    RequesterDisplayName.Equals(other.RequesterDisplayName)
                ) && 
                (
                    RequesterEmailAddress == other.RequesterEmailAddress ||
                    RequesterEmailAddress != null &&
                    RequesterEmailAddress.Equals(other.RequesterEmailAddress)
                ) && 
                (
                    RequesterId == other.RequesterId ||
                    RequesterId != null &&
                    RequesterId.Equals(other.RequesterId)
                ) && 
                (
                    RequiredApprovalCount == other.RequiredApprovalCount ||
                    RequiredApprovalCount != null &&
                    RequiredApprovalCount.Equals(other.RequiredApprovalCount)
                ) && 
                (
                    RequiredReviewerCount == other.RequiredReviewerCount ||
                    RequiredReviewerCount != null &&
                    RequiredReviewerCount.Equals(other.RequiredReviewerCount)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    StateChangedOn == other.StateChangedOn ||
                    StateChangedOn != null &&
                    StateChangedOn.Equals(other.StateChangedOn)
                ) && 
                (
                    TicketNumber == other.TicketNumber ||
                    TicketNumber != null &&
                    TicketNumber.Equals(other.TicketNumber)
                ) && 
                (
                    WasCancelled == other.WasCancelled ||
                    WasCancelled != null &&
                    WasCancelled.Equals(other.WasCancelled)
                ) && 
                (
                    WasCheckedOut == other.WasCheckedOut ||
                    WasCheckedOut != null &&
                    WasCheckedOut.Equals(other.WasCheckedOut)
                ) && 
                (
                    WasDenied == other.WasDenied ||
                    WasDenied != null &&
                    WasDenied.Equals(other.WasDenied)
                ) && 
                (
                    WasEvicted == other.WasEvicted ||
                    WasEvicted != null &&
                    WasEvicted.Equals(other.WasEvicted)
                ) && 
                (
                    WasExpired == other.WasExpired ||
                    WasExpired != null &&
                    WasExpired.Equals(other.WasExpired)
                ) && 
                (
                    WasRevoked == other.WasRevoked ||
                    WasRevoked != null &&
                    WasRevoked.Equals(other.WasRevoked)
                ) && 
                (
                    WorkflowActions == other.WorkflowActions ||
                    WorkflowActions != null &&
                    WorkflowActions.SequenceEqual(other.WorkflowActions)
                ) && 
                (
                    PolicyId == other.PolicyId ||
                    PolicyId != null &&
                    PolicyId.Equals(other.PolicyId)
                ) && 
                (
                    PolicyName == other.PolicyName ||
                    PolicyName != null &&
                    PolicyName.Equals(other.PolicyName)
                ) && 
                (
                    RequireReviewerComment == other.RequireReviewerComment ||
                    RequireReviewerComment != null &&
                    RequireReviewerComment.Equals(other.RequireReviewerComment)
                ) && 
                (
                    AllowSraSessionLaunch == other.AllowSraSessionLaunch ||
                    AllowSraSessionLaunch != null &&
                    AllowSraSessionLaunch.Equals(other.AllowSraSessionLaunch)
                ) && 
                (
                    AllowSessionPasswordRelease == other.AllowSessionPasswordRelease ||
                    AllowSessionPasswordRelease != null &&
                    AllowSessionPasswordRelease.Equals(other.AllowSessionPasswordRelease)
                ) && 
                (
                    Sessions == other.Sessions ||
                    Sessions != null &&
                    Sessions.SequenceEqual(other.Sessions)
                ) && 
                (
                    AllowSubsequentAccessRequestsWithoutReview == other.AllowSubsequentAccessRequestsWithoutReview ||
                    AllowSubsequentAccessRequestsWithoutReview != null &&
                    AllowSubsequentAccessRequestsWithoutReview.Equals(other.AllowSubsequentAccessRequestsWithoutReview)
                ) && 
                (
                    SessionModuleConnectionId == other.SessionModuleConnectionId ||
                    SessionModuleConnectionId != null &&
                    SessionModuleConnectionId.Equals(other.SessionModuleConnectionId)
                ) && 
                (
                    SessionConnectionPolicyRef == other.SessionConnectionPolicyRef ||
                    SessionConnectionPolicyRef != null &&
                    SessionConnectionPolicyRef.Equals(other.SessionConnectionPolicyRef)
                ) && 
                (
                    RequesterUsername == other.RequesterUsername ||
                    RequesterUsername != null &&
                    RequesterUsername.Equals(other.RequesterUsername)
                ) && 
                (
                    AllowSessionSshKeyRelease == other.AllowSessionSshKeyRelease ||
                    AllowSessionSshKeyRelease != null &&
                    AllowSessionSshKeyRelease.Equals(other.AllowSessionSshKeyRelease)
                ) && 
                (
                    AccountDistinguishedName == other.AccountDistinguishedName ||
                    AccountDistinguishedName != null &&
                    AccountDistinguishedName.Equals(other.AccountDistinguishedName)
                ) && 
                (
                    AssetPlatformId == other.AssetPlatformId ||
                    AssetPlatformId != null &&
                    AssetPlatformId.Equals(other.AssetPlatformId)
                ) && 
                (
                    AssetPlatformType == other.AssetPlatformType ||
                    AssetPlatformType != null &&
                    AssetPlatformType.Equals(other.AssetPlatformType)
                ) && 
                (
                    AssetPlatformDisplayName == other.AssetPlatformDisplayName ||
                    AssetPlatformDisplayName != null &&
                    AssetPlatformDisplayName.Equals(other.AssetPlatformDisplayName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccessRequestType != null)
                    hashCode = hashCode * 59 + AccessRequestType.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (AccountName != null)
                    hashCode = hashCode * 59 + AccountName.GetHashCode();
                    if (AccountDomainName != null)
                    hashCode = hashCode * 59 + AccountDomainName.GetHashCode();
                    if (AccountAssetId != null)
                    hashCode = hashCode * 59 + AccountAssetId.GetHashCode();
                    if (AccountAssetName != null)
                    hashCode = hashCode * 59 + AccountAssetName.GetHashCode();
                    if (AccountRequestType != null)
                    hashCode = hashCode * 59 + AccountRequestType.GetHashCode();
                    if (ApprovedByMe != null)
                    hashCode = hashCode * 59 + ApprovedByMe.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetNetworkAddress != null)
                    hashCode = hashCode * 59 + AssetNetworkAddress.GetHashCode();
                    if (AssetSshHostKey != null)
                    hashCode = hashCode * 59 + AssetSshHostKey.GetHashCode();
                    if (CreatedOn != null)
                    hashCode = hashCode * 59 + CreatedOn.GetHashCode();
                    if (CurrentApprovalCount != null)
                    hashCode = hashCode * 59 + CurrentApprovalCount.GetHashCode();
                    if (CurrentReviewerCount != null)
                    hashCode = hashCode * 59 + CurrentReviewerCount.GetHashCode();
                    if (DurationInMinutes != null)
                    hashCode = hashCode * 59 + DurationInMinutes.GetHashCode();
                    if (ExpiresOn != null)
                    hashCode = hashCode * 59 + ExpiresOn.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsEmergency != null)
                    hashCode = hashCode * 59 + IsEmergency.GetHashCode();
                    if (NeedsAcknowledgement != null)
                    hashCode = hashCode * 59 + NeedsAcknowledgement.GetHashCode();
                    if (RequestAvailability != null)
                    hashCode = hashCode * 59 + RequestAvailability.GetHashCode();
                    if (ReasonCode != null)
                    hashCode = hashCode * 59 + ReasonCode.GetHashCode();
                    if (ReasonComment != null)
                    hashCode = hashCode * 59 + ReasonComment.GetHashCode();
                    if (RequestedDurationDays != null)
                    hashCode = hashCode * 59 + RequestedDurationDays.GetHashCode();
                    if (RequestedDurationHours != null)
                    hashCode = hashCode * 59 + RequestedDurationHours.GetHashCode();
                    if (RequestedDurationMinutes != null)
                    hashCode = hashCode * 59 + RequestedDurationMinutes.GetHashCode();
                    if (RequestedFor != null)
                    hashCode = hashCode * 59 + RequestedFor.GetHashCode();
                    if (RequesterDisplayName != null)
                    hashCode = hashCode * 59 + RequesterDisplayName.GetHashCode();
                    if (RequesterEmailAddress != null)
                    hashCode = hashCode * 59 + RequesterEmailAddress.GetHashCode();
                    if (RequesterId != null)
                    hashCode = hashCode * 59 + RequesterId.GetHashCode();
                    if (RequiredApprovalCount != null)
                    hashCode = hashCode * 59 + RequiredApprovalCount.GetHashCode();
                    if (RequiredReviewerCount != null)
                    hashCode = hashCode * 59 + RequiredReviewerCount.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (StateChangedOn != null)
                    hashCode = hashCode * 59 + StateChangedOn.GetHashCode();
                    if (TicketNumber != null)
                    hashCode = hashCode * 59 + TicketNumber.GetHashCode();
                    if (WasCancelled != null)
                    hashCode = hashCode * 59 + WasCancelled.GetHashCode();
                    if (WasCheckedOut != null)
                    hashCode = hashCode * 59 + WasCheckedOut.GetHashCode();
                    if (WasDenied != null)
                    hashCode = hashCode * 59 + WasDenied.GetHashCode();
                    if (WasEvicted != null)
                    hashCode = hashCode * 59 + WasEvicted.GetHashCode();
                    if (WasExpired != null)
                    hashCode = hashCode * 59 + WasExpired.GetHashCode();
                    if (WasRevoked != null)
                    hashCode = hashCode * 59 + WasRevoked.GetHashCode();
                    if (WorkflowActions != null)
                    hashCode = hashCode * 59 + WorkflowActions.GetHashCode();
                    if (PolicyId != null)
                    hashCode = hashCode * 59 + PolicyId.GetHashCode();
                    if (PolicyName != null)
                    hashCode = hashCode * 59 + PolicyName.GetHashCode();
                    if (RequireReviewerComment != null)
                    hashCode = hashCode * 59 + RequireReviewerComment.GetHashCode();
                    if (AllowSraSessionLaunch != null)
                    hashCode = hashCode * 59 + AllowSraSessionLaunch.GetHashCode();
                    if (AllowSessionPasswordRelease != null)
                    hashCode = hashCode * 59 + AllowSessionPasswordRelease.GetHashCode();
                    if (Sessions != null)
                    hashCode = hashCode * 59 + Sessions.GetHashCode();
                    if (AllowSubsequentAccessRequestsWithoutReview != null)
                    hashCode = hashCode * 59 + AllowSubsequentAccessRequestsWithoutReview.GetHashCode();
                    if (SessionModuleConnectionId != null)
                    hashCode = hashCode * 59 + SessionModuleConnectionId.GetHashCode();
                    if (SessionConnectionPolicyRef != null)
                    hashCode = hashCode * 59 + SessionConnectionPolicyRef.GetHashCode();
                    if (RequesterUsername != null)
                    hashCode = hashCode * 59 + RequesterUsername.GetHashCode();
                    if (AllowSessionSshKeyRelease != null)
                    hashCode = hashCode * 59 + AllowSessionSshKeyRelease.GetHashCode();
                    if (AccountDistinguishedName != null)
                    hashCode = hashCode * 59 + AccountDistinguishedName.GetHashCode();
                    if (AssetPlatformId != null)
                    hashCode = hashCode * 59 + AssetPlatformId.GetHashCode();
                    if (AssetPlatformType != null)
                    hashCode = hashCode * 59 + AssetPlatformType.GetHashCode();
                    if (AssetPlatformDisplayName != null)
                    hashCode = hashCode * 59 + AssetPlatformDisplayName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessRequest left, AccessRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessRequest left, AccessRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
