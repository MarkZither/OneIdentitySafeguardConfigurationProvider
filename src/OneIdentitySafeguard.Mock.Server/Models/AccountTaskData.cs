/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace OneIdentitySafeguard.Mock.Server.Models
{ 
    /// <summary>
    /// Represents platform task information for an asset or directory account
    /// </summary>
    [DataContract]
    public partial class AccountTaskData : IEquatable<AccountTaskData>
    { 
        /// <summary>
        /// The database key of the account (Read-only)
        /// </summary>
        /// <value>The database key of the account (Read-only)</value>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the account (Read-only)
        /// </summary>
        /// <value>The name of the account (Read-only)</value>

        [DataMember(Name="Name")]
        public string Name { get; set; }

        /// <summary>
        /// The domain name that the account belongs to. (Read-only)
        /// </summary>
        /// <value>The domain name that the account belongs to. (Read-only)</value>

        [DataMember(Name="DomainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// The netbios name of the domain the account is from. (Read-only)
        /// </summary>
        /// <value>The netbios name of the domain the account is from. (Read-only)</value>

        [DataMember(Name="NetBiosName")]
        public string NetBiosName { get; set; }

        /// <summary>
        /// The distinguished name of the object (Read-only)
        /// </summary>
        /// <value>The distinguished name of the object (Read-only)</value>

        [DataMember(Name="DistinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// A short description of the account. (Read-only)
        /// </summary>
        /// <value>A short description of the account. (Read-only)</value>

        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// The system ID for use with platform tasks (Read-only)
        /// </summary>
        /// <value>The system ID for use with platform tasks (Read-only)</value>

        [DataMember(Name="AssetId")]
        public int? AssetId { get; set; }

        /// <summary>
        /// The name of the asset or directory this account is associated with (Read-only)
        /// </summary>
        /// <value>The name of the asset or directory this account is associated with (Read-only)</value>

        [DataMember(Name="AssetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// The network address of the system of the account
        /// </summary>
        /// <value>The network address of the system of the account</value>

        [DataMember(Name="AssetNetworkAddress")]
        public string AssetNetworkAddress { get; set; }

        /// <summary>
        /// Database ID of partition asset belongs to
        /// </summary>
        /// <value>Database ID of partition asset belongs to</value>

        [DataMember(Name="AssetPartitionId")]
        public int? AssetPartitionId { get; set; }

        /// <summary>
        /// Name of partition asset belongs to
        /// </summary>
        /// <value>Name of partition asset belongs to</value>

        [DataMember(Name="AssetPartitionName")]
        public string AssetPartitionName { get; set; }

        /// <summary>
        /// Unique identifier of sync group this account belongs to if applicable (Read-only)
        /// </summary>
        /// <value>Unique identifier of sync group this account belongs to if applicable (Read-only)</value>

        [DataMember(Name="SyncGroupId")]
        public int? SyncGroupId { get; set; }

        /// <summary>
        /// Name of SSH key sync group this account belongs to if applicable (Read-only)
        /// </summary>
        /// <value>Name of SSH key sync group this account belongs to if applicable (Read-only)</value>

        [DataMember(Name="SyncGroupName")]
        public string SyncGroupName { get; set; }

        /// <summary>
        /// Unique identifier of sync group this account belongs to if applicable (Read-only)
        /// </summary>
        /// <value>Unique identifier of sync group this account belongs to if applicable (Read-only)</value>

        [DataMember(Name="SshKeySyncGroupId")]
        public int? SshKeySyncGroupId { get; set; }

        /// <summary>
        /// Name of SSH key sync group this account belongs to if applicable (Read-only)
        /// </summary>
        /// <value>Name of SSH key sync group this account belongs to if applicable (Read-only)</value>

        [DataMember(Name="SshKeySyncGroupName")]
        public string SshKeySyncGroupName { get; set; }

        /// <summary>
        /// The database ID of the type of platform (Read-only)
        /// </summary>
        /// <value>The database ID of the type of platform (Read-only)</value>

        [DataMember(Name="PlatformId")]
        public int? PlatformId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformType
        /// </summary>

        [DataMember(Name="PlatformType")]
        public PlatformType PlatformType { get; set; }

        /// <summary>
        /// The display name of the type of platform (Read-only)
        /// </summary>
        /// <value>The display name of the type of platform (Read-only)</value>

        [DataMember(Name="PlatformDisplayName")]
        public string PlatformDisplayName { get; set; }

        /// <summary>
        /// Whether the account has a password set or not (Read-only)
        /// </summary>
        /// <value>Whether the account has a password set or not (Read-only)</value>

        [DataMember(Name="HasPassword")]
        public bool? HasPassword { get; set; }

        /// <summary>
        /// Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)
        /// </summary>
        /// <value>Whether this account has been disabled. Prevent it from being used for access requests and automated password tasks (Read-only)</value>

        [DataMember(Name="Disabled")]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or Sets AccountType
        /// </summary>

        [DataMember(Name="AccountType")]
        public AccountType AccountType { get; set; }

        /// <summary>
        /// Whether this account is being used as a service account (Read-only)
        /// </summary>
        /// <value>Whether this account is being used as a service account (Read-only)</value>

        [DataMember(Name="IsServiceAccount")]
        public bool? IsServiceAccount { get; set; }

        /// <summary>
        /// Database ID of the effective profile assigned to this account or to the asset or partition it belongs to (Read-only)
        /// </summary>
        /// <value>Database ID of the effective profile assigned to this account or to the asset or partition it belongs to (Read-only)</value>

        [DataMember(Name="EffectiveProfileId")]
        public int? EffectiveProfileId { get; set; }

        /// <summary>
        /// Name of the effective profile assigned to this account or to the asset or partition it belongs to (Read-only)
        /// </summary>
        /// <value>Name of the effective profile assigned to this account or to the asset or partition it belongs to (Read-only)</value>

        [DataMember(Name="EffectiveProfileName")]
        public string EffectiveProfileName { get; set; }

        /// <summary>
        /// Database ID of the effective SSH key profile assigned to this account or to the asset or partition it belongs to (Read-only)
        /// </summary>
        /// <value>Database ID of the effective SSH key profile assigned to this account or to the asset or partition it belongs to (Read-only)</value>

        [DataMember(Name="EffectiveSshKeyProfileId")]
        public int? EffectiveSshKeyProfileId { get; set; }

        /// <summary>
        /// Name of the effective SSH key profile assigned to this account or to the asset or partition it belongs to (Read-only)
        /// </summary>
        /// <value>Name of the effective SSH key profile assigned to this account or to the asset or partition it belongs to (Read-only)</value>

        [DataMember(Name="EffectiveSshKeyProfileName")]
        public string EffectiveSshKeyProfileName { get; set; }

        /// <summary>
        /// Gets or Sets PlatformTaskInformation
        /// </summary>

        [DataMember(Name="PlatformTaskInformation")]
        public PlatformTaskInformation PlatformTaskInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTaskData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  NetBiosName: ").Append(NetBiosName).Append("\n");
            sb.Append("  DistinguishedName: ").Append(DistinguishedName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  AssetNetworkAddress: ").Append(AssetNetworkAddress).Append("\n");
            sb.Append("  AssetPartitionId: ").Append(AssetPartitionId).Append("\n");
            sb.Append("  AssetPartitionName: ").Append(AssetPartitionName).Append("\n");
            sb.Append("  SyncGroupId: ").Append(SyncGroupId).Append("\n");
            sb.Append("  SyncGroupName: ").Append(SyncGroupName).Append("\n");
            sb.Append("  SshKeySyncGroupId: ").Append(SshKeySyncGroupId).Append("\n");
            sb.Append("  SshKeySyncGroupName: ").Append(SshKeySyncGroupName).Append("\n");
            sb.Append("  PlatformId: ").Append(PlatformId).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  PlatformDisplayName: ").Append(PlatformDisplayName).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  IsServiceAccount: ").Append(IsServiceAccount).Append("\n");
            sb.Append("  EffectiveProfileId: ").Append(EffectiveProfileId).Append("\n");
            sb.Append("  EffectiveProfileName: ").Append(EffectiveProfileName).Append("\n");
            sb.Append("  EffectiveSshKeyProfileId: ").Append(EffectiveSshKeyProfileId).Append("\n");
            sb.Append("  EffectiveSshKeyProfileName: ").Append(EffectiveSshKeyProfileName).Append("\n");
            sb.Append("  PlatformTaskInformation: ").Append(PlatformTaskInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountTaskData)obj);
        }

        /// <summary>
        /// Returns true if AccountTaskData instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountTaskData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTaskData other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    DomainName == other.DomainName ||
                    DomainName != null &&
                    DomainName.Equals(other.DomainName)
                ) && 
                (
                    NetBiosName == other.NetBiosName ||
                    NetBiosName != null &&
                    NetBiosName.Equals(other.NetBiosName)
                ) && 
                (
                    DistinguishedName == other.DistinguishedName ||
                    DistinguishedName != null &&
                    DistinguishedName.Equals(other.DistinguishedName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    AssetId == other.AssetId ||
                    AssetId != null &&
                    AssetId.Equals(other.AssetId)
                ) && 
                (
                    AssetName == other.AssetName ||
                    AssetName != null &&
                    AssetName.Equals(other.AssetName)
                ) && 
                (
                    AssetNetworkAddress == other.AssetNetworkAddress ||
                    AssetNetworkAddress != null &&
                    AssetNetworkAddress.Equals(other.AssetNetworkAddress)
                ) && 
                (
                    AssetPartitionId == other.AssetPartitionId ||
                    AssetPartitionId != null &&
                    AssetPartitionId.Equals(other.AssetPartitionId)
                ) && 
                (
                    AssetPartitionName == other.AssetPartitionName ||
                    AssetPartitionName != null &&
                    AssetPartitionName.Equals(other.AssetPartitionName)
                ) && 
                (
                    SyncGroupId == other.SyncGroupId ||
                    SyncGroupId != null &&
                    SyncGroupId.Equals(other.SyncGroupId)
                ) && 
                (
                    SyncGroupName == other.SyncGroupName ||
                    SyncGroupName != null &&
                    SyncGroupName.Equals(other.SyncGroupName)
                ) && 
                (
                    SshKeySyncGroupId == other.SshKeySyncGroupId ||
                    SshKeySyncGroupId != null &&
                    SshKeySyncGroupId.Equals(other.SshKeySyncGroupId)
                ) && 
                (
                    SshKeySyncGroupName == other.SshKeySyncGroupName ||
                    SshKeySyncGroupName != null &&
                    SshKeySyncGroupName.Equals(other.SshKeySyncGroupName)
                ) && 
                (
                    PlatformId == other.PlatformId ||
                    PlatformId != null &&
                    PlatformId.Equals(other.PlatformId)
                ) && 
                (
                    PlatformType == other.PlatformType ||
                    PlatformType != null &&
                    PlatformType.Equals(other.PlatformType)
                ) && 
                (
                    PlatformDisplayName == other.PlatformDisplayName ||
                    PlatformDisplayName != null &&
                    PlatformDisplayName.Equals(other.PlatformDisplayName)
                ) && 
                (
                    HasPassword == other.HasPassword ||
                    HasPassword != null &&
                    HasPassword.Equals(other.HasPassword)
                ) && 
                (
                    Disabled == other.Disabled ||
                    Disabled != null &&
                    Disabled.Equals(other.Disabled)
                ) && 
                (
                    AccountType == other.AccountType ||
                    AccountType != null &&
                    AccountType.Equals(other.AccountType)
                ) && 
                (
                    IsServiceAccount == other.IsServiceAccount ||
                    IsServiceAccount != null &&
                    IsServiceAccount.Equals(other.IsServiceAccount)
                ) && 
                (
                    EffectiveProfileId == other.EffectiveProfileId ||
                    EffectiveProfileId != null &&
                    EffectiveProfileId.Equals(other.EffectiveProfileId)
                ) && 
                (
                    EffectiveProfileName == other.EffectiveProfileName ||
                    EffectiveProfileName != null &&
                    EffectiveProfileName.Equals(other.EffectiveProfileName)
                ) && 
                (
                    EffectiveSshKeyProfileId == other.EffectiveSshKeyProfileId ||
                    EffectiveSshKeyProfileId != null &&
                    EffectiveSshKeyProfileId.Equals(other.EffectiveSshKeyProfileId)
                ) && 
                (
                    EffectiveSshKeyProfileName == other.EffectiveSshKeyProfileName ||
                    EffectiveSshKeyProfileName != null &&
                    EffectiveSshKeyProfileName.Equals(other.EffectiveSshKeyProfileName)
                ) && 
                (
                    PlatformTaskInformation == other.PlatformTaskInformation ||
                    PlatformTaskInformation != null &&
                    PlatformTaskInformation.Equals(other.PlatformTaskInformation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (DomainName != null)
                    hashCode = hashCode * 59 + DomainName.GetHashCode();
                    if (NetBiosName != null)
                    hashCode = hashCode * 59 + NetBiosName.GetHashCode();
                    if (DistinguishedName != null)
                    hashCode = hashCode * 59 + DistinguishedName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AssetId != null)
                    hashCode = hashCode * 59 + AssetId.GetHashCode();
                    if (AssetName != null)
                    hashCode = hashCode * 59 + AssetName.GetHashCode();
                    if (AssetNetworkAddress != null)
                    hashCode = hashCode * 59 + AssetNetworkAddress.GetHashCode();
                    if (AssetPartitionId != null)
                    hashCode = hashCode * 59 + AssetPartitionId.GetHashCode();
                    if (AssetPartitionName != null)
                    hashCode = hashCode * 59 + AssetPartitionName.GetHashCode();
                    if (SyncGroupId != null)
                    hashCode = hashCode * 59 + SyncGroupId.GetHashCode();
                    if (SyncGroupName != null)
                    hashCode = hashCode * 59 + SyncGroupName.GetHashCode();
                    if (SshKeySyncGroupId != null)
                    hashCode = hashCode * 59 + SshKeySyncGroupId.GetHashCode();
                    if (SshKeySyncGroupName != null)
                    hashCode = hashCode * 59 + SshKeySyncGroupName.GetHashCode();
                    if (PlatformId != null)
                    hashCode = hashCode * 59 + PlatformId.GetHashCode();
                    if (PlatformType != null)
                    hashCode = hashCode * 59 + PlatformType.GetHashCode();
                    if (PlatformDisplayName != null)
                    hashCode = hashCode * 59 + PlatformDisplayName.GetHashCode();
                    if (HasPassword != null)
                    hashCode = hashCode * 59 + HasPassword.GetHashCode();
                    if (Disabled != null)
                    hashCode = hashCode * 59 + Disabled.GetHashCode();
                    if (AccountType != null)
                    hashCode = hashCode * 59 + AccountType.GetHashCode();
                    if (IsServiceAccount != null)
                    hashCode = hashCode * 59 + IsServiceAccount.GetHashCode();
                    if (EffectiveProfileId != null)
                    hashCode = hashCode * 59 + EffectiveProfileId.GetHashCode();
                    if (EffectiveProfileName != null)
                    hashCode = hashCode * 59 + EffectiveProfileName.GetHashCode();
                    if (EffectiveSshKeyProfileId != null)
                    hashCode = hashCode * 59 + EffectiveSshKeyProfileId.GetHashCode();
                    if (EffectiveSshKeyProfileName != null)
                    hashCode = hashCode * 59 + EffectiveSshKeyProfileName.GetHashCode();
                    if (PlatformTaskInformation != null)
                    hashCode = hashCode * 59 + PlatformTaskInformation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountTaskData left, AccountTaskData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountTaskData left, AccountTaskData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
