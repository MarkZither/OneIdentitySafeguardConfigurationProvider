/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SshAlgorithmsApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the list of permitted SSH algorithms
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Failed to retrieve the algorithms</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="410">This operation is not supported for this platform type</response>
        [HttpGet]
        [Route("/service/core/v4/SshAlgorithms")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SshAlgorithmsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SshAlgorithms), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Failed to retrieve the algorithms")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        [SwaggerResponse(statusCode: 410, type: typeof(ApiError), description: "This operation is not supported for this platform type")]
        public virtual IActionResult SshAlgorithmsGetAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SshAlgorithms));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"PublicKey\" : [ \"PublicKey\", \"PublicKey\" ],\n  \"Cipher\" : [ \"Cipher\", \"Cipher\" ],\n  \"Mac\" : [ \"Mac\", \"Mac\" ],\n  \"Kex\" : [ \"Kex\", \"Kex\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SshAlgorithms>(exampleJson)
                        : default(SshAlgorithms);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modifies SSH algorithms
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Failed to retrieve the algorithms</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="410">This operation is not supported for this platform type</response>
        [HttpPut]
        [Route("/service/core/v4/SshAlgorithms")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SshAlgorithmsUpdateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SshAlgorithms), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Failed to retrieve the algorithms")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        [SwaggerResponse(statusCode: 410, type: typeof(ApiError), description: "This operation is not supported for this platform type")]
        public virtual IActionResult SshAlgorithmsUpdateAsync([FromBody]SshAlgorithms body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SshAlgorithms));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"PublicKey\" : [ \"PublicKey\", \"PublicKey\" ],\n  \"Cipher\" : [ \"Cipher\", \"Cipher\" ],\n  \"Mac\" : [ \"Mac\", \"Mac\" ],\n  \"Kex\" : [ \"Kex\", \"Kex\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SshAlgorithms>(exampleJson)
                        : default(SshAlgorithms);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
