/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AccessPoliciesApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new access policy
        /// </summary>
        /// <param name="body">AccessPolicy to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AccessPolicies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesCreateAccessPolicyAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(AccessPolicy), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesCreateAccessPolicyAsync([FromBody]AccessPolicy body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(AccessPolicy));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessPolicy>(exampleJson)
                        : default(AccessPolicy);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an access policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/AccessPolicies/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesDeleteAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a list of access policies
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetAccessPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetAccessPoliciesAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}, {\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessPolicy>>(exampleJson)
                        : default(List<AccessPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets an access policy
        /// </summary>
        /// <param name="id">Unique ID of AccessPolicy</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetAccessPolicyByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessPolicy), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetAccessPolicyByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessPolicy));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessPolicy>(exampleJson)
                        : default(AccessPolicy);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the sets of identities that may approve access requests using this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies/{id}/ApproverSets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetApproverSetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ApproverSet>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetApproverSetsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ApproverSet>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RequiredApprovers\" : 190081825,\n  \"Approvers\" : [ {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}, {\n  \"RequiredApprovers\" : 190081825,\n  \"Approvers\" : [ {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ApproverSet>>(exampleJson)
                        : default(List<ApproverSet>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all NotificationContacts configured for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Failed to retrieve contacts</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies/{id}/NotificationContacts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetNotificationContactsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NotificationContact>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetNotificationContactsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NotificationContact>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ContactAddress\" : \"ContactAddress\",\n  \"ContactType\" : \"ReleaseWithoutApproval\"\n}, {\n  \"ContactAddress\" : \"ContactAddress\",\n  \"ContactType\" : \"ReleaseWithoutApproval\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NotificationContact>>(exampleJson)
                        : default(List<NotificationContact>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the reason codes assigned to this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies/{id}/ReasonCodes")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetReasonCodesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ReasonCode>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetReasonCodesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ReasonCode>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Id\" : 8,\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Id\" : 8,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ReasonCode>>(exampleJson)
                        : default(List<ReasonCode>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the reviewers assigned to this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies/{id}/Reviewers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetReviewersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetReviewersAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the set of account groups that are explicitly assigned to this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Failed to retrieve account groups</response>
        [HttpGet]
        [Route("/service/core/v4/AccessPolicies/{id}/ScopeItems")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesGetScopeItemsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyScopeItem>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccessPoliciesGetScopeItemsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyScopeItem>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ScopeItemType\" : \"Asset\",\n  \"AccountGroup\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Name\" : \"Name\",\n  \"AssetGroup\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  }\n}, {\n  \"Description\" : \"Description\",\n  \"ScopeItemType\" : \"Asset\",\n  \"AccountGroup\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Name\" : \"Name\",\n  \"AssetGroup\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyScopeItem>>(exampleJson)
                        : default(List<PolicyScopeItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove who can approve access requests for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">sets of identities to assign as approvers</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save approver sets</response>
        [HttpPost]
        [Route("/service/core/v4/AccessPolicies/{id}/ApproverSets/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesModifyApproverSetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ApproverSet>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesModifyApproverSetsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<ApproverSet> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ApproverSet>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RequiredApprovers\" : 190081825,\n  \"Approvers\" : [ {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}, {\n  \"RequiredApprovers\" : 190081825,\n  \"Approvers\" : [ {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ApproverSet>>(exampleJson)
                        : default(List<ApproverSet>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove notification contacts associated with request events for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Contacts to assign to this policy</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save contacts</response>
        [HttpPost]
        [Route("/service/core/v4/AccessPolicies/{id}/NotificationContacts/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesModifyNotificationContactsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NotificationContact>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesModifyNotificationContactsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<NotificationContact> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NotificationContact>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ContactAddress\" : \"ContactAddress\",\n  \"ContactType\" : \"ReleaseWithoutApproval\"\n}, {\n  \"ContactAddress\" : \"ContactAddress\",\n  \"ContactType\" : \"ReleaseWithoutApproval\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NotificationContact>>(exampleJson)
                        : default(List<NotificationContact>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove reason codes that may be used to make access requests managed by this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">ReasonCodes to assign to this policy</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save reason codes</response>
        [HttpPost]
        [Route("/service/core/v4/AccessPolicies/{id}/ReasonCodes/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesModifyReasonCodesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ReasonCode>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesModifyReasonCodesAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<ReasonCode> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ReasonCode>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Id\" : 8,\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Id\" : 8,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ReasonCode>>(exampleJson)
                        : default(List<ReasonCode>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove who can review access requests for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Identities to assign as reviewers</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AccessPolicies/{id}/Reviewers/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesModifyReviewersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesModifyReviewersAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<Identity> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/remove accounts, assets, account groups, and asset groups that are explicitly assigned to this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">PolicyScopeItems to manage with this policy</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save scope items</response>
        [HttpPost]
        [Route("/service/core/v4/AccessPolicies/{id}/ScopeItems/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesModifyScopeItemsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyScopeItem>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesModifyScopeItemsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<PolicyScopeItem> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyScopeItem>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ScopeItemType\" : \"Asset\",\n  \"AccountGroup\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Name\" : \"Name\",\n  \"AssetGroup\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  }\n}, {\n  \"Description\" : \"Description\",\n  \"ScopeItemType\" : \"Asset\",\n  \"AccountGroup\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Name\" : \"Name\",\n  \"AssetGroup\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyScopeItem>>(exampleJson)
                        : default(List<PolicyScopeItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets who can approve access requests for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="body">sets of identities to assign as approvers</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save approver sets</response>
        [HttpPut]
        [Route("/service/core/v4/AccessPolicies/{id}/ApproverSets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesSetApproverSetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ApproverSet>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesSetApproverSetsAsync([FromRoute][Required]int? id, [FromBody]List<ApproverSet> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ApproverSet>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RequiredApprovers\" : 190081825,\n  \"Approvers\" : [ {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}, {\n  \"RequiredApprovers\" : 190081825,\n  \"Approvers\" : [ {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 6,\n    \"PrincipalKind\" : \"Unknown\",\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 7,\n    \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ApproverSet>>(exampleJson)
                        : default(List<ApproverSet>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the list of notification contacts associated with request events for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="body">Contacts to assign to this policy</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save contacts</response>
        [HttpPut]
        [Route("/service/core/v4/AccessPolicies/{id}/NotificationContacts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesSetNotificationContactsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NotificationContact>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesSetNotificationContactsAsync([FromRoute][Required]int? id, [FromBody]List<NotificationContact> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NotificationContact>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ContactAddress\" : \"ContactAddress\",\n  \"ContactType\" : \"ReleaseWithoutApproval\"\n}, {\n  \"ContactAddress\" : \"ContactAddress\",\n  \"ContactType\" : \"ReleaseWithoutApproval\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NotificationContact>>(exampleJson)
                        : default(List<NotificationContact>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the list of reason codes that may be used to make access requests managed by this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="body">ReasonCodes to assign to this policy</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save reason codes</response>
        [HttpPut]
        [Route("/service/core/v4/AccessPolicies/{id}/ReasonCodes")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesSetReasonCodeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ReasonCode>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesSetReasonCodeAsync([FromRoute][Required]int? id, [FromBody]List<ReasonCode> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ReasonCode>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Id\" : 8,\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Id\" : 8,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ReasonCode>>(exampleJson)
                        : default(List<ReasonCode>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets who can review access requests for this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="body">Identities to assign as reviewers</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/AccessPolicies/{id}/Reviewers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesSetReviewersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesSetReviewersAsync([FromRoute][Required]int? id, [FromBody]List<Identity> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the list of accounts, assets, account groups, and asset groups that are explicitly assigned to this policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="body">PolicyScopeItems to manage with this policy</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Failed to save scope items</response>
        [HttpPut]
        [Route("/service/core/v4/AccessPolicies/{id}/ScopeItems")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesSetScopeItemsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyScopeItem>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesSetScopeItemsAsync([FromRoute][Required]int? id, [FromBody]List<PolicyScopeItem> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyScopeItem>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ScopeItemType\" : \"Asset\",\n  \"AccountGroup\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Name\" : \"Name\",\n  \"AssetGroup\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  }\n}, {\n  \"Description\" : \"Description\",\n  \"ScopeItemType\" : \"Asset\",\n  \"AccountGroup\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Name\" : \"Name\",\n  \"AssetGroup\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyScopeItem>>(exampleJson)
                        : default(List<PolicyScopeItem>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing application access policy
        /// </summary>
        /// <param name="id">Unique identifier of the AccessPolicy</param>
        /// <param name="body">Updated AccessPolicy</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AccessPolicy does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AccessPolicies/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessPoliciesUpdateAccessPolicyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessPolicy), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccessPoliciesUpdateAccessPolicyAsync([FromRoute][Required]int? id, [FromBody]AccessPolicy body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessPolicy));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessPolicy>(exampleJson)
                        : default(AccessPolicy);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
