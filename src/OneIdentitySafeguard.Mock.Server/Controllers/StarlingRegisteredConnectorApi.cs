/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StarlingRegisteredConnectorApiController : ControllerBase
    { 
        /// <summary>
        /// Create a starling registered connector
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/StarlingRegisteredConnector")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingRegisteredConnectorCreateStarlingRegisteredConnectorsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(StarlingRegisteredConnector), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult StarlingRegisteredConnectorCreateStarlingRegisteredConnectorsAsync([FromBody]StarlingRegisteredConnector body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StarlingRegisteredConnector));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"StarlingConnectorId\" : \"StarlingConnectorId\",\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"VisibleToPartitions\" : [ {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n  \"Id\" : 9,\n  \"VisibleToAllPartitions\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StarlingRegisteredConnector>(exampleJson)
                        : default(StarlingRegisteredConnector);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a starling registered connector
        /// </summary>
        /// <param name="id"></param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/StarlingRegisteredConnector/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingRegisteredConnectorDeleteStarlingRegisteredConnectorsAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult StarlingRegisteredConnectorDeleteStarlingRegisteredConnectorsAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a list of registered connectors from starling
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingRegisteredConnector/FromStarling")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingRegisteredConnectorGetRegisteredConnectorsFromStarlingAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StarlingRegisteredConnectorFromStarling>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult StarlingRegisteredConnectorGetRegisteredConnectorsFromStarlingAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StarlingRegisteredConnectorFromStarling>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"SubscriptionId\" : \"SubscriptionId\",\n  \"DisplayName\" : \"DisplayName\",\n  \"AvailableVersions\" : [ \"AvailableVersions\", \"AvailableVersions\" ],\n  \"ConnectorDisplayName\" : \"ConnectorDisplayName\",\n  \"ConnectorId\" : \"ConnectorId\"\n}, {\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"SubscriptionId\" : \"SubscriptionId\",\n  \"DisplayName\" : \"DisplayName\",\n  \"AvailableVersions\" : [ \"AvailableVersions\", \"AvailableVersions\" ],\n  \"ConnectorDisplayName\" : \"ConnectorDisplayName\",\n  \"ConnectorId\" : \"ConnectorId\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<StarlingRegisteredConnectorFromStarling>>(exampleJson)
                        : default(List<StarlingRegisteredConnectorFromStarling>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a starling registered connector from safeguard
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Registered connector does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingRegisteredConnector/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingRegisteredConnectorGetStarlingRegisteredConnectorAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(StarlingRegisteredConnector), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult StarlingRegisteredConnectorGetStarlingRegisteredConnectorAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StarlingRegisteredConnector));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"StarlingConnectorId\" : \"StarlingConnectorId\",\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"VisibleToPartitions\" : [ {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n  \"Id\" : 9,\n  \"VisibleToAllPartitions\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StarlingRegisteredConnector>(exampleJson)
                        : default(StarlingRegisteredConnector);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a list of starling registered connectors from safeguard
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingRegisteredConnector")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingRegisteredConnectorGetStarlingRegisteredConnectorsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StarlingRegisteredConnector>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult StarlingRegisteredConnectorGetStarlingRegisteredConnectorsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StarlingRegisteredConnector>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"StarlingConnectorId\" : \"StarlingConnectorId\",\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"VisibleToPartitions\" : [ {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n  \"Id\" : 9,\n  \"VisibleToAllPartitions\" : true\n}, {\n  \"StarlingConnectorId\" : \"StarlingConnectorId\",\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"VisibleToPartitions\" : [ {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n  \"Id\" : 9,\n  \"VisibleToAllPartitions\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<StarlingRegisteredConnector>>(exampleJson)
                        : default(List<StarlingRegisteredConnector>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// update a starling registered connector
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Registered connector does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/StarlingRegisteredConnector/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingRegisteredConnectorUpdateStarlingRegisteredConnectorsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(StarlingRegisteredConnector), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult StarlingRegisteredConnectorUpdateStarlingRegisteredConnectorsAsync([FromRoute][Required]int? id, [FromBody]StarlingRegisteredConnector body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StarlingRegisteredConnector));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"StarlingConnectorId\" : \"StarlingConnectorId\",\n  \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n  \"VisibleToPartitions\" : [ {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"DefaultProfileName\" : \"DefaultProfileName\",\n    \"DefaultSshKeyProfileId\" : 5,\n    \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DefaultProfileId\" : 1,\n    \"Id\" : 0,\n    \"Name\" : \"Name\"\n  } ],\n  \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n  \"Id\" : 9,\n  \"VisibleToAllPartitions\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StarlingRegisteredConnector>(exampleJson)
                        : default(StarlingRegisteredConnector);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
