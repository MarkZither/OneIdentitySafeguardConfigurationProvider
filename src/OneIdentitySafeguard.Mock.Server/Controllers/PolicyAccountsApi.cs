/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PolicyAccountsApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the account groups that manage an account belongs to
        /// </summary>
        /// <param name="id">Unique identifier of the PolicyAccount</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAccounts/{id}/AccountGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsGetAccountGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAccountsGetAccountGroupsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountGroup>>(exampleJson)
                        : default(List<AccountGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get users that have been linked to this policy account
        /// </summary>
        /// <param name="id">Unique identifier of the policy account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAccounts/{id}/LinkedUsers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsGetLinkedUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAccountsGetLinkedUsersAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the policies that manage an account belongs to
        /// </summary>
        /// <param name="id">Unique identifier of the PolicyAccount</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAccounts/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsGetPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAccountsGetPoliciesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"AccountId\" : 1,\n  \"RoleId\" : 6,\n  \"AssetName\" : \"AssetName\",\n  \"PolicyAccountCount\" : 7,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 9,\n  \"PolicyName\" : \"PolicyName\",\n  \"PolicyAssetCount\" : 5,\n  \"Membership\" : [ {\n    \"AccountId\" : 2,\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberId\" : 4,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"PolicyId\" : 3\n  }, {\n    \"AccountId\" : 2,\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberId\" : 4,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"PolicyId\" : 3\n  } ],\n  \"AssetId\" : 5,\n  \"PolicyAssetGroupCount\" : 2,\n  \"PolicyId\" : 0,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"AccountId\" : 1,\n  \"RoleId\" : 6,\n  \"AssetName\" : \"AssetName\",\n  \"PolicyAccountCount\" : 7,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 9,\n  \"PolicyName\" : \"PolicyName\",\n  \"PolicyAssetCount\" : 5,\n  \"Membership\" : [ {\n    \"AccountId\" : 2,\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberId\" : 4,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"PolicyId\" : 3\n  }, {\n    \"AccountId\" : 2,\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberId\" : 4,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"PolicyId\" : 3\n  } ],\n  \"AssetId\" : 5,\n  \"PolicyAssetGroupCount\" : 2,\n  \"PolicyId\" : 0,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountPolicy>>(exampleJson)
                        : default(List<AccountPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a policy account
        /// </summary>
        /// <param name="id">Unique ID of PolicyAccount</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsGetPolicyAccountByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PolicyAccount), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAccountsGetPolicyAccountByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PolicyAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PolicyAccount>(exampleJson)
                        : default(PolicyAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of accounts that can be assigned to a policy
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsGetPolicyAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAccountsGetPolicyAccountsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove account linked users
        /// </summary>
        /// <param name="id">Unique identifier of the policy account</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">List of users to be linked</param>
        /// <response code="200">Success</response>
        /// <response code="400">70008 - Invalid enum value</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Policy account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/PolicyAccounts/{id}/LinkedUsers/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsModifyLinkedUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "70008 - Invalid enum value")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult PolicyAccountsModifyLinkedUsersAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<User> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the set of users linked to this policy account
        /// </summary>
        /// <param name="id">Unique identifier of the policy account</param>
        /// <param name="body">List of users to be linked</param>
        /// <response code="200">Success</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Policy account does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/PolicyAccounts/{id}/LinkedUsers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAccountsSaveLinkedUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult PolicyAccountsSaveLinkedUsersAsync([FromRoute][Required]int? id, [FromBody]List<User> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
