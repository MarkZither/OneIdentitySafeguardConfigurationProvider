/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserPasswordRuleApiController : ControllerBase
    { 
        /// <summary>
        /// Generates a random password using this rule
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user.</response>
        [HttpPost]
        [Route("/service/core/v4/UserPasswordRule/GeneratePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserPasswordRuleGeneratePasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user.")]
        public virtual IActionResult UserPasswordRuleGeneratePasswordAsync([FromBody]UserPasswordRule body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the user password rule
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user.</response>
        /// <response code="404">User Password Rule not found</response>
        [HttpGet]
        [Route("/service/core/v4/UserPasswordRule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserPasswordRuleGetUserPasswordRuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPasswordRule), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user.")]
        public virtual IActionResult UserPasswordRuleGetUserPasswordRuleAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPasswordRule));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AllowedFirstCharacterType\" : \"All\",\n  \"Description\" : \"Description\",\n  \"AllowLowercaseCharacters\" : true,\n  \"MaxConsecutiveNonAlphaNumericCharacters\" : 52,\n  \"NonAlphaNumericRestrictionType\" : \"Include\",\n  \"InvalidNumericCharacters\" : [ \"InvalidNumericCharacters\", \"InvalidNumericCharacters\" ],\n  \"InvalidLowercaseCharacters\" : [ \"InvalidLowercaseCharacters\", \"InvalidLowercaseCharacters\" ],\n  \"MinNumericCharacters\" : 180,\n  \"Name\" : \"Name\",\n  \"InvalidUppercaseCharacters\" : [ \"InvalidUppercaseCharacters\", \"InvalidUppercaseCharacters\" ],\n  \"MaxConsecutiveUppercaseCharacters\" : 152,\n  \"AllowedNonAlphaNumericCharacters\" : [ \"AllowedNonAlphaNumericCharacters\", \"AllowedNonAlphaNumericCharacters\" ],\n  \"MaxConsecutiveLowercaseCharacters\" : 59,\n  \"MaxConsecutiveAlphabeticCharacters\" : 106,\n  \"MaxConsecutiveNumericCharacters\" : 237,\n  \"MinCharacters\" : 154,\n  \"MinLowercaseCharacters\" : 143,\n  \"AllowNonAlphaNumericCharacters\" : true,\n  \"InvalidNonAlphaNumericCharacters\" : [ \"InvalidNonAlphaNumericCharacters\", \"InvalidNonAlphaNumericCharacters\" ],\n  \"AllowNumericCharacters\" : true,\n  \"MaxConsecutiveAlphaNumericCharacters\" : 188,\n  \"RepeatedCharacterRestriction\" : \"NotSpecified\",\n  \"AllowUppercaseCharacters\" : true,\n  \"MinUppercaseCharacters\" : 37,\n  \"MaxCharacters\" : 23,\n  \"MinNonAlphaNumericCharacters\" : 92\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPasswordRule>(exampleJson)
                        : default(UserPasswordRule);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the user password rule
        /// </summary>
        /// <param name="body">Updated PasswordRule</param>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        /// <response code="404">User Password Rule not found</response>
        [HttpPut]
        [Route("/service/core/v4/UserPasswordRule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserPasswordRuleUpdateUserPasswordRuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPasswordRule), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult UserPasswordRuleUpdateUserPasswordRuleAsync([FromBody]UserPasswordRule body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPasswordRule));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AllowedFirstCharacterType\" : \"All\",\n  \"Description\" : \"Description\",\n  \"AllowLowercaseCharacters\" : true,\n  \"MaxConsecutiveNonAlphaNumericCharacters\" : 52,\n  \"NonAlphaNumericRestrictionType\" : \"Include\",\n  \"InvalidNumericCharacters\" : [ \"InvalidNumericCharacters\", \"InvalidNumericCharacters\" ],\n  \"InvalidLowercaseCharacters\" : [ \"InvalidLowercaseCharacters\", \"InvalidLowercaseCharacters\" ],\n  \"MinNumericCharacters\" : 180,\n  \"Name\" : \"Name\",\n  \"InvalidUppercaseCharacters\" : [ \"InvalidUppercaseCharacters\", \"InvalidUppercaseCharacters\" ],\n  \"MaxConsecutiveUppercaseCharacters\" : 152,\n  \"AllowedNonAlphaNumericCharacters\" : [ \"AllowedNonAlphaNumericCharacters\", \"AllowedNonAlphaNumericCharacters\" ],\n  \"MaxConsecutiveLowercaseCharacters\" : 59,\n  \"MaxConsecutiveAlphabeticCharacters\" : 106,\n  \"MaxConsecutiveNumericCharacters\" : 237,\n  \"MinCharacters\" : 154,\n  \"MinLowercaseCharacters\" : 143,\n  \"AllowNonAlphaNumericCharacters\" : true,\n  \"InvalidNonAlphaNumericCharacters\" : [ \"InvalidNonAlphaNumericCharacters\", \"InvalidNonAlphaNumericCharacters\" ],\n  \"AllowNumericCharacters\" : true,\n  \"MaxConsecutiveAlphaNumericCharacters\" : 188,\n  \"RepeatedCharacterRestriction\" : \"NotSpecified\",\n  \"AllowUppercaseCharacters\" : true,\n  \"MinUppercaseCharacters\" : 37,\n  \"MaxCharacters\" : 23,\n  \"MinNonAlphaNumericCharacters\" : 92\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPasswordRule>(exampleJson)
                        : default(UserPasswordRule);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validates a proposed password against this rule
        /// </summary>
        /// <param name="body">Password to validate against this rule</param>
        /// <response code="200">Success</response>
        /// <response code="400">60247 - Password did not pass validation</response>
        /// <response code="401">Must be an authenticated user.</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/UserPasswordRule/ValidatePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserPasswordRuleValidateUserPasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user.")]
        public virtual IActionResult UserPasswordRuleValidateUserPasswordAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
