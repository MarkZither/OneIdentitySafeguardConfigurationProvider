/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PolicyAssetsApiController : ControllerBase
    { 
        /// <summary>
        /// Gets all asset groups that a specific asset belongs to
        /// </summary>
        /// <param name="id">Unique identifier of the PolicyAsset</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy Asset does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAssets/{id}/AssetGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAssetsGetAssetGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAssetsGetAssetGroupsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroup>>(exampleJson)
                        : default(List<AssetGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of assets that can be assigned to a policy
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAssets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAssetsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAssetsGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAsset>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAsset>>(exampleJson)
                        : default(List<PolicyAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a policy asset
        /// </summary>
        /// <param name="id">Unique ID of PolicyAsset</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy Asset does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAssets/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAssetsGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PolicyAsset), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAssetsGetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PolicyAsset));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PolicyAsset>(exampleJson)
                        : default(PolicyAsset);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Searches the specified directory
        /// </summary>
        /// <param name="id">Unique ID of an directory asset</param>
        /// <param name="searchBase">Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of  forest for AD.  Must be in DN Syntax.</param>
        /// <param name="searchScope">Defines the scope of the query, either base, one, or sub, defaults to sub.</param>
        /// <param name="searchType">Either User, Group, or Computer.  Defaults to User.</param>
        /// <param name="searchName">Sets a search constraint on the \&quot;name\&quot; of the object to return.</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">IdentityProvider does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAssets/{id}/DirectoryServiceEntries")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAssetsGetEntriesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DirectoryServiceEntry>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAssetsGetEntriesAsync([FromRoute][Required]int? id, [FromQuery]string searchBase, [FromQuery]SearchScope searchScope, [FromQuery]DirectorySearchType searchType, [FromQuery]string searchName, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DirectoryServiceEntry>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"Name\" : \"Name\"\n}, {\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DirectoryServiceEntry>>(exampleJson)
                        : default(List<DirectoryServiceEntry>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the policies that manage an asset belongs to
        /// </summary>
        /// <param name="id">Unique identifier of the PolicyAsset</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Policy Asset does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/PolicyAssets/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PolicyAssetsGetPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PolicyAssetsGetPoliciesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"PolicyAccountCount\" : 5,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyName\" : \"PolicyName\",\n  \"PolicyAssetCount\" : 2,\n  \"Membership\" : [ {\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberIsAssetGroup\" : true,\n    \"PolicyMemberId\" : 2,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"AssetId\" : 3,\n    \"PolicyId\" : 9\n  }, {\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberIsAssetGroup\" : true,\n    \"PolicyMemberId\" : 2,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"AssetId\" : 3,\n    \"PolicyId\" : 9\n  } ],\n  \"RoleId\" : 6,\n  \"AssetId\" : 1,\n  \"PolicyAssetGroupCount\" : 7,\n  \"PolicyId\" : 0,\n  \"AssetName\" : \"AssetName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"PolicyAccountCount\" : 5,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyName\" : \"PolicyName\",\n  \"PolicyAssetCount\" : 2,\n  \"Membership\" : [ {\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberIsAssetGroup\" : true,\n    \"PolicyMemberId\" : 2,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"AssetId\" : 3,\n    \"PolicyId\" : 9\n  }, {\n    \"PolicyMemberIsAccountGroup\" : true,\n    \"PolicyMemberIsAssetGroup\" : true,\n    \"PolicyMemberId\" : 2,\n    \"PolicyMemberName\" : \"PolicyMemberName\",\n    \"AssetId\" : 3,\n    \"PolicyId\" : 9\n  } ],\n  \"RoleId\" : 6,\n  \"AssetId\" : 1,\n  \"PolicyAssetGroupCount\" : 7,\n  \"PolicyId\" : 0,\n  \"AssetName\" : \"AssetName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetPolicy>>(exampleJson)
                        : default(List<AssetPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
