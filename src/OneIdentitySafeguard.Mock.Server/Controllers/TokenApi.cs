/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TokenApiController : ControllerBase
    { 
        /// <summary>
        /// After obtaining an access token from an STS, a client application must exchange that token for a Safeguard user              token that can then be used to access all API methods.  This method will attempt to authorize the user from the STS and              if successful, will return a new token value.
        /// </summary>
        /// <param name="body">Currently, just the {access_token} from the OAuth2 protocol is needed.  In the future, other
        /// properties may be added.</param>
        /// <response code="200">The client application should check the value of the Pangaea.Data.Transfer.V2.Users.LoginResponse.Status              property to determine the next course of action.</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/service/core/v4/Token/LoginResponse")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TokenLoginResponseAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(LoginResponse), description: "The client application should check the value of the Pangaea.Data.Transfer.V2.Users.LoginResponse.Status              property to determine the next course of action.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        public virtual IActionResult TokenLoginResponseAsync([FromBody]LoginResponseRequestData body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LoginResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Status\" : \"Success\",\n  \"PrimaryProviderId\" : \"PrimaryProviderId\",\n  \"DesktopClientInactivityTimeout\" : 6,\n  \"SecondaryProviderId\" : \"SecondaryProviderId\",\n  \"WebClientInactivityTimeout\" : 0,\n  \"UserToken\" : \"UserToken\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<LoginResponse>(exampleJson)
                        : default(LoginResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// An explicit logout by an end user to have their Safeguard User Token deleted from the system such that it              cannot be used again.
        /// </summary>
        /// <remarks>Call this method like any other API method that requires authorization.  Your token must currently be valid.              If your token has already expired or previously been deleted, an Http 401 response will be returned.</remarks>
        /// <param name="timedOut">A value indicating whether the logout was due to inactivity or not. Defaults to false.</param>
        /// <response code="204">The user&#x27;s current Safeguard User Token has successfully been deleted from the system.</response>
        /// <response code="401">You must call this method with a valid, non-expired authorization token.  If the token has previously              been deleted, or it has already expired, then you will get the standard              {{\&quot;Code\&quot;:60094,\&quot;Message\&quot;:\&quot;Authorization is denied for this request.\&quot;,\&quot;InnerError\&quot;:null}} in an Http 401 response.</response>
        [HttpPost]
        [Route("/service/core/v4/Token/Logout")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TokenLogoutAsync")]
        public virtual IActionResult TokenLogoutAsync([FromQuery]bool? timedOut)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }
    }
}
