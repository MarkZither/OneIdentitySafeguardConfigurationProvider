/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EmailClientConfigApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the email client authentication certificate
        /// </summary>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/EmailClientConfig/ClientCertificate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigGetAuthenticationCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult EmailClientConfigGetAuthenticationCertificateAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the email client authentication certificate history
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/EmailClientConfig/ClientCertificate/History")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigGetAuthenticationCertificateHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServerCertificateLog>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult EmailClientConfigGetAuthenticationCertificateHistoryAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServerCertificateLog>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"ReplacedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"InstalledDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}, {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"ReplacedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"InstalledDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ServerCertificateLog>>(exampleJson)
                        : default(List<ServerCertificateLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the email client configuration
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">EmailClientConfig does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/EmailClientConfig")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigGetEmailConfigAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmailClientConfig), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult EmailClientConfigGetEmailConfigAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmailClientConfig));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"RequireSmtpsFlag\" : false,\n  \"UseClientCertificate\" : false,\n  \"UpdatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequireUserAuthentication\" : false,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountId\" : 6\n  },\n  \"ServerAddress\" : \"ServerAddress\",\n  \"RequireTlsFlag\" : true,\n  \"PortNumber\" : 5249,\n  \"SenderEmail\" : \"SenderEmail\",\n  \"UpdatedByUserId\" : 1,\n  \"VerifySslCertificate\" : true,\n  \"UpdatedByUserDisplayName\" : \"UpdatedByUserDisplayName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EmailClientConfig>(exampleJson)
                        : default(EmailClientConfig);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reset the email client authentication certificate
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/service/core/v4/EmailClientConfig/ClientCertificate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigResetAuthenticationCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult EmailClientConfigResetAuthenticationCertificateAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the email client authentication certificate
        /// </summary>
        /// <param name="body">Settings to save</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/EmailClientConfig/ClientCertificate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigSaveAuthenticationCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult EmailClientConfigSaveAuthenticationCertificateAsync([FromBody]ServerCertificate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sends an email via an SMTP server
        /// </summary>
        /// <param name="body">Email configuration overrides for test email</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="502">Email Delivery Failed</response>
        [HttpPost]
        [Route("/service/core/v4/EmailClientConfig/SendTestEmail")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigSendTestEmailAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult EmailClientConfigSendTestEmailAsync([FromBody]TestEmailClientConfig body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 502 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(502);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the email client configuration
        /// </summary>
        /// <param name="body">Updated EmailClientConfig</param>
        /// <response code="200">Success</response>
        /// <response code="400">60113 - Failed to configure the SMTP relay server</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/EmailClientConfig")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EmailClientConfigUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EmailClientConfig), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60113 - Failed to configure the SMTP relay server")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult EmailClientConfigUpdateEntityAsync([FromBody]EmailClientConfig body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EmailClientConfig));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"RequireSmtpsFlag\" : false,\n  \"UseClientCertificate\" : false,\n  \"UpdatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequireUserAuthentication\" : false,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountId\" : 6\n  },\n  \"ServerAddress\" : \"ServerAddress\",\n  \"RequireTlsFlag\" : true,\n  \"PortNumber\" : 5249,\n  \"SenderEmail\" : \"SenderEmail\",\n  \"UpdatedByUserId\" : 1,\n  \"VerifySslCertificate\" : true,\n  \"UpdatedByUserDisplayName\" : \"UpdatedByUserDisplayName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EmailClientConfig>(exampleJson)
                        : default(EmailClientConfig);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
