/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PlatformsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a starling connect or custom platform
        /// </summary>
        /// <param name="body">Platform to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Platforms")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsCreatePlatformAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(Platform), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsCreatePlatformAsync([FromBody]Platform body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Platform));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes a Platform
        /// </summary>
        /// <param name="id">Unique identifier of the Platform</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Platforms/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsDeletePlatformAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsDeletePlatformAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes script for the custom platform
        /// </summary>
        /// <param name="id">Unique ID of Platform</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpDelete]
        [Route("/service/core/v4/Platforms/{id}/Script")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsDeleteScriptAsync")]
        public virtual IActionResult PlatformsDeleteScriptAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a specific platform
        /// </summary>
        /// <param name="id">Unique ID of Platform</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Platform does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Platforms/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsGetPlatformByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Platform), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult PlatformsGetPlatformByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Platform));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the script associated with a custom platform
        /// </summary>
        /// <param name="id">Unique ID of Platform</param>
        /// <response code="200">Success</response>
        /// <response code="204">No script defined</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Platforms/{id}/Script")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsGetPlatformScriptAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PlatformsGetPlatformScriptAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the script associated with a custom platform in raw format
        /// </summary>
        /// <param name="id">Unique ID of Platform</param>
        /// <response code="200">Success</response>
        /// <response code="204">No script defined</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Platforms/{id}/Script/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsGetPlatformScriptRawAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult PlatformsGetPlatformScriptRawAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of platforms
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Platforms")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsGetPlatformsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Platform>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult PlatformsGetPlatformsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Platform>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Platform>>(exampleJson)
                        : default(List<Platform>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates script for the custom platform in raw format. This receives an httpStream of the file contents of the platform script file.
        /// </summary>
        /// <param name="id">Unique ID of Platform</param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Platforms/{id}/Script/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsPutRawScriptAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Platform), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsPutRawScriptAsync([FromRoute][Required]int? id, [FromBody]ScriptRawBody body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Platform));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates script for the custom platform in base64 format
        /// </summary>
        /// <param name="id">Unique ID of Platform</param>
        /// <param name="body">Updated base64 platform script</param>
        /// <response code="200">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Platforms/{id}/Script")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsPutScriptAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Platform), description: "Success - No Content")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsPutScriptAsync([FromRoute][Required]int? id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Platform));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a custom platform
        /// </summary>
        /// <param name="id">Unique identifier of the Platform</param>
        /// <param name="body">Updated Platform</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Platforms/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsUpdatePlatformAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Platform), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsUpdatePlatformAsync([FromRoute][Required]int? id, [FromBody]Platform body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Platform));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validates script for the custom platform in raw format. This receives an httpStream of the file contents of the platform script file.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Platforms/ValidateScript/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsValidateRawScriptAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Platform), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsValidateRawScriptAsync([FromBody]ValidateScriptRawBody body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Platform));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validates script for the custom platform in base64 format
        /// </summary>
        /// <param name="body">Updated base64 platform script</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Platform does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Platforms/ValidateScript")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PlatformsValidateScriptAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Platform), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult PlatformsValidateScriptAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Platform));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Architecture\" : \"Architecture\",\n  \"DeviceClass\" : \"Unknown\",\n  \"ConnectionProperties\" : {\n    \"SupportsSslCertificateVerification\" : true,\n    \"SupportsNamedPipeForServiceAccountConnection\" : true,\n    \"SupportsPasswordAuthentication\" : true,\n    \"SupportsSshKeyAuthentication\" : true,\n    \"SupportsServiceName\" : true,\n    \"SupportsAccessKeyAuthentication\" : true,\n    \"SupportsLocalhostPasswordAuthentication\" : true,\n    \"RequiresDistinguishedName\" : true,\n    \"SupportsInstance\" : true,\n    \"SupportsOraclePrivileges\" : true,\n    \"SupportsDirectorySync\" : true,\n    \"SupportsClientId\" : true,\n    \"DefaultPort\" : 6,\n    \"SupportsDirectoryPasswordAuthentication\" : true,\n    \"SupportsWorkstationId\" : true,\n    \"SupportsTimeout\" : true,\n    \"SupportsPrivilegedAccount\" : true,\n    \"SupportsDirectoryAssetDiscovery\" : true,\n    \"SupportsLdap\" : true,\n    \"SupportsPrivilegeElevationCommand\" : true,\n    \"SupportsSslEncryption\" : true,\n    \"SupportsStarlingConnectAuthentication\" : true,\n    \"SupportsAccountPasswordAuthentication\" : true,\n    \"SupportsSshTransport\" : true,\n    \"SupportsTopSecretInterval\" : true,\n    \"DefaultSslPort\" : 7,\n    \"SupportsSslThumbprint\" : true,\n    \"AllowCustomPort\" : true,\n    \"SupportsEnablePassword\" : true,\n    \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n    \"SupportsTacacsSecret\" : true\n  },\n  \"IsAcctNameCaseSensitive\" : true,\n  \"PasswordFeatureProperties\" : {\n    \"SupportsPasswordManagement\" : true,\n    \"SupportsSshKeyManagement\" : true,\n    \"RequireNetworkAddress\" : true,\n    \"SupportsDependentSystemTasks\" : true,\n    \"AllowRequireCurrentPassword\" : true,\n    \"SupportsSuspendRestoreAccount\" : true,\n    \"SupportsAccountDiscovery\" : true,\n    \"SupportsServiceDiscovery\" : true,\n    \"SupportsUsePasswordHash\" : true\n  },\n  \"LicenseClass\" : \"System\",\n  \"CustomScriptProperties\" : {\n    \"Parameters\" : [ {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    }, {\n      \"DefaultValue\" : \"DefaultValue\",\n      \"Type\" : \"String\",\n      \"Description\" : \"Description\",\n      \"Name\" : \"Name\"\n    } ],\n    \"HasScript\" : true\n  },\n  \"Name\" : \"Name\",\n  \"Version\" : \"Version\",\n  \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n  \"SessionFeatureProperties\" : {\n    \"DefaultRemoteDesktopSessionPort\" : 4,\n    \"DefaultTelnetSessionPort\" : 5,\n    \"SupportsSessionManagement\" : true,\n    \"DefaultSshSessionPort\" : 1\n  },\n  \"PlatformFamily\" : \"None\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"PlatformType\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Platform>(exampleJson)
                        : default(Platform);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
