/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventSubscribersApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new event subscriber
        /// </summary>
        /// <param name="body">EventSubscriber to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/EventSubscribers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersCreateEventSubscriberAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(EventSubscriber), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersCreateEventSubscriberAsync([FromBody]EventSubscriber body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(EventSubscriber));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 7,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 9,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EventSubscriber>(exampleJson)
                        : default(EventSubscriber);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an event subscriber
        /// </summary>
        /// <param name="id">Unique identifier of the EventSubscriber</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpDelete]
        [Route("/service/core/v4/EventSubscribers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersDeleteEventSubscriberAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersDeleteEventSubscriberAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets an event subscriber
        /// </summary>
        /// <param name="id">Unique ID of EventSubscriber</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/EventSubscribers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersGetEventSubscriberByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EventSubscriber), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersGetEventSubscriberByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventSubscriber));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 7,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 9,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EventSubscriber>(exampleJson)
                        : default(EventSubscriber);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of event subscribers
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/EventSubscribers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersGetEventSubscribersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventSubscriber>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersGetEventSubscribersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventSubscriber>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 7,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 9,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 7,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 9,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventSubscriber>>(exampleJson)
                        : default(List<EventSubscriber>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of events subscribed to
        /// </summary>
        /// <param name="id">Unique identifier of the EventSubscription</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/EventSubscribers/{id}/Subscriptions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersGetEventSubscriptionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventSubscription>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersGetEventSubscriptionsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventSubscription>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ActivityLogFlag\" : true,\n  \"AllowedAdminRoles\" : [ null, null ],\n  \"Category\" : \"Unknown\",\n  \"Description\" : \"Description\",\n  \"SyslogFlag\" : true,\n  \"EmailFlag\" : true,\n  \"Properties\" : [ {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AllowPartitionOwner\" : true,\n  \"AsyncUnicastFlag\" : true,\n  \"SnmpFlag\" : true,\n  \"Obsolete\" : true,\n  \"AsyncBroadcastFlag\" : true,\n  \"CategoryDisplayName\" : \"CategoryDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IsObjectAware\" : true,\n  \"Level\" : \"Debug\",\n  \"AsyncMulticastFlag\" : true\n}, {\n  \"ActivityLogFlag\" : true,\n  \"AllowedAdminRoles\" : [ null, null ],\n  \"Category\" : \"Unknown\",\n  \"Description\" : \"Description\",\n  \"SyslogFlag\" : true,\n  \"EmailFlag\" : true,\n  \"Properties\" : [ {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AllowPartitionOwner\" : true,\n  \"AsyncUnicastFlag\" : true,\n  \"SnmpFlag\" : true,\n  \"Obsolete\" : true,\n  \"AsyncBroadcastFlag\" : true,\n  \"CategoryDisplayName\" : \"CategoryDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IsObjectAware\" : true,\n  \"Level\" : \"Debug\",\n  \"AsyncMulticastFlag\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventSubscription>>(exampleJson)
                        : default(List<EventSubscription>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove subscriptions to receive notifications for the specified events
        /// </summary>
        /// <param name="id">Unique identifier of the EventSubscription</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Events to subscribe to</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">EventSubscriber does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/EventSubscribers/{id}/Subscriptions/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersModifyEventSubscriptionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventSubscription>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersModifyEventSubscriptionsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<ModelEvent> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventSubscription>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ActivityLogFlag\" : true,\n  \"AllowedAdminRoles\" : [ null, null ],\n  \"Category\" : \"Unknown\",\n  \"Description\" : \"Description\",\n  \"SyslogFlag\" : true,\n  \"EmailFlag\" : true,\n  \"Properties\" : [ {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AllowPartitionOwner\" : true,\n  \"AsyncUnicastFlag\" : true,\n  \"SnmpFlag\" : true,\n  \"Obsolete\" : true,\n  \"AsyncBroadcastFlag\" : true,\n  \"CategoryDisplayName\" : \"CategoryDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IsObjectAware\" : true,\n  \"Level\" : \"Debug\",\n  \"AsyncMulticastFlag\" : true\n}, {\n  \"ActivityLogFlag\" : true,\n  \"AllowedAdminRoles\" : [ null, null ],\n  \"Category\" : \"Unknown\",\n  \"Description\" : \"Description\",\n  \"SyslogFlag\" : true,\n  \"EmailFlag\" : true,\n  \"Properties\" : [ {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AllowPartitionOwner\" : true,\n  \"AsyncUnicastFlag\" : true,\n  \"SnmpFlag\" : true,\n  \"Obsolete\" : true,\n  \"AsyncBroadcastFlag\" : true,\n  \"CategoryDisplayName\" : \"CategoryDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IsObjectAware\" : true,\n  \"Level\" : \"Debug\",\n  \"AsyncMulticastFlag\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventSubscription>>(exampleJson)
                        : default(List<EventSubscription>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Subscribes to receive notifications for the specified events
        /// </summary>
        /// <param name="id">Unique identifier of the EventSubscription</param>
        /// <param name="body">Events to subscribe to</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">EventSubscriber does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/EventSubscribers/{id}/Subscriptions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersSetEventSubscriptionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventSubscription>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersSetEventSubscriptionsAsync([FromRoute][Required]int? id, [FromBody]List<ModelEvent> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventSubscription>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ActivityLogFlag\" : true,\n  \"AllowedAdminRoles\" : [ null, null ],\n  \"Category\" : \"Unknown\",\n  \"Description\" : \"Description\",\n  \"SyslogFlag\" : true,\n  \"EmailFlag\" : true,\n  \"Properties\" : [ {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AllowPartitionOwner\" : true,\n  \"AsyncUnicastFlag\" : true,\n  \"SnmpFlag\" : true,\n  \"Obsolete\" : true,\n  \"AsyncBroadcastFlag\" : true,\n  \"CategoryDisplayName\" : \"CategoryDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IsObjectAware\" : true,\n  \"Level\" : \"Debug\",\n  \"AsyncMulticastFlag\" : true\n}, {\n  \"ActivityLogFlag\" : true,\n  \"AllowedAdminRoles\" : [ null, null ],\n  \"Category\" : \"Unknown\",\n  \"Description\" : \"Description\",\n  \"SyslogFlag\" : true,\n  \"EmailFlag\" : true,\n  \"Properties\" : [ {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"IsCommon\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AllowPartitionOwner\" : true,\n  \"AsyncUnicastFlag\" : true,\n  \"SnmpFlag\" : true,\n  \"Obsolete\" : true,\n  \"AsyncBroadcastFlag\" : true,\n  \"CategoryDisplayName\" : \"CategoryDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IsObjectAware\" : true,\n  \"Level\" : \"Debug\",\n  \"AsyncMulticastFlag\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventSubscription>>(exampleJson)
                        : default(List<EventSubscription>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the event subscriber
        /// </summary>
        /// <param name="id">Unique identifier of the EventSubscriber to update</param>
        /// <param name="body">Updated EventSubscriber</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">EventSubscriber does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/EventSubscribers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("EventSubscribersUpdateSubscriberAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EventSubscriber), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult EventSubscribersUpdateSubscriberAsync([FromRoute][Required]int? id, [FromBody]EventSubscriber body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventSubscriber));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 7,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 9,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EventSubscriber>(exampleJson)
                        : default(EventSubscriber);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
