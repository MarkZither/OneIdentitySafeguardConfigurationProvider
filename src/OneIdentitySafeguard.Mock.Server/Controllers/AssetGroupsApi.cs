/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssetGroupsApiController : ControllerBase
    { 
        /// <summary>
        /// Creates an AssetGroup
        /// </summary>
        /// <param name="body">AssetGroup to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsCreateAssetGroupAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetGroup), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsCreateAssetGroupAsync([FromBody]AssetGroup body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(AssetGroup));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetGroup>(exampleJson)
                        : default(AssetGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple new asset groups
        /// </summary>
        /// <param name="body">New asset groups to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups/BatchCreate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsCreateMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroupBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsCreateMultipleAsync([FromBody]List<AssetGroup> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroupBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroupBatchResponse>>(exampleJson)
                        : default(List<AssetGroupBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an AssetGroup
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/AssetGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsDeleteAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Processes multiple asset groups to delete
        /// </summary>
        /// <param name="body">asset groups to process</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups/BatchDelete")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsDeleteMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroupBatchResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsDeleteMultipleAsync([FromBody]List<int?> body, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroupBatchResult>));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroupBatchResult>>(exampleJson)
                        : default(List<AssetGroupBatchResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single asset group
        /// </summary>
        /// <param name="id">Unique ID of asset group</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AssetGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsGetAssetGroupByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetGroup), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetGroupsGetAssetGroupByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetGroup));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetGroup>(exampleJson)
                        : default(AssetGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of asset group entities
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AssetGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsGetAssetGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetGroupsGetAssetGroupsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroup>>(exampleJson)
                        : default(List<AssetGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all PolicyAssets that belong to an AssetGroup
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Asset Group does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetGroups/{id}/Assets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsGetAssetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetGroupsGetAssetsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAsset>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAsset>>(exampleJson)
                        : default(List<PolicyAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about policies that this asset group is assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account Group does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetGroups/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsGetPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroupPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetGroupsGetPoliciesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroupPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAssetCount\" : 1,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 5,\n  \"Name\" : \"Name\"\n}, {\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAssetCount\" : 1,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 5,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroupPolicy>>(exampleJson)
                        : default(List<AssetGroupPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove assets assigned to this group
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Assets to assign to the AssetGroup</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;assets&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AssetGroup does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups/{id}/Assets/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsModifyAssetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;assets&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsModifyAssetsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<PolicyAsset> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAsset>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAsset>>(exampleJson)
                        : default(List<PolicyAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the policies this group is assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup to update</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Policies to assign the AssetGroup to</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;policies&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AssetGroup does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups/{id}/Policies/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsModifyPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroupPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;policies&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsModifyPoliciesAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<AssetGroupPolicy> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroupPolicy>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAssetCount\" : 1,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 5,\n  \"Name\" : \"Name\"\n}, {\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAssetCount\" : 1,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 5,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroupPolicy>>(exampleJson)
                        : default(List<AssetGroupPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the assets assigned to this group
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup</param>
        /// <param name="body">Assets to assign to the AssetGroup</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;assets&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AssetGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetGroups/{id}/Assets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsSetAssetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;assets&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsSetAssetsAsync([FromRoute][Required]int? id, [FromBody]List<PolicyAsset> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAsset>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAsset>>(exampleJson)
                        : default(List<PolicyAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the policies this group is assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup to update</param>
        /// <param name="body">Policies to assign the AssetGroup to</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;policies&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AssetGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetGroups/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsSetPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroupPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;policies&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsSetPoliciesAsync([FromRoute][Required]int? id, [FromBody]List<AssetGroupPolicy> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroupPolicy>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAssetCount\" : 1,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 5,\n  \"Name\" : \"Name\"\n}, {\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAssetCount\" : 1,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 5,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroupPolicy>>(exampleJson)
                        : default(List<AssetGroupPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Tests a dynamic grouping rule
        /// </summary>
        /// <param name="body">Dynamic grouping rule to test</param>
        /// <param name="id">Unique identifier of the asset group</param>
        /// <param name="operationalOnly">Do not return no-op results</param>
        /// <param name="limit">Limit response to this number of results, default 200</param>
        /// <response code="200">Success</response>
        /// <response code="201">Tested</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Asset Group does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups/TestAssetRule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsTestRuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DynamicGroupingRuleTestResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsTestRuleAsync([FromBody]TaggingGroupingRule body, [FromQuery]int? id, [FromQuery]bool? operationalOnly, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DynamicGroupingRuleTestResult>));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"GroupingRuleAction\" : \"AddToGroup\",\n  \"ObjectId\" : 0,\n  \"DomainName\" : \"DomainName\",\n  \"AssetId\" : 6,\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\"\n}, {\n  \"GroupingRuleAction\" : \"AddToGroup\",\n  \"ObjectId\" : 0,\n  \"DomainName\" : \"DomainName\",\n  \"AssetId\" : 6,\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DynamicGroupingRuleTestResult>>(exampleJson)
                        : default(List<DynamicGroupingRuleTestResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an AssetGroup
        /// </summary>
        /// <param name="id">Unique identifier of the AssetGroup</param>
        /// <param name="body">Updated AssetGroup</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AssetGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsUpdateAssetGroupAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetGroup), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsUpdateAssetGroupAsync([FromRoute][Required]int? id, [FromBody]AssetGroup body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetGroup));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 5,\n  \"Description\" : \"Description\",\n  \"Assets\" : [ null, null ],\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 7,\n  \"IsDynamic\" : true,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetGroup>(exampleJson)
                        : default(AssetGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple asset groups to update
        /// </summary>
        /// <param name="body">asset groups to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AssetGroups/BatchUpdate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetGroupsUpdateMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetGroupBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AssetGroupsUpdateMultipleAsync([FromBody]List<AssetGroup> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetGroupBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"CreatedByUserId\" : 5,\n    \"Description\" : \"Description\",\n    \"Assets\" : [ null, null ],\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 7,\n    \"IsDynamic\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetGroupBatchResponse>>(exampleJson)
                        : default(List<AssetGroupBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
