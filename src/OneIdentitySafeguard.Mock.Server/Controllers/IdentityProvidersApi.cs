/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IdentityProvidersApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new identity provider
        /// </summary>
        /// <param name="body">IdentityProvider to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/IdentityProviders")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersCreateIdentityProviderAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(IdentityProvider), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or ApplianceAdmin permission")]
        public virtual IActionResult IdentityProvidersCreateIdentityProviderAsync([FromBody]IdentityProvider body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(IdentityProvider));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"RstsProviderId\" : \"RstsProviderId\",\n  \"Fido2Properties\" : {\n    \"DomainSuffix\" : \"DomainSuffix\"\n  },\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"DirectoryProperties\" : {\n    \"FailedSyncAttempts\" : 7,\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ConnectionProperties\" : {\n      \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n      \"ServiceAccountHasSshKey\" : true,\n      \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n      \"UseSslEncryption\" : true,\n      \"Port\" : 13285,\n      \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n      \"ServiceAccountName\" : \"ServiceAccountName\",\n      \"ServiceAccountSshKey\" : {\n        \"Comment\" : \"Comment\",\n        \"Fingerprint\" : \"Fingerprint\",\n        \"PrivateKey\" : \"PrivateKey\",\n        \"FingerprintSha256\" : \"FingerprintSha256\",\n        \"KeyType\" : \"Unknown\",\n        \"PublicKey\" : \"PublicKey\",\n        \"Passphrase\" : \"Passphrase\",\n        \"KeyLength\" : 4884\n      },\n      \"ServiceAccountId\" : 3,\n      \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n      \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n      \"VerifySslCertificate\" : true,\n      \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n      \"ServiceAccountAssetPlatformId\" : 7,\n      \"ServiceAccountAssetId\" : 4,\n      \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n      \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n      \"ServiceAccountCredentialType\" : \"None\",\n      \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n      \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n      \"ServiceAccountHasPassword\" : true,\n      \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n    },\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"DirectoryGroupSyncAttributeForManagedObjects\" : \"DirectoryGroupSyncAttributeForManagedObjects\",\n        \"FirstNameAttribute\" : \"FirstNameAttribute\",\n        \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\" : \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\",\n        \"PhoneAttribute\" : \"PhoneAttribute\",\n        \"DirectoryGroupSyncAttributeForRadiusAuthentication\" : \"DirectoryGroupSyncAttributeForRadiusAuthentication\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"MobileAttribute\" : \"MobileAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"LastNameAttribute\" : \"LastNameAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"MailAttribute\" : \"MailAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    } ],\n    \"DeleteSyncIntervalMinutes\" : 494379917,\n    \"FailedDeleteSyncAttempts\" : 9,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 1210617418\n  },\n  \"TypeReferenceName\" : \"Unknown\",\n  \"RadiusProperties\" : {\n    \"SharedSecret\" : \"SharedSecret\",\n    \"Timeout\" : 44,\n    \"Retries\" : 5,\n    \"PreAuthenticateForChallengeResponse\" : false,\n    \"ServerAddress2\" : \"ServerAddress2\",\n    \"ServerAddress1\" : \"ServerAddress1\",\n    \"AlwaysMaskUserInput\" : false,\n    \"ServerPort\" : 39501\n  },\n  \"ExternalFederationProperties\" : {\n    \"NameIDFormat\" : \"NameIDFormat\",\n    \"FederationMetadata\" : \"FederationMetadata\",\n    \"RequireAuthentication\" : true,\n    \"AuthnContextComparison\" : \"Exact\",\n    \"Realm\" : \"Realm\",\n    \"AuthnContextClasses\" : \"AuthnContextClasses\",\n    \"ApplicationIdOverride\" : \"ApplicationIdOverride\"\n  },\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RstsProviderScope\" : \"RstsProviderScope\",\n  \"OneLoginMfaProperties\" : {\n    \"DnsHostName\" : \"DnsHostName\",\n    \"ClientSecret\" : \"ClientSecret\",\n    \"ClientId\" : \"ClientId\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"StarlingProperties\" : {\n    \"HasApiKey\" : true\n  },\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IdentityProvider>(exampleJson)
                        : default(IdentityProvider);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an identity provider
        /// </summary>
        /// <param name="id">Unique identifier of the IdentityProvider</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/IdentityProviders/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersDeleteIdentityProviderAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or ApplianceAdmin permission")]
        public virtual IActionResult IdentityProvidersDeleteIdentityProviderAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Discovers the available domains using provided domain credentials
        /// </summary>
        /// <param name="body">Credentials for authenticating to the directory</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission</response>
        [HttpPost]
        [Route("/service/core/v4/IdentityProviders/DiscoverDomains")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersDiscoverDomainsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DomainInfo>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersDiscoverDomainsAsync([FromBody]IdentityProviderSchemaParameters body, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DomainInfo>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"DomainName\" : \"DomainName\",\n  \"DomainUniqueId\" : \"DomainUniqueId\",\n  \"NetBiosName\" : \"NetBiosName\",\n  \"NamingContext\" : \"NamingContext\",\n  \"IsVisible\" : true,\n  \"IsForestRoot\" : true\n}, {\n  \"DomainName\" : \"DomainName\",\n  \"DomainUniqueId\" : \"DomainUniqueId\",\n  \"NetBiosName\" : \"NetBiosName\",\n  \"NamingContext\" : \"NamingContext\",\n  \"IsVisible\" : true,\n  \"IsForestRoot\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DomainInfo>>(exampleJson)
                        : default(List<DomainInfo>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Discovers the available schema attributes using provided domain credentials
        /// </summary>
        /// <param name="body">Credentials for authenticating to the directory</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/IdentityProviders/DiscoverSchema")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersDiscoverSchemaAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DirectorySchema>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersDiscoverSchemaAsync([FromBody]IdentityProviderSchemaParameters body, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DirectorySchema>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ObjectClassName\" : \"ObjectClassName\",\n  \"Attributes\" : [ {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  }, {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  } ]\n}, {\n  \"ObjectClassName\" : \"ObjectClassName\",\n  \"Attributes\" : [ {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  }, {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DirectorySchema>>(exampleJson)
                        : default(List<DirectorySchema>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Discovers the available schema attributes using provided domain credentials for a specific object class
        /// </summary>
        /// <param name="objectClassName">Name of object class to discover schema for</param>
        /// <param name="body">Credentials for authenticating to active directory</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/IdentityProviders/DiscoverSchema/{objectClassName}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersDiscoverSchemaByClassAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DirectorySchema>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersDiscoverSchemaByClassAsync([FromRoute][Required]string objectClassName, [FromBody]IdentityProviderSchemaParameters body, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DirectorySchema>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ObjectClassName\" : \"ObjectClassName\",\n  \"Attributes\" : [ {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  }, {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  } ]\n}, {\n  \"ObjectClassName\" : \"ObjectClassName\",\n  \"Attributes\" : [ {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  }, {\n    \"AttributeSyntax\" : \"Unknown\",\n    \"LdapDisplayName\" : \"LdapDisplayName\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DirectorySchema>>(exampleJson)
                        : default(List<DirectorySchema>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get default schema for directory provider
        /// </summary>
        /// <param name="typeRefName">Identity provider type name</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Platform not found</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders/DefaultSchema/{typeRefName}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersGetDefaultSchema")]
        [SwaggerResponse(statusCode: 200, type: typeof(DefaultProviderLdapSchema), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, ApplianceAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersGetDefaultSchema([FromRoute][Required]IdentityProviderTypeReferenceName typeRefName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DefaultProviderLdapSchema));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"DefaultSchema\" : {\n    \"UserProperties\" : {\n      \"DirectoryGroupSyncAttributeForManagedObjects\" : \"DirectoryGroupSyncAttributeForManagedObjects\",\n      \"FirstNameAttribute\" : \"FirstNameAttribute\",\n      \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\" : \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\",\n      \"PhoneAttribute\" : \"PhoneAttribute\",\n      \"DirectoryGroupSyncAttributeForRadiusAuthentication\" : \"DirectoryGroupSyncAttributeForRadiusAuthentication\",\n      \"UserNameAttribute\" : \"UserNameAttribute\",\n      \"MobileAttribute\" : \"MobileAttribute\",\n      \"DescriptionAttribute\" : \"DescriptionAttribute\",\n      \"LastNameAttribute\" : \"LastNameAttribute\",\n      \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n      \"MailAttribute\" : \"MailAttribute\"\n    },\n    \"GroupProperties\" : {\n      \"MemberAttribute\" : \"MemberAttribute\",\n      \"DescriptionAttribute\" : \"DescriptionAttribute\",\n      \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n      \"NameAttribute\" : \"NameAttribute\"\n    }\n  },\n  \"UserSchemaDescriptors\" : {\n    \"UserClassTypeDescriptor\" : {\n      \"ReadOnly\" : true,\n      \"Required\" : true\n    }\n  },\n  \"GroupSchemaDescriptors\" : { }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DefaultProviderLdapSchema>(exampleJson)
                        : default(DefaultProviderLdapSchema);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Searches the specified directory
        /// </summary>
        /// <param name="id">Unique ID of a Directory IdentityProvider</param>
        /// <param name="searchBase">Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of  forest for AD.  Must be in DN Syntax.</param>
        /// <param name="searchScope">Defines the scope of the query, either base, one, or sub, defaults to sub.</param>
        /// <param name="searchType">Either User, Group, or Computer.  Defaults to User.</param>
        /// <param name="searchName">Sets a search constraint on the \&quot;name\&quot; of the object to return.</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">IdentityProvider does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders/{id}/DirectoryServiceEntries")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersGetEntriesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DirectoryServiceEntry>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersGetEntriesAsync([FromRoute][Required]int? id, [FromQuery]string searchBase, [FromQuery]SearchScope searchScope, [FromQuery]DirectoryProviderSearchType searchType, [FromQuery]string searchName, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DirectoryServiceEntry>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"Name\" : \"Name\"\n}, {\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DirectoryServiceEntry>>(exampleJson)
                        : default(List<DirectoryServiceEntry>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific identity provider
        /// </summary>
        /// <param name="id">Unique ID of IdentityProvider</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, ApplianceAdmin, AssetAdmin, UserAdmin, PolicyAdmin, HelpdeskAdmin, or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersGetIdentityProviderByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(IdentityProvider), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, ApplianceAdmin, AssetAdmin, UserAdmin, PolicyAdmin, HelpdeskAdmin, or Auditor permission")]
        public virtual IActionResult IdentityProvidersGetIdentityProviderByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IdentityProvider));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"RstsProviderId\" : \"RstsProviderId\",\n  \"Fido2Properties\" : {\n    \"DomainSuffix\" : \"DomainSuffix\"\n  },\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"DirectoryProperties\" : {\n    \"FailedSyncAttempts\" : 7,\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ConnectionProperties\" : {\n      \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n      \"ServiceAccountHasSshKey\" : true,\n      \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n      \"UseSslEncryption\" : true,\n      \"Port\" : 13285,\n      \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n      \"ServiceAccountName\" : \"ServiceAccountName\",\n      \"ServiceAccountSshKey\" : {\n        \"Comment\" : \"Comment\",\n        \"Fingerprint\" : \"Fingerprint\",\n        \"PrivateKey\" : \"PrivateKey\",\n        \"FingerprintSha256\" : \"FingerprintSha256\",\n        \"KeyType\" : \"Unknown\",\n        \"PublicKey\" : \"PublicKey\",\n        \"Passphrase\" : \"Passphrase\",\n        \"KeyLength\" : 4884\n      },\n      \"ServiceAccountId\" : 3,\n      \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n      \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n      \"VerifySslCertificate\" : true,\n      \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n      \"ServiceAccountAssetPlatformId\" : 7,\n      \"ServiceAccountAssetId\" : 4,\n      \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n      \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n      \"ServiceAccountCredentialType\" : \"None\",\n      \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n      \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n      \"ServiceAccountHasPassword\" : true,\n      \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n    },\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"DirectoryGroupSyncAttributeForManagedObjects\" : \"DirectoryGroupSyncAttributeForManagedObjects\",\n        \"FirstNameAttribute\" : \"FirstNameAttribute\",\n        \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\" : \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\",\n        \"PhoneAttribute\" : \"PhoneAttribute\",\n        \"DirectoryGroupSyncAttributeForRadiusAuthentication\" : \"DirectoryGroupSyncAttributeForRadiusAuthentication\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"MobileAttribute\" : \"MobileAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"LastNameAttribute\" : \"LastNameAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"MailAttribute\" : \"MailAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    } ],\n    \"DeleteSyncIntervalMinutes\" : 494379917,\n    \"FailedDeleteSyncAttempts\" : 9,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 1210617418\n  },\n  \"TypeReferenceName\" : \"Unknown\",\n  \"RadiusProperties\" : {\n    \"SharedSecret\" : \"SharedSecret\",\n    \"Timeout\" : 44,\n    \"Retries\" : 5,\n    \"PreAuthenticateForChallengeResponse\" : false,\n    \"ServerAddress2\" : \"ServerAddress2\",\n    \"ServerAddress1\" : \"ServerAddress1\",\n    \"AlwaysMaskUserInput\" : false,\n    \"ServerPort\" : 39501\n  },\n  \"ExternalFederationProperties\" : {\n    \"NameIDFormat\" : \"NameIDFormat\",\n    \"FederationMetadata\" : \"FederationMetadata\",\n    \"RequireAuthentication\" : true,\n    \"AuthnContextComparison\" : \"Exact\",\n    \"Realm\" : \"Realm\",\n    \"AuthnContextClasses\" : \"AuthnContextClasses\",\n    \"ApplicationIdOverride\" : \"ApplicationIdOverride\"\n  },\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RstsProviderScope\" : \"RstsProviderScope\",\n  \"OneLoginMfaProperties\" : {\n    \"DnsHostName\" : \"DnsHostName\",\n    \"ClientSecret\" : \"ClientSecret\",\n    \"ClientId\" : \"ClientId\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"StarlingProperties\" : {\n    \"HasApiKey\" : true\n  },\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IdentityProvider>(exampleJson)
                        : default(IdentityProvider);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a queryable list of identity providers
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, ApplianceAdmin, OperationsAdmin, AssetAdmin, UserAdmin, PolicyAdmin, HelpdeskAdmin, or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersGetIdentityProvidersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IdentityProvider>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, ApplianceAdmin, OperationsAdmin, AssetAdmin, UserAdmin, PolicyAdmin, HelpdeskAdmin, or Auditor permission")]
        public virtual IActionResult IdentityProvidersGetIdentityProvidersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IdentityProvider>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"RstsProviderId\" : \"RstsProviderId\",\n  \"Fido2Properties\" : {\n    \"DomainSuffix\" : \"DomainSuffix\"\n  },\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"DirectoryProperties\" : {\n    \"FailedSyncAttempts\" : 7,\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ConnectionProperties\" : {\n      \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n      \"ServiceAccountHasSshKey\" : true,\n      \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n      \"UseSslEncryption\" : true,\n      \"Port\" : 13285,\n      \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n      \"ServiceAccountName\" : \"ServiceAccountName\",\n      \"ServiceAccountSshKey\" : {\n        \"Comment\" : \"Comment\",\n        \"Fingerprint\" : \"Fingerprint\",\n        \"PrivateKey\" : \"PrivateKey\",\n        \"FingerprintSha256\" : \"FingerprintSha256\",\n        \"KeyType\" : \"Unknown\",\n        \"PublicKey\" : \"PublicKey\",\n        \"Passphrase\" : \"Passphrase\",\n        \"KeyLength\" : 4884\n      },\n      \"ServiceAccountId\" : 3,\n      \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n      \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n      \"VerifySslCertificate\" : true,\n      \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n      \"ServiceAccountAssetPlatformId\" : 7,\n      \"ServiceAccountAssetId\" : 4,\n      \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n      \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n      \"ServiceAccountCredentialType\" : \"None\",\n      \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n      \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n      \"ServiceAccountHasPassword\" : true,\n      \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n    },\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"DirectoryGroupSyncAttributeForManagedObjects\" : \"DirectoryGroupSyncAttributeForManagedObjects\",\n        \"FirstNameAttribute\" : \"FirstNameAttribute\",\n        \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\" : \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\",\n        \"PhoneAttribute\" : \"PhoneAttribute\",\n        \"DirectoryGroupSyncAttributeForRadiusAuthentication\" : \"DirectoryGroupSyncAttributeForRadiusAuthentication\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"MobileAttribute\" : \"MobileAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"LastNameAttribute\" : \"LastNameAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"MailAttribute\" : \"MailAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    } ],\n    \"DeleteSyncIntervalMinutes\" : 494379917,\n    \"FailedDeleteSyncAttempts\" : 9,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 1210617418\n  },\n  \"TypeReferenceName\" : \"Unknown\",\n  \"RadiusProperties\" : {\n    \"SharedSecret\" : \"SharedSecret\",\n    \"Timeout\" : 44,\n    \"Retries\" : 5,\n    \"PreAuthenticateForChallengeResponse\" : false,\n    \"ServerAddress2\" : \"ServerAddress2\",\n    \"ServerAddress1\" : \"ServerAddress1\",\n    \"AlwaysMaskUserInput\" : false,\n    \"ServerPort\" : 39501\n  },\n  \"ExternalFederationProperties\" : {\n    \"NameIDFormat\" : \"NameIDFormat\",\n    \"FederationMetadata\" : \"FederationMetadata\",\n    \"RequireAuthentication\" : true,\n    \"AuthnContextComparison\" : \"Exact\",\n    \"Realm\" : \"Realm\",\n    \"AuthnContextClasses\" : \"AuthnContextClasses\",\n    \"ApplicationIdOverride\" : \"ApplicationIdOverride\"\n  },\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RstsProviderScope\" : \"RstsProviderScope\",\n  \"OneLoginMfaProperties\" : {\n    \"DnsHostName\" : \"DnsHostName\",\n    \"ClientSecret\" : \"ClientSecret\",\n    \"ClientId\" : \"ClientId\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"StarlingProperties\" : {\n    \"HasApiKey\" : true\n  },\n  \"IsSystemOwned\" : true\n}, {\n  \"RstsProviderId\" : \"RstsProviderId\",\n  \"Fido2Properties\" : {\n    \"DomainSuffix\" : \"DomainSuffix\"\n  },\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"DirectoryProperties\" : {\n    \"FailedSyncAttempts\" : 7,\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ConnectionProperties\" : {\n      \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n      \"ServiceAccountHasSshKey\" : true,\n      \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n      \"UseSslEncryption\" : true,\n      \"Port\" : 13285,\n      \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n      \"ServiceAccountName\" : \"ServiceAccountName\",\n      \"ServiceAccountSshKey\" : {\n        \"Comment\" : \"Comment\",\n        \"Fingerprint\" : \"Fingerprint\",\n        \"PrivateKey\" : \"PrivateKey\",\n        \"FingerprintSha256\" : \"FingerprintSha256\",\n        \"KeyType\" : \"Unknown\",\n        \"PublicKey\" : \"PublicKey\",\n        \"Passphrase\" : \"Passphrase\",\n        \"KeyLength\" : 4884\n      },\n      \"ServiceAccountId\" : 3,\n      \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n      \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n      \"VerifySslCertificate\" : true,\n      \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n      \"ServiceAccountAssetPlatformId\" : 7,\n      \"ServiceAccountAssetId\" : 4,\n      \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n      \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n      \"ServiceAccountCredentialType\" : \"None\",\n      \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n      \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n      \"ServiceAccountHasPassword\" : true,\n      \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n    },\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"DirectoryGroupSyncAttributeForManagedObjects\" : \"DirectoryGroupSyncAttributeForManagedObjects\",\n        \"FirstNameAttribute\" : \"FirstNameAttribute\",\n        \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\" : \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\",\n        \"PhoneAttribute\" : \"PhoneAttribute\",\n        \"DirectoryGroupSyncAttributeForRadiusAuthentication\" : \"DirectoryGroupSyncAttributeForRadiusAuthentication\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"MobileAttribute\" : \"MobileAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"LastNameAttribute\" : \"LastNameAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"MailAttribute\" : \"MailAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    } ],\n    \"DeleteSyncIntervalMinutes\" : 494379917,\n    \"FailedDeleteSyncAttempts\" : 9,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 1210617418\n  },\n  \"TypeReferenceName\" : \"Unknown\",\n  \"RadiusProperties\" : {\n    \"SharedSecret\" : \"SharedSecret\",\n    \"Timeout\" : 44,\n    \"Retries\" : 5,\n    \"PreAuthenticateForChallengeResponse\" : false,\n    \"ServerAddress2\" : \"ServerAddress2\",\n    \"ServerAddress1\" : \"ServerAddress1\",\n    \"AlwaysMaskUserInput\" : false,\n    \"ServerPort\" : 39501\n  },\n  \"ExternalFederationProperties\" : {\n    \"NameIDFormat\" : \"NameIDFormat\",\n    \"FederationMetadata\" : \"FederationMetadata\",\n    \"RequireAuthentication\" : true,\n    \"AuthnContextComparison\" : \"Exact\",\n    \"Realm\" : \"Realm\",\n    \"AuthnContextClasses\" : \"AuthnContextClasses\",\n    \"ApplicationIdOverride\" : \"ApplicationIdOverride\"\n  },\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RstsProviderScope\" : \"RstsProviderScope\",\n  \"OneLoginMfaProperties\" : {\n    \"DnsHostName\" : \"DnsHostName\",\n    \"ClientSecret\" : \"ClientSecret\",\n    \"ClientId\" : \"ClientId\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"StarlingProperties\" : {\n    \"HasApiKey\" : true\n  },\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<IdentityProvider>>(exampleJson)
                        : default(List<IdentityProvider>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the identity provider type associated with this provider
        /// </summary>
        /// <param name="id">Unique identifier of the IdentityProvider</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders/{id}/Type")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersGetProviderTypeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(IdentityProviderType), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult IdentityProvidersGetProviderTypeAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IdentityProviderType));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AllowSecondaryAuthFlag\" : true,\n  \"AllowMultipleConfigsFlag\" : true,\n  \"DefaultServerPort\" : 0,\n  \"AllowPrimaryAuthFlag\" : true,\n  \"ReferenceName\" : \"Unknown\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IdentityProviderType>(exampleJson)
                        : default(IdentityProviderType);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Searches the specified directory for Group objects as UserGroups
        /// </summary>
        /// <param name="id">Unique ID of a Directory IdentityProvider</param>
        /// <param name="searchBase">Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of  forest for AD.  Must be in DN Syntax.</param>
        /// <param name="searchScope">Defines the scope of the query, either base, one, or sub, defaults to sub.</param>
        /// <param name="searchName">Sets a search constraint on the \&quot;name\&quot; of the object to return.</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">IdentityProvider does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders/{id}/DirectoryUserGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersSearchUserGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersSearchUserGroupsAsync([FromRoute][Required]int? id, [FromQuery]string searchBase, [FromQuery]SearchScope searchScope, [FromQuery]string searchName, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroup>>(exampleJson)
                        : default(List<UserGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Searches the specified directory for User objects as Users
        /// </summary>
        /// <param name="id">Unique ID of a Directory IdentityProvider</param>
        /// <param name="searchBase">Sets the searchBase for the Ldap query, defaults to base of the domain for ldap, or base of  forest for AD.  Must be in DN Syntax.</param>
        /// <param name="searchScope">Defines the scope of the query, either base, one, or sub, defaults to sub.</param>
        /// <param name="searchName">Sets a search constraint on the \&quot;name\&quot; of the object to return.</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">IdentityProvider does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/IdentityProviders/{id}/DirectoryUsers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersSearchUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult IdentityProvidersSearchUsersAsync([FromRoute][Required]int? id, [FromQuery]string searchBase, [FromQuery]SearchScope searchScope, [FromQuery]string searchName, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Synchronize all directory related objects with the remote server
        /// </summary>
        /// <param name="id">Unique ID of the directory</param>
        /// <param name="fullSync">Whether to sync all entities imported from this directory or just those that have been modified</param>
        /// <response code="200">Success</response>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        /// <response code="404">Directory not found</response>
        [HttpPost]
        [Route("/service/core/v4/IdentityProviders/{id}/Synchronize")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersSynchronizeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(DirectorySyncActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or ApplianceAdmin permission")]
        public virtual IActionResult IdentityProvidersSynchronizeAsync([FromRoute][Required]int? id, [FromQuery]bool? fullSync)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DirectorySyncActivityLog));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"PlatformId\" : 1,\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DirectorySyncActivityLog>(exampleJson)
                        : default(DirectorySyncActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing identity provider
        /// </summary>
        /// <param name="id">Unique identifier of the IdentityProvider</param>
        /// <param name="body">Updated IdentityProvider</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        /// <response code="404">IdentityProvider does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/IdentityProviders/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("IdentityProvidersUpdateIdentityProviderAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(IdentityProvider), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or ApplianceAdmin permission")]
        public virtual IActionResult IdentityProvidersUpdateIdentityProviderAsync([FromRoute][Required]int? id, [FromBody]IdentityProvider body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IdentityProvider));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"RstsProviderId\" : \"RstsProviderId\",\n  \"Fido2Properties\" : {\n    \"DomainSuffix\" : \"DomainSuffix\"\n  },\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"DirectoryProperties\" : {\n    \"FailedSyncAttempts\" : 7,\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ConnectionProperties\" : {\n      \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n      \"ServiceAccountHasSshKey\" : true,\n      \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n      \"UseSslEncryption\" : true,\n      \"Port\" : 13285,\n      \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n      \"ServiceAccountName\" : \"ServiceAccountName\",\n      \"ServiceAccountSshKey\" : {\n        \"Comment\" : \"Comment\",\n        \"Fingerprint\" : \"Fingerprint\",\n        \"PrivateKey\" : \"PrivateKey\",\n        \"FingerprintSha256\" : \"FingerprintSha256\",\n        \"KeyType\" : \"Unknown\",\n        \"PublicKey\" : \"PublicKey\",\n        \"Passphrase\" : \"Passphrase\",\n        \"KeyLength\" : 4884\n      },\n      \"ServiceAccountId\" : 3,\n      \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n      \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n      \"VerifySslCertificate\" : true,\n      \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n      \"ServiceAccountAssetPlatformId\" : 7,\n      \"ServiceAccountAssetId\" : 4,\n      \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n      \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n      \"ServiceAccountCredentialType\" : \"None\",\n      \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n      \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n      \"ServiceAccountHasPassword\" : true,\n      \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n    },\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"DirectoryGroupSyncAttributeForManagedObjects\" : \"DirectoryGroupSyncAttributeForManagedObjects\",\n        \"FirstNameAttribute\" : \"FirstNameAttribute\",\n        \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\" : \"DirectoryGroupSyncAttributeForExternalFederationAuthentication\",\n        \"PhoneAttribute\" : \"PhoneAttribute\",\n        \"DirectoryGroupSyncAttributeForRadiusAuthentication\" : \"DirectoryGroupSyncAttributeForRadiusAuthentication\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"MobileAttribute\" : \"MobileAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"LastNameAttribute\" : \"LastNameAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"MailAttribute\" : \"MailAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\",\n      \"IsVisible\" : true,\n      \"IsForestRoot\" : true\n    } ],\n    \"DeleteSyncIntervalMinutes\" : 494379917,\n    \"FailedDeleteSyncAttempts\" : 9,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 1210617418\n  },\n  \"TypeReferenceName\" : \"Unknown\",\n  \"RadiusProperties\" : {\n    \"SharedSecret\" : \"SharedSecret\",\n    \"Timeout\" : 44,\n    \"Retries\" : 5,\n    \"PreAuthenticateForChallengeResponse\" : false,\n    \"ServerAddress2\" : \"ServerAddress2\",\n    \"ServerAddress1\" : \"ServerAddress1\",\n    \"AlwaysMaskUserInput\" : false,\n    \"ServerPort\" : 39501\n  },\n  \"ExternalFederationProperties\" : {\n    \"NameIDFormat\" : \"NameIDFormat\",\n    \"FederationMetadata\" : \"FederationMetadata\",\n    \"RequireAuthentication\" : true,\n    \"AuthnContextComparison\" : \"Exact\",\n    \"Realm\" : \"Realm\",\n    \"AuthnContextClasses\" : \"AuthnContextClasses\",\n    \"ApplicationIdOverride\" : \"ApplicationIdOverride\"\n  },\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RstsProviderScope\" : \"RstsProviderScope\",\n  \"OneLoginMfaProperties\" : {\n    \"DnsHostName\" : \"DnsHostName\",\n    \"ClientSecret\" : \"ClientSecret\",\n    \"ClientId\" : \"ClientId\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"StarlingProperties\" : {\n    \"HasApiKey\" : true\n  },\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<IdentityProvider>(exampleJson)
                        : default(IdentityProvider);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
