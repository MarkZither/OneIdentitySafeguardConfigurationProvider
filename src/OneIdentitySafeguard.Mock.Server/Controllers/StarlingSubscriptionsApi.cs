/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StarlingSubscriptionsApiController : ControllerBase
    { 
        /// <summary>
        /// Adds the new Starling subscription information.
        /// </summary>
        /// <param name="body">The Starling subscription information to add.</param>
        /// <response code="201">Created</response>
        /// <response code="400">50208 - Only one Starling subscription is allowed at a time.</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/StarlingSubscriptions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsCreateEntityAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(StarlingSubscription), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "50208 - Only one Starling subscription is allowed at a time.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult StarlingSubscriptionsCreateEntityAsync([FromBody]StarlingSubscription body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(StarlingSubscription));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"TokenEndpoint\" : \"TokenEndpoint\",\n  \"JoinUrl\" : \"JoinUrl\",\n  \"CloudAssistantSenderId\" : \"CloudAssistantSenderId\",\n  \"Id\" : 0,\n  \"ClientCredentials\" : \"ClientCredentials\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StarlingSubscription>(exampleJson)
                        : default(StarlingSubscription);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove and unjoin the specified Starling subscription.
        /// </summary>
        /// <param name="id">The unique id of the Starling subscription to be deleted and removed from the system.</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force the removal of the subscription information              from Safeguard, regardless of whether or not the request to Starling to unjoin was successful.</param>
        /// <response code="204">The Starling subscription was successfully removed.</response>
        /// <response code="400">50086 - The Starling subscription cannot be deleted because there are active identities              for whom it is the secondary authentication source.</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/StarlingSubscriptions/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult StarlingSubscriptionsDeleteAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all Starling subscriptions
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400"></response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingSubscriptions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StarlingSubscription>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult StarlingSubscriptionsGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StarlingSubscription>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"TokenEndpoint\" : \"TokenEndpoint\",\n  \"JoinUrl\" : \"JoinUrl\",\n  \"CloudAssistantSenderId\" : \"CloudAssistantSenderId\",\n  \"Id\" : 0,\n  \"ClientCredentials\" : \"ClientCredentials\",\n  \"Name\" : \"Name\"\n}, {\n  \"TokenEndpoint\" : \"TokenEndpoint\",\n  \"JoinUrl\" : \"JoinUrl\",\n  \"CloudAssistantSenderId\" : \"CloudAssistantSenderId\",\n  \"Id\" : 0,\n  \"ClientCredentials\" : \"ClientCredentials\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<StarlingSubscription>>(exampleJson)
                        : default(List<StarlingSubscription>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the specified Starling subscription information.
        /// </summary>
        /// <param name="id">Unique id of the Starling subscription to return.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Starling subscription not found.</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingSubscriptions/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(StarlingSubscription), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult StarlingSubscriptionsGetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StarlingSubscription));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"TokenEndpoint\" : \"TokenEndpoint\",\n  \"JoinUrl\" : \"JoinUrl\",\n  \"CloudAssistantSenderId\" : \"CloudAssistantSenderId\",\n  \"Id\" : 0,\n  \"ClientCredentials\" : \"ClientCredentials\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<StarlingSubscription>(exampleJson)
                        : default(StarlingSubscription);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the necessary URL used by a client to initiate the Starling join process.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="400">Must have a valid Password Management or Sessions Management license</response>
        /// <response code="403">Must have ApplianceAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingSubscriptions/JoinUrl")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsGetJoinUrlAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult StarlingSubscriptionsGetJoinUrlAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// The DNS suffix name(s) for which the Starling authentication provider will be used. This value needs to match  the email address suffix of a user that intends to be authenticated. If the federated authentication supports  more than one realm, enter each realm separated by a space or comma.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="204">Must be joined to Starling and have the &#x27;StarlingDirectory&#x27; Identity Provider be created              by the system to get or set the realm(s).</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingSubscriptions/Realm")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsGetRealmAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult StarlingSubscriptionsGetRealmAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Controls the &#x27;ForceAuthn&#x27; attribute of a SAML2 AuthnRequest. When set to true, the user will  be required to reenter their credentials on the external federation site, even if they are already  logged in, thus negating any single sign-on benefits, but may be considered more secure.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="204">Must be joined to Starling and have the &#x27;StarlingDirectory&#x27; Identity Provider be created              by the system to get or set this property.</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/StarlingSubscriptions/RequireAuthentication")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsGetRequireAuthenticationAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult StarlingSubscriptionsGetRequireAuthenticationAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// The DNS suffix name(s) for which the Starling authentication provider will be used. This value needs to match  the email address suffix of a user that intends to be authenticated. If the federated authentication supports  more than one realm, enter each realm separated by a space or comma.
        /// </summary>
        /// <param name="body">The DNS suffix name(s) for which the Starling authentication provider will be used. This
        /// value needs to match the email address suffix of a user that intends to be authenticated. If the federated
        /// authentication supports more than one realm, enter each realm separated by a space or comma.</param>
        /// <response code="204">Success</response>
        /// <response code="400">60459 - Must be joined to Starling to get or set the realm(s).              &lt;br /&gt;              60988 - The Starling Identity Provider does not exist. Please ensure the appliance has Internet access.              You may need to wait up to three hours for the system to create the Identity Provider.              &lt;br /&gt;              70000 - realm value has a maximum length of 255.</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/StarlingSubscriptions/Realm")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsPutRealmAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60459 - Must be joined to Starling to get or set the realm(s).              &lt;br /&gt;              60988 - The Starling Identity Provider does not exist. Please ensure the appliance has Internet access.              You may need to wait up to three hours for the system to create the Identity Provider.              &lt;br /&gt;              70000 - realm value has a maximum length of 255.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or ApplianceAdmin permission")]
        public virtual IActionResult StarlingSubscriptionsPutRealmAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Controls the &#x27;ForceAuthn&#x27; attribute of a SAML2 AuthnRequest. When set to true, the user will  be required to reenter their credentials on the external federation site, even if they are already  logged in, thus negating any single sign-on benefits, but may be considered more secure.
        /// </summary>
        /// <param name="body">Set to true to require the user to reenter their credentials on
        /// the external federation site, even if they are already logged in. Set to false to allow the user to
        /// automatically be logged into Safeguard if the external federation site supports SSO.</param>
        /// <response code="204">Success</response>
        /// <response code="400">60459 - Must be joined to Starling to get or set this property.              &lt;br /&gt;              60988 - The Starling Identity Provider does not exist. Please ensure the appliance has Internet access.              You may need to wait up to three hours for the system to create the Identity Provider.</response>
        /// <response code="403">Must have GlobalAdmin or ApplianceAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/StarlingSubscriptions/RequireAuthentication")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StarlingSubscriptionsPutRequireAuthenticationAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60459 - Must be joined to Starling to get or set this property.              &lt;br /&gt;              60988 - The Starling Identity Provider does not exist. Please ensure the appliance has Internet access.              You may need to wait up to three hours for the system to create the Identity Provider.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or ApplianceAdmin permission")]
        public virtual IActionResult StarlingSubscriptionsPutRequireAuthenticationAsync([FromBody]bool? body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }
    }
}
