/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ServerCertificateSignatureRequestsApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new certificate signing request
        /// </summary>
        /// <param name="body">ServerCertificateSignatureRequest to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Requested a sessions certificate type on a virtual appliance.</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/ServerCertificateSignatureRequests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ServerCertificateSignatureRequestsCreateEntityAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(ServerCertificateSignatureRequest), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Requested a sessions certificate type on a virtual appliance.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ServerCertificateSignatureRequestsCreateEntityAsync([FromBody]ServerCertificateSignatureRequest body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ServerCertificateSignatureRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"Base64RequestData\" : \"Base64RequestData\",\n  \"Thumbprint\" : \"Thumbprint\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"KeyLength\" : 1270,\n  \"IssuedBy\" : \"IssuedBy\",\n  \"Subject\" : \"Subject\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificateSignatureRequest>(exampleJson)
                        : default(ServerCertificateSignatureRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes a certificate signing request
        /// </summary>
        /// <param name="id">Unique identifier of the ServerCertificateSignatureRequest</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">6000 - Error</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/ServerCertificateSignatureRequests/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ServerCertificateSignatureRequestsDeleteAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "6000 - Error")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ServerCertificateSignatureRequestsDeleteAsync([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a queryable list of certificate signing requests
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/ServerCertificateSignatureRequests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ServerCertificateSignatureRequestsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServerCertificateSignatureRequest>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ServerCertificateSignatureRequestsGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServerCertificateSignatureRequest>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"Base64RequestData\" : \"Base64RequestData\",\n  \"Thumbprint\" : \"Thumbprint\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"KeyLength\" : 1270,\n  \"IssuedBy\" : \"IssuedBy\",\n  \"Subject\" : \"Subject\"\n}, {\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"Base64RequestData\" : \"Base64RequestData\",\n  \"Thumbprint\" : \"Thumbprint\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"KeyLength\" : 1270,\n  \"IssuedBy\" : \"IssuedBy\",\n  \"Subject\" : \"Subject\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ServerCertificateSignatureRequest>>(exampleJson)
                        : default(List<ServerCertificateSignatureRequest>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a certificate signing request
        /// </summary>
        /// <param name="id">Thumbprint of ServerCertificateSignatureRequest</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Server Certificate Signing Request does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/ServerCertificateSignatureRequests/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ServerCertificateSignatureRequestsGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificateSignatureRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ServerCertificateSignatureRequestsGetByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificateSignatureRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"Base64RequestData\" : \"Base64RequestData\",\n  \"Thumbprint\" : \"Thumbprint\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"KeyLength\" : 1270,\n  \"IssuedBy\" : \"IssuedBy\",\n  \"Subject\" : \"Subject\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificateSignatureRequest>(exampleJson)
                        : default(ServerCertificateSignatureRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
