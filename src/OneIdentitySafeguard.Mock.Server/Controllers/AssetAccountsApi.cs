/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssetAccountsApiController : ControllerBase
    { 
        /// <summary>
        /// Changes account password on the remote system
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/ChangePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsChangePasswordAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsChangePasswordAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Changes account SSH key on the remote system
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="200">Success</response>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/ChangeSshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsChangeSshKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PasswordActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsChangeSshKeyAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Checks if account password matches stored password
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/CheckPassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsCheckPasswordAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsCheckPasswordAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Checks if account SSH key matches stored password
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/CheckSshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsCheckSshKeyAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsCheckSshKeyAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Adds a new asset account to the appliance
        /// </summary>
        /// <param name="body">AssetAccount to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">60245 - Asset Account was not entered</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsCreateAssetAccountAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetAccount), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Asset Account was not entered")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsCreateAssetAccountAsync([FromBody]AssetAccount body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(AssetAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetAccount>(exampleJson)
                        : default(AssetAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple new asset accounts
        /// </summary>
        /// <param name="body">New asset accounts to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/BatchCreate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsCreateMultipleAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAccountBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsCreateMultipleAccountsAsync([FromBody]List<AssetAccount> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetAccountBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Platform\" : {\n      \"PlatformFamily\" : \"None\",\n      \"DisplayName\" : \"DisplayName\",\n      \"Id\" : 6,\n      \"IsAcctNameCaseSensitive\" : true,\n      \"PlatformType\" : \"Unknown\",\n      \"SupportsSessionManagement\" : true\n    },\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 5,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 5,\n      \"Name\" : \"Name\"\n    },\n    \"CreatedByUserId\" : 6,\n    \"TaskProperties\" : {\n      \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedRestoreAccountAttempts\" : 5,\n      \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyRevokeAttempts\" : 1,\n      \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n      \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n      \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n      \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedPasswordChangeAttempts\" : 1,\n      \"FailedSshKeyChangeAttempts\" : 6,\n      \"FailedPasswordCheckAttempts\" : 1,\n      \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n      \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n      \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n      \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSuspendAccountAttempts\" : 4,\n      \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n      \"HasAccountTaskFailure\" : true,\n      \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyCheckAttempts\" : 1,\n      \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n      \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyDiscoveryAttempts\" : 7,\n      \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"SshKeySyncGroup\" : {\n      \"Priority\" : 7,\n      \"Id\" : 4,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"AltLoginName\" : \"AltLoginName\",\n    \"Asset\" : {\n      \"AssetPartitionId\" : 6,\n      \"AssetPartitionName\" : \"AssetPartitionName\",\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Disabled\" : true,\n    \"SyncGroup\" : {\n      \"Priority\" : 2,\n      \"Id\" : 3,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"Tags\" : [ {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    } ],\n    \"IsServiceAccount\" : true,\n    \"DiscoveredProperties\" : {\n      \"AccountDiscoveryScheduleId\" : 9,\n      \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n      \"DiscoveredUserId\" : \"DiscoveredUserId\",\n      \"DiscoveredGroups\" : [ {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      }, {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      } ]\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"DirectoryProperties\" : {\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\"\n    },\n    \"RequestProperties\" : {\n      \"AllowPasswordRequest\" : true,\n      \"AllowSshKeyRequest\" : true,\n      \"AllowSessionRequest\" : true\n    },\n    \"SharedServiceAccount\" : true,\n    \"HasSshKey\" : true,\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 2,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 7,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 0,\n    \"HasPassword\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Platform\" : {\n      \"PlatformFamily\" : \"None\",\n      \"DisplayName\" : \"DisplayName\",\n      \"Id\" : 6,\n      \"IsAcctNameCaseSensitive\" : true,\n      \"PlatformType\" : \"Unknown\",\n      \"SupportsSessionManagement\" : true\n    },\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 5,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 5,\n      \"Name\" : \"Name\"\n    },\n    \"CreatedByUserId\" : 6,\n    \"TaskProperties\" : {\n      \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedRestoreAccountAttempts\" : 5,\n      \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyRevokeAttempts\" : 1,\n      \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n      \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n      \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n      \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedPasswordChangeAttempts\" : 1,\n      \"FailedSshKeyChangeAttempts\" : 6,\n      \"FailedPasswordCheckAttempts\" : 1,\n      \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n      \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n      \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n      \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSuspendAccountAttempts\" : 4,\n      \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n      \"HasAccountTaskFailure\" : true,\n      \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyCheckAttempts\" : 1,\n      \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n      \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyDiscoveryAttempts\" : 7,\n      \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"SshKeySyncGroup\" : {\n      \"Priority\" : 7,\n      \"Id\" : 4,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"AltLoginName\" : \"AltLoginName\",\n    \"Asset\" : {\n      \"AssetPartitionId\" : 6,\n      \"AssetPartitionName\" : \"AssetPartitionName\",\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Disabled\" : true,\n    \"SyncGroup\" : {\n      \"Priority\" : 2,\n      \"Id\" : 3,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"Tags\" : [ {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    } ],\n    \"IsServiceAccount\" : true,\n    \"DiscoveredProperties\" : {\n      \"AccountDiscoveryScheduleId\" : 9,\n      \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n      \"DiscoveredUserId\" : \"DiscoveredUserId\",\n      \"DiscoveredGroups\" : [ {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      }, {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      } ]\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"DirectoryProperties\" : {\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\"\n    },\n    \"RequestProperties\" : {\n      \"AllowPasswordRequest\" : true,\n      \"AllowSshKeyRequest\" : true,\n      \"AllowSessionRequest\" : true\n    },\n    \"SharedServiceAccount\" : true,\n    \"HasSshKey\" : true,\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 2,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 7,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 0,\n    \"HasPassword\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetAccountBatchResponse>>(exampleJson)
                        : default(List<AssetAccountBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount to remove</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">50104 - Specified asset account is referenced by active policy. Use &#x27;X-Force-Delete&#x27; header to  force deletion.</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/service/core/v4/AssetAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsDeleteAssetAccountAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "50104 - Specified asset account is referenced by active policy. Use &#x27;X-Force-Delete&#x27; header to  force deletion.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsDeleteAssetAccountAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Processes multiple asset account deletes
        /// </summary>
        /// <param name="body">asset accounts to process</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/BatchDelete")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsDeleteMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAccountBatchResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsDeleteMultipleAsync([FromBody]List<int?> body, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetAccountBatchResult>));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetAccountBatchResult>>(exampleJson)
                        : default(List<AssetAccountBatchResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Disable account from automated platform tasks and requests
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/Disable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsDisableAssetAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsDisableAssetAccountAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetAccount));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetAccount>(exampleJson)
                        : default(AssetAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Discovers authorized keys for the account on the remote system
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="200">Success</response>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/DiscoverSshKeys")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsDiscoverSshKeysAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SshKeyDiscoveryLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsDiscoverSshKeysAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SshKeyDiscoveryLog));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 5,\n  \"AccountId\" : 1,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"DiscoveredSshKeys\" : [ {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  }, {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  } ],\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 2,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 5,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 7,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SshKeyDiscoveryLog>(exampleJson)
                        : default(SshKeyDiscoveryLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enable account from automated platform tasks and requests
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/Enable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsEnableAssetAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsEnableAssetAccountAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetAccount));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetAccount>(exampleJson)
                        : default(AssetAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Generate sample password using password rule assigned to this account
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/GeneratePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGeneratePasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsGeneratePasswordAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets an account&#x27;s tags
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/Tags")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetAccountTagsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tag>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetAccountTagsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Tag>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"AdminAssigned\" : true,\n  \"Id\" : 1,\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"AdminAssigned\" : true,\n  \"Id\" : 1,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Tag>>(exampleJson)
                        : default(List<Tag>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of accounts across all partitions
        /// </summary>
        /// <param name="tagNames">List of comma-separated tag IDs by which to filter results. Preferred over using filter.</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetAllAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetAllAccountsAsync([FromQuery]string tagNames, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetAccount>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetAccount>>(exampleJson)
                        : default(List<AssetAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets an asset account
        /// </summary>
        /// <param name="id">Unique ID of an AssetAccount</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">AssetAccount does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetAssetAccountByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetAssetAccountByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetAccount));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetAccount>(exampleJson)
                        : default(AssetAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all effective owners of the specified account
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/EffectiveManagedBy")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetAssetAccountEffectiveManagedByAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EffectiveIdentity>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetAssetAccountEffectiveManagedByAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EffectiveIdentity>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 6,\n  \"ViaTags\" : [ {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"DomainName\" : \"DomainName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"Name\" : \"Name\",\n  \"Direct\" : true,\n  \"PrincipalKind\" : \"Unknown\",\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n}, {\n  \"IdentityProviderId\" : 6,\n  \"ViaTags\" : [ {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"DomainName\" : \"DomainName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"Name\" : \"Name\",\n  \"Direct\" : true,\n  \"PrincipalKind\" : \"Unknown\",\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Id\" : 0,\n  \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EffectiveIdentity>>(exampleJson)
                        : default(List<EffectiveIdentity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all owners of the specified account
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/ManagedBy")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetAssetAccountManagedByAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetAssetAccountManagedByAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets systems that are dependent on this directory account
        /// </summary>
        /// <param name="id">Unique identifier of the directory account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, in, (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/DependentSystems")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetDependentSystemsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetDependentSystemsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAsset>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAsset>>(exampleJson)
                        : default(List<PolicyAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the discovered SSH keys for this account
        /// </summary>
        /// <param name="id">Unique ID of the account</param>
        /// <param name="keyFormat">The format of the SSH private key (defaults to OpenSsh)&lt;br /&gt;&lt;br /&gt;              - OpenSsh - OpenSSH legacy PEM format&lt;br /&gt;              - Ssh2 - Tectia format for use with tools from SSH.com&lt;br /&gt;              - Putty - Putty format for use with PuTTY tools&lt;br /&gt;</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">AssetAccount does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/DiscoveredSshKeys")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetDiscoveredSshKeysAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DiscoveredSshKey>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetDiscoveredSshKeysAsync([FromRoute][Required]int? id, [FromQuery]SshKeyFormat keyFormat, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DiscoveredSshKey>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 1,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Comment\" : \"Comment\",\n  \"Options\" : \"Options\",\n  \"Fingerprint\" : \"Fingerprint\",\n  \"AccountId\" : 0,\n  \"FingerprintSha256\" : \"FingerprintSha256\",\n  \"KeyType\" : \"Unknown\",\n  \"PublicKey\" : \"PublicKey\",\n  \"SshKeyProfileId\" : 5,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"KeyLength\" : 2,\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AccountStatus\" : \"None\",\n  \"SshKeyDiscoveryScheduleId\" : 5,\n  \"SshKeyDiscoveryScheduleName\" : \"SshKeyDiscoveryScheduleName\",\n  \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IsManaged\" : true,\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AssetPartitionId\" : 1,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Comment\" : \"Comment\",\n  \"Options\" : \"Options\",\n  \"Fingerprint\" : \"Fingerprint\",\n  \"AccountId\" : 0,\n  \"FingerprintSha256\" : \"FingerprintSha256\",\n  \"KeyType\" : \"Unknown\",\n  \"PublicKey\" : \"PublicKey\",\n  \"SshKeyProfileId\" : 5,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"KeyLength\" : 2,\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AccountStatus\" : \"None\",\n  \"SshKeyDiscoveryScheduleId\" : 5,\n  \"SshKeyDiscoveryScheduleName\" : \"SshKeyDiscoveryScheduleName\",\n  \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IsManaged\" : true,\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DiscoveredSshKey>>(exampleJson)
                        : default(List<DiscoveredSshKey>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the SSH key assigned to this account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="keyFormat">The format of the SSH public key (defaults to OpenSsh)&lt;br /&gt;&lt;br /&gt;              - OpenSsh - OpenSSH legacy PEM format&lt;br /&gt;              - Ssh2 - Tectia format for use with tools from SSH.com&lt;br /&gt;              - Putty - Putty format for use with PuTTY tools&lt;br /&gt;</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/SshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetSshKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountSshKey), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetSshKeyAsync([FromRoute][Required]int? id, [FromQuery]string fields, [FromQuery]SshKeyFormat keyFormat)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccountSshKey));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Comment\" : \"Comment\",\n  \"Fingerprint\" : \"Fingerprint\",\n  \"PrivateKey\" : \"PrivateKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\",\n  \"KeyType\" : \"Unknown\",\n  \"PublicKey\" : \"PublicKey\",\n  \"Passphrase\" : \"Passphrase\",\n  \"KeyLength\" : 656\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccountSshKey>(exampleJson)
                        : default(AccountSshKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets SSH keys previously assigned to the account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount to set password for</param>
        /// <param name="keyFormat">The format of the SSH private key (defaults to OpenSsh)&lt;br /&gt;&lt;br /&gt;              - OpenSsh - OpenSSH legacy PEM format&lt;br /&gt;              - Ssh2 - Tectia format for use with tools from SSH.com&lt;br /&gt;              - Putty - Putty format for use with PuTTY tools&lt;br /&gt;</param>
        /// <param name="startDate">Get past passwords that were active after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get past passwords that were active before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">An invalid date was entered</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/SshKeys")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetSshKeyHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountSshKeyHistory>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "An invalid date was entered")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetSshKeyHistoryAsync([FromRoute][Required]int? id, [FromQuery]SshKeyFormat keyFormat, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountSshKeyHistory>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"SshKey\" : {\n    \"Comment\" : \"Comment\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"PrivateKey\" : \"PrivateKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"Passphrase\" : \"Passphrase\",\n    \"KeyLength\" : 656\n  },\n  \"TimeStarted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TimeEnded\" : \"2000-01-23T04:56:07.000+00:00\"\n}, {\n  \"SshKey\" : {\n    \"Comment\" : \"Comment\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"PrivateKey\" : \"PrivateKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"Passphrase\" : \"Passphrase\",\n    \"KeyLength\" : 656\n  },\n  \"TimeStarted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TimeEnded\" : \"2000-01-23T04:56:07.000+00:00\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountSshKeyHistory>>(exampleJson)
                        : default(List<AccountSshKeyHistory>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all Tasks that have been executed against this account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount to get tasks for</param>
        /// <param name="startDate">Log time range start. Default 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Log time range end (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/Tasks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsGetTasksAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PasswordActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsGetTasksAsync([FromRoute][Required]int? id, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PasswordActivityLog>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PasswordActivityLog>>(exampleJson)
                        : default(List<PasswordActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Installs the SSH key assigned to the account on the remote system
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/InstallSshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsInstallSshKeyAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsInstallSshKeyAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove tags on this account
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">List of tags to assign to this account</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;accounts&#x27; parameter was missing</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">AssetAccount does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/Tags/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsModifyAccountTagsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tag>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;accounts&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsModifyAccountTagsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<Tag> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Tag>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"AdminAssigned\" : true,\n  \"Id\" : 1,\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"AdminAssigned\" : true,\n  \"Id\" : 1,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Tag>>(exampleJson)
                        : default(List<Tag>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove assigned owners of this account
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">List of owners to assign to this account</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - Invalid owners list provided</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/ManagedBy/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsModifyManagedByAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - Invalid owners list provided")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsModifyManagedByAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<Identity> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Unassign the SSH key assigned to this account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpDelete]
        [Route("/service/core/v4/AssetAccounts/{id}/SshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsRemoveSshKeyAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsRemoveSshKeyAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Restore the account on the remote system
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/RestoreAccount")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsRestoreAccountAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsRestoreAccountAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets passwords previously assigned to the account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount to set password for</param>
        /// <param name="startDate">Get past passwords that were active after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get past passwords that were active before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">An invalid date was entered</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AssetAccounts/{id}/Passwords")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsRetrievePastPasswordsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountPassword>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "An invalid date was entered")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AssetAccountsRetrievePastPasswordsAsync([FromRoute][Required]int? id, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountPassword>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"TimeStarted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TimeEnded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Password\" : \"Password\"\n}, {\n  \"TimeStarted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TimeEnded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Password\" : \"Password\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountPassword>>(exampleJson)
                        : default(List<AccountPassword>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Revokes a discovered SSH authorized key by removing it from the authorized key store on the asset for this account
        /// </summary>
        /// <param name="id">Unique ID of the account</param>
        /// <param name="fingerprint">Fingerprint of the SSH key to be removed</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">AssetAccount does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/DiscoveredSshKeys/{fingerprint}/Revoke")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsRevokeSshKeyAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsRevokeSshKeyAsync([FromRoute][Required]int? id, [FromRoute][Required]string fingerprint, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the assigned owners of this account
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="body">List of owners to assign to this account</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - Invalid owners list provided</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/AssetAccounts/{id}/ManagedBy")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsSetAssetAccountManagedByAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - Invalid owners list provided")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsSetAssetAccountManagedByAsync([FromRoute][Required]int? id, [FromBody]List<Identity> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the account password
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount to set password for</param>
        /// <param name="body">Password to set for this account. Maximum length is 1 MB.</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60027 - Invalid password provided</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetAccounts/{id}/Password")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsSetPasswordAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60027 - Invalid password provided")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsSetPasswordAsync([FromRoute][Required]int? id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Assign a specific SSH key to this account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="body">SSH key to assign to account. If no PrivateKey is provided a new key will be generated.</param>
        /// <param name="keyFormat">The format of the SSH public key (defaults to OpenSsh)&lt;br /&gt;&lt;br /&gt;              - OpenSsh - OpenSSH legacy PEM format&lt;br /&gt;              - Ssh2 - Tectia format for use with tools from SSH.com&lt;br /&gt;              - Putty - Putty format for use with PuTTY tools&lt;br /&gt;</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetAccounts/{id}/SshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsSetSshKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountSshKey), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsSetSshKeyAsync([FromRoute][Required]int? id, [FromBody]AccountSshKey body, [FromQuery]SshKeyFormat keyFormat)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccountSshKey));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Comment\" : \"Comment\",\n  \"Fingerprint\" : \"Fingerprint\",\n  \"PrivateKey\" : \"PrivateKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\",\n  \"KeyType\" : \"Unknown\",\n  \"PublicKey\" : \"PublicKey\",\n  \"Passphrase\" : \"Passphrase\",\n  \"KeyLength\" : 656\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccountSshKey>(exampleJson)
                        : default(AccountSshKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Suspend the account on the remote system
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/{id}/SuspendAccount")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsSuspendAccountAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PasswordActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(PasswordActivityLog), description: "Accepted")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsSuspendAccountAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an account&#x27;s tags
        /// </summary>
        /// <param name="id">Unique identifier of the account</param>
        /// <param name="body">List of tags to associate with the account</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Account does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetAccounts/{id}/Tags")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsUpdateAccountTagsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Tag>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsUpdateAccountTagsAsync([FromRoute][Required]int? id, [FromBody]List<Tag> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Tag>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"AdminAssigned\" : true,\n  \"Id\" : 1,\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"AdminAssigned\" : true,\n  \"Id\" : 1,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Tag>>(exampleJson)
                        : default(List<Tag>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing asset account
        /// </summary>
        /// <param name="id">Unique identifier of the AssetAccount to update</param>
        /// <param name="body">Updated AssetAccount</param>
        /// <response code="200">Success</response>
        /// <response code="400">60245 - AssetAccount was null</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">AssetAccount does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AssetAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsUpdateAssetAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetAccount), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - AssetAccount was null")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsUpdateAssetAccountAsync([FromRoute][Required]int? id, [FromBody]AssetAccount body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"TaskProperties\" : {\n    \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedRestoreAccountAttempts\" : 5,\n    \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyRevokeAttempts\" : 1,\n    \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n    \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n    \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n    \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedPasswordChangeAttempts\" : 1,\n    \"FailedSshKeyChangeAttempts\" : 6,\n    \"FailedPasswordCheckAttempts\" : 1,\n    \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n    \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n    \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n    \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSuspendAccountAttempts\" : 4,\n    \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n    \"HasAccountTaskFailure\" : true,\n    \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyCheckAttempts\" : 1,\n    \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n    \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedSshKeyDiscoveryAttempts\" : 7,\n    \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Disabled\" : true,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsServiceAccount\" : true,\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"HasSshKey\" : true,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"HasPassword\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetAccount>(exampleJson)
                        : default(AssetAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple asset account updates
        /// </summary>
        /// <param name="body">asset accounts to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AssetAccounts/BatchUpdate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AssetAccountsUpdateMultipleAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetAccountBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult AssetAccountsUpdateMultipleAccountsAsync([FromBody]List<AssetAccount> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetAccountBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Platform\" : {\n      \"PlatformFamily\" : \"None\",\n      \"DisplayName\" : \"DisplayName\",\n      \"Id\" : 6,\n      \"IsAcctNameCaseSensitive\" : true,\n      \"PlatformType\" : \"Unknown\",\n      \"SupportsSessionManagement\" : true\n    },\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 5,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 5,\n      \"Name\" : \"Name\"\n    },\n    \"CreatedByUserId\" : 6,\n    \"TaskProperties\" : {\n      \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedRestoreAccountAttempts\" : 5,\n      \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyRevokeAttempts\" : 1,\n      \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n      \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n      \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n      \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedPasswordChangeAttempts\" : 1,\n      \"FailedSshKeyChangeAttempts\" : 6,\n      \"FailedPasswordCheckAttempts\" : 1,\n      \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n      \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n      \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n      \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSuspendAccountAttempts\" : 4,\n      \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n      \"HasAccountTaskFailure\" : true,\n      \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyCheckAttempts\" : 1,\n      \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n      \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyDiscoveryAttempts\" : 7,\n      \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"SshKeySyncGroup\" : {\n      \"Priority\" : 7,\n      \"Id\" : 4,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"AltLoginName\" : \"AltLoginName\",\n    \"Asset\" : {\n      \"AssetPartitionId\" : 6,\n      \"AssetPartitionName\" : \"AssetPartitionName\",\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Disabled\" : true,\n    \"SyncGroup\" : {\n      \"Priority\" : 2,\n      \"Id\" : 3,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"Tags\" : [ {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    } ],\n    \"IsServiceAccount\" : true,\n    \"DiscoveredProperties\" : {\n      \"AccountDiscoveryScheduleId\" : 9,\n      \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n      \"DiscoveredUserId\" : \"DiscoveredUserId\",\n      \"DiscoveredGroups\" : [ {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      }, {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      } ]\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"DirectoryProperties\" : {\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\"\n    },\n    \"RequestProperties\" : {\n      \"AllowPasswordRequest\" : true,\n      \"AllowSshKeyRequest\" : true,\n      \"AllowSessionRequest\" : true\n    },\n    \"SharedServiceAccount\" : true,\n    \"HasSshKey\" : true,\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 2,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 7,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 0,\n    \"HasPassword\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"Description\" : \"Description\",\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Platform\" : {\n      \"PlatformFamily\" : \"None\",\n      \"DisplayName\" : \"DisplayName\",\n      \"Id\" : 6,\n      \"IsAcctNameCaseSensitive\" : true,\n      \"PlatformType\" : \"Unknown\",\n      \"SupportsSessionManagement\" : true\n    },\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 5,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 5,\n      \"Name\" : \"Name\"\n    },\n    \"CreatedByUserId\" : 6,\n    \"TaskProperties\" : {\n      \"LastSuccessPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedRestoreAccountAttempts\" : 5,\n      \"NextSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyRevokeAttempts\" : 1,\n      \"NextSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuspendAccountTaskId\" : \"LastSuspendAccountTaskId\",\n      \"LastFailurePasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryTaskId\" : \"LastSshKeyDiscoveryTaskId\",\n      \"LastPasswordChangeTaskId\" : \"LastPasswordChangeTaskId\",\n      \"NextSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedPasswordChangeAttempts\" : 1,\n      \"FailedSshKeyChangeAttempts\" : 6,\n      \"FailedPasswordCheckAttempts\" : 1,\n      \"LastRestoreAccountTaskId\" : \"LastRestoreAccountTaskId\",\n      \"LastSuccessPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckTaskId\" : \"LastPasswordCheckTaskId\",\n      \"LastPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailurePasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeTaskId\" : \"LastSshKeyChangeTaskId\",\n      \"LastSuccessSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextPasswordChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"NextSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSuspendAccountAttempts\" : 4,\n      \"LastFailureSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyRevokeTaskId\" : \"LastSshKeyRevokeTaskId\",\n      \"HasAccountTaskFailure\" : true,\n      \"NextPasswordCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyCheckAttempts\" : 1,\n      \"NextRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSshKeyCheckTaskId\" : \"LastSshKeyCheckTaskId\",\n      \"LastSuccessSshKeyCheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastSuccessSshKeyRevokeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"FailedSshKeyDiscoveryAttempts\" : 7,\n      \"LastSuccessSuspendAccountDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"LastFailureRestoreAccountDate\" : \"2000-01-23T04:56:07.000+00:00\"\n    },\n    \"SshKeySyncGroup\" : {\n      \"Priority\" : 7,\n      \"Id\" : 4,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"AltLoginName\" : \"AltLoginName\",\n    \"Asset\" : {\n      \"AssetPartitionId\" : 6,\n      \"AssetPartitionName\" : \"AssetPartitionName\",\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Disabled\" : true,\n    \"SyncGroup\" : {\n      \"Priority\" : 2,\n      \"Id\" : 3,\n      \"Disabled\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"Tags\" : [ {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"AdminAssigned\" : true,\n      \"Id\" : 1,\n      \"Name\" : \"Name\"\n    } ],\n    \"IsServiceAccount\" : true,\n    \"DiscoveredProperties\" : {\n      \"AccountDiscoveryScheduleId\" : 9,\n      \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n      \"DiscoveredUserId\" : \"DiscoveredUserId\",\n      \"DiscoveredGroups\" : [ {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      }, {\n        \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n        \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n        \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n      } ]\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"DirectoryProperties\" : {\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\"\n    },\n    \"RequestProperties\" : {\n      \"AllowPasswordRequest\" : true,\n      \"AllowSshKeyRequest\" : true,\n      \"AllowSessionRequest\" : true\n    },\n    \"SharedServiceAccount\" : true,\n    \"HasSshKey\" : true,\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 2,\n      \"EffectiveName\" : \"EffectiveName\",\n      \"EffectiveId\" : 7,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 0,\n    \"HasPassword\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetAccountBatchResponse>>(exampleJson)
                        : default(List<AssetAccountBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
