/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RolesApiController : ControllerBase
    { 
        /// <summary>
        /// Checks if the current name is unique prior to create/update
        /// </summary>
        /// <param name="id">Unique identifier of the role</param>
        /// <param name="body">Parameters for checking for unique name</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Role not found</response>
        [HttpPost]
        [Route("/service/core/v4/Roles/{id}/CheckUniquePolicyName")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesCheckUniquePolicyNameAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesCheckUniquePolicyNameAsync([FromRoute][Required]int? id, [FromBody]UniqueNameParameters body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new role
        /// </summary>
        /// <param name="body">Role to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Role not found</response>
        [HttpPost]
        [Route("/service/core/v4/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesCreateEntityAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(Role), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesCreateEntityAsync([FromBody]Role body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Role));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"IsExpired\" : true,\n  \"Description\" : \"Description\",\n  \"Priority\" : 6,\n  \"UserCount\" : 5,\n  \"AssetCount\" : 2,\n  \"HasInvalidPolicies\" : true,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"PolicyCount\" : 7,\n  \"HasExpiredPolicies\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Role>(exampleJson)
                        : default(Role);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an application role
        /// </summary>
        /// <param name="id">Unique identifier of the Role</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Roles/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesDeleteAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a list of roles
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Role>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult RolesGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Role>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsExpired\" : true,\n  \"Description\" : \"Description\",\n  \"Priority\" : 6,\n  \"UserCount\" : 5,\n  \"AssetCount\" : 2,\n  \"HasInvalidPolicies\" : true,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"PolicyCount\" : 7,\n  \"HasExpiredPolicies\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}, {\n  \"IsExpired\" : true,\n  \"Description\" : \"Description\",\n  \"Priority\" : 6,\n  \"UserCount\" : 5,\n  \"AssetCount\" : 2,\n  \"HasInvalidPolicies\" : true,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"PolicyCount\" : 7,\n  \"HasExpiredPolicies\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Role>>(exampleJson)
                        : default(List<Role>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a role
        /// </summary>
        /// <param name="id">Unique ID of Role</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Role not found</response>
        [HttpGet]
        [Route("/service/core/v4/Roles/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Role), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult RolesGetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Role));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"IsExpired\" : true,\n  \"Description\" : \"Description\",\n  \"Priority\" : 6,\n  \"UserCount\" : 5,\n  \"AssetCount\" : 2,\n  \"HasInvalidPolicies\" : true,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"PolicyCount\" : 7,\n  \"HasExpiredPolicies\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Role>(exampleJson)
                        : default(Role);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the membership included in the role
        /// </summary>
        /// <param name="id">Unique identifier of the Role</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">No members found</response>
        [HttpGet]
        [Route("/service/core/v4/Roles/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesGetMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult RolesGetMembersAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the policies of the role
        /// </summary>
        /// <param name="id">Unique identifier of the Role</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Role not found</response>
        [HttpGet]
        [Route("/service/core/v4/Roles/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesGetPasswordPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult RolesGetPasswordPoliciesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}, {\n  \"Description\" : \"Description\",\n  \"ApproverProperties\" : {\n    \"RequireApproval\" : true,\n    \"PendingApprovalEscalationEnabled\" : true,\n    \"PendingApprovalDurationBeforeEscalationDays\" : 22435,\n    \"PendingApprovalDurationBeforeEscalationHours\" : 17,\n    \"PendingApprovalDurationBeforeEscalationMinutes\" : 6\n  },\n  \"RequesterProperties\" : {\n    \"RequireServiceTicket\" : false,\n    \"DefaultReleaseDurationMinutes\" : 43,\n    \"DefaultReleaseDurationDays\" : 6,\n    \"DefaultReleaseDurationHours\" : 9,\n    \"MaximumReleaseDurationMinutes\" : 8,\n    \"AllowCustomDuration\" : false,\n    \"MaximumReleaseDurationDays\" : 3,\n    \"RequireReasonComment\" : false,\n    \"MaximumReleaseDurationHours\" : 2,\n    \"RequireReasonCode\" : false\n  },\n  \"InvalidConnectionPolicy\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 3,\n  \"EmergencyAccessProperties\" : {\n    \"IgnoreHourlyRestrictions\" : true,\n    \"AllowEmergencyAccess\" : false\n  },\n  \"ReviewerProperties\" : {\n    \"PendingReviewDurationBeforeEscalationHours\" : 22,\n    \"RequireReviewerComment\" : false,\n    \"AllowSubsequentAccessRequestsWithoutReview\" : false,\n    \"PendingReviewEscalationEnabled\" : true,\n    \"PendingReviewDurationBeforeEscalationMinutes\" : 55,\n    \"RequiredReviewers\" : 1066272551,\n    \"PendingReviewDurationBeforeEscalationDays\" : 16465\n  },\n  \"ApproverSets\" : [ {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  }, {\n    \"RequiredApprovers\" : 190081825,\n    \"Approvers\" : [ {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 6,\n      \"PrincipalKind\" : \"Unknown\",\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 7,\n      \"IdentityProviderTypeReferenceName\" : \"Unknown\",\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ]\n  } ],\n  \"ScopeItems\" : [ {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  }, {\n    \"Description\" : \"Description\",\n    \"ScopeItemType\" : \"Asset\",\n    \"AccountGroup\" : {\n      \"CreatedByUserId\" : 3,\n      \"Description\" : \"Description\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 3,\n      \"GroupingRule\" : {\n        \"RuleConditionGroup\" : {\n          \"Children\" : [ {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          }, {\n            \"TaggingGroupingCondition\" : {\n              \"CompareValue\" : \"CompareValue\",\n              \"CompareType\" : \"EqualTo\",\n              \"ObjectAttribute\" : \"Name\"\n            }\n          } ],\n          \"LogicalJoinType\" : \"And\"\n        },\n        \"Description\" : \"Description\",\n        \"Enabled\" : true\n      },\n      \"IsDynamic\" : true,\n      \"Accounts\" : [ null, null ],\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Name\" : \"Name\",\n    \"AssetGroup\" : {\n      \"CreatedByUserId\" : 5,\n      \"Description\" : \"Description\",\n      \"Assets\" : [ null, null ],\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"Id\" : 7,\n      \"IsDynamic\" : true,\n      \"Name\" : \"Name\"\n    }\n  } ],\n  \"ReasonCodes\" : [ {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  } ],\n  \"AccountGroupCount\" : 7,\n  \"AssetGroupCount\" : 9,\n  \"IsExpired\" : true,\n  \"Priority\" : 1280358508,\n  \"AssetCount\" : 2,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 6,\n  \"NotificationContacts\" : [ {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  }, {\n    \"ContactAddress\" : \"ContactAddress\",\n    \"ContactType\" : \"ReleaseWithoutApproval\"\n  } ],\n  \"AccessRequestProperties\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"ChangeSshKeyAfterCheckin\" : true,\n    \"AllowLinkedAccountPasswordAccess\" : false,\n    \"SessionAccessAccountType\" : \"None\",\n    \"LinkedAccountScopeFiltering\" : false,\n    \"AllowSessionPasswordRelease\" : false,\n    \"UseAltLoginName\" : false,\n    \"SessionAccessAccounts\" : [ {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    }, {\n      \"IsServiceAccount\" : true,\n      \"Description\" : \"Description\",\n      \"Platform\" : {\n        \"PlatformFamily\" : \"None\",\n        \"DisplayName\" : \"DisplayName\",\n        \"Id\" : 6,\n        \"IsAcctNameCaseSensitive\" : true,\n        \"PlatformType\" : \"Unknown\",\n        \"SupportsSessionManagement\" : true\n      },\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"LinkedUsersCount\" : 9,\n      \"RequestProperties\" : {\n        \"AllowPasswordRequest\" : true,\n        \"AllowSshKeyRequest\" : true,\n        \"AllowSessionRequest\" : true\n      },\n      \"AccountType\" : \"Asset\",\n      \"Name\" : \"Name\",\n      \"NotifyOwnersOnly\" : true,\n      \"HasSshKey\" : true,\n      \"SuspendAccountWhenCheckedIn\" : true,\n      \"AltLoginName\" : \"AltLoginName\",\n      \"Asset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Id\" : 3,\n        \"Name\" : \"Name\"\n      },\n      \"NetBiosName\" : \"NetBiosName\",\n      \"Id\" : 8,\n      \"Disabled\" : true,\n      \"HasPassword\" : true\n    } ],\n    \"AllowSessionSshKeyRelease\" : false,\n    \"TerminateExpiredSessions\" : false,\n    \"MaximumSimultaneousReleases\" : 66,\n    \"ChangePasswordAfterCheckin\" : true,\n    \"PassphraseProtectSshKey\" : true,\n    \"AllowSimultaneousAccess\" : false\n  },\n  \"RoleName\" : \"RoleName\",\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"RolePriority\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Reviewers\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessPolicy>>(exampleJson)
                        : default(List<AccessPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the policy priorities assigned to this role
        /// </summary>
        /// <param name="id">Unique identifier of the Role</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Roles/{id}/PolicyPriorities")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesGetPolicyPrioritiesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Priority>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult RolesGetPolicyPrioritiesAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Priority>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : 6,\n  \"Id\" : 0\n}, {\n  \"Value\" : 6,\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Priority>>(exampleJson)
                        : default(List<Priority>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the role priorities
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Roles/Priorities")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesGetRolePrioritiesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Priority>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult RolesGetRolePrioritiesAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Priority>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : 6,\n  \"Id\" : 0\n}, {\n  \"Value\" : 6,\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Priority>>(exampleJson)
                        : default(List<Priority>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove accounts assigned to this group
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Accounts to assign to the AccountGroup</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">No members found</response>
        [HttpPost]
        [Route("/service/core/v4/Roles/{id}/Members/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesModifyMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesModifyMembersAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<Identity> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the accounts assigned to this group
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="body">Accounts to assign to the AccountGroup</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">No members found</response>
        [HttpPut]
        [Route("/service/core/v4/Roles/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesSetMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Identity>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesSetMembersAsync([FromRoute][Required]int? id, [FromBody]List<Identity> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Identity>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"IdentityProviderId\" : 4,\n  \"FullDisplayName\" : \"FullDisplayName\",\n  \"DomainName\" : \"DomainName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"IdentityProviderName\" : \"IdentityProviderName\",\n  \"Id\" : 0,\n  \"EmailAddress\" : \"EmailAddress\",\n  \"IsSystemOwned\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Identity>>(exampleJson)
                        : default(List<Identity>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the priorities of a list of policies for a given role. All policies belonging to the specified role must  be included.
        /// </summary>
        /// <param name="id">Unique identifier of the role</param>
        /// <param name="body">Set the priorities of the policies in the specified role</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Role not found</response>
        [HttpPut]
        [Route("/service/core/v4/Roles/{id}/PolicyPriorities")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesSetPolicyPrioritiesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Priority>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesSetPolicyPrioritiesAsync([FromRoute][Required]int? id, [FromBody]List<Priority> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Priority>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : 6,\n  \"Id\" : 0\n}, {\n  \"Value\" : 6,\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Priority>>(exampleJson)
                        : default(List<Priority>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates all role priorities. All roles must be included.
        /// </summary>
        /// <param name="body">Priorities of all roles</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/Roles/Priorities")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesSetRolePrioritiesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Priority>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesSetRolePrioritiesAsync([FromBody]List<Priority> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Priority>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : 6,\n  \"Id\" : 0\n}, {\n  \"Value\" : 6,\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Priority>>(exampleJson)
                        : default(List<Priority>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing application role
        /// </summary>
        /// <param name="id">Unique identifier of the Role</param>
        /// <param name="body">Updated Role</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Role does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Roles/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("RolesUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Role), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult RolesUpdateEntityAsync([FromRoute][Required]int? id, [FromBody]Role body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Role));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"IsExpired\" : true,\n  \"Description\" : \"Description\",\n  \"Priority\" : 6,\n  \"UserCount\" : 5,\n  \"AssetCount\" : 2,\n  \"HasInvalidPolicies\" : true,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"PolicyCount\" : 7,\n  \"HasExpiredPolicies\" : true,\n  \"AccountCount\" : 5,\n  \"Name\" : \"Name\",\n  \"CreatedByUserId\" : 1,\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Role>(exampleJson)
                        : default(Role);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
