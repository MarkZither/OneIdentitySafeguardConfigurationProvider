/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LoginMessageApiController : ControllerBase
    { 
        /// <summary>
        /// Gets the Login Message
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/LoginMessage")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("LoginMessageGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(LoginMessage), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult LoginMessageGetAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LoginMessage));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Message\" : \"Message\",\n  \"UpdatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"UpdatedByUserId\" : 0,\n  \"UpdatedByUserDisplayName\" : \"UpdatedByUserDisplayName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<LoginMessage>(exampleJson)
                        : default(LoginMessage);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the Login Message
        /// </summary>
        /// <param name="body">Updated Login Message</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/LoginMessage")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("LoginMessageUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(LoginMessage), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult LoginMessageUpdateEntityAsync([FromBody]LoginMessage body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LoginMessage));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Message\" : \"Message\",\n  \"UpdatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"UpdatedByUserId\" : 0,\n  \"UpdatedByUserDisplayName\" : \"UpdatedByUserDisplayName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<LoginMessage>(exampleJson)
                        : default(LoginMessage);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
