/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MeApiController : ControllerBase
    { 
        /// <summary>
        /// Adds a new personal account
        /// </summary>
        /// <param name="body">PersonalAccount to add</param>
        /// <response code="201">Created</response>
        /// <response code="400">60786 - Primary appliance is unavailable</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/service/core/v4/Me/PersonalAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeAddPersonalAccountAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(PersonalAccount), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60786 - Primary appliance is unavailable")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeAddPersonalAccountAsync([FromBody]PersonalAccount body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PersonalAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PersonalAccount>(exampleJson)
                        : default(PersonalAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Changes the local user&#x27;s password. Requires that you know the user&#x27;s current password
        /// </summary>
        /// <param name="body">Current password and the new password to set</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpPut]
        [Route("/service/core/v4/Me/Password")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeChangeMyPasswordAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeChangeMyPasswordAsync([FromBody]ChangePasswordParameters body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Creates an UserRequestFavorite
        /// </summary>
        /// <param name="body">UserRequestFavorite to create</param>
        /// <response code="200">Success</response>
        /// <response code="201">Created</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">UserRequestFavorite does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Me/RequestFavorites")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeCreateRequestFavoriteAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserRequestFavorite), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeCreateRequestFavoriteAsync([FromBody]UserRequestFavorite body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserRequestFavorite));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Category\" : 171976544,\n  \"Id\" : \"Id\",\n  \"Requests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserRequestFavorite>(exampleJson)
                        : default(UserRequestFavorite);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new scheduled audit log search report
        /// </summary>
        /// <param name="body">Scheduled report to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">60145 - Only API version 3 properties are supported for audit log reports.</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Me/ScheduledAuditLogReports")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeCreateScheduledAuditLogSearchReportAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(ScheduledAuditLogReport), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60145 - Only API version 3 properties are supported for audit log reports.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeCreateScheduledAuditLogSearchReportAsync([FromBody]ScheduledAuditLogReport body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ScheduledAuditLogReport));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ScheduleType\" : \"Never\",\n  \"Description\" : \"Description\",\n  \"StartHour\" : 12,\n  \"UserIdOption\" : 7,\n  \"AccountIdOption\" : 3,\n  \"FilterOption\" : \"FilterOption\",\n  \"Name\" : \"Name\",\n  \"TimeOfDayIntervals\" : [ {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  }, {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  } ],\n  \"AssetIdOptionName\" : \"AssetIdOptionName\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"UserIdOptionDisplayName\" : \"UserIdOptionDisplayName\",\n  \"QueryStringOption\" : \"QueryStringOption\",\n  \"CreatedByUserId\" : 6,\n  \"OrderbyOption\" : \"OrderbyOption\",\n  \"SerializationFormat\" : \"Json\",\n  \"RepeatDayOfMonth\" : 18,\n  \"CategoryOption\" : \"Unknown\",\n  \"NextScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartMinute\" : 13,\n  \"FieldsOption\" : \"FieldsOption\",\n  \"EndDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatDaysOfWeek\" : [ null, null ],\n  \"RepeatDayOfWeek\" : \"Sunday\",\n  \"LastScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatWeekOfMonth\" : \"First\",\n  \"DateRangeType\" : \"None\",\n  \"AccountIdOptionName\" : \"AccountIdOptionName\",\n  \"LimitOption\" : 4,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"IncludeDetailsOption\" : true,\n  \"CountOption\" : true,\n  \"Id\" : 0,\n  \"TimeOfDayType\" : \"Instant\",\n  \"PageOption\" : 2,\n  \"RepeatMonthlyScheduleType\" : \"DayOfMonth\",\n  \"AssetIdOption\" : 9,\n  \"RepeatInterval\" : 314780941\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ScheduledAuditLogReport>(exampleJson)
                        : default(ScheduledAuditLogReport);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes a FIDO2 authenticator from the current user
        /// </summary>
        /// <remarks>After registering your first authenticator, you must always have at least one.  In other words, you cannot delete              all of the authenticators (this can, however, be done by an administrator).  In order to delete your last authenticator,              you must first register a new one, such that you have two.  Then you can choose to delete your previous authenticator.</remarks>
        /// <param name="credentialId">Unique, opaque identifier of the authenticator, in Base64Url encoded format</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/Fido2Authenticators/{credentialId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDeleteFido2AuthenticatorAsync")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeDeleteFido2AuthenticatorAsync([FromRoute][Required]string credentialId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes current user photo
        /// </summary>
        /// <response code="204">Success - No Content</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/Photo")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDeleteMyPhotoAsync")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeDeleteMyPhotoAsync()
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes a preference for the current user
        /// </summary>
        /// <param name="name">Unique identifier of the UserPreference</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/Preferences/{name}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDeleteMyPreferenceAsync")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeDeleteMyPreferenceAsync([FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove a personal account
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60786 - Primary appliance is unavailable</response>
        /// <response code="401">Unauthorized</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDeletePersonalAccountAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60786 - Primary appliance is unavailable")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeDeletePersonalAccountAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes an UserRequestFavorite
        /// </summary>
        /// <param name="favoriteId">Unique identifier of the UserRequestFavorite</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/RequestFavorites/{favoriteId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDeleteRequestFavoriteAsync")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeDeleteRequestFavoriteAsync([FromRoute][Required]string favoriteId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes a scheduled audit log search report
        /// </summary>
        /// <param name="id">Unique identifier of the scheduled audit log search report</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/ScheduledAuditLogReports/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDeleteScheduledAuditLogReportAsync")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeDeleteScheduledAuditLogReportAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Disable event subscriber for the current user
        /// </summary>
        /// <param name="id">Unique identifier of the Subscribers</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Audit log report does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Me/Subscribers/{id}/Disable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDisableMySubscriberAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(MyEventSubscriber), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeDisableMySubscriberAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MyEventSubscriber));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MyEventSubscriber>(exampleJson)
                        : default(MyEventSubscriber);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Disable event subscribers for the current user
        /// </summary>
        /// <param name="body">Unique identifier of the Subscribers</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Me/Subscribers/Disable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeDisableSubscribersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MyEventSubscriber>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeDisableSubscribersAsync([FromBody]List<int?> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MyEventSubscriber>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<MyEventSubscriber>>(exampleJson)
                        : default(List<MyEventSubscriber>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enable event subscriber for the current user
        /// </summary>
        /// <param name="id">Unique identifier of the Subscribers</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Audit log report does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Me/Subscribers/{id}/Enable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeEnableMySubscriberAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(MyEventSubscriber), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeEnableMySubscriberAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MyEventSubscriber));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MyEventSubscriber>(exampleJson)
                        : default(MyEventSubscriber);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enable event subscribers for the current user
        /// </summary>
        /// <param name="body">Unique identifier of the Subscribers</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Me/Subscribers/Enable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeEnableSubscribersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MyEventSubscriber>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeEnableSubscribersAsync([FromBody]List<int?> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MyEventSubscriber>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<MyEventSubscriber>>(exampleJson)
                        : default(List<MyEventSubscriber>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Executes the audit log search using saved report configuration
        /// </summary>
        /// <param name="id">Scheduled report to execute</param>
        /// <response code="200">Report has been successfully generated</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Me/ScheduledAuditLogReports/{id}/Execute")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeExecuteScheduledAuditLogReportAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AuditSearchLog>), description: "Report has been successfully generated")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeExecuteScheduledAuditLogReportAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AuditSearchLog>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Category\" : \"Unknown\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"LicenseType\" : \"PasswordManagement\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"ErrorType\" : \"NoError\",\n  \"RequesterName\" : \"RequesterName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 6,\n  \"AssetPartitionId\" : 2,\n  \"RequestId\" : \"RequestId\",\n  \"ObjectId\" : \"ObjectId\",\n  \"RequesterId\" : 1,\n  \"Data\" : \"Data\",\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"TaskName\" : \"Unknown\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Category\" : \"Unknown\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"LicenseType\" : \"PasswordManagement\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"ErrorType\" : \"NoError\",\n  \"RequesterName\" : \"RequesterName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 6,\n  \"AssetPartitionId\" : 2,\n  \"RequestId\" : \"RequestId\",\n  \"ObjectId\" : \"ObjectId\",\n  \"RequesterId\" : 1,\n  \"Data\" : \"Data\",\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"TaskName\" : \"Unknown\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AuditSearchLog>>(exampleJson)
                        : default(List<AuditSearchLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Generates a new personal account password
        /// </summary>
        /// <param name="body">Personal account password generation rules</param>
        /// <response code="200">Ok</response>
        /// <response code="201">Success</response>
        /// <response code="400">60783 - Failed to generate a password</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/service/core/v4/Me/PersonalAccounts/GeneratePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGeneratePersonalAccountPasswordAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60783 - Failed to generate a password")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeGeneratePersonalAccountPasswordAsync([FromBody]PersonalAccountPasswordRule body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a specific asset that can be requested by the specified user
        /// </summary>
        /// <param name="assetId">Unique identifier of the asset</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/AccessRequestAssets/{assetId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetAccessRequestAssetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PolicyAsset), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetAccessRequestAssetAsync([FromRoute][Required]int? assetId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PolicyAsset));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PolicyAsset>(exampleJson)
                        : default(PolicyAsset);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of assets that have accounts requestable by the specified user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Me/AccessRequestAssets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetAccessRequestAssetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetAccessRequestAssetsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAsset>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"AssetPartitionId\" : 6,\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"AssetType\" : \"NotSpecified\",\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"Platform\" : {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 5,\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"Id\" : 6,\n  \"Disabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAsset>>(exampleJson)
                        : default(List<PolicyAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the entitlements for the current user
        /// </summary>
        /// <param name="accessRequestType">Only report on access via a specific request type</param>
        /// <param name="assetIds">List of asset IDs to get entitlements for (preferred over filter)</param>
        /// <param name="accountIds">List of account IDs to get entitlements for (preferred over filter)</param>
        /// <param name="includeActiveRequests">Whether to include information about active requests for same account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/RequestEntitlements")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetAccessRequestEntitlementsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MeEntitlement>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetAccessRequestEntitlementsAsync([FromQuery]AccessRequestType accessRequestType, [FromQuery]string assetIds, [FromQuery]string accountIds, [FromQuery]bool? includeActiveRequests, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MeEntitlement>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Policy\" : {\n    \"AccessRequestProperties\" : {\n      \"AccessRequestType\" : \"Password\",\n      \"ChangeSshKeyAfterCheckin\" : true,\n      \"AllowLinkedAccountPasswordAccess\" : false,\n      \"SessionAccessAccountType\" : \"None\",\n      \"LinkedAccountScopeFiltering\" : false,\n      \"AllowSessionPasswordRelease\" : false,\n      \"UseAltLoginName\" : false,\n      \"SessionAccessAccounts\" : [ {\n        \"IsServiceAccount\" : true,\n        \"Description\" : \"Description\",\n        \"Platform\" : {\n          \"PlatformFamily\" : \"None\",\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 6,\n          \"IsAcctNameCaseSensitive\" : true,\n          \"PlatformType\" : \"Unknown\",\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"LinkedUsersCount\" : 9,\n        \"RequestProperties\" : {\n          \"AllowPasswordRequest\" : true,\n          \"AllowSshKeyRequest\" : true,\n          \"AllowSessionRequest\" : true\n        },\n        \"AccountType\" : \"Asset\",\n        \"Name\" : \"Name\",\n        \"NotifyOwnersOnly\" : true,\n        \"HasSshKey\" : true,\n        \"SuspendAccountWhenCheckedIn\" : true,\n        \"AltLoginName\" : \"AltLoginName\",\n        \"Asset\" : {\n          \"AssetPartitionId\" : 6,\n          \"AssetPartitionName\" : \"AssetPartitionName\",\n          \"NetworkAddress\" : \"NetworkAddress\",\n          \"Id\" : 3,\n          \"Name\" : \"Name\"\n        },\n        \"NetBiosName\" : \"NetBiosName\",\n        \"Id\" : 8,\n        \"Disabled\" : true,\n        \"HasPassword\" : true\n      }, {\n        \"IsServiceAccount\" : true,\n        \"Description\" : \"Description\",\n        \"Platform\" : {\n          \"PlatformFamily\" : \"None\",\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 6,\n          \"IsAcctNameCaseSensitive\" : true,\n          \"PlatformType\" : \"Unknown\",\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"LinkedUsersCount\" : 9,\n        \"RequestProperties\" : {\n          \"AllowPasswordRequest\" : true,\n          \"AllowSshKeyRequest\" : true,\n          \"AllowSessionRequest\" : true\n        },\n        \"AccountType\" : \"Asset\",\n        \"Name\" : \"Name\",\n        \"NotifyOwnersOnly\" : true,\n        \"HasSshKey\" : true,\n        \"SuspendAccountWhenCheckedIn\" : true,\n        \"AltLoginName\" : \"AltLoginName\",\n        \"Asset\" : {\n          \"AssetPartitionId\" : 6,\n          \"AssetPartitionName\" : \"AssetPartitionName\",\n          \"NetworkAddress\" : \"NetworkAddress\",\n          \"Id\" : 3,\n          \"Name\" : \"Name\"\n        },\n        \"NetBiosName\" : \"NetBiosName\",\n        \"Id\" : 8,\n        \"Disabled\" : true,\n        \"HasPassword\" : true\n      } ],\n      \"AllowSessionSshKeyRelease\" : false,\n      \"TerminateExpiredSessions\" : false,\n      \"MaximumSimultaneousReleases\" : 66,\n      \"ChangePasswordAfterCheckin\" : true,\n      \"PassphraseProtectSshKey\" : true,\n      \"AllowSimultaneousAccess\" : false\n    },\n    \"RolePriority\" : 2,\n    \"EffectiveHourlyRestrictionProperties\" : {\n      \"EnableHourlyRestrictions\" : false,\n      \"ThursdayValidHours\" : [ 6, 6 ],\n      \"WednesdayValidHours\" : [ 0, 0 ],\n      \"SaturdayValidHours\" : [ 1, 1 ],\n      \"TuesdayValidHours\" : [ 4, 4 ],\n      \"MondayValidHours\" : [ 3, 3 ],\n      \"FridayValidHours\" : [ 4, 4 ],\n      \"SundayValidHours\" : [ 4, 4 ]\n    },\n    \"Priority\" : 5,\n    \"EmergencyAccessProperties\" : {\n      \"IgnoreHourlyRestrictions\" : true,\n      \"AllowEmergencyAccess\" : false\n    },\n    \"EffectiveExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequesterProperties\" : {\n      \"RequireServiceTicket\" : false,\n      \"DefaultReleaseDurationMinutes\" : 43,\n      \"DefaultReleaseDurationDays\" : 6,\n      \"DefaultReleaseDurationHours\" : 9,\n      \"MaximumReleaseDurationMinutes\" : 8,\n      \"AllowCustomDuration\" : false,\n      \"MaximumReleaseDurationDays\" : 3,\n      \"RequireReasonComment\" : false,\n      \"MaximumReleaseDurationHours\" : 2,\n      \"RequireReasonCode\" : false\n    },\n    \"Id\" : 5,\n    \"Name\" : \"Name\",\n    \"ReasonCodes\" : [ {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    } ]\n  },\n  \"Account\" : {\n    \"Description\" : \"Description\",\n    \"DomainName\" : \"DomainName\",\n    \"AllowSshKeyRequest\" : true,\n    \"AssetName\" : \"AssetName\",\n    \"Name\" : \"Name\",\n    \"AllowSessionRequest\" : true,\n    \"AllowPasswordRequest\" : true,\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"HasSshKey\" : true,\n    \"Id\" : 0,\n    \"Disabled\" : true,\n    \"HasPassword\" : true,\n    \"AssetId\" : 6\n  },\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"Asset\" : {\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"Description\" : \"Description\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"DomainName\" : \"DomainName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"Name\" : \"Name\"\n  }\n}, {\n  \"Policy\" : {\n    \"AccessRequestProperties\" : {\n      \"AccessRequestType\" : \"Password\",\n      \"ChangeSshKeyAfterCheckin\" : true,\n      \"AllowLinkedAccountPasswordAccess\" : false,\n      \"SessionAccessAccountType\" : \"None\",\n      \"LinkedAccountScopeFiltering\" : false,\n      \"AllowSessionPasswordRelease\" : false,\n      \"UseAltLoginName\" : false,\n      \"SessionAccessAccounts\" : [ {\n        \"IsServiceAccount\" : true,\n        \"Description\" : \"Description\",\n        \"Platform\" : {\n          \"PlatformFamily\" : \"None\",\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 6,\n          \"IsAcctNameCaseSensitive\" : true,\n          \"PlatformType\" : \"Unknown\",\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"LinkedUsersCount\" : 9,\n        \"RequestProperties\" : {\n          \"AllowPasswordRequest\" : true,\n          \"AllowSshKeyRequest\" : true,\n          \"AllowSessionRequest\" : true\n        },\n        \"AccountType\" : \"Asset\",\n        \"Name\" : \"Name\",\n        \"NotifyOwnersOnly\" : true,\n        \"HasSshKey\" : true,\n        \"SuspendAccountWhenCheckedIn\" : true,\n        \"AltLoginName\" : \"AltLoginName\",\n        \"Asset\" : {\n          \"AssetPartitionId\" : 6,\n          \"AssetPartitionName\" : \"AssetPartitionName\",\n          \"NetworkAddress\" : \"NetworkAddress\",\n          \"Id\" : 3,\n          \"Name\" : \"Name\"\n        },\n        \"NetBiosName\" : \"NetBiosName\",\n        \"Id\" : 8,\n        \"Disabled\" : true,\n        \"HasPassword\" : true\n      }, {\n        \"IsServiceAccount\" : true,\n        \"Description\" : \"Description\",\n        \"Platform\" : {\n          \"PlatformFamily\" : \"None\",\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 6,\n          \"IsAcctNameCaseSensitive\" : true,\n          \"PlatformType\" : \"Unknown\",\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"LinkedUsersCount\" : 9,\n        \"RequestProperties\" : {\n          \"AllowPasswordRequest\" : true,\n          \"AllowSshKeyRequest\" : true,\n          \"AllowSessionRequest\" : true\n        },\n        \"AccountType\" : \"Asset\",\n        \"Name\" : \"Name\",\n        \"NotifyOwnersOnly\" : true,\n        \"HasSshKey\" : true,\n        \"SuspendAccountWhenCheckedIn\" : true,\n        \"AltLoginName\" : \"AltLoginName\",\n        \"Asset\" : {\n          \"AssetPartitionId\" : 6,\n          \"AssetPartitionName\" : \"AssetPartitionName\",\n          \"NetworkAddress\" : \"NetworkAddress\",\n          \"Id\" : 3,\n          \"Name\" : \"Name\"\n        },\n        \"NetBiosName\" : \"NetBiosName\",\n        \"Id\" : 8,\n        \"Disabled\" : true,\n        \"HasPassword\" : true\n      } ],\n      \"AllowSessionSshKeyRelease\" : false,\n      \"TerminateExpiredSessions\" : false,\n      \"MaximumSimultaneousReleases\" : 66,\n      \"ChangePasswordAfterCheckin\" : true,\n      \"PassphraseProtectSshKey\" : true,\n      \"AllowSimultaneousAccess\" : false\n    },\n    \"RolePriority\" : 2,\n    \"EffectiveHourlyRestrictionProperties\" : {\n      \"EnableHourlyRestrictions\" : false,\n      \"ThursdayValidHours\" : [ 6, 6 ],\n      \"WednesdayValidHours\" : [ 0, 0 ],\n      \"SaturdayValidHours\" : [ 1, 1 ],\n      \"TuesdayValidHours\" : [ 4, 4 ],\n      \"MondayValidHours\" : [ 3, 3 ],\n      \"FridayValidHours\" : [ 4, 4 ],\n      \"SundayValidHours\" : [ 4, 4 ]\n    },\n    \"Priority\" : 5,\n    \"EmergencyAccessProperties\" : {\n      \"IgnoreHourlyRestrictions\" : true,\n      \"AllowEmergencyAccess\" : false\n    },\n    \"EffectiveExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequesterProperties\" : {\n      \"RequireServiceTicket\" : false,\n      \"DefaultReleaseDurationMinutes\" : 43,\n      \"DefaultReleaseDurationDays\" : 6,\n      \"DefaultReleaseDurationHours\" : 9,\n      \"MaximumReleaseDurationMinutes\" : 8,\n      \"AllowCustomDuration\" : false,\n      \"MaximumReleaseDurationDays\" : 3,\n      \"RequireReasonComment\" : false,\n      \"MaximumReleaseDurationHours\" : 2,\n      \"RequireReasonCode\" : false\n    },\n    \"Id\" : 5,\n    \"Name\" : \"Name\",\n    \"ReasonCodes\" : [ {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    } ]\n  },\n  \"Account\" : {\n    \"Description\" : \"Description\",\n    \"DomainName\" : \"DomainName\",\n    \"AllowSshKeyRequest\" : true,\n    \"AssetName\" : \"AssetName\",\n    \"Name\" : \"Name\",\n    \"AllowSessionRequest\" : true,\n    \"AllowPasswordRequest\" : true,\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"HasSshKey\" : true,\n    \"Id\" : 0,\n    \"Disabled\" : true,\n    \"HasPassword\" : true,\n    \"AssetId\" : 6\n  },\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"Asset\" : {\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"Description\" : \"Description\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"DomainName\" : \"DomainName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"Name\" : \"Name\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<MeEntitlement>>(exampleJson)
                        : default(List<MeEntitlement>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all requests that the current user can perform an action on
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/ActionableRequests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetActionableRequestsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ActionableAccessRequests), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetActionableRequestsAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ActionableAccessRequests));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Requester\" : [ null, null ],\n  \"Approver\" : [ null, null ],\n  \"Admin\" : [ {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  }, {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  } ],\n  \"Reviewer\" : [ null, null ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ActionableAccessRequests>(exampleJson)
                        : default(ActionableAccessRequests);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all requests that the current user can perform an action on
        /// </summary>
        /// <param name="accessRequestRole">Return results based on user&#x27;s access request role, i.e. Requester, Approver, Reviewer, Admin</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Me/ActionableRequests/{accessRequestRole}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetActionableRequestsByRequestRoleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequest>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetActionableRequestsByRequestRoleAsync([FromRoute][Required]AccessRequestRole accessRequestRole, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequest>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}, {\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequest>>(exampleJson)
                        : default(List<AccessRequest>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all requests belonging to the specified request favorite
        /// </summary>
        /// <param name="favoriteId">Unique ID of the request favorite</param>
        /// <param name="includeActiveRequests">Whether to include information about active requests for same account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">UserRequestFavorite does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Me/RequestFavorites/{favoriteId}/Requests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetFavoriteRequestsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SavedAccessRequest>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetFavoriteRequestsAsync([FromRoute][Required]string favoriteId, [FromQuery]bool? includeActiveRequests, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SavedAccessRequest>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"AccountId\" : 1,\n  \"ReasonComment\" : \"ReasonComment\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"RequestedDurationHours\" : 7,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"ReasonCodeId\" : 5,\n  \"AccountAssetId\" : 5,\n  \"AssetPlatformType\" : \"Unknown\",\n  \"RequestedDurationMinutes\" : 9,\n  \"IsEmergency\" : true,\n  \"AssetId\" : 6,\n  \"RequestedDurationDays\" : 2,\n  \"AccountName\" : \"AccountName\",\n  \"ReasonCodeName\" : \"ReasonCodeName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"AccountId\" : 1,\n  \"ReasonComment\" : \"ReasonComment\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"RequestedDurationHours\" : 7,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"ReasonCodeId\" : 5,\n  \"AccountAssetId\" : 5,\n  \"AssetPlatformType\" : \"Unknown\",\n  \"RequestedDurationMinutes\" : 9,\n  \"IsEmergency\" : true,\n  \"AssetId\" : 6,\n  \"RequestedDurationDays\" : 2,\n  \"AccountName\" : \"AccountName\",\n  \"ReasonCodeName\" : \"ReasonCodeName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SavedAccessRequest>>(exampleJson)
                        : default(List<SavedAccessRequest>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific FIDO2 authenticator that has been registered by the current user
        /// </summary>
        /// <param name="credentialId">Unique, opaque identifier of the authenticator, in Base64Url encoded format</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Fido2Authenticators/{credentialId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetFido2AuthenticatorAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Fido2Authenticator), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetFido2AuthenticatorAsync([FromRoute][Required]string credentialId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Fido2Authenticator));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CredentialId\" : \"CredentialId\",\n  \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Fido2Authenticator>(exampleJson)
                        : default(Fido2Authenticator);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all registered FIDO2 authenticators for the current user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Fido2Authenticators")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetFido2AuthenticatorsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Fido2Authenticator>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetFido2AuthenticatorsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Fido2Authenticator>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CredentialId\" : \"CredentialId\",\n  \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}, {\n  \"CredentialId\" : \"CredentialId\",\n  \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Fido2Authenticator>>(exampleJson)
                        : default(List<Fido2Authenticator>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a secure string that is to be included as a query string parameter of an HTTP redirect request that will allow              the current user to register a new FIDO2 authenticator
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Fido2Authenticators/RegistrationRedirect")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetFido2RegistrationRedirectAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetFido2RegistrationRedirectAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get policy accounts that have been linked to this user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must have Auditor, or PolicyAdmin permission.</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Me/LinkedPolicyAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetLinkedAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must have Auditor, or PolicyAdmin permission.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetLinkedAccountsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a fully expanded representation of an authenticated user
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Me), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMeAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Me));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"LinkedAccountsCount\" : 5,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Fido2Authenticators\" : [ {\n    \"CredentialId\" : \"CredentialId\",\n    \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Name\" : \"Name\"\n  }, {\n    \"CredentialId\" : \"CredentialId\",\n    \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Name\" : \"Name\"\n  } ],\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 0,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 1,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Preferences\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 6,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Me>(exampleJson)
                        : default(Me);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about assets, partitions, accounts this user owns
        /// </summary>
        /// <param name="objectType">Optional Ownership Object Type</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Ownership")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMyOwnershipAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserOwnership>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeGetMyOwnershipAsync([FromQuery]OwnershipType objectType, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserOwnership>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"OwnershipType\" : \"Unknown\",\n  \"OwnerId\" : 0,\n  \"ViaTags\" : [ {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"ViaGroups\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"UserId\" : 6,\n  \"ViaSelf\" : true,\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n}, {\n  \"OwnershipType\" : \"Unknown\",\n  \"OwnerId\" : 0,\n  \"ViaTags\" : [ {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"ViaGroups\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"UserId\" : 6,\n  \"ViaSelf\" : true,\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserOwnership>>(exampleJson)
                        : default(List<UserOwnership>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all asset partitions owned by the user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/OwnedPartitions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMyPartitionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetPartition>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMyPartitionsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetPartition>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"DefaultProfileName\" : \"DefaultProfileName\",\n  \"DefaultSshKeyProfileId\" : 5,\n  \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DefaultProfileId\" : 1,\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"DefaultProfileName\" : \"DefaultProfileName\",\n  \"DefaultSshKeyProfileId\" : 5,\n  \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DefaultProfileId\" : 1,\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetPartition>>(exampleJson)
                        : default(List<AssetPartition>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the user&#x27;s photo
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Photo")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMyPhotoAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPhoto), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMyPhotoAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPhoto));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Base64PhotoData\" : \"Base64PhotoData\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPhoto>(exampleJson)
                        : default(UserPhoto);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific preference for the current user
        /// </summary>
        /// <param name="name">Unique identifier of the UserPreference</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Preferences/{name}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMyPreferenceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPreference), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMyPreferenceAsync([FromRoute][Required]string name, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPreference));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPreference>(exampleJson)
                        : default(UserPreference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all preferences for the current user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Preferences")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMyPreferencesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserPreference>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMyPreferencesAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserPreference>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserPreference>>(exampleJson)
                        : default(List<UserPreference>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about all roles the current user belongs to
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMyRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserRole>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMyRolesAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserRole>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserRole>>(exampleJson)
                        : default(List<UserRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific event subscriber for the current user
        /// </summary>
        /// <param name="id">Unique ID of the subscriber</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Subscribers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMySubscriberAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(MyEventSubscriber), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMySubscriberAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MyEventSubscriber));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<MyEventSubscriber>(exampleJson)
                        : default(MyEventSubscriber);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all event subscribers for the current user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Subscribers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetMySubscribersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<MyEventSubscriber>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetMySubscribersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<MyEventSubscriber>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<MyEventSubscriber>>(exampleJson)
                        : default(List<MyEventSubscriber>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a personal account for the current user
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetPersonalAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalAccount), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetPersonalAccountAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalAccount));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PersonalAccount>(exampleJson)
                        : default(PersonalAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a personal account password for the current user
        /// </summary>
        /// <param name="id">Unique identifier of the personal account password</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}/Password")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetPersonalAccountPasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetPersonalAccountPasswordAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a personal account password for the current user
        /// </summary>
        /// <param name="id">Unique identifier of the personal account password</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}/PasswordHistory")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetPersonalAccountPasswordHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PersonalAccountPasswordHistory>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetPersonalAccountPasswordHistoryAsync([FromRoute][Required]int? id, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PersonalAccountPasswordHistory>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"TimeStarted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"Id\" : 0,\n  \"TimeEnded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Password\" : \"Password\"\n}, {\n  \"TimeStarted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"Id\" : 0,\n  \"TimeEnded\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Password\" : \"Password\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PersonalAccountPasswordHistory>>(exampleJson)
                        : default(List<PersonalAccountPasswordHistory>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the personal accounts for the current user
        /// </summary>
        /// <param name="personalAccountType">Type of personal accounts to retrieve</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/PersonalAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetPersonalAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PersonalAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetPersonalAccountsAsync([FromQuery]PersonalAccountType personalAccountType, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PersonalAccount>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PersonalAccount>>(exampleJson)
                        : default(List<PersonalAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the user&#x27;s photo in raw format
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Me/Photo/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetRawPhotoAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetRawPhotoAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific request favorites for the current user
        /// </summary>
        /// <param name="favoriteId">Unique ID of the request favorite</param>
        /// <param name="includeActiveRequests">Whether to include information about active requests for same account</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">UserRequestFavorite does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Me/RequestFavorites/{favoriteId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetRequestFavoriteAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserRequestFavorite), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetRequestFavoriteAsync([FromRoute][Required]string favoriteId, [FromQuery]bool? includeActiveRequests, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserRequestFavorite));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Category\" : 171976544,\n  \"Id\" : \"Id\",\n  \"Requests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserRequestFavorite>(exampleJson)
                        : default(UserRequestFavorite);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all favorite requests for the current user
        /// </summary>
        /// <param name="includeActiveRequests">Whether to include information about active requests for same account</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Me/RequestFavorites")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetRequestFavoritesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserRequestFavorite>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeGetRequestFavoritesAsync([FromQuery]bool? includeActiveRequests, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserRequestFavorite>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Category\" : 171976544,\n  \"Id\" : \"Id\",\n  \"Requests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  } ],\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"Category\" : 171976544,\n  \"Id\" : \"Id\",\n  \"Requests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  } ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserRequestFavorite>>(exampleJson)
                        : default(List<UserRequestFavorite>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific scheduled audit log search report for the current user
        /// </summary>
        /// <param name="id">Unique ID of the search</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/ScheduledAuditLogReports/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetScheduledAuditLogReportAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ScheduledAuditLogReport), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetScheduledAuditLogReportAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ScheduledAuditLogReport));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ScheduleType\" : \"Never\",\n  \"Description\" : \"Description\",\n  \"StartHour\" : 12,\n  \"UserIdOption\" : 7,\n  \"AccountIdOption\" : 3,\n  \"FilterOption\" : \"FilterOption\",\n  \"Name\" : \"Name\",\n  \"TimeOfDayIntervals\" : [ {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  }, {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  } ],\n  \"AssetIdOptionName\" : \"AssetIdOptionName\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"UserIdOptionDisplayName\" : \"UserIdOptionDisplayName\",\n  \"QueryStringOption\" : \"QueryStringOption\",\n  \"CreatedByUserId\" : 6,\n  \"OrderbyOption\" : \"OrderbyOption\",\n  \"SerializationFormat\" : \"Json\",\n  \"RepeatDayOfMonth\" : 18,\n  \"CategoryOption\" : \"Unknown\",\n  \"NextScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartMinute\" : 13,\n  \"FieldsOption\" : \"FieldsOption\",\n  \"EndDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatDaysOfWeek\" : [ null, null ],\n  \"RepeatDayOfWeek\" : \"Sunday\",\n  \"LastScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatWeekOfMonth\" : \"First\",\n  \"DateRangeType\" : \"None\",\n  \"AccountIdOptionName\" : \"AccountIdOptionName\",\n  \"LimitOption\" : 4,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"IncludeDetailsOption\" : true,\n  \"CountOption\" : true,\n  \"Id\" : 0,\n  \"TimeOfDayType\" : \"Instant\",\n  \"PageOption\" : 2,\n  \"RepeatMonthlyScheduleType\" : \"DayOfMonth\",\n  \"AssetIdOption\" : 9,\n  \"RepeatInterval\" : 314780941\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ScheduledAuditLogReport>(exampleJson)
                        : default(ScheduledAuditLogReport);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all scheduled audit log search reports for the current user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/ScheduledAuditLogReports")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetScheduledAuditLogReportsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ScheduledAuditLogReport>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeGetScheduledAuditLogReportsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ScheduledAuditLogReport>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ScheduleType\" : \"Never\",\n  \"Description\" : \"Description\",\n  \"StartHour\" : 12,\n  \"UserIdOption\" : 7,\n  \"AccountIdOption\" : 3,\n  \"FilterOption\" : \"FilterOption\",\n  \"Name\" : \"Name\",\n  \"TimeOfDayIntervals\" : [ {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  }, {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  } ],\n  \"AssetIdOptionName\" : \"AssetIdOptionName\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"UserIdOptionDisplayName\" : \"UserIdOptionDisplayName\",\n  \"QueryStringOption\" : \"QueryStringOption\",\n  \"CreatedByUserId\" : 6,\n  \"OrderbyOption\" : \"OrderbyOption\",\n  \"SerializationFormat\" : \"Json\",\n  \"RepeatDayOfMonth\" : 18,\n  \"CategoryOption\" : \"Unknown\",\n  \"NextScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartMinute\" : 13,\n  \"FieldsOption\" : \"FieldsOption\",\n  \"EndDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatDaysOfWeek\" : [ null, null ],\n  \"RepeatDayOfWeek\" : \"Sunday\",\n  \"LastScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatWeekOfMonth\" : \"First\",\n  \"DateRangeType\" : \"None\",\n  \"AccountIdOptionName\" : \"AccountIdOptionName\",\n  \"LimitOption\" : 4,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"IncludeDetailsOption\" : true,\n  \"CountOption\" : true,\n  \"Id\" : 0,\n  \"TimeOfDayType\" : \"Instant\",\n  \"PageOption\" : 2,\n  \"RepeatMonthlyScheduleType\" : \"DayOfMonth\",\n  \"AssetIdOption\" : 9,\n  \"RepeatInterval\" : 314780941\n}, {\n  \"ScheduleType\" : \"Never\",\n  \"Description\" : \"Description\",\n  \"StartHour\" : 12,\n  \"UserIdOption\" : 7,\n  \"AccountIdOption\" : 3,\n  \"FilterOption\" : \"FilterOption\",\n  \"Name\" : \"Name\",\n  \"TimeOfDayIntervals\" : [ {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  }, {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  } ],\n  \"AssetIdOptionName\" : \"AssetIdOptionName\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"UserIdOptionDisplayName\" : \"UserIdOptionDisplayName\",\n  \"QueryStringOption\" : \"QueryStringOption\",\n  \"CreatedByUserId\" : 6,\n  \"OrderbyOption\" : \"OrderbyOption\",\n  \"SerializationFormat\" : \"Json\",\n  \"RepeatDayOfMonth\" : 18,\n  \"CategoryOption\" : \"Unknown\",\n  \"NextScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartMinute\" : 13,\n  \"FieldsOption\" : \"FieldsOption\",\n  \"EndDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatDaysOfWeek\" : [ null, null ],\n  \"RepeatDayOfWeek\" : \"Sunday\",\n  \"LastScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatWeekOfMonth\" : \"First\",\n  \"DateRangeType\" : \"None\",\n  \"AccountIdOptionName\" : \"AccountIdOptionName\",\n  \"LimitOption\" : 4,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"IncludeDetailsOption\" : true,\n  \"CountOption\" : true,\n  \"Id\" : 0,\n  \"TimeOfDayType\" : \"Instant\",\n  \"PageOption\" : 2,\n  \"RepeatMonthlyScheduleType\" : \"DayOfMonth\",\n  \"AssetIdOption\" : 9,\n  \"RepeatInterval\" : 314780941\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ScheduledAuditLogReport>>(exampleJson)
                        : default(List<ScheduledAuditLogReport>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Me/PersonalAccounts/ShareWithUsers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeGetUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ShareWithUser>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeGetUsersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ShareWithUser>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"FirstName\" : \"FirstName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Id\" : 1,\n  \"LastName\" : \"LastName\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"MobilePhone\" : \"MobilePhone\",\n  \"Name\" : \"Name\"\n}, {\n  \"Description\" : \"Description\",\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"FirstName\" : \"FirstName\",\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Id\" : 1,\n  \"LastName\" : \"LastName\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"MobilePhone\" : \"MobilePhone\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ShareWithUser>>(exampleJson)
                        : default(List<ShareWithUser>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove the requests assigned to the specified request favorite
        /// </summary>
        /// <param name="favoriteId">Unique ID of the request favorite</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Requests to assign to the UserRequestFavorite</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - Missing one or more parameters</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">UserRequestFavorite does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Me/RequestFavorites/{favoriteId}/Requests/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeModifyFavoriteRequestsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SavedAccessRequest>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - Missing one or more parameters")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeModifyFavoriteRequestsAsync([FromRoute][Required]string favoriteId, [FromRoute][Required]ListOperation operation, [FromBody]List<SavedAccessRequest> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SavedAccessRequest>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"AccountId\" : 1,\n  \"ReasonComment\" : \"ReasonComment\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"RequestedDurationHours\" : 7,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"ReasonCodeId\" : 5,\n  \"AccountAssetId\" : 5,\n  \"AssetPlatformType\" : \"Unknown\",\n  \"RequestedDurationMinutes\" : 9,\n  \"IsEmergency\" : true,\n  \"AssetId\" : 6,\n  \"RequestedDurationDays\" : 2,\n  \"AccountName\" : \"AccountName\",\n  \"ReasonCodeName\" : \"ReasonCodeName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"AccountId\" : 1,\n  \"ReasonComment\" : \"ReasonComment\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"RequestedDurationHours\" : 7,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"ReasonCodeId\" : 5,\n  \"AccountAssetId\" : 5,\n  \"AssetPlatformType\" : \"Unknown\",\n  \"RequestedDurationMinutes\" : 9,\n  \"IsEmergency\" : true,\n  \"AssetId\" : 6,\n  \"RequestedDurationDays\" : 2,\n  \"AccountName\" : \"AccountName\",\n  \"ReasonCodeName\" : \"ReasonCodeName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SavedAccessRequest>>(exampleJson)
                        : default(List<SavedAccessRequest>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates current user&#x27;s photo in binary form
        /// </summary>
        /// <param name="body"></param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">User does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Me/Photo/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MePutMyRawPhotoAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MePutMyRawPhotoAsync([FromBody]PhotoRawBody body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the requests assigned to the specified request favorite
        /// </summary>
        /// <param name="favoriteId">Unique ID of the request favorite</param>
        /// <param name="body">Requests to assign to the UserRequestFavorite</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - Missing one or more parameters</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">UserRequestFavorite does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Me/RequestFavorites/{favoriteId}/Requests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeSetFavoriteRequestsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SavedAccessRequest>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - Missing one or more parameters")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeSetFavoriteRequestsAsync([FromRoute][Required]string favoriteId, [FromBody]List<SavedAccessRequest> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SavedAccessRequest>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"AccountId\" : 1,\n  \"ReasonComment\" : \"ReasonComment\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"RequestedDurationHours\" : 7,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"ReasonCodeId\" : 5,\n  \"AccountAssetId\" : 5,\n  \"AssetPlatformType\" : \"Unknown\",\n  \"RequestedDurationMinutes\" : 9,\n  \"IsEmergency\" : true,\n  \"AssetId\" : 6,\n  \"RequestedDurationDays\" : 2,\n  \"AccountName\" : \"AccountName\",\n  \"ReasonCodeName\" : \"ReasonCodeName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"ActiveRequests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestId\" : \"RequestId\",\n    \"State\" : \"New\",\n    \"IsEmergency\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"AccountId\" : 1,\n  \"ReasonComment\" : \"ReasonComment\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"RequestedDurationHours\" : 7,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"ReasonCodeId\" : 5,\n  \"AccountAssetId\" : 5,\n  \"AssetPlatformType\" : \"Unknown\",\n  \"RequestedDurationMinutes\" : 9,\n  \"IsEmergency\" : true,\n  \"AssetId\" : 6,\n  \"RequestedDurationDays\" : 2,\n  \"AccountName\" : \"AccountName\",\n  \"ReasonCodeName\" : \"ReasonCodeName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SavedAccessRequest>>(exampleJson)
                        : default(List<SavedAccessRequest>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the user supplied friendly name given to a FIDO2 authenticator owned by the current user
        /// </summary>
        /// <param name="credentialId">Unique, opaque identifier of the authenticator, in Base64Url encoded format</param>
        /// <param name="body">Value to set for this preference</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - The entity&#x27;s key value does not match the resource URI</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not found</response>
        [HttpPut]
        [Route("/service/core/v4/Me/Fido2Authenticators/{credentialId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeSetFido2AuthenticatorNameAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Fido2Authenticator), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - The entity&#x27;s key value does not match the resource URI")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeSetFido2AuthenticatorNameAsync([FromRoute][Required]string credentialId, [FromBody]Fido2Authenticator body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Fido2Authenticator));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CredentialId\" : \"CredentialId\",\n  \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Fido2Authenticator>(exampleJson)
                        : default(Fido2Authenticator);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates or create a preference for the current user
        /// </summary>
        /// <param name="name">Unique identifier of the UserPreference</param>
        /// <param name="body">Value to set for this preference</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Me/Preferences/{name}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeSetMyPreferenceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPreference), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeSetMyPreferenceAsync([FromRoute][Required]string name, [FromBody]UserPreference body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPreference));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPreference>(exampleJson)
                        : default(UserPreference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Shares a personal account with another user
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <param name="body">PersonalAccountShare information</param>
        /// <response code="200">Ok</response>
        /// <response code="400">60786 - Primary appliance is unavailable</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}/Share")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeSharePersonalAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalAccount), description: "Ok")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60786 - Primary appliance is unavailable")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeSharePersonalAccountAsync([FromRoute][Required]int? id, [FromBody]PersonalAccountShare body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PersonalAccount>(exampleJson)
                        : default(PersonalAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Unshares a personal account with another user
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <param name="sharedWithId">Unique identifier of the user that the personal account is shared with</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}/Share/{sharedWithId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUnsharePersonalAccountAsync")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeUnsharePersonalAccountAsync([FromRoute][Required]int? id, [FromRoute][Required]int? sharedWithId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Allows the current user to update the email address, phone number(s), photo, and time zone
        /// </summary>
        /// <param name="body">Updated User</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Me")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdateMeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Me), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeUpdateMeAsync([FromBody]Me body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Me));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"LinkedAccountsCount\" : 5,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Fido2Authenticators\" : [ {\n    \"CredentialId\" : \"CredentialId\",\n    \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Name\" : \"Name\"\n  }, {\n    \"CredentialId\" : \"CredentialId\",\n    \"DateRegistered\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DateLastAuthenticated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Name\" : \"Name\"\n  } ],\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 0,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 1,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Preferences\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 6,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Me>(exampleJson)
                        : default(Me);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates current users photo
        /// </summary>
        /// <param name="body">Updated Photo</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be authenticated</response>
        /// <response code="404">Photo was not updated</response>
        [HttpPut]
        [Route("/service/core/v4/Me/Photo")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdateMyPhotoAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be authenticated")]
        public virtual IActionResult MeUpdateMyPhotoAsync([FromBody]UserPhoto body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates an existing personal account
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <param name="body">PersonalAccount to update</param>
        /// <response code="200">Ok</response>
        /// <response code="400">60786 - Primary appliance is unavailable</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdatePersonalAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalAccount), description: "Ok")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60786 - Primary appliance is unavailable")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeUpdatePersonalAccountAsync([FromRoute][Required]int? id, [FromBody]PersonalAccount body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PersonalAccount>(exampleJson)
                        : default(PersonalAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing personal account password
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <param name="body">Personal account Password to update</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60245 - Missing request body.</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}/Password")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdatePersonalAccountPasswordAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeUpdatePersonalAccountPasswordAsync([FromRoute][Required]int? id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the personal account share
        /// </summary>
        /// <param name="id">Unique identifier of the personal account</param>
        /// <param name="sharedWithId">Unique identifier of the user that the personal account is shared with</param>
        /// <param name="body">PersonalAccountShare information</param>
        /// <response code="200">Ok</response>
        /// <response code="400">60786 - Primary appliance is unavailable</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not found</response>
        [HttpPut]
        [Route("/service/core/v4/Me/PersonalAccounts/{id}/Share/{sharedWithId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdatePersonalAccountShareAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalAccount), description: "Ok")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60786 - Primary appliance is unavailable")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        public virtual IActionResult MeUpdatePersonalAccountShareAsync([FromRoute][Required]int? id, [FromRoute][Required]int? sharedWithId, [FromBody]PersonalAccountShare body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"SharedWithId\" : 5,\n  \"DisableNotifications\" : false,\n  \"IsSharedByMe\" : true,\n  \"OwnerDisplayName\" : \"OwnerDisplayName\",\n  \"IsOwnedByMe\" : true,\n  \"Url\" : \"Url\",\n  \"Name\" : \"Name\",\n  \"IsShareable\" : true,\n  \"SharedWithUser\" : {\n    \"Description\" : \"Description\",\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Id\" : 1,\n    \"LastName\" : \"LastName\",\n    \"EmailAddress\" : \"EmailAddress\",\n    \"MobilePhone\" : \"MobilePhone\",\n    \"Name\" : \"Name\"\n  },\n  \"ShareExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : 6,\n  \"LastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : 0,\n  \"OwnerEmailAddress\" : \"OwnerEmailAddress\",\n  \"Notes\" : \"Notes\",\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PersonalAccount>(exampleJson)
                        : default(PersonalAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an UserRequestFavorite
        /// </summary>
        /// <param name="favoriteId">Unique identifier of the UserRequestFavorite</param>
        /// <param name="body">Updated UserRequestFavorite</param>
        /// <response code="200">Success</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">UserRequestFavorite does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Me/RequestFavorites/{favoriteId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdateRequestFavoriteAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserRequestFavorite), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult MeUpdateRequestFavoriteAsync([FromRoute][Required]string favoriteId, [FromBody]UserRequestFavorite body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserRequestFavorite));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"Category\" : 171976544,\n  \"Id\" : \"Id\",\n  \"Requests\" : [ {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  }, {\n    \"AccessRequestType\" : \"Password\",\n    \"ActiveRequests\" : [ {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"AccessRequestType\" : \"Password\",\n      \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestId\" : \"RequestId\",\n      \"State\" : \"New\",\n      \"IsEmergency\" : true,\n      \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"RequestAvailability\" : [ {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      }, {\n        \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n      } ],\n      \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"AccountId\" : 1,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"RequestedDurationHours\" : 7,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AssetName\" : \"AssetName\",\n    \"ReasonCodeId\" : 5,\n    \"AccountAssetId\" : 5,\n    \"AssetPlatformType\" : \"Unknown\",\n    \"RequestedDurationMinutes\" : 9,\n    \"IsEmergency\" : true,\n    \"AssetId\" : 6,\n    \"RequestedDurationDays\" : 2,\n    \"AccountName\" : \"AccountName\",\n    \"ReasonCodeName\" : \"ReasonCodeName\"\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserRequestFavorite>(exampleJson)
                        : default(UserRequestFavorite);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a scheduled audit log search report
        /// </summary>
        /// <param name="id">Unique identifier of the scheduled audit log search report</param>
        /// <param name="body">Updated scheduled audit log search report</param>
        /// <response code="200">Success</response>
        /// <response code="400">60145 - Only API version 3 properties are supported for audit log reports.</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="404">Audit log report does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Me/ScheduledAuditLogReports/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeUpdateScheduledAuditLogSearchReportAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ScheduledAuditLogReport), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60145 - Only API version 3 properties are supported for audit log reports.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeUpdateScheduledAuditLogSearchReportAsync([FromRoute][Required]int? id, [FromBody]ScheduledAuditLogReport body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ScheduledAuditLogReport));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ScheduleType\" : \"Never\",\n  \"Description\" : \"Description\",\n  \"StartHour\" : 12,\n  \"UserIdOption\" : 7,\n  \"AccountIdOption\" : 3,\n  \"FilterOption\" : \"FilterOption\",\n  \"Name\" : \"Name\",\n  \"TimeOfDayIntervals\" : [ {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  }, {\n    \"StartMinute\" : 24,\n    \"StartHour\" : 4,\n    \"EndHour\" : 16,\n    \"Iterations\" : 148,\n    \"EndMinute\" : 7\n  } ],\n  \"AssetIdOptionName\" : \"AssetIdOptionName\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"UserIdOptionDisplayName\" : \"UserIdOptionDisplayName\",\n  \"QueryStringOption\" : \"QueryStringOption\",\n  \"CreatedByUserId\" : 6,\n  \"OrderbyOption\" : \"OrderbyOption\",\n  \"SerializationFormat\" : \"Json\",\n  \"RepeatDayOfMonth\" : 18,\n  \"CategoryOption\" : \"Unknown\",\n  \"NextScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartMinute\" : 13,\n  \"FieldsOption\" : \"FieldsOption\",\n  \"EndDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"StartDateOption\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatDaysOfWeek\" : [ null, null ],\n  \"RepeatDayOfWeek\" : \"Sunday\",\n  \"LastScheduledExecution\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RepeatWeekOfMonth\" : \"First\",\n  \"DateRangeType\" : \"None\",\n  \"AccountIdOptionName\" : \"AccountIdOptionName\",\n  \"LimitOption\" : 4,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"IncludeDetailsOption\" : true,\n  \"CountOption\" : true,\n  \"Id\" : 0,\n  \"TimeOfDayType\" : \"Instant\",\n  \"PageOption\" : 2,\n  \"RepeatMonthlyScheduleType\" : \"DayOfMonth\",\n  \"AssetIdOption\" : 9,\n  \"RepeatInterval\" : 314780941\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ScheduledAuditLogReport>(exampleJson)
                        : default(ScheduledAuditLogReport);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validates that a password meets requirements
        /// </summary>
        /// <param name="body">Password to validate</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpPost]
        [Route("/service/core/v4/Me/ValidatePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("MeValidateMyPasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult MeValidateMyPasswordAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
