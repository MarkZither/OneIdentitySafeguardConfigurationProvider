/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AccountGroupsApiController : ControllerBase
    { 
        /// <summary>
        /// Checks if the current name is unique prior to create/update
        /// </summary>
        /// <param name="body">Parameters for checking for unique name</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - parameters are missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/CheckUniqueName")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsCheckUniqueNameAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - parameters are missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsCheckUniqueNameAsync([FromBody]UniqueNameParameters body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates an AccountGroup
        /// </summary>
        /// <param name="body">AccountGroup to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsCreateAccountGroupAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(AccountGroup), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsCreateAccountGroupAsync([FromBody]AccountGroup body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(AccountGroup));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccountGroup>(exampleJson)
                        : default(AccountGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple new account groups
        /// </summary>
        /// <param name="body">New account groups to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/BatchCreate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsCreateMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountGroupBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsCreateMultipleAsync([FromBody]List<AccountGroup> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountGroupBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountGroupBatchResponse>>(exampleJson)
                        : default(List<AccountGroupBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an AccountGroup
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/AccountGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsDeleteAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Processes multiple account groups to delete
        /// </summary>
        /// <param name="body">account groups to process</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/BatchDelete")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsDeleteMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountGroupBatchResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsDeleteMultipleAsync([FromBody]List<int?> body, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountGroupBatchResult>));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountGroupBatchResult>>(exampleJson)
                        : default(List<AccountGroupBatchResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single account group
        /// </summary>
        /// <param name="id">Unique ID of account group</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AccountGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsGetAccountGroupByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountGroup), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccountGroupsGetAccountGroupByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccountGroup));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccountGroup>(exampleJson)
                        : default(AccountGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of account group entities
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AccountGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsGetAccountGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccountGroupsGetAccountGroupsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountGroup>>(exampleJson)
                        : default(List<AccountGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all PolicyAccounts that belong to an AccountGroup
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account Group does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AccountGroups/{id}/Accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsGetAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccountGroupsGetAccountsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about policies that this account group is assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Account Group does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AccountGroups/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsGetPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GroupPolicies>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AccountGroupsGetPoliciesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GroupPolicies>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"PolicyAccountCount\" : 1,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyAssetCount\" : 5,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 2,\n  \"Name\" : \"Name\"\n}, {\n  \"PolicyAccountCount\" : 1,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyAssetCount\" : 5,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 2,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<GroupPolicies>>(exampleJson)
                        : default(List<GroupPolicies>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove accounts assigned to this group
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Accounts to assign to the AccountGroup</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;accounts&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AccountGroup does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/{id}/Accounts/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsModifyAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;accounts&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsModifyAccountsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<PolicyAccount> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove policies this group is assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup to update</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Policies to assign the AccountGroup to</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;policies&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AccountGroup does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/{id}/Policies/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsModifyPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GroupPolicies>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;policies&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsModifyPoliciesAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<GroupPolicies> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GroupPolicies>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"PolicyAccountCount\" : 1,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyAssetCount\" : 5,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 2,\n  \"Name\" : \"Name\"\n}, {\n  \"PolicyAccountCount\" : 1,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyAssetCount\" : 5,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 2,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<GroupPolicies>>(exampleJson)
                        : default(List<GroupPolicies>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the accounts assigned to this group
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="body">Accounts to assign to the AccountGroup</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;accounts&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AccountGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AccountGroups/{id}/Accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsSetAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;accounts&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsSetAccountsAsync([FromRoute][Required]int? id, [FromBody]List<PolicyAccount> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the policies this group is assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup to update</param>
        /// <param name="body">Policies to assign the AccountGroup to</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - &#x27;policies&#x27; parameter was missing</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AccountGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AccountGroups/{id}/Policies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsSetPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GroupPolicies>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - &#x27;policies&#x27; parameter was missing")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsSetPoliciesAsync([FromRoute][Required]int? id, [FromBody]List<GroupPolicies> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GroupPolicies>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"PolicyAccountCount\" : 1,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyAssetCount\" : 5,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 2,\n  \"Name\" : \"Name\"\n}, {\n  \"PolicyAccountCount\" : 1,\n  \"RoleName\" : \"RoleName\",\n  \"PolicyAccountGroupCount\" : 5,\n  \"PolicyAssetCount\" : 5,\n  \"Id\" : 0,\n  \"RoleId\" : 6,\n  \"PolicyAssetGroupCount\" : 2,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<GroupPolicies>>(exampleJson)
                        : default(List<GroupPolicies>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Tests a dynamic grouping rule
        /// </summary>
        /// <param name="body">Dynamic grouping rule to test</param>
        /// <param name="id">Unique ID of the account group</param>
        /// <param name="operationalOnly">Do not return no-op results</param>
        /// <param name="limit">Limit response to this number of results</param>
        /// <response code="200">Success</response>
        /// <response code="201">Tested</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Account group does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/TestRule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsTestRuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DynamicGroupingRuleTestResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsTestRuleAsync([FromBody]TaggingGroupingRule body, [FromQuery]int? id, [FromQuery]bool? operationalOnly, [FromQuery]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DynamicGroupingRuleTestResult>));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"GroupingRuleAction\" : \"AddToGroup\",\n  \"ObjectId\" : 0,\n  \"DomainName\" : \"DomainName\",\n  \"AssetId\" : 6,\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\"\n}, {\n  \"GroupingRuleAction\" : \"AddToGroup\",\n  \"ObjectId\" : 0,\n  \"DomainName\" : \"DomainName\",\n  \"AssetId\" : 6,\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DynamicGroupingRuleTestResult>>(exampleJson)
                        : default(List<DynamicGroupingRuleTestResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an AccountGroup
        /// </summary>
        /// <param name="id">Unique identifier of the AccountGroup</param>
        /// <param name="body">Updated AccountGroup</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">AccountGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/AccountGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsUpdateAccountGroupAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountGroup), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsUpdateAccountGroupAsync([FromRoute][Required]int? id, [FromBody]AccountGroup body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccountGroup));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 3,\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 3,\n  \"GroupingRule\" : {\n    \"RuleConditionGroup\" : {\n      \"Children\" : [ {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      }, {\n        \"TaggingGroupingCondition\" : {\n          \"CompareValue\" : \"CompareValue\",\n          \"CompareType\" : \"EqualTo\",\n          \"ObjectAttribute\" : \"Name\"\n        }\n      } ],\n      \"LogicalJoinType\" : \"And\"\n    },\n    \"Description\" : \"Description\",\n    \"Enabled\" : true\n  },\n  \"IsDynamic\" : true,\n  \"Accounts\" : [ null, null ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccountGroup>(exampleJson)
                        : default(AccountGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple account groups to update
        /// </summary>
        /// <param name="body">account groups to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/AccountGroups/BatchUpdate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccountGroupsUpdateMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountGroupBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult AccountGroupsUpdateMultipleAsync([FromBody]List<AccountGroup> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountGroupBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"CreatedByUserId\" : 3,\n    \"Description\" : \"Description\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"Id\" : 3,\n    \"GroupingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"IsDynamic\" : true,\n    \"Accounts\" : [ null, null ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountGroupBatchResponse>>(exampleJson)
                        : default(List<AccountGroupBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
