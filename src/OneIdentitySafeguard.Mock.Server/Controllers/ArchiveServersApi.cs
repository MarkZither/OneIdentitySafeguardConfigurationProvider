/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArchiveServersApiController : ControllerBase
    { 
        /// <summary>
        /// Creates an ArchiveServer configuration
        /// </summary>
        /// <param name="body">ArchiveServer to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">60245: Missing request body</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Must have ApplianceAdmin or OperationsAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersCreateEntityAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(ArchiveServer), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245: Missing request body")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin or OperationsAdmin permission")]
        public virtual IActionResult ArchiveServersCreateEntityAsync([FromBody]ArchiveServer body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ArchiveServer));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"StoragePath\" : \"StoragePath\",\n  \"ManagedNetworkId\" : 6,\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"SshHostKeyFingerprintSha256\" : \"SshHostKeyFingerprintSha256\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshHostKeyFingerprint\" : \"SshHostKeyFingerprint\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\",\n  \"TransferProtocol\" : {\n    \"SupportsCustomPort\" : true,\n    \"Description\" : \"Description\",\n    \"SupportsSshKey\" : true,\n    \"SupportsPassword\" : true,\n    \"Name\" : \"Name\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServer>(exampleJson)
                        : default(ArchiveServer);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an ArchiveServer configuration
        /// </summary>
        /// <param name="id">Unique identifier of the ArchiveServer</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have ApplianceAdmin or OperationsAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/ArchiveServers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin or OperationsAdmin permission")]
        public virtual IActionResult ArchiveServersDeleteAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets the SSH host key for the target server
        /// </summary>
        /// <param name="body">Configuration of target server</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers/DiscoverSshHostKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersDiscoverSshHostKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveServerSshHostKey), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ArchiveServersDiscoverSshHostKeyAsync([FromBody]ArchiveDiscoverSshHostKeyParameters body, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveServerSshHostKey));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Fingerprint\" : \"Fingerprint\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServerSshHostKey>(exampleJson)
                        : default(ArchiveServerSshHostKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the SSH host key for the target server
        /// </summary>
        /// <param name="id">Unique ID of ArchiveServer to check</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers/{id}/DiscoverSshHostKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersDiscoverSshHostKeyByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveServerSshHostKey), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ArchiveServersDiscoverSshHostKeyByIdAsync([FromRoute][Required]int? id, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveServerSshHostKey));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Fingerprint\" : \"Fingerprint\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServerSshHostKey>(exampleJson)
                        : default(ArchiveServerSshHostKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of all archive servers
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/ArchiveServers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ArchiveServer>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ArchiveServersGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ArchiveServer>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"StoragePath\" : \"StoragePath\",\n  \"ManagedNetworkId\" : 6,\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"SshHostKeyFingerprintSha256\" : \"SshHostKeyFingerprintSha256\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshHostKeyFingerprint\" : \"SshHostKeyFingerprint\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\",\n  \"TransferProtocol\" : {\n    \"SupportsCustomPort\" : true,\n    \"Description\" : \"Description\",\n    \"SupportsSshKey\" : true,\n    \"SupportsPassword\" : true,\n    \"Name\" : \"Name\"\n  }\n}, {\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"StoragePath\" : \"StoragePath\",\n  \"ManagedNetworkId\" : 6,\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"SshHostKeyFingerprintSha256\" : \"SshHostKeyFingerprintSha256\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshHostKeyFingerprint\" : \"SshHostKeyFingerprint\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\",\n  \"TransferProtocol\" : {\n    \"SupportsCustomPort\" : true,\n    \"Description\" : \"Description\",\n    \"SupportsSshKey\" : true,\n    \"SupportsPassword\" : true,\n    \"Name\" : \"Name\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ArchiveServer>>(exampleJson)
                        : default(List<ArchiveServer>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single archive server
        /// </summary>
        /// <param name="id">Unique ID of account group</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/ArchiveServers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveServer), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ArchiveServersGetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveServer));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"StoragePath\" : \"StoragePath\",\n  \"ManagedNetworkId\" : 6,\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"SshHostKeyFingerprintSha256\" : \"SshHostKeyFingerprintSha256\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshHostKeyFingerprint\" : \"SshHostKeyFingerprint\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\",\n  \"TransferProtocol\" : {\n    \"SupportsCustomPort\" : true,\n    \"Description\" : \"Description\",\n    \"SupportsSshKey\" : true,\n    \"SupportsPassword\" : true,\n    \"Name\" : \"Name\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServer>(exampleJson)
                        : default(ArchiveServer);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the SshHostKey identifying this archive server
        /// </summary>
        /// <param name="id">Unique identifier of the archive server</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/ArchiveServers/{id}/SshHostKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersGetSshHostKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveServerSshHostKey), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ArchiveServersGetSshHostKeyAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveServerSshHostKey));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Fingerprint\" : \"Fingerprint\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServerSshHostKey>(exampleJson)
                        : default(ArchiveServerSshHostKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Installs an SSH key for the service account
        /// </summary>
        /// <param name="body">Information about which asset to install an SSH key for the service account</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers/InstallSshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersInstallSshKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PasswordActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ArchiveServersInstallSshKeyAsync([FromBody]ArchiveServerCustomInstallSshKeyParameters body, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Installs an SSH key for the service account
        /// </summary>
        /// <param name="id">Unique identifier of the ArchiveServer</param>
        /// <param name="body">Database ID of SSH Key to install (optional - will be generated if not specified). Also option to override existing asset connection settings.</param>
        /// <param name="extendedLogging">Generate debug task log for action</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers/{id}/InstallSshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersInstallSshKeyByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PasswordActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ArchiveServersInstallSshKeyByIdAsync([FromRoute][Required]int? id, [FromBody]ArchiveServerSshKeyParameters body, [FromQuery]bool? extendedLogging)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes the ssh host id of this archive server
        /// </summary>
        /// <param name="id">Unique identifier of the archive server</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have ApplianceAdmin or OperationsAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/ArchiveServers/{id}/SshHostKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersRemoveSshHostKeyAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin or OperationsAdmin permission")]
        public virtual IActionResult ArchiveServersRemoveSshHostKeyAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the ssh host id of this archive server
        /// </summary>
        /// <param name="id">Unique identifier of the archive server</param>
        /// <param name="body">SSH host id to assign to this asset</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - Invalid SshHostKey provided</response>
        /// <response code="403">Must have ApplianceAdmin or OperationsAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/ArchiveServers/{id}/SshHostKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersSetSshHostKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveServerSshHostKey), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - Invalid SshHostKey provided")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin or OperationsAdmin permission")]
        public virtual IActionResult ArchiveServersSetSshHostKeyAsync([FromRoute][Required]int? id, [FromBody]ArchiveServerSshHostKey body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveServerSshHostKey));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Fingerprint\" : \"Fingerprint\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServerSshHostKey>(exampleJson)
                        : default(ArchiveServerSshHostKey);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Tests an ArchiveServer configuration
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers/TestConnection")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersTestConnectionAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(ArchiveActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ArchiveServersTestConnectionAsync([FromBody]ArchiveCustomTestConnectionParameters body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ArchiveActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ApplianceName\" : \"ApplianceName\",\n  \"ArchiveType\" : \"UploadBackup\",\n  \"ArchiveServerId\" : 6,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"FileName\" : \"FileName\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"SourcePath\" : \"SourcePath\",\n  \"DestinationPath\" : \"DestinationPath\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"FileId\" : \"FileId\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveActivityLog>(exampleJson)
                        : default(ArchiveActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Tests an existing ArchiveServer configuration
        /// </summary>
        /// <param name="id">Unique ID of ArchiveServer to test</param>
        /// <param name="body">Options for testing the connection</param>
        /// <response code="201">Created</response>
        /// <response code="202">Accepted</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/ArchiveServers/{id}/TestConnection")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersTestConnectionByIdAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(ArchiveActivityLog), description: "Created")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ArchiveServersTestConnectionByIdAsync([FromRoute][Required]int? id, [FromBody]ArchiveTestConnectionParameters body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ArchiveActivityLog));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ApplianceName\" : \"ApplianceName\",\n  \"ArchiveType\" : \"UploadBackup\",\n  \"ArchiveServerId\" : 6,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"FileName\" : \"FileName\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"SourcePath\" : \"SourcePath\",\n  \"DestinationPath\" : \"DestinationPath\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"FileId\" : \"FileId\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveActivityLog>(exampleJson)
                        : default(ArchiveActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing ArchiveServer configuration
        /// </summary>
        /// <param name="id">Unique identifier of the ArchiveServer</param>
        /// <param name="body">ArchiveServer to create</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102: Entity ID in request body does not match request URI</response>
        /// <response code="403">Must have ApplianceAdmin or OperationsAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/ArchiveServers/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ArchiveServersUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveServer), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102: Entity ID in request body does not match request URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin or OperationsAdmin permission")]
        public virtual IActionResult ArchiveServersUpdateEntityAsync([FromRoute][Required]int? id, [FromBody]ArchiveServer body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveServer));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"SshHostKey\" : \"SshHostKey\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"StoragePath\" : \"StoragePath\",\n  \"ManagedNetworkId\" : 6,\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"SshHostKeyFingerprintSha256\" : \"SshHostKeyFingerprintSha256\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshHostKeyFingerprint\" : \"SshHostKeyFingerprint\",\n  \"Id\" : 0,\n  \"Name\" : \"Name\",\n  \"TransferProtocol\" : {\n    \"SupportsCustomPort\" : true,\n    \"Description\" : \"Description\",\n    \"SupportsSshKey\" : true,\n    \"SupportsPassword\" : true,\n    \"Name\" : \"Name\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveServer>(exampleJson)
                        : default(ArchiveServer);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
