/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ClusterApiController : ControllerBase
    { 
        /// <summary>
        /// Promotes this appliance from StandaloneReadOnly to Online./&gt;
        /// </summary>
        /// <response code="200">Success - No Content</response>
        /// <response code="400">Invalid state transition</response>
        /// <response code="403">The appliance is not in StandaloneReadOnly.</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Members/ActivatePrimary")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterActivatePrimaryAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "The appliance is not in StandaloneReadOnly.")]
        public virtual IActionResult ClusterActivatePrimaryAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add/Remove network configuration assignments for this managed host member.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="memberId">Unique ID of the member</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Network configurations to assign this managed host member</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/Members/{memberId}/ManagedNetworks/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterAddRemoveManagedNetworkBySessionModuleAndMemberIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterAddRemoveManagedNetworkBySessionModuleAndMemberIdAsync([FromRoute][Required]int? id, [FromRoute][Required]string memberId, [FromRoute][Required]ListOperation operation, [FromBody]List<ManagedNetwork> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Assigns this managed host member to a set of managed network configurations.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="memberId">Unique ID of the member</param>
        /// <param name="body">Network configurations to assign this managed host member</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/Members/{memberId}/ManagedNetworks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterAssignManagedNetworkBySessionModuleAndMemberIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterAssignManagedNetworkBySessionModuleAndMemberIdAsync([FromRoute][Required]int? id, [FromRoute][Required]string memberId, [FromBody]List<ManagedNetwork> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns precondition errors and warnings from the currently staged patch for the entire cluster.
        /// </summary>
        /// <response code="200">Success - a staged patch exists</response>
        /// <response code="204">No Content - no staged patch</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Patch/PreconditionCheck")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterCheckPreconditionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterPatchPreconditionResult), description: "Success - a staged patch exists")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterCheckPreconditionsAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterPatchPreconditionResult));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ClusterResults\" : [ {\n    \"PatchVersion\" : {\n      \"Major\" : 6,\n      \"ServicePack\" : 5,\n      \"Minor\" : 1,\n      \"HotfixLevel\" : 5\n    },\n    \"Errors\" : [ \"Errors\", \"Errors\" ],\n    \"IsOsPatch\" : true,\n    \"ApplianceId\" : \"ApplianceId\",\n    \"TargetOsLevel\" : 0,\n    \"Warnings\" : [ \"Warnings\", \"Warnings\" ]\n  }, {\n    \"PatchVersion\" : {\n      \"Major\" : 6,\n      \"ServicePack\" : 5,\n      \"Minor\" : 1,\n      \"HotfixLevel\" : 5\n    },\n    \"Errors\" : [ \"Errors\", \"Errors\" ],\n    \"IsOsPatch\" : true,\n    \"ApplianceId\" : \"ApplianceId\",\n    \"TargetOsLevel\" : 0,\n    \"Warnings\" : [ \"Warnings\", \"Warnings\" ]\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClusterPatchPreconditionResult>(exampleJson)
                        : default(ClusterPatchPreconditionResult);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Starts the trust to create a session connection to link an external session module to this cluster.  Note: This will only be invoked from SPS. They don&#x27;t know about ApiError so it is best  to keep the response simple.
        /// </summary>
        /// <param name="body">Connection information for the new external session module</param>
        /// <response code="200">Success</response>
        /// <response code="202">Success</response>
        /// <response code="400">Missing, invalid, or non-unique information</response>
        /// <response code="403">This action can only be performed on the primary appliance (not replica)</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/SessionModules")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterConnectSessionModuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionModuleConnection), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Missing, invalid, or non-unique information")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "This action can only be performed on the primary appliance (not replica)")]
        public virtual IActionResult ClusterConnectSessionModuleAsync([FromBody]SessionModuleConnection body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionModuleConnection));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"SppSslPemEncodedCertificateChain\" : \"SppSslPemEncodedCertificateChain\",\n  \"CertificateUserThumbprint\" : \"CertificateUserThumbprint\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserCsr\" : \"CertificateUserCsr\",\n  \"Trusted\" : false,\n  \"FirmwareVersion\" : \"FirmwareVersion\",\n  \"CertificateUserPemEncodedCertificate\" : \"CertificateUserPemEncodedCertificate\",\n  \"OneTimeToken\" : \"OneTimeToken\",\n  \"CreatedByUserId\" : 1,\n  \"ClientCertificateThumbprint\" : \"ClientCertificateThumbprint\",\n  \"CertificateUserId\" : 6,\n  \"NodeId\" : \"NodeId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"UseHostNameForLaunch\" : false\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionModuleConnection>(exampleJson)
                        : default(SessionModuleConnection);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a managed network configuration
        /// </summary>
        /// <param name="body">Entity to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/ManagedNetworks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterCreateEntityAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(ManagedNetwork), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterCreateEntityAsync([FromBody]ManagedNetwork body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ManagedNetwork));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ManagedNetwork>(exampleJson)
                        : default(ManagedNetwork);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes all existing challenge requests
        /// </summary>
        /// <response code="204">No Content</response>
        /// <response code="403">Must be primary</response>
        /// <response code="410">Must be hardware</response>
        [HttpDelete]
        [Route("/service/core/v4/Cluster/VMCompatibleBackup/ChallengeRequest")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterDeleteAllChallengeRequestsAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be primary")]
        [SwaggerResponse(statusCode: 410, type: typeof(ApiError), description: "Must be hardware")]
        public virtual IActionResult ClusterDeleteAllChallengeRequestsAsync()
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes a managed network configuration. Appliances and assets will be assigned to the default network
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterDeleteAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Unjoin a specific member, by id, from the cluster.
        /// </summary>
        /// <param name="id">id of the member to be removed</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60398 - Cannot remove a member while an appliance is enrolling in the cluster</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found - Member ID does not exist</response>
        [HttpDelete]
        [Route("/service/core/v4/Cluster/Members/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterDeleteMemberAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60398 - Cannot remove a member while an appliance is enrolling in the cluster")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterDeleteMemberAsync([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Disconnect a specific external session module from the cluster.
        /// </summary>
        /// <param name="id">ID of the session module to be disconnected</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Cluster/SessionModules/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterDeleteSessionModuleConnectionAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterDeleteSessionModuleConnectionAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Revokes the VM Compatible Backup Authorization
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must be primary</response>
        [HttpDelete]
        [Route("/service/core/v4/Cluster/VMCompatibleBackup/Authorization")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterDeleteVMCompatibleAuthorizationAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(VMCompatibleBackupAuthorizationSetting), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be primary")]
        public virtual IActionResult ClusterDeleteVMCompatibleAuthorizationAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VMCompatibleBackupAuthorizationSetting));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Authorized\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<VMCompatibleBackupAuthorizationSetting>(exampleJson)
                        : default(VMCompatibleBackupAuthorizationSetting);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enrolls a new member in this cluster.
        /// </summary>
        /// <param name="body">Information about the appliance enrolling</param>
        /// <response code="202">Success</response>
        /// <response code="400">60398 - Cannot remove a member while an appliance is enrolling in the cluster</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterEnrollMemberAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60398 - Cannot remove a member while an appliance is enrolling in the cluster")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterEnrollMemberAsync([FromBody]EnrollNewClusterMember body)
        { 
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Force the current cluster operation to complete.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Status/ForceComplete")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterForceCompleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterForceCompleteAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Force the cluster configuration on this appliance to reset to a single  appliance operating as a primary. After resetting the cluster configuration  the appliance will come online in a deactivated mode to avoid conflicts with  password check/change operations.
        /// </summary>
        /// <response code="204">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Members/ForceReset")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterForceResetAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterForceResetAsync()
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// List of possible cluster actions
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult ClusterGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
                        : default(List<string>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the access request broker.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/AccessRequestBroker")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetAccessRequestBrokerAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestBroker), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetAccessRequestBrokerAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestBroker));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Enabled\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestBroker>(exampleJson)
                        : default(AccessRequestBroker);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the list of cluster certificates
        /// </summary>
        /// <param name="fields">List of property names to include in entity output.</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Certificates")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetAllClusterCertificatesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServerCertificate>), description: "Success")]
        public virtual IActionResult ClusterGetAllClusterCertificatesAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServerCertificate>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}, {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ServerCertificate>>(exampleJson)
                        : default(List<ServerCertificate>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a list of all cluster members.
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetAllClusterNodesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetAllClusterNodesAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the list of applications.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Applications")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetApplicationsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Application>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult ClusterGetApplicationsAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Application>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ProductCode\" : \"ProductCode\",\n  \"Url\" : \"Url\"\n}, {\n  \"ProductCode\" : \"ProductCode\",\n  \"Url\" : \"Url\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Application>>(exampleJson)
                        : default(List<Application>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns Backup Protection Settings
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/BackupProtectionSettings")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetBackupProtectionSettingsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(BackupProtectionSettings), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetBackupProtectionSettingsAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BackupProtectionSettings));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"BackupGpgPublicKeyName\" : \"BackupGpgPublicKeyName\",\n  \"BackupProtectionType\" : \"Appliance\",\n  \"BackupGpgPublicKeyData\" : \"BackupGpgPublicKeyData\",\n  \"BackupGpgPublicKeyFingerprint\" : \"BackupGpgPublicKeyFingerprint\",\n  \"BackupPasswordIdentifier\" : \"BackupPasswordIdentifier\",\n  \"BackupPassword\" : \"BackupPassword\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<BackupProtectionSettings>(exampleJson)
                        : default(BackupProtectionSettings);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific managed network configuration
        /// </summary>
        /// <param name="id">Unique ID of entity</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Entity does not exists</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ManagedNetwork), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ManagedNetwork));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ManagedNetwork>(exampleJson)
                        : default(ManagedNetwork);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the public information for a cluster certificate by type
        /// </summary>
        /// <param name="type">Certificate type to get. Supported types are ClusterRoot, SecureTokenService, AuditLogSigning.</param>
        /// <param name="fields">List of property names to include in entity output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">70008 - Invalid certificate type</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Certificates/{type}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetClusterCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "70008 - Invalid certificate type")]
        public virtual IActionResult ClusterGetClusterCertificateAsync([FromRoute][Required]CertificateType type, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all network configurations managed by this cluster member
        /// </summary>
        /// <param name="id">Unique identifier of the cluster member</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Members/{id}/ManagedNetworks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetClusterMemberNetworksAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ManagedNetwork>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetClusterMemberNetworksAsync([FromRoute][Required]string id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ManagedNetwork>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ManagedNetwork>>(exampleJson)
                        : default(List<ManagedNetwork>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return whether the cluster is configured to use external session modules.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/UsingExternal")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetExternalSessionModuleStateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult ClusterGetExternalSessionModuleStateAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get information about platform tasks load
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Status/PlatformTaskLoadStatus")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetLoadStatusAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlatformTaskLoadStatus), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetLoadStatusAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PlatformTaskLoadStatus));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ScheduledPasswordChanges\" : 2,\n  \"PendingSshKeyChanges\" : 1,\n  \"ScheduledSshKeyChanges\" : 1,\n  \"ScheduledServiceDiscoveries\" : 9,\n  \"PendingPasswordChecks\" : 7,\n  \"PendingSyncAccounts\" : 1,\n  \"ApplianceLoadData\" : [ {\n    \"ApplianceIpAddress\" : \"ApplianceIpAddress\",\n    \"Score\" : 1.4658129805029452,\n    \"VpnLatencyScore\" : 6,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"AuditLogScore\" : 0,\n    \"TimeExpires\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"MaxTaskThreads\" : 5,\n    \"QueuedTasks\" : 2,\n    \"RecordDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TaskThreads\" : 5,\n    \"ApplianceId\" : \"ApplianceId\",\n    \"ApplianceState\" : \"Unknown\"\n  }, {\n    \"ApplianceIpAddress\" : \"ApplianceIpAddress\",\n    \"Score\" : 1.4658129805029452,\n    \"VpnLatencyScore\" : 6,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"AuditLogScore\" : 0,\n    \"TimeExpires\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"MaxTaskThreads\" : 5,\n    \"QueuedTasks\" : 2,\n    \"RecordDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TaskThreads\" : 5,\n    \"ApplianceId\" : \"ApplianceId\",\n    \"ApplianceState\" : \"Unknown\"\n  } ],\n  \"PendingAccountDiscoveries\" : 4,\n  \"ScheduledAssetDiscoveries\" : 8,\n  \"PendingDependentAssetUpdates\" : 7,\n  \"ScheduledDependentAssetUpdates\" : 1,\n  \"PendingSshKeySyncAccounts\" : 5,\n  \"ScheduledTestConnections\" : 6,\n  \"PendingSuspendAccounts\" : 9,\n  \"ScheduledAccountDiscoveries\" : 5,\n  \"PendingTestConnections\" : 6,\n  \"PendingRestoreAccounts\" : 3,\n  \"ScheduledSshKeySyncAccounts\" : 6,\n  \"ScheduledSyncAccounts\" : 2,\n  \"PendingPasswordChanges\" : 3,\n  \"PendingServiceDiscoveries\" : 9,\n  \"ScheduledRestoreAccounts\" : 6,\n  \"PendingSshKeyDiscoveries\" : 1,\n  \"ScheduledSshKeyDiscoveries\" : 6,\n  \"ScheduledSshKeyChecks\" : 7,\n  \"PendingAssetDiscoveries\" : 6,\n  \"ScheduledSuspendAccounts\" : 6,\n  \"ScheduledPasswordChecks\" : 9,\n  \"PendingSshKeyChecks\" : 4\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PlatformTaskLoadStatus>(exampleJson)
                        : default(PlatformTaskLoadStatus);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return the managed networks by session module and member id.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="memberId">Unique ID of the member</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/Members/{memberId}/ManagedNetworks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetManagedNetworksBySessionModuleAndMemberIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetManagedNetworksBySessionModuleAndMemberIdAsync([FromRoute][Required]int? id, [FromRoute][Required]string memberId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return information about a specific appliance in this cluster.
        /// </summary>
        /// <param name="id">Unique ID of cluster member</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Members/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetMemberByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterMember), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult ClusterGetMemberByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterMember));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"Health\" : {\n    \"ResourceUsage\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"NodeResourceHealth\" : {\n        \"ProcessorCount\" : 4,\n        \"ProcessorPercentUsed\" : 7.386282,\n        \"MemoryPercentFree\" : 3.6160767,\n        \"Temperatures\" : [ {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        }, {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        } ],\n        \"MemoryFreeBytes\" : 9,\n        \"MemoryTotalBytes\" : 2,\n        \"DiskFreeBytes\" : 5,\n        \"DiskPercentFree\" : 2.302136,\n        \"DiskTotalBytes\" : 7\n      },\n      \"ErrorCode\" : 5\n    },\n    \"CheckDuration\" : {\n      \"TotalMilliseconds\" : 3.616076749251911,\n      \"Hours\" : 5,\n      \"Days\" : 5,\n      \"Seconds\" : 9,\n      \"Milliseconds\" : 2,\n      \"Minutes\" : 7\n    },\n    \"AuditLog\" : {\n      \"Status\" : \"Unknown\",\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 0\n    },\n    \"Name\" : \"Name\",\n    \"NetworkInformation\" : {\n      \"HostDnsSuffix\" : \"HostDnsSuffix\",\n      \"LinkSpeedMbps\" : 1,\n      \"LinkPresent\" : true,\n      \"MacAddress\" : \"MacAddress\",\n      \"Ipv6Address\" : \"Ipv6Address\",\n      \"Ipv4Address\" : \"Ipv4Address\"\n    },\n    \"ClusterConnectivity\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 6,\n      \"NodeConnectivity\" : [ {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      }, {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      } ]\n    },\n    \"SerialNumber\" : \"SerialNumber\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 1,\n      \"BuildDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"BuildPlatform\" : \"BuildPlatform\",\n      \"Build\" : 4,\n      \"RsmsVersion\" : \"RsmsVersion\",\n      \"OsPatchLevel\" : 5,\n      \"Minor\" : 7,\n      \"BuildVariant\" : \"BuildVariant\"\n    },\n    \"State\" : \"Unknown\",\n    \"CheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\"\n  },\n  \"EnrolledSince\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"IsLeader\" : true,\n  \"SslCertificateThumbprint\" : \"SslCertificateThumbprint\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClusterMember>(exampleJson)
                        : default(ClusterMember);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return information about all appliances in this cluster.
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ClusterMember>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult ClusterGetMembersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ClusterMember>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"Health\" : {\n    \"ResourceUsage\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"NodeResourceHealth\" : {\n        \"ProcessorCount\" : 4,\n        \"ProcessorPercentUsed\" : 7.386282,\n        \"MemoryPercentFree\" : 3.6160767,\n        \"Temperatures\" : [ {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        }, {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        } ],\n        \"MemoryFreeBytes\" : 9,\n        \"MemoryTotalBytes\" : 2,\n        \"DiskFreeBytes\" : 5,\n        \"DiskPercentFree\" : 2.302136,\n        \"DiskTotalBytes\" : 7\n      },\n      \"ErrorCode\" : 5\n    },\n    \"CheckDuration\" : {\n      \"TotalMilliseconds\" : 3.616076749251911,\n      \"Hours\" : 5,\n      \"Days\" : 5,\n      \"Seconds\" : 9,\n      \"Milliseconds\" : 2,\n      \"Minutes\" : 7\n    },\n    \"AuditLog\" : {\n      \"Status\" : \"Unknown\",\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 0\n    },\n    \"Name\" : \"Name\",\n    \"NetworkInformation\" : {\n      \"HostDnsSuffix\" : \"HostDnsSuffix\",\n      \"LinkSpeedMbps\" : 1,\n      \"LinkPresent\" : true,\n      \"MacAddress\" : \"MacAddress\",\n      \"Ipv6Address\" : \"Ipv6Address\",\n      \"Ipv4Address\" : \"Ipv4Address\"\n    },\n    \"ClusterConnectivity\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 6,\n      \"NodeConnectivity\" : [ {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      }, {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      } ]\n    },\n    \"SerialNumber\" : \"SerialNumber\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 1,\n      \"BuildDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"BuildPlatform\" : \"BuildPlatform\",\n      \"Build\" : 4,\n      \"RsmsVersion\" : \"RsmsVersion\",\n      \"OsPatchLevel\" : 5,\n      \"Minor\" : 7,\n      \"BuildVariant\" : \"BuildVariant\"\n    },\n    \"State\" : \"Unknown\",\n    \"CheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\"\n  },\n  \"EnrolledSince\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"IsLeader\" : true,\n  \"SslCertificateThumbprint\" : \"SslCertificateThumbprint\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"Health\" : {\n    \"ResourceUsage\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"NodeResourceHealth\" : {\n        \"ProcessorCount\" : 4,\n        \"ProcessorPercentUsed\" : 7.386282,\n        \"MemoryPercentFree\" : 3.6160767,\n        \"Temperatures\" : [ {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        }, {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        } ],\n        \"MemoryFreeBytes\" : 9,\n        \"MemoryTotalBytes\" : 2,\n        \"DiskFreeBytes\" : 5,\n        \"DiskPercentFree\" : 2.302136,\n        \"DiskTotalBytes\" : 7\n      },\n      \"ErrorCode\" : 5\n    },\n    \"CheckDuration\" : {\n      \"TotalMilliseconds\" : 3.616076749251911,\n      \"Hours\" : 5,\n      \"Days\" : 5,\n      \"Seconds\" : 9,\n      \"Milliseconds\" : 2,\n      \"Minutes\" : 7\n    },\n    \"AuditLog\" : {\n      \"Status\" : \"Unknown\",\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 0\n    },\n    \"Name\" : \"Name\",\n    \"NetworkInformation\" : {\n      \"HostDnsSuffix\" : \"HostDnsSuffix\",\n      \"LinkSpeedMbps\" : 1,\n      \"LinkPresent\" : true,\n      \"MacAddress\" : \"MacAddress\",\n      \"Ipv6Address\" : \"Ipv6Address\",\n      \"Ipv4Address\" : \"Ipv4Address\"\n    },\n    \"ClusterConnectivity\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 6,\n      \"NodeConnectivity\" : [ {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      }, {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      } ]\n    },\n    \"SerialNumber\" : \"SerialNumber\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 1,\n      \"BuildDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"BuildPlatform\" : \"BuildPlatform\",\n      \"Build\" : 4,\n      \"RsmsVersion\" : \"RsmsVersion\",\n      \"OsPatchLevel\" : 5,\n      \"Minor\" : 7,\n      \"BuildVariant\" : \"BuildVariant\"\n    },\n    \"State\" : \"Unknown\",\n    \"CheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\"\n  },\n  \"EnrolledSince\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"IsLeader\" : true,\n  \"SslCertificateThumbprint\" : \"SslCertificateThumbprint\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ClusterMember>>(exampleJson)
                        : default(List<ClusterMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all assets that have been explicitly assigned to the managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the managed network</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}/Assets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetNetworkAssetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Asset>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetNetworkAssetsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Asset>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountDiscoveryScheduleId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"DiscoveredDirectoryGroups\" : [ {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"RegisteredConnector\" : {\n    \"StarlingConnectorId\" : \"StarlingConnectorId\",\n    \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n    \"VisibleToPartitions\" : [ {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    }, {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    } ],\n    \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n    \"Id\" : 9,\n    \"VisibleToAllPartitions\" : true\n  },\n  \"CustomScriptParameters\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"TaskProperties\" : {\n    \"LastFailureDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedAccountDiscoveryAttempts\" : 7,\n    \"FailedTestConnectionAttempts\" : 3,\n    \"LastDependentServiceUpdateTaskId\" : \"LastDependentServiceUpdateTaskId\",\n    \"LastSuccessDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasAssetTaskFailure\" : true,\n    \"LastSuccessAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryTaskId\" : \"LastAccountDiscoveryTaskId\",\n    \"LastSuccessTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryTaskId\" : \"LastServiceDiscoveryTaskId\",\n    \"LastFailureServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedServiceDiscoveryAttempts\" : 9,\n    \"LastTestConnectionTaskId\" : \"LastTestConnectionTaskId\",\n    \"FailedDependentServiceUpdateAttempts\" : 2,\n    \"NextAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"AssetPartitionId\" : 5,\n  \"AssetDiscoveryJobId\" : 9,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0\n}, {\n  \"AccountDiscoveryScheduleId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"DiscoveredDirectoryGroups\" : [ {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"RegisteredConnector\" : {\n    \"StarlingConnectorId\" : \"StarlingConnectorId\",\n    \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n    \"VisibleToPartitions\" : [ {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    }, {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    } ],\n    \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n    \"Id\" : 9,\n    \"VisibleToAllPartitions\" : true\n  },\n  \"CustomScriptParameters\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"TaskProperties\" : {\n    \"LastFailureDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedAccountDiscoveryAttempts\" : 7,\n    \"FailedTestConnectionAttempts\" : 3,\n    \"LastDependentServiceUpdateTaskId\" : \"LastDependentServiceUpdateTaskId\",\n    \"LastSuccessDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasAssetTaskFailure\" : true,\n    \"LastSuccessAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryTaskId\" : \"LastAccountDiscoveryTaskId\",\n    \"LastSuccessTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryTaskId\" : \"LastServiceDiscoveryTaskId\",\n    \"LastFailureServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedServiceDiscoveryAttempts\" : 9,\n    \"LastTestConnectionTaskId\" : \"LastTestConnectionTaskId\",\n    \"FailedDependentServiceUpdateAttempts\" : 2,\n    \"NextAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"AssetPartitionId\" : 5,\n  \"AssetDiscoveryJobId\" : 9,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Asset>>(exampleJson)
                        : default(List<Asset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all members that have been assigned to the managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the managed network</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetNetworkMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetNetworkMembersAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of managed networks configuration
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/ManagedNetworks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetNetworksAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ManagedNetwork>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetNetworksAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ManagedNetwork>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ManagedNetwork>>(exampleJson)
                        : default(List<ManagedNetwork>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get currently scheduled tasks
        /// </summary>
        /// <param name="taskName">Type of scheduled tasks to find</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Status/PlatformTaskLoadStatus/{taskName}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetScheduledPlatformTasksAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ScheduledTask>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetScheduledPlatformTasksAsync([FromRoute][Required]ScheduledTaskNames taskName, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ScheduledTask>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 5,\n  \"AccountId\" : 0,\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"DueDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ScheduleId\" : 5,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"TestConnection\",\n  \"ScheduleName\" : \"ScheduleName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"SyncGroupId\" : 1,\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AssetPartitionId\" : 5,\n  \"AccountId\" : 0,\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"DueDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ScheduleId\" : 5,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"TestConnection\",\n  \"ScheduleName\" : \"ScheduleName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"SyncGroupId\" : 1,\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ScheduledTask>>(exampleJson)
                        : default(List<ScheduledTask>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get summarized counts of currently scheduled tasks based on an interval
        /// </summary>
        /// <param name="summaryIntervalMinutes">Interval to summarize tasks. Minimum 30 minutes. (Default &#x3D; 30 minutes)</param>
        /// <param name="taskNames">A comma-separated list of task names to include in entity output. (Default &#x3D; all)</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Status/PlatformTaskLoadStatus/Summaries")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetScheduledPlatformTasksSummariesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SummaryInformation), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetScheduledPlatformTasksSummariesAsync([FromQuery]int? summaryIntervalMinutes, [FromQuery]string taskNames, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SummaryInformation));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"TotalTaskCount\" : 0,\n  \"MinimumDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"MaximumDateTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SummaryDates\" : [ {\n    \"TotalDateTaskCount\" : 6,\n    \"Counts\" : [ {\n      \"Count\" : 1,\n      \"Name\" : \"Unknown\"\n    }, {\n      \"Count\" : 1,\n      \"Name\" : \"Unknown\"\n    } ],\n    \"SummaryDateTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"TotalDateTaskCount\" : 6,\n    \"Counts\" : [ {\n      \"Count\" : 1,\n      \"Name\" : \"Unknown\"\n    }, {\n      \"Count\" : 1,\n      \"Name\" : \"Unknown\"\n    } ],\n    \"SummaryDateTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SummaryInformation>(exampleJson)
                        : default(SummaryInformation);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Force a health check and return cluster information for this node
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Members/Self")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSelfAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterMember), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult ClusterGetSelfAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterMember));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"Health\" : {\n    \"ResourceUsage\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"NodeResourceHealth\" : {\n        \"ProcessorCount\" : 4,\n        \"ProcessorPercentUsed\" : 7.386282,\n        \"MemoryPercentFree\" : 3.6160767,\n        \"Temperatures\" : [ {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        }, {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        } ],\n        \"MemoryFreeBytes\" : 9,\n        \"MemoryTotalBytes\" : 2,\n        \"DiskFreeBytes\" : 5,\n        \"DiskPercentFree\" : 2.302136,\n        \"DiskTotalBytes\" : 7\n      },\n      \"ErrorCode\" : 5\n    },\n    \"CheckDuration\" : {\n      \"TotalMilliseconds\" : 3.616076749251911,\n      \"Hours\" : 5,\n      \"Days\" : 5,\n      \"Seconds\" : 9,\n      \"Milliseconds\" : 2,\n      \"Minutes\" : 7\n    },\n    \"AuditLog\" : {\n      \"Status\" : \"Unknown\",\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 0\n    },\n    \"Name\" : \"Name\",\n    \"NetworkInformation\" : {\n      \"HostDnsSuffix\" : \"HostDnsSuffix\",\n      \"LinkSpeedMbps\" : 1,\n      \"LinkPresent\" : true,\n      \"MacAddress\" : \"MacAddress\",\n      \"Ipv6Address\" : \"Ipv6Address\",\n      \"Ipv4Address\" : \"Ipv4Address\"\n    },\n    \"ClusterConnectivity\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 6,\n      \"NodeConnectivity\" : [ {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      }, {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      } ]\n    },\n    \"SerialNumber\" : \"SerialNumber\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 1,\n      \"BuildDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"BuildPlatform\" : \"BuildPlatform\",\n      \"Build\" : 4,\n      \"RsmsVersion\" : \"RsmsVersion\",\n      \"OsPatchLevel\" : 5,\n      \"Minor\" : 7,\n      \"BuildVariant\" : \"BuildVariant\"\n    },\n    \"State\" : \"Unknown\",\n    \"CheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\"\n  },\n  \"EnrolledSince\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"IsLeader\" : true,\n  \"SslCertificateThumbprint\" : \"SslCertificateThumbprint\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClusterMember>(exampleJson)
                        : default(ClusterMember);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a managed host member by session module and member id.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="memberId">Unique ID of the member</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/Members/{memberId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleClusterNodeByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(NetworkMember), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleClusterNodeByIdAsync([FromRoute][Required]int? id, [FromRoute][Required]string memberId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NetworkMember));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NetworkMember>(exampleJson)
                        : default(NetworkMember);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a list of the managed host members by session module.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleClusterNodesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleClusterNodesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return information about a connected session module for this cluster.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleConnectionByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionModuleConnection), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleConnectionByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionModuleConnection));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"SppSslPemEncodedCertificateChain\" : \"SppSslPemEncodedCertificateChain\",\n  \"CertificateUserThumbprint\" : \"CertificateUserThumbprint\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserCsr\" : \"CertificateUserCsr\",\n  \"Trusted\" : false,\n  \"FirmwareVersion\" : \"FirmwareVersion\",\n  \"CertificateUserPemEncodedCertificate\" : \"CertificateUserPemEncodedCertificate\",\n  \"OneTimeToken\" : \"OneTimeToken\",\n  \"CreatedByUserId\" : 1,\n  \"ClientCertificateThumbprint\" : \"ClientCertificateThumbprint\",\n  \"CertificateUserId\" : 6,\n  \"NodeId\" : \"NodeId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"UseHostNameForLaunch\" : false\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionModuleConnection>(exampleJson)
                        : default(SessionModuleConnection);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a list of connection policies from the connected session modules in the cluster.
        /// </summary>
        /// <param name="protocol">Filter the results by protocol (RDP | SSH (default))</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <param name="refresh">Force a refresh of the session connection policies.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/ConnectionPolicies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleConnectionPoliciesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SessionModuleConnectionPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleConnectionPoliciesAsync([FromQuery]SessionModuleConnectionProtocol protocol, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q, [FromQuery]bool? refresh)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SessionModuleConnectionPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"PolicyCapabilities\" : [ \"SppInitiated\", \"SppInitiated\" ],\n  \"SessionModuleConnectionId\" : 0,\n  \"RequiresHostKey\" : true,\n  \"SpsTargetAddress\" : \"SpsTargetAddress\",\n  \"Id\" : \"Id\",\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"Protocol\" : \"Unknown\",\n  \"SpsNetworkPort\" : \"SpsNetworkPort\",\n  \"IsPolicyDisabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"PolicyCapabilities\" : [ \"SppInitiated\", \"SppInitiated\" ],\n  \"SessionModuleConnectionId\" : 0,\n  \"RequiresHostKey\" : true,\n  \"SpsTargetAddress\" : \"SpsTargetAddress\",\n  \"Id\" : \"Id\",\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"Protocol\" : \"Unknown\",\n  \"SpsNetworkPort\" : \"SpsNetworkPort\",\n  \"IsPolicyDisabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SessionModuleConnectionPolicy>>(exampleJson)
                        : default(List<SessionModuleConnectionPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a list of connection policies by session module.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="protocol">Filter the results by protocol (RDP | SSH (default))</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <param name="refresh">Force a refresh of the session connection policies.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/ConnectionPolicies")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleConnectionPoliciesByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SessionModuleConnectionPolicy>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleConnectionPoliciesByIdAsync([FromRoute][Required]int? id, [FromQuery]SessionModuleConnectionProtocol protocol, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q, [FromQuery]bool? refresh)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SessionModuleConnectionPolicy>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"PolicyCapabilities\" : [ \"SppInitiated\", \"SppInitiated\" ],\n  \"SessionModuleConnectionId\" : 0,\n  \"RequiresHostKey\" : true,\n  \"SpsTargetAddress\" : \"SpsTargetAddress\",\n  \"Id\" : \"Id\",\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"Protocol\" : \"Unknown\",\n  \"SpsNetworkPort\" : \"SpsNetworkPort\",\n  \"IsPolicyDisabled\" : true,\n  \"Name\" : \"Name\"\n}, {\n  \"PolicyCapabilities\" : [ \"SppInitiated\", \"SppInitiated\" ],\n  \"SessionModuleConnectionId\" : 0,\n  \"RequiresHostKey\" : true,\n  \"SpsTargetAddress\" : \"SpsTargetAddress\",\n  \"Id\" : \"Id\",\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"Protocol\" : \"Unknown\",\n  \"SpsNetworkPort\" : \"SpsNetworkPort\",\n  \"IsPolicyDisabled\" : true,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SessionModuleConnectionPolicy>>(exampleJson)
                        : default(List<SessionModuleConnectionPolicy>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return a connection policy by session module.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="policyId">Unique ID of the session module</param>
        /// <param name="protocol">Filter the results by protocol (RDP | SSH (default))</param>
        /// <param name="refresh">Force a refresh of the session connection policies.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules/{id}/ConnectionPolicies/{policyId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleConnectionPolicyByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionModuleConnectionPolicy), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleConnectionPolicyByIdAsync([FromRoute][Required]int? id, [FromRoute][Required]string policyId, [FromQuery]SessionModuleConnectionProtocol protocol, [FromQuery]bool? refresh)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionModuleConnectionPolicy));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"PolicyCapabilities\" : [ \"SppInitiated\", \"SppInitiated\" ],\n  \"SessionModuleConnectionId\" : 0,\n  \"RequiresHostKey\" : true,\n  \"SpsTargetAddress\" : \"SpsTargetAddress\",\n  \"Id\" : \"Id\",\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"Protocol\" : \"Unknown\",\n  \"SpsNetworkPort\" : \"SpsNetworkPort\",\n  \"IsPolicyDisabled\" : true,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionModuleConnectionPolicy>(exampleJson)
                        : default(SessionModuleConnectionPolicy);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Return information about all of the connected session modules for this cluster.
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <param name="includeDisconnected">Include disconnected session modules</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/SessionModules")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetSessionModuleConnectionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SessionModuleConnection>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetSessionModuleConnectionsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q, [FromQuery]bool? includeDisconnected)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SessionModuleConnection>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"SppSslPemEncodedCertificateChain\" : \"SppSslPemEncodedCertificateChain\",\n  \"CertificateUserThumbprint\" : \"CertificateUserThumbprint\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserCsr\" : \"CertificateUserCsr\",\n  \"Trusted\" : false,\n  \"FirmwareVersion\" : \"FirmwareVersion\",\n  \"CertificateUserPemEncodedCertificate\" : \"CertificateUserPemEncodedCertificate\",\n  \"OneTimeToken\" : \"OneTimeToken\",\n  \"CreatedByUserId\" : 1,\n  \"ClientCertificateThumbprint\" : \"ClientCertificateThumbprint\",\n  \"CertificateUserId\" : 6,\n  \"NodeId\" : \"NodeId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"UseHostNameForLaunch\" : false\n}, {\n  \"Description\" : \"Description\",\n  \"SppSslPemEncodedCertificateChain\" : \"SppSslPemEncodedCertificateChain\",\n  \"CertificateUserThumbprint\" : \"CertificateUserThumbprint\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserCsr\" : \"CertificateUserCsr\",\n  \"Trusted\" : false,\n  \"FirmwareVersion\" : \"FirmwareVersion\",\n  \"CertificateUserPemEncodedCertificate\" : \"CertificateUserPemEncodedCertificate\",\n  \"OneTimeToken\" : \"OneTimeToken\",\n  \"CreatedByUserId\" : 1,\n  \"ClientCertificateThumbprint\" : \"ClientCertificateThumbprint\",\n  \"CertificateUserId\" : 6,\n  \"NodeId\" : \"NodeId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"UseHostNameForLaunch\" : false\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SessionModuleConnection>>(exampleJson)
                        : default(List<SessionModuleConnection>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns the cluster lock status.
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Status")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetStatusAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterOperationStatus), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetStatusAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterOperationStatus));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Started\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"OwnerId\" : \"OwnerId\",\n  \"Operation\" : \"None\",\n  \"Nodes\" : [ {\n    \"NodeId\" : \"NodeId\"\n  }, {\n    \"NodeId\" : \"NodeId\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClusterOperationStatus>(exampleJson)
                        : default(ClusterOperationStatus);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the VM Compatible Backup Authorization Setting
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/VMCompatibleBackup/Authorization")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterGetVMCompatibleAuthorization")]
        [SwaggerResponse(statusCode: 200, type: typeof(VMCompatibleBackupAuthorizationSetting), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterGetVMCompatibleAuthorization()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VMCompatibleBackupAuthorizationSetting));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Authorized\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<VMCompatibleBackupAuthorizationSetting>(exampleJson)
                        : default(VMCompatibleBackupAuthorizationSetting);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Isolate the appliance to be available for access requests despite its inability  to communicate with the rest of the cluster.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Status/Isolate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterIsolateAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterIsolateAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add/Remove network configuration assignments for this cluster member
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Network configurations to assign this cluster member to</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Members/{id}/ManagedNetworks/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterModifyClusterMemberNetworksAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterModifyClusterMemberNetworksAsync([FromRoute][Required]string id, [FromRoute][Required]ListOperation operation, [FromBody]List<ManagedNetwork> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove members assigned to this managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Member members to assign</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}/Members/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterModifyMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterModifyMembersAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<NetworkMember> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove assets assigned to this managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Assets to assign</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}/Assets/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterModifySystemsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Asset>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult ClusterModifySystemsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<Asset> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Asset>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountDiscoveryScheduleId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"DiscoveredDirectoryGroups\" : [ {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"RegisteredConnector\" : {\n    \"StarlingConnectorId\" : \"StarlingConnectorId\",\n    \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n    \"VisibleToPartitions\" : [ {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    }, {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    } ],\n    \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n    \"Id\" : 9,\n    \"VisibleToAllPartitions\" : true\n  },\n  \"CustomScriptParameters\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"TaskProperties\" : {\n    \"LastFailureDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedAccountDiscoveryAttempts\" : 7,\n    \"FailedTestConnectionAttempts\" : 3,\n    \"LastDependentServiceUpdateTaskId\" : \"LastDependentServiceUpdateTaskId\",\n    \"LastSuccessDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasAssetTaskFailure\" : true,\n    \"LastSuccessAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryTaskId\" : \"LastAccountDiscoveryTaskId\",\n    \"LastSuccessTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryTaskId\" : \"LastServiceDiscoveryTaskId\",\n    \"LastFailureServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedServiceDiscoveryAttempts\" : 9,\n    \"LastTestConnectionTaskId\" : \"LastTestConnectionTaskId\",\n    \"FailedDependentServiceUpdateAttempts\" : 2,\n    \"NextAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"AssetPartitionId\" : 5,\n  \"AssetDiscoveryJobId\" : 9,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0\n}, {\n  \"AccountDiscoveryScheduleId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"DiscoveredDirectoryGroups\" : [ {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"RegisteredConnector\" : {\n    \"StarlingConnectorId\" : \"StarlingConnectorId\",\n    \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n    \"VisibleToPartitions\" : [ {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    }, {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    } ],\n    \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n    \"Id\" : 9,\n    \"VisibleToAllPartitions\" : true\n  },\n  \"CustomScriptParameters\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"TaskProperties\" : {\n    \"LastFailureDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedAccountDiscoveryAttempts\" : 7,\n    \"FailedTestConnectionAttempts\" : 3,\n    \"LastDependentServiceUpdateTaskId\" : \"LastDependentServiceUpdateTaskId\",\n    \"LastSuccessDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasAssetTaskFailure\" : true,\n    \"LastSuccessAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryTaskId\" : \"LastAccountDiscoveryTaskId\",\n    \"LastSuccessTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryTaskId\" : \"LastServiceDiscoveryTaskId\",\n    \"LastFailureServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedServiceDiscoveryAttempts\" : 9,\n    \"LastTestConnectionTaskId\" : \"LastTestConnectionTaskId\",\n    \"FailedDependentServiceUpdateAttempts\" : 2,\n    \"NextAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"AssetPartitionId\" : 5,\n  \"AssetDiscoveryJobId\" : 9,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Asset>>(exampleJson)
                        : default(List<Asset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the status of the patch distribution in cluster
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Cluster/Status/PatchDistribution")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterPatchDistributionAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PatchDistributionModel), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult ClusterPatchDistributionAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PatchDistributionModel));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"PatchInfo\" : {\n    \"Version\" : \"Version\",\n    \"Title\" : \"Title\",\n    \"Id\" : \"Id\"\n  },\n  \"Members\" : [ {\n    \"Errors\" : [ \"Errors\", \"Errors\" ],\n    \"PatchVersion\" : \"PatchVersion\",\n    \"IsOsPatch\" : true,\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"StagingStatus\" : \"None\",\n    \"Isleader\" : true,\n    \"Id\" : \"Id\",\n    \"Warnings\" : [ \"Warnings\", \"Warnings\" ],\n    \"TargetOsLevel\" : 0,\n    \"Name\" : \"Name\"\n  }, {\n    \"Errors\" : [ \"Errors\", \"Errors\" ],\n    \"PatchVersion\" : \"PatchVersion\",\n    \"IsOsPatch\" : true,\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"StagingStatus\" : \"None\",\n    \"Isleader\" : true,\n    \"Id\" : \"Id\",\n    \"Warnings\" : [ \"Warnings\", \"Warnings\" ],\n    \"TargetOsLevel\" : 0,\n    \"Name\" : \"Name\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PatchDistributionModel>(exampleJson)
                        : default(PatchDistributionModel);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Generates a OneIdentity Challenge to authorize VM Compatible Backup download.
        /// </summary>
        /// <param name="userIdentifier">The user who is requesting the challenge.</param>
        /// <param name="invalidateExistingChallengeRequest">Specify true if you wish to invalidate the existing request and use this one.</param>
        /// <response code="200">Success</response>
        /// <response code="400">60920 - A challenge request requires a user identifier such as a name or email address.</response>
        /// <response code="403">Must be primary</response>
        /// <response code="410">Must be hardware</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/VMCompatibleBackup/ChallengeRequest")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterPostVmCompatibleAuthorizationRequestAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60920 - A challenge request requires a user identifier such as a name or email address.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be primary")]
        [SwaggerResponse(statusCode: 410, type: typeof(ApiError), description: "Must be hardware")]
        public virtual IActionResult ClusterPostVmCompatibleAuthorizationRequestAsync([FromQuery]string userIdentifier, [FromQuery]bool? invalidateExistingChallengeRequest)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410, default(ApiError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reverts the Isolate and reintegrates the appliance back in the cluster.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Status/Reintegrate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterReintegrateAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterReintegrateAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Resets the cluster configuration regardless of consensus.
        /// </summary>
        /// <param name="body">New cluster configuration.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Members/Reset")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterResetMemberAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterResetMemberAsync([FromBody]ClusterConfiguration body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets the Backup Protection Settings
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">This action cannot be performed in the current appliance state.</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/BackupProtectionSettings")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterSetBackupProtectionSettingsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(BackupProtectionSettings), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "This action cannot be performed in the current appliance state.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterSetBackupProtectionSettingsAsync([FromBody]BackupProtectionSettings body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BackupProtectionSettings));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"BackupGpgPublicKeyName\" : \"BackupGpgPublicKeyName\",\n  \"BackupProtectionType\" : \"Appliance\",\n  \"BackupGpgPublicKeyData\" : \"BackupGpgPublicKeyData\",\n  \"BackupGpgPublicKeyFingerprint\" : \"BackupGpgPublicKeyFingerprint\",\n  \"BackupPasswordIdentifier\" : \"BackupPasswordIdentifier\",\n  \"BackupPassword\" : \"BackupPassword\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<BackupProtectionSettings>(exampleJson)
                        : default(BackupProtectionSettings);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Assigns this cluster member to a set of managed network configurations
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="body">Network configurations to assign this cluster member to</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/Members/{id}/ManagedNetworks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterSetClusterMemberNetworksAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterSetClusterMemberNetworksAsync([FromRoute][Required]string id, [FromBody]List<ManagedNetwork> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Designates a particular cluster member as the cluster leader.
        /// </summary>
        /// <param name="id">id of the cluster member to promote</param>
        /// <response code="200">Success</response>
        /// <response code="400">60521 - Cannot failover to the Primary appliance</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/Members/{id}/Promote")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterSetLeaderAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ClusterMember), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60521 - Cannot failover to the Primary appliance")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterSetLeaderAsync([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ClusterMember));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"Health\" : {\n    \"ResourceUsage\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"NodeResourceHealth\" : {\n        \"ProcessorCount\" : 4,\n        \"ProcessorPercentUsed\" : 7.386282,\n        \"MemoryPercentFree\" : 3.6160767,\n        \"Temperatures\" : [ {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        }, {\n          \"TemperatureCelsius\" : 1.2315135,\n          \"ZoneName\" : \"ZoneName\",\n          \"TemperatureFahrenheit\" : 1.0246457,\n          \"TemperatureKelvin\" : 1.4894159\n        } ],\n        \"MemoryFreeBytes\" : 9,\n        \"MemoryTotalBytes\" : 2,\n        \"DiskFreeBytes\" : 5,\n        \"DiskPercentFree\" : 2.302136,\n        \"DiskTotalBytes\" : 7\n      },\n      \"ErrorCode\" : 5\n    },\n    \"CheckDuration\" : {\n      \"TotalMilliseconds\" : 3.616076749251911,\n      \"Hours\" : 5,\n      \"Days\" : 5,\n      \"Seconds\" : 9,\n      \"Milliseconds\" : 2,\n      \"Minutes\" : 7\n    },\n    \"AuditLog\" : {\n      \"Status\" : \"Unknown\",\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 0\n    },\n    \"Name\" : \"Name\",\n    \"NetworkInformation\" : {\n      \"HostDnsSuffix\" : \"HostDnsSuffix\",\n      \"LinkSpeedMbps\" : 1,\n      \"LinkPresent\" : true,\n      \"MacAddress\" : \"MacAddress\",\n      \"Ipv6Address\" : \"Ipv6Address\",\n      \"Ipv4Address\" : \"Ipv4Address\"\n    },\n    \"ClusterConnectivity\" : {\n      \"ErrorDetail\" : \"ErrorDetail\",\n      \"Error\" : \"Error\",\n      \"ErrorCode\" : 6,\n      \"NodeConnectivity\" : [ {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      }, {\n        \"IsReachable\" : true,\n        \"ApplianceId\" : \"ApplianceId\"\n      } ]\n    },\n    \"SerialNumber\" : \"SerialNumber\",\n    \"Version\" : {\n      \"Major\" : 6,\n      \"Revision\" : 1,\n      \"BuildDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"BuildPlatform\" : \"BuildPlatform\",\n      \"Build\" : 4,\n      \"RsmsVersion\" : \"RsmsVersion\",\n      \"OsPatchLevel\" : 5,\n      \"Minor\" : 7,\n      \"BuildVariant\" : \"BuildVariant\"\n    },\n    \"State\" : \"Unknown\",\n    \"CheckDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\"\n  },\n  \"EnrolledSince\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Id\" : \"Id\",\n  \"IsLeader\" : true,\n  \"SslCertificateThumbprint\" : \"SslCertificateThumbprint\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ClusterMember>(exampleJson)
                        : default(ClusterMember);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the members assigned to this managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="body">Cluster members to assign</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterSetNetworkMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NetworkMember>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterSetNetworkMembersAsync([FromRoute][Required]int? id, [FromBody]List<NetworkMember> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NetworkMember>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"HostDnsSuffix\" : \"HostDnsSuffix\",\n  \"IsSessionMember\" : true,\n  \"SessionMemberStatus\" : \"Unknown\",\n  \"SyncStatus\" : \"SyncStatus\",\n  \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NetworkMember>>(exampleJson)
                        : default(List<NetworkMember>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Explicitly assign a set of assets to this managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="body">Assets to assign</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin or PartitionAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}/Assets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterSetNetworkSystemsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Asset>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin or PartitionAdmin permission")]
        public virtual IActionResult ClusterSetNetworkSystemsAsync([FromRoute][Required]int? id, [FromBody]List<Asset> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Asset>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountDiscoveryScheduleId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"DiscoveredDirectoryGroups\" : [ {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"RegisteredConnector\" : {\n    \"StarlingConnectorId\" : \"StarlingConnectorId\",\n    \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n    \"VisibleToPartitions\" : [ {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    }, {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    } ],\n    \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n    \"Id\" : 9,\n    \"VisibleToAllPartitions\" : true\n  },\n  \"CustomScriptParameters\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"TaskProperties\" : {\n    \"LastFailureDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedAccountDiscoveryAttempts\" : 7,\n    \"FailedTestConnectionAttempts\" : 3,\n    \"LastDependentServiceUpdateTaskId\" : \"LastDependentServiceUpdateTaskId\",\n    \"LastSuccessDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasAssetTaskFailure\" : true,\n    \"LastSuccessAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryTaskId\" : \"LastAccountDiscoveryTaskId\",\n    \"LastSuccessTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryTaskId\" : \"LastServiceDiscoveryTaskId\",\n    \"LastFailureServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedServiceDiscoveryAttempts\" : 9,\n    \"LastTestConnectionTaskId\" : \"LastTestConnectionTaskId\",\n    \"FailedDependentServiceUpdateAttempts\" : 2,\n    \"NextAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"AssetPartitionId\" : 5,\n  \"AssetDiscoveryJobId\" : 9,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0\n}, {\n  \"AccountDiscoveryScheduleId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"DiscoveredDirectoryGroups\" : [ {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"RegisteredConnector\" : {\n    \"StarlingConnectorId\" : \"StarlingConnectorId\",\n    \"RegisteredConnectorId\" : \"RegisteredConnectorId\",\n    \"VisibleToPartitions\" : [ {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    }, {\n      \"CreatedByUserId\" : 6,\n      \"Description\" : \"Description\",\n      \"ManagedBy\" : [ {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      }, {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      } ],\n      \"DefaultProfileName\" : \"DefaultProfileName\",\n      \"DefaultSshKeyProfileId\" : 5,\n      \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"DefaultProfileId\" : 1,\n      \"Id\" : 0,\n      \"Name\" : \"Name\"\n    } ],\n    \"RegisteredConnectorDisplayName\" : \"RegisteredConnectorDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"StarlingConnectorVersion\" : \"StarlingConnectorVersion\",\n    \"Id\" : 9,\n    \"VisibleToAllPartitions\" : true\n  },\n  \"CustomScriptParameters\" : [ {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"TaskProperties\" : {\n    \"LastFailureDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedAccountDiscoveryAttempts\" : 7,\n    \"FailedTestConnectionAttempts\" : 3,\n    \"LastDependentServiceUpdateTaskId\" : \"LastDependentServiceUpdateTaskId\",\n    \"LastSuccessDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasAssetTaskFailure\" : true,\n    \"LastSuccessAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryTaskId\" : \"LastAccountDiscoveryTaskId\",\n    \"LastSuccessTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryTaskId\" : \"LastServiceDiscoveryTaskId\",\n    \"LastFailureServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastTestConnectionDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"FailedServiceDiscoveryAttempts\" : 9,\n    \"LastTestConnectionTaskId\" : \"LastTestConnectionTaskId\",\n    \"FailedDependentServiceUpdateAttempts\" : 2,\n    \"NextAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastDependentServiceUpdateDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSuccessServiceDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastFailureAccountDiscoveryDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  },\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"Tags\" : [ {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"AdminAssigned\" : true,\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"AssetPartitionId\" : 5,\n  \"AssetDiscoveryJobId\" : 9,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshHostKey\" : {\n    \"Fingerprint\" : \"Fingerprint\",\n    \"SshHostKey\" : \"SshHostKey\",\n    \"FingerprintSha256\" : \"FingerprintSha256\"\n  },\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Asset>>(exampleJson)
                        : default(List<Asset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Check which managed network the specified network address would be assigned to
        /// </summary>
        /// <param name="body">Network address to test</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin or AssetAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/ManagedNetworks/TestAddress")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterTestNetworkAddressAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ManagedNetwork), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin or AssetAdmin permission")]
        public virtual IActionResult ClusterTestNetworkAddressAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ManagedNetwork));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ManagedNetwork>(exampleJson)
                        : default(ManagedNetwork);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the access request broker.
        /// </summary>
        /// <param name="body">Access request broker</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/SessionModules/AccessRequestBroker")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterUpdateAccessRequestBrokerAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestBroker), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult ClusterUpdateAccessRequestBrokerAsync([FromBody]AccessRequestBroker body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestBroker));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Enabled\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestBroker>(exampleJson)
                        : default(AccessRequestBroker);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the connection information for a specific session module in this cluster.
        /// </summary>
        /// <param name="id">Unique ID of the session module</param>
        /// <param name="body">Connection information for the external session module.  Only the description and IP address can be modified.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Missing connection information</response>
        /// <response code="403">This action can only be performed on the primary appliance (not replica)</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/SessionModules/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterUpdateConnectedSessionModuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionModuleConnection), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Missing connection information")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "This action can only be performed on the primary appliance (not replica)")]
        public virtual IActionResult ClusterUpdateConnectedSessionModuleAsync([FromRoute][Required]int? id, [FromBody]SessionModuleConnection body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionModuleConnection));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"SppSslPemEncodedCertificateChain\" : \"SppSslPemEncodedCertificateChain\",\n  \"CertificateUserThumbprint\" : \"CertificateUserThumbprint\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserCsr\" : \"CertificateUserCsr\",\n  \"Trusted\" : false,\n  \"FirmwareVersion\" : \"FirmwareVersion\",\n  \"CertificateUserPemEncodedCertificate\" : \"CertificateUserPemEncodedCertificate\",\n  \"OneTimeToken\" : \"OneTimeToken\",\n  \"CreatedByUserId\" : 1,\n  \"ClientCertificateThumbprint\" : \"ClientCertificateThumbprint\",\n  \"CertificateUserId\" : 6,\n  \"NodeId\" : \"NodeId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"SpsNetworkAddress\" : \"SpsNetworkAddress\",\n  \"SpsHostName\" : \"SpsHostName\",\n  \"UseHostNameForLaunch\" : false\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionModuleConnection>(exampleJson)
                        : default(SessionModuleConnection);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a managed network configuration
        /// </summary>
        /// <param name="id">Unique identifier of the entity</param>
        /// <param name="body">Updated entity</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Entity does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Cluster/ManagedNetworks/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ManagedNetwork), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult ClusterUpdateEntityAsync([FromRoute][Required]int? id, [FromBody]ManagedNetwork body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ManagedNetwork));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Subnets\" : [ {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  }, {\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"NetworkPrefixLength\" : 1,\n    \"AddressFamily\" : \"Ipv4\"\n  } ],\n  \"Description\" : \"Description\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Members\" : [ {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"HostDnsSuffix\" : \"HostDnsSuffix\",\n    \"IsSessionMember\" : true,\n    \"SessionMemberStatus\" : \"Unknown\",\n    \"SyncStatus\" : \"SyncStatus\",\n    \"SessionMemberRoles\" : [ \"SessionMemberRoles\", \"SessionMemberRoles\" ],\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"Name\" : \"Name\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ManagedNetwork>(exampleJson)
                        : default(ManagedNetwork);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Using a OneIdentity Challenge Response json string, authorize download of VM compatible backups for the cluster.
        /// </summary>
        /// <param name="body"></param>
        /// <response code="204">No Content</response>
        /// <response code="400">60707 - The challenge was generated for &#x27;{action}&#x27; and cannot be used for &#x27;{action}&#x27;.</response>
        /// <response code="401">Encrypted Response is not correct</response>
        /// <response code="403">Must be primary</response>
        /// <response code="410">Must be hardware</response>
        [HttpPost]
        [Route("/service/core/v4/Cluster/VMCompatibleBackup/ChallengeResponse")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ClusterVmCompatibleAuthorizationResponseAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60707 - The challenge was generated for &#x27;{action}&#x27; and cannot be used for &#x27;{action}&#x27;.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Encrypted Response is not correct")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be primary")]
        [SwaggerResponse(statusCode: 410, type: typeof(ApiError), description: "Must be hardware")]
        public virtual IActionResult ClusterVmCompatibleAuthorizationResponseAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 410 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(410, default(ApiError));

            throw new NotImplementedException();
        }
    }
}
