/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AccessRequestsApiController : ControllerBase
    { 
        /// <summary>
        /// Acknowledges requests that have been denied/revoked/expired
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Brief description of why action is justified</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must be the requester of this access request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/Acknowledge")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsAcknowledgeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be the requester of this access request")]
        public virtual IActionResult AccessRequestsAcknowledgeAsync([FromRoute][Required]string id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Approves the AccessRequest
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Brief description of why action is justified</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to approve the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/Approve")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsApproveAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to approve the request")]
        public virtual IActionResult AccessRequestsApproveAsync([FromRoute][Required]string id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple access request approvals
        /// </summary>
        /// <param name="body">Approval requests to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to approve the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/BatchApprove")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsApproveMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestApprovalBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to approve the request")]
        public virtual IActionResult AccessRequestsApproveMultipleAsync([FromBody]List<ApproveRequest> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestApprovalBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"Comment\" : \"Comment\",\n    \"RequestId\" : \"RequestId\"\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"Comment\" : \"Comment\",\n    \"RequestId\" : \"RequestId\"\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestApprovalBatchResponse>>(exampleJson)
                        : default(List<AccessRequestApprovalBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Cancels the AccessRequest
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Brief description of why action is justified</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must be the requester of this access request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/Cancel")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCancelAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be the requester of this access request")]
        public virtual IActionResult AccessRequestsCancelAsync([FromRoute][Required]string id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns control of the session/password and finish AccessRequest
        /// </summary>
        /// <param name="id">Unique identifier of the access request</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must be the requester of this access request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/CheckIn")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCheckInAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be the requester of this access request")]
        public virtual IActionResult AccessRequestsCheckInAsync([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Releases the password for this asset request if the request is approved and active
        /// </summary>
        /// <param name="id">Unique identifier of the access request</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must be the requester of this access request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/CheckOutPassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCheckOutPasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be the requester of this access request")]
        public virtual IActionResult AccessRequestsCheckOutPasswordAsync([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Releases the SSH key information for this asset request if the request is approved and active
        /// </summary>
        /// <param name="id">Unique identifier of the access request</param>
        /// <param name="keyFormat">The format of the SSH private key (defaults to OpenSsh)&lt;br /&gt;&lt;br /&gt;              - OpenSsh - OpenSSH legacy PEM format&lt;br /&gt;              - Ssh2 - Tectia format for use with tools from SSH.com&lt;br /&gt;              - Putty - Putty format for use with PuTTY tools&lt;br /&gt;</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must be the requester of this access request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/CheckOutSshKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCheckOutSshKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SshKeyData), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must be the requester of this access request")]
        public virtual IActionResult AccessRequestsCheckOutSshKeyAsync([FromRoute][Required]string id, [FromQuery]SshKeyFormat keyFormat)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SshKeyData));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Fingerprint\" : \"Fingerprint\",\n  \"PrivateKey\" : \"PrivateKey\",\n  \"FingerprintSha256\" : \"FingerprintSha256\",\n  \"KeyType\" : \"Unknown\",\n  \"PublicKey\" : \"PublicKey\",\n  \"Passphrase\" : \"Passphrase\",\n  \"SshKeyFormat\" : \"OpenSsh\",\n  \"KeyLength\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SshKeyData>(exampleJson)
                        : default(SshKeyData);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Closes a AccessRequest pending review. Used by an admin when a review cannot be completed.
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Brief description of why action is justified</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission and request must be in {PendingReview} state</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/Close")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCloseAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission and request must be in {PendingReview} state")]
        public virtual IActionResult AccessRequestsCloseAsync([FromRoute][Required]string id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Adds a new NewAccessRequest to the appliance
        /// </summary>
        /// <param name="body">NewAccessRequest to create</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to make the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCreateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to make the request")]
        public virtual IActionResult AccessRequestsCreateAsync([FromBody]NewAccessRequest body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple new access requests
        /// </summary>
        /// <param name="body">New access requests to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to make the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/BatchCreate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsCreateMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to make the request")]
        public virtual IActionResult AccessRequestsCreateMultipleAsync([FromBody]List<NewAccessRequest> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"AccountId\" : 6,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"RequestedDurationMinutes\" : 41,\n    \"IsEmergency\" : false,\n    \"AllowSraSessionLaunch\" : true,\n    \"RequestedDurationHours\" : 5,\n    \"AssetId\" : 1,\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonCodeId\" : 5,\n    \"RequestedDurationDays\" : 17\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"AccessRequestType\" : \"Password\",\n    \"AccountId\" : 6,\n    \"ReasonComment\" : \"ReasonComment\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"RequestedDurationMinutes\" : 41,\n    \"IsEmergency\" : false,\n    \"AllowSraSessionLaunch\" : true,\n    \"RequestedDurationHours\" : 5,\n    \"AssetId\" : 1,\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonCodeId\" : 5,\n    \"RequestedDurationDays\" : 17\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestBatchResponse>>(exampleJson)
                        : default(List<AccessRequestBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Denies the AccessRequest
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Brief description of why action is justified</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to deny the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/Deny")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsDenyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to deny the request")]
        public virtual IActionResult AccessRequestsDenyAsync([FromRoute][Required]string id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple access request denials
        /// </summary>
        /// <param name="body">Denial requests to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to deny the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/BatchDeny")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsDenyMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestDenyBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to deny the request")]
        public virtual IActionResult AccessRequestsDenyMultipleAsync([FromBody]List<DenyRequest> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestDenyBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"Comment\" : \"Comment\",\n    \"RequestId\" : \"RequestId\"\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"Comment\" : \"Comment\",\n    \"RequestId\" : \"RequestId\"\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestDenyBatchResponse>>(exampleJson)
                        : default(List<AccessRequestDenyBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all active sessions
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests/ActiveSessions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetActiveSessionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ActiveSession>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AccessRequestsGetActiveSessionsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ActiveSession>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccessRequestId\" : \"AccessRequestId\",\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 6,\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetName\" : \"AssetName\",\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"State\" : \"None\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetId\" : 0,\n  \"SessionId\" : 1\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccessRequestId\" : \"AccessRequestId\",\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 6,\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetName\" : \"AssetName\",\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"State\" : \"None\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetId\" : 0,\n  \"SessionId\" : 1\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ActiveSession>>(exampleJson)
                        : default(List<ActiveSession>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets Approver Set of a single AccessRequest
        /// </summary>
        /// <param name="id">Unique ID of AccessRequest</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Must have PolicyAdmin or Auditor permission or be a requester, approver, or reviewer of the  request</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests/{id}/ApproverSet")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetApproverSetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestApproverSet>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AccessRequestsGetApproverSetAsync([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestApproverSet>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"RequiredApprovers\" : 0,\n  \"Approvers\" : [ {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6\n  }, {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6\n  } ]\n}, {\n  \"RequiredApprovers\" : 0,\n  \"Approvers\" : [ {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6\n  }, {\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestApproverSet>>(exampleJson)
                        : default(List<AccessRequestApproverSet>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of AccessRequest entities for the currently authenticated user
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequest>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AccessRequestsGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequest>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}, {\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequest>>(exampleJson)
                        : default(List<AccessRequest>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single AccessRequest
        /// </summary>
        /// <param name="id">Unique ID of AccessRequest</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Must have PolicyAdmin or Auditor permission or be a requester, approver, or reviewer of the  request</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AccessRequestsGetByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific session of an AccessRequest
        /// </summary>
        /// <param name="id">Unique ID of AccessRequest</param>
        /// <param name="sessionId">Unique ID of the session</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Must have PolicyAdmin or Auditor permission or be a requester, approver, or reviewer of the  request</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests/{id}/Sessions/{sessionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetSessionByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestSession), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AccessRequestsGetSessionByIdAsync([FromRoute][Required]string id, [FromRoute][Required]int? sessionId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestSession));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"State\" : \"None\",\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestSession>(exampleJson)
                        : default(AccessRequestSession);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve the session playback data required to replay the session recording matching this session id.
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="sessionId">Unique ID of the session to replay</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests/{id}/Sessions/{sessionId}/Playback")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetSessionPlaybackDataAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionPlaybackData), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AccessRequestsGetSessionPlaybackDataAsync([FromRoute][Required]string id, [FromRoute][Required]int? sessionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionPlaybackData));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"archive_server_address\" : \"archive_server_address\",\n  \"password\" : \"password\",\n  \"download_url\" : \"download_url\",\n  \"session_recording\" : \"session_recording\",\n  \"active\" : true,\n  \"perma_link\" : \"perma_link\",\n  \"archive_share_name\" : \"archive_share_name\",\n  \"playback_url\" : \"playback_url\",\n  \"version\" : 0,\n  \"terminate_url\" : \"terminate_url\",\n  \"authorization_header\" : \"authorization_header\",\n  \"username\" : \"username\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionPlaybackData>(exampleJson)
                        : default(SessionPlaybackData);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all sessions for a specific AccessRequest
        /// </summary>
        /// <param name="id">Unique ID of AccessRequest</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/AccessRequests/{id}/Sessions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsGetSessionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestSession>), description: "Success")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AccessRequestsGetSessionsAsync([FromRoute][Required]string id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestSession>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"State\" : \"None\",\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 1\n}, {\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"State\" : \"None\",\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 1\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestSession>>(exampleJson)
                        : default(List<AccessRequestSession>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Initiate the session
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Configuration for initiating session</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to initiate the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/InitializeSession")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsInitializeSessionAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionsLaunchData), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to initiate the request")]
        public virtual IActionResult AccessRequestsInitializeSessionAsync([FromRoute][Required]string id, [FromBody]InitiateSessionParameters body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionsLaunchData));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"TelnetConnectionString\" : \"TelnetConnectionString\",\n  \"RdpConnectionFile\" : \"RdpConnectionFile\",\n  \"RdpHostComputer\" : \"RdpHostComputer\",\n  \"SpsInitiate\" : true,\n  \"ConnectionUri\" : \"ConnectionUri\",\n  \"RdpConnectionString\" : \"RdpConnectionString\",\n  \"Token\" : \"Token\",\n  \"SshConnectionString\" : \"SshConnectionString\",\n  \"SessionId\" : 0,\n  \"SraConnectionUri\" : \"SraConnectionUri\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionsLaunchData>(exampleJson)
                        : default(SessionsLaunchData);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reviews the AccessRequest release
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="body">Brief description of why action is justified</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to review the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/{id}/Review")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsReviewAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequest), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to review the request")]
        public virtual IActionResult AccessRequestsReviewAsync([FromRoute][Required]string id, [FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequest));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 0,\n  \"SessionModuleConnectionId\" : 6,\n  \"RequireReviewerComment\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"AssetPlatformType\" : \"Unknown\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"WasCheckedOut\" : true,\n  \"CurrentReviewerCount\" : 5,\n  \"RequiredReviewerCount\" : 7,\n  \"AssetPlatformId\" : 7,\n  \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"Sessions\" : [ {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  }, {\n    \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"HasRecording\" : true,\n    \"ApplianceName\" : \"ApplianceName\",\n    \"State\" : \"None\",\n    \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ApplianceId\" : \"ApplianceId\",\n    \"SessionId\" : 1\n  } ],\n  \"ReasonCode\" : {\n    \"Description\" : \"Description\",\n    \"Id\" : 8,\n    \"Name\" : \"Name\"\n  },\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n  \"AllowSessionSshKeyRelease\" : true,\n  \"State\" : \"New\",\n  \"PolicyName\" : \"PolicyName\",\n  \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n  \"Id\" : \"Id\",\n  \"AssetId\" : 1,\n  \"RequiredApprovalCount\" : 4,\n  \"RequestedDurationDays\" : 7,\n  \"AccountName\" : \"AccountName\",\n  \"NeedsAcknowledgement\" : true,\n  \"AccessRequestType\" : \"Password\",\n  \"WasRevoked\" : true,\n  \"ApprovedByMe\" : true,\n  \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequestedDurationHours\" : 9,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 6,\n  \"DurationInMinutes\" : 2,\n  \"RequestedDurationMinutes\" : 3,\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"RequestAvailability\" : [ {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n  \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"WorkflowActions\" : [ {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  }, {\n    \"Comment\" : \"Comment\",\n    \"ActionType\" : \"AcknowledgeRequest\",\n    \"User\" : {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    },\n    \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SessionId\" : 1\n  } ],\n  \"RequesterDisplayName\" : \"RequesterDisplayName\",\n  \"RequesterId\" : 2,\n  \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"WasEvicted\" : true,\n  \"AssetSshHostKey\" : \"AssetSshHostKey\",\n  \"CurrentApprovalCount\" : 5,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 1\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequest>(exampleJson)
                        : default(AccessRequest);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple access request reviews
        /// </summary>
        /// <param name="body">Review requests to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have been granted rights by an access policy to review the request</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/BatchReview")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsReviewMultipleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestReviewBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have been granted rights by an access policy to review the request")]
        public virtual IActionResult AccessRequestsReviewMultipleAsync([FromBody]List<ReviewRequest> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestReviewBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"Comment\" : \"Comment\",\n    \"RequestId\" : \"RequestId\"\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"AccountId\" : 0,\n    \"SessionModuleConnectionId\" : 6,\n    \"RequireReviewerComment\" : true,\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"WasDenied\" : true,\n    \"RequesterUsername\" : \"RequesterUsername\",\n    \"AssetPlatformType\" : \"Unknown\",\n    \"TicketNumber\" : \"TicketNumber\",\n    \"AllowSraSessionLaunch\" : true,\n    \"WasCheckedOut\" : true,\n    \"CurrentReviewerCount\" : 5,\n    \"RequiredReviewerCount\" : 7,\n    \"AssetPlatformId\" : 7,\n    \"StateChangedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ReasonComment\" : \"ReasonComment\",\n    \"WasExpired\" : true,\n    \"Sessions\" : [ {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    }, {\n      \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"HasRecording\" : true,\n      \"ApplianceName\" : \"ApplianceName\",\n      \"State\" : \"None\",\n      \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"ApplianceId\" : \"ApplianceId\",\n      \"SessionId\" : 1\n    } ],\n    \"ReasonCode\" : {\n      \"Description\" : \"Description\",\n      \"Id\" : 8,\n      \"Name\" : \"Name\"\n    },\n    \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n    \"AssetName\" : \"AssetName\",\n    \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n    \"RequesterEmailAddress\" : \"RequesterEmailAddress\",\n    \"AllowSessionSshKeyRelease\" : true,\n    \"State\" : \"New\",\n    \"PolicyName\" : \"PolicyName\",\n    \"AllowSubsequentAccessRequestsWithoutReview\" : true,\n    \"Id\" : \"Id\",\n    \"AssetId\" : 1,\n    \"RequiredApprovalCount\" : 4,\n    \"RequestedDurationDays\" : 7,\n    \"AccountName\" : \"AccountName\",\n    \"NeedsAcknowledgement\" : true,\n    \"AccessRequestType\" : \"Password\",\n    \"WasRevoked\" : true,\n    \"ApprovedByMe\" : true,\n    \"ExpiresOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"RequestedDurationHours\" : 9,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"AccountAssetId\" : 6,\n    \"DurationInMinutes\" : 2,\n    \"RequestedDurationMinutes\" : 3,\n    \"WasCancelled\" : true,\n    \"IsEmergency\" : true,\n    \"RequestAvailability\" : [ {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    }, {\n      \"Begin\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"End\" : \"2000-01-23T04:56:07.000+00:00\"\n    } ],\n    \"CreatedOn\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AssetPlatformDisplayName\" : \"AssetPlatformDisplayName\",\n    \"RequestedFor\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"WorkflowActions\" : [ {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    }, {\n      \"Comment\" : \"Comment\",\n      \"ActionType\" : \"AcknowledgeRequest\",\n      \"User\" : {\n        \"IdentityProviderId\" : 4,\n        \"FullDisplayName\" : \"FullDisplayName\",\n        \"DomainName\" : \"DomainName\",\n        \"DisplayName\" : \"DisplayName\",\n        \"IdentityProviderName\" : \"IdentityProviderName\",\n        \"Id\" : 0,\n        \"EmailAddress\" : \"EmailAddress\",\n        \"IsSystemOwned\" : true,\n        \"Name\" : \"Name\"\n      },\n      \"OccurredOn\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"SessionId\" : 1\n    } ],\n    \"RequesterDisplayName\" : \"RequesterDisplayName\",\n    \"RequesterId\" : 2,\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\",\n    \"AllowSessionPasswordRelease\" : true,\n    \"WasEvicted\" : true,\n    \"AssetSshHostKey\" : \"AssetSshHostKey\",\n    \"CurrentApprovalCount\" : 5,\n    \"AccountRequestType\" : \"None\",\n    \"PolicyId\" : 1\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : {\n    \"Comment\" : \"Comment\",\n    \"RequestId\" : \"RequestId\"\n  },\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestReviewBatchResponse>>(exampleJson)
                        : default(List<AccessRequestReviewBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Terminate the session
        /// </summary>
        /// <param name="id">Unique identifier of the AccessRequest</param>
        /// <param name="sessionId">Unique ID of the session to replay</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin permission or be an approver or reviewer</response>
        [HttpDelete]
        [Route("/service/core/v4/AccessRequests/{id}/Sessions/{sessionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsTerminateSessionAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission or be an approver or reviewer")]
        public virtual IActionResult AccessRequestsTerminateSessionAsync([FromRoute][Required]string id, [FromRoute][Required]int? sessionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Terminates the specified sessions
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission or be an approver or reviewer</response>
        [HttpPost]
        [Route("/service/core/v4/AccessRequests/ActiveSessions/Terminate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AccessRequestsTerminateSessionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestSession>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission or be an approver or reviewer")]
        public virtual IActionResult AccessRequestsTerminateSessionsAsync([FromBody]List<RequestSessionId> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestSession>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"State\" : \"None\",\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 1\n}, {\n  \"ConnectedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"HasRecording\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"State\" : \"None\",\n  \"InitializedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TerminatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 1\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestSession>>(exampleJson)
                        : default(List<AccessRequestSession>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
