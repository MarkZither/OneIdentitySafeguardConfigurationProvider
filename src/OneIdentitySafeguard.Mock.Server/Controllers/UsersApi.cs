/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Processes multiple new users
        /// </summary>
        /// <param name="body">New users to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="403">Must have UserAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Users/BatchCreate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersCreateMultipleUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersCreateMultipleUsersAsync([FromBody]List<User> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserBatchResponse>>(exampleJson)
                        : default(List<UserBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new application user
        /// </summary>
        /// <param name="body">User to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="403">Must have UserAdmin permission</response>
        /// <response code="404">User not found</response>
        [HttpPost]
        [Route("/service/core/v4/Users")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersCreateUserAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(User), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersCreateUserAsync([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes a User
        /// </summary>
        /// <remarks>Include &#x27;X-Force-Delete&#x27; header to force delete despite dependencies when given 50104 error</remarks>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60317 - Cannot delete the currently authenticated user</response>
        /// <response code="403">Must have UserAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Users/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersDeleteAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60317 - Cannot delete the currently authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersDeleteAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Processes multiple users to delete
        /// </summary>
        /// <param name="body">User Ids to process</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="403">Must have UserAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Users/BatchDelete")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersDeleteMultipleUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserBatchResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersDeleteMultipleUsersAsync([FromBody]List<int?> body, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserBatchResult>));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserBatchResult>>(exampleJson)
                        : default(List<UserBatchResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an application user photo
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have UserAdmin permission</response>
        /// <response code="404">User not found</response>
        [HttpDelete]
        [Route("/service/core/v4/Users/{id}/Photo")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersDeletePhotoAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersDeletePhotoAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Removes a preference for the given user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="name">Unique identifier of the UserPreference</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have GlobalAdmin or UserAdmin permission</response>
        /// <response code="404">Could not find the Primary</response>
        [HttpDelete]
        [Route("/service/core/v4/Users/{id}/Preferences/{name}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersDeleteUserPreferenceAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or UserAdmin permission")]
        public virtual IActionResult UsersDeleteUserPreferenceAsync([FromRoute][Required]int? id, [FromRoute][Required]string name)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Disable an event subscriber for this user
        /// </summary>
        /// <param name="id">Unique identifier of the User to update</param>
        /// <param name="subscriberId">Unique ID of the event subscriber</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin or HelpdeskAdmin permission</response>
        /// <response code="404">User or event subscriber does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Users/{id}/Subscribers/{subscriberId}/Disable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersDisableUserEventSubscriberAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EventSubscriberUser), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin or HelpdeskAdmin permission")]
        public virtual IActionResult UsersDisableUserEventSubscriberAsync([FromRoute][Required]int? id, [FromRoute][Required]int? subscriberId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventSubscriberUser));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EventSubscriberUser>(exampleJson)
                        : default(EventSubscriberUser);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enable an event subscriber for this user
        /// </summary>
        /// <param name="id">Unique identifier of the User to update</param>
        /// <param name="subscriberId">Unique ID of the event subscriber</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin or HelpdeskAdmin permission</response>
        /// <response code="404">User or event subscriber does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Users/{id}/Subscribers/{subscriberId}/Enable")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersEnableUserEventSubscriberAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EventSubscriberUser), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin or HelpdeskAdmin permission")]
        public virtual IActionResult UsersEnableUserEventSubscriberAsync([FromRoute][Required]int? id, [FromRoute][Required]int? subscriberId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventSubscriberUser));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EventSubscriberUser>(exampleJson)
                        : default(EventSubscriberUser);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get policy accounts that have been linked to this user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">User does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/LinkedPolicyAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetLinkedAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult UsersGetLinkedAccountsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the user&#x27;s photo
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user.</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Photo not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Photo")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetPhotoAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPhoto), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult UsersGetPhotoAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPhoto));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Base64PhotoData\" : \"Base64PhotoData\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPhoto>(exampleJson)
                        : default(UserPhoto);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the user&#x27;s photo in raw format (64K max size)
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <response code="200">Success</response>
        /// <response code="401">Must be an authenticated user.</response>
        /// <response code="404">User or user photo not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Photo/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetRawPhotoAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Success")]
        public virtual IActionResult UsersGetRawPhotoAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about roles this user belongs to
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserRole>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult UsersGetRolesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserRole>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserRole>>(exampleJson)
                        : default(List<UserRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single user
        /// </summary>
        /// <param name="id">Unique ID of User</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have HelpdeskAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the user&#x27;s group memberships
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/UserGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserGroupsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroup>>(exampleJson)
                        : default(List<UserGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about assets, partitions, accounts this user owns
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Ownership")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserOwnershipAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserOwnership>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserOwnershipAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserOwnership>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"OwnershipType\" : \"Unknown\",\n  \"OwnerId\" : 0,\n  \"ViaTags\" : [ {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"ViaGroups\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"UserId\" : 6,\n  \"ViaSelf\" : true,\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n}, {\n  \"OwnershipType\" : \"Unknown\",\n  \"OwnerId\" : 0,\n  \"ViaTags\" : [ {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"AssetPartitionId\" : 5,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"Description\" : \"Description\",\n    \"AssetTaggingRule\" : {\n      \"RuleConditionGroup\" : {\n        \"Children\" : [ {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        }, {\n          \"TaggingGroupingCondition\" : {\n            \"CompareValue\" : \"CompareValue\",\n            \"CompareType\" : \"EqualTo\",\n            \"ObjectAttribute\" : \"Name\"\n          }\n        } ],\n        \"LogicalJoinType\" : \"And\"\n      },\n      \"Description\" : \"Description\",\n      \"Enabled\" : true\n    },\n    \"ManagedBy\" : [ {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"IdentityProviderId\" : 4,\n      \"FullDisplayName\" : \"FullDisplayName\",\n      \"DomainName\" : \"DomainName\",\n      \"DisplayName\" : \"DisplayName\",\n      \"IdentityProviderName\" : \"IdentityProviderName\",\n      \"Id\" : 0,\n      \"EmailAddress\" : \"EmailAddress\",\n      \"IsSystemOwned\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Id\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"ViaGroups\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"UserId\" : 6,\n  \"ViaSelf\" : true,\n  \"Id\" : \"Id\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserOwnership>>(exampleJson)
                        : default(List<UserOwnership>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets information about partitions this user owns
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/OwnedPartitions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserPartitionsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetPartition>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserPartitionsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetPartition>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"DefaultProfileName\" : \"DefaultProfileName\",\n  \"DefaultSshKeyProfileId\" : 5,\n  \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DefaultProfileId\" : 1,\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"ManagedBy\" : [ {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  }, {\n    \"IdentityProviderId\" : 4,\n    \"FullDisplayName\" : \"FullDisplayName\",\n    \"DomainName\" : \"DomainName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IdentityProviderName\" : \"IdentityProviderName\",\n    \"Id\" : 0,\n    \"EmailAddress\" : \"EmailAddress\",\n    \"IsSystemOwned\" : true,\n    \"Name\" : \"Name\"\n  } ],\n  \"DefaultProfileName\" : \"DefaultProfileName\",\n  \"DefaultSshKeyProfileId\" : 5,\n  \"DefaultSshKeyProfileName\" : \"DefaultSshKeyProfileName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DefaultProfileId\" : 1,\n  \"Id\" : 0,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetPartition>>(exampleJson)
                        : default(List<AssetPartition>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific preference for the given user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="name">Unique identifier of the UserPreference</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">User or Preference not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Preferences/{name}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserPreferenceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPreference), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserPreferenceAsync([FromRoute][Required]int? id, [FromRoute][Required]string name, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPreference));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPreference>(exampleJson)
                        : default(UserPreference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets all preferences for the given user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Preferences")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserPreferencesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserPreference>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserPreferencesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserPreference>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}, {\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserPreference>>(exampleJson)
                        : default(List<UserPreference>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single subscriber for this user
        /// </summary>
        /// <param name="id">Unique ID of an User</param>
        /// <param name="subscriberId">Unique ID of the event subscriber</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">User does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Subscribers/{subscriberId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserSubscriberByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(EventSubscriberUser), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserSubscriberByIdAsync([FromRoute][Required]int? id, [FromRoute][Required]int? subscriberId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EventSubscriberUser));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<EventSubscriberUser>(exampleJson)
                        : default(EventSubscriberUser);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of subscriptions for a user
        /// </summary>
        /// <param name="id">Unique ID of the user</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Users/{id}/Subscribers")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUserSubscribersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EventSubscriberUser>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUserSubscribersAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<EventSubscriberUser>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"ObjectId\" : 1,\n  \"Subscriptions\" : [ {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  }, {\n    \"ActivityLogFlag\" : true,\n    \"AllowedAdminRoles\" : [ null, null ],\n    \"Category\" : \"Unknown\",\n    \"Description\" : \"Description\",\n    \"SyslogFlag\" : true,\n    \"EmailFlag\" : true,\n    \"Properties\" : [ {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    }, {\n      \"Description\" : \"Description\",\n      \"IsCommon\" : true,\n      \"Name\" : \"Name\"\n    } ],\n    \"Name\" : \"Unknown\",\n    \"AllowPartitionOwner\" : true,\n    \"AsyncUnicastFlag\" : true,\n    \"SnmpFlag\" : true,\n    \"Obsolete\" : true,\n    \"AsyncBroadcastFlag\" : true,\n    \"CategoryDisplayName\" : \"CategoryDisplayName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"IsObjectAware\" : true,\n    \"Level\" : \"Debug\",\n    \"AsyncMulticastFlag\" : true\n  } ],\n  \"UserEmailAddress\" : \"UserEmailAddress\",\n  \"EmailAddress\" : \"EmailAddress\",\n  \"ObjectType\" : \"Unknown\",\n  \"Type\" : \"Unknown\",\n  \"CreatedByUserId\" : 5,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"PartitionOwnerIsSubscribed\" : true,\n  \"UserId\" : 6,\n  \"SnmpProperties\" : {\n    \"EngineId\" : \"EngineId\",\n    \"EncryptionType\" : \"None\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Version\" : 1,\n    \"AuthenticationPassword\" : \"AuthenticationPassword\",\n    \"HasAuthenticationPassword\" : true,\n    \"Port\" : 5,\n    \"AuthenticationUserName\" : \"AuthenticationUserName\",\n    \"EncryptionPassword\" : \"EncryptionPassword\",\n    \"HasEncryptionPassword\" : true,\n    \"Community\" : \"public\",\n    \"AuthenticationType\" : \"None\"\n  },\n  \"SubscribeToAllEvents\" : true,\n  \"SyslogProperties\" : {\n    \"LogFormat\" : \"CEF\",\n    \"UseClientCertificate\" : false,\n    \"TcpFraming\" : \"OctetCounting\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"UseSslEncryption\" : false,\n    \"Port\" : 19536,\n    \"SyslogServerId\" : 1,\n    \"SyslogServerName\" : \"SyslogServerName\",\n    \"Facility\" : \"Kernel\",\n    \"Protocol\" : \"LegacyUdp\",\n    \"VerifySslCertificate\" : false,\n    \"KeyPrefix\" : \"KeyPrefix\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : true,\n  \"UserDisplayName\" : \"UserDisplayName\",\n  \"IsApplianceShared\" : true,\n  \"WorkflowUserIsSubscribed\" : true,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<EventSubscriberUser>>(exampleJson)
                        : default(List<EventSubscriberUser>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of users
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have HelpdeskAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Users")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersGetUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult UsersGetUsersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove user linked accounts
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">List of accounts to be linked</param>
        /// <response code="200">Success</response>
        /// <response code="400">70008 - Invalid enum value</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">User does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Users/{id}/LinkedPolicyAccounts/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersModifyLinkedAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "70008 - Invalid enum value")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UsersModifyLinkedAccountsAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<PolicyAccount> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove roles a user should be assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Role to assign the User to</param>
        /// <response code="200">Success</response>
        /// <response code="400">60103 - Missing one or more parameters</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Updated roles not found</response>
        [HttpPost]
        [Route("/service/core/v4/Users/{id}/Roles/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersModifyRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserRole>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60103 - Missing one or more parameters")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UsersModifyRolesAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<UserRole> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserRole>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserRole>>(exampleJson)
                        : default(List<UserRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing application user&#x27;s photo in binary form
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="body"></param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60316 - Missing photo data</response>
        /// <response code="403">Must have UserAdmin permission</response>
        /// <response code="404">User does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}/Photo/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersPutRawPhotoAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60316 - Missing photo data")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersPutRawPhotoAsync([FromRoute][Required]int? id, [FromBody]PhotoRawBody1 body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates set of accounts linked to this user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="body">List of accounts to be linked</param>
        /// <response code="200">Success</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">User does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}/LinkedPolicyAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersSaveLinkedAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PolicyAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UsersSaveLinkedAccountsAsync([FromRoute][Required]int? id, [FromBody]List<PolicyAccount> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PolicyAccount>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DomainName\" : \"DomainName\",\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"LinkedUsersCount\" : 9,\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"AccountType\" : \"Asset\",\n  \"Name\" : \"Name\",\n  \"NotifyOwnersOnly\" : true,\n  \"HasSshKey\" : true,\n  \"SuspendAccountWhenCheckedIn\" : true,\n  \"AltLoginName\" : \"AltLoginName\",\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"NetBiosName\" : \"NetBiosName\",\n  \"Id\" : 8,\n  \"Disabled\" : true,\n  \"HasPassword\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PolicyAccount>>(exampleJson)
                        : default(List<PolicyAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets the password of the local user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="body">Password to set for this user</param>
        /// <param name="changePasswordAtNextLogin">Force user to change password at next login</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60247 - Password does not meet the complexity requirements</response>
        /// <response code="403">Must have HelpdeskAdmin permission</response>
        /// <response code="404">User not found</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}/Password")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersSetPasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ValidationError), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60247 - Password does not meet the complexity requirements")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin permission")]
        public virtual IActionResult UsersSetPasswordAsync([FromRoute][Required]int? id, [FromBody]string body, [FromQuery]bool? changePasswordAtNextLogin)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ValidationError));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Message\" : \"Message\",\n  \"ValidationErrors\" : [ \"\", \"\" ],\n  \"InnerError\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"Code\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ValidationError>(exampleJson)
                        : default(ValidationError);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Specifies which roles a user should be assigned to explicitly
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="body">Roles to assign the User to</param>
        /// <response code="200">Success</response>
        /// <response code="400">60009 - Missing member ID values</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Updated roles not found</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersSetRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserRole>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60009 - Missing member ID values")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UsersSetRolesAsync([FromRoute][Required]int? id, [FromBody]List<UserRole> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserRole>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Membership\" : [ {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  }, {\n    \"RoleMemberIsUserGroup\" : true,\n    \"RoleMemberDisplayName\" : \"RoleMemberDisplayName\",\n    \"RoleMemberId\" : 5\n  } ],\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserRole>>(exampleJson)
                        : default(List<UserRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates or create a preference for the given user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="name">Unique identifier of the UserPreference</param>
        /// <param name="body">Value to set for this preference</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin or UserAdmin permission</response>
        /// <response code="404">User not found</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}/Preferences/{name}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersSetUserPreferenceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserPreference), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or UserAdmin permission")]
        public virtual IActionResult UsersSetUserPreferenceAsync([FromRoute][Required]int? id, [FromRoute][Required] [MaxLength(255)]string name, [FromBody]UserPreference body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserPreference));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Value\" : \"Value\",\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserPreference>(exampleJson)
                        : default(UserPreference);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Unlocks the specified user account
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60261 - This action is only available for local identity provider users</response>
        /// <response code="403">Must have HelpdeskAdmin permission</response>
        /// <response code="404">User not found</response>
        [HttpPost]
        [Route("/service/core/v4/Users/{id}/Unlock")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUnlockAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60261 - This action is only available for local identity provider users")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin permission")]
        public virtual IActionResult UsersUnlockAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Processes multiple users to update
        /// </summary>
        /// <param name="body">Users to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">60245 - Missing request body</response>
        /// <response code="403">Must have UserAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Users/BatchUpdate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUpdateMultipleUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersUpdateMultipleUsersAsync([FromBody]List<User> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserBatchResponse>>(exampleJson)
                        : default(List<UserBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing application user&#x27;s photo
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="body">Updated Photo (64K max size)</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have UserAdmin permission</response>
        /// <response code="404">User does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}/Photo")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUpdatePhotoAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersUpdatePhotoAsync([FromRoute][Required]int? id, [FromBody]UserPhoto body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates an existing application user
        /// </summary>
        /// <param name="id">Unique identifier of the User</param>
        /// <param name="body">Updated User</param>
        /// <response code="200">Success</response>
        /// <response code="400">60263 - Cannot disable the currently authenticated user</response>
        /// <response code="403">Must have UserAdmin permission</response>
        /// <response code="404">User does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Users/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersUpdateUserAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60263 - Cannot disable the currently authenticated user")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UsersUpdateUserAsync([FromRoute][Required]int? id, [FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<User>(exampleJson)
                        : default(User);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Validates that a password meets requirements
        /// </summary>
        /// <param name="body">Password to validate</param>
        /// <response code="200">Success</response>
        /// <response code="400">60247 - Password did not meet complexity requirements</response>
        /// <response code="403">Must have HelpdeskAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/Users/ValidatePassword")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UsersValidatePasswordAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60247 - Password did not meet complexity requirements")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin permission")]
        public virtual IActionResult UsersValidatePasswordAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
