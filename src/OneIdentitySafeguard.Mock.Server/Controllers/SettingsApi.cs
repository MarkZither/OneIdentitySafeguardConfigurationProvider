/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SettingsApiController : ControllerBase
    { 
        /// <summary>
        /// Gets all of the application&#x27;s settings
        /// </summary>
        /// <remarks>&lt;table&gt;    &lt;tr&gt;      &lt;th&gt;Setting Name&lt;/th&gt;      &lt;th&gt;Description&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Inform User of Bad Password&lt;/td&gt;      &lt;td&gt;During login, using the Local provider, display a friendly error message if the user&#x27;s password is incorrect.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Inform User of Disabled Account&lt;/td&gt;      &lt;td&gt;During login, using the Local provider, display a friendly error message if the user&#x27;s account is disabled.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Inform User of Locked Account&lt;/td&gt;      &lt;td&gt;During login, using the Local provider, display a friendly error message if the user&#x27;s account is locked.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Inform User of Invalid Token&lt;/td&gt;      &lt;td&gt;Return a friendly error message and reason when an invalid or expired authentication token is used when making an API request.  Otherwise, a generic \&quot;Access denied\&quot; error will be returned.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;User Lockout Duration&lt;/td&gt;      &lt;td&gt;The amount of time, in minutes, when using the Local provider for which a locked user will not be able to log in.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;User Lockout Threshold&lt;/td&gt;      &lt;td&gt;The number of consecutive failed log in attempts before the user is marked as locked.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;User Lockout Window&lt;/td&gt;      &lt;td&gt;The amount of time, in minutes, when using the Local provider for which the User Lockout Threshold will be accumulated.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Disable After Inactive for n Days&lt;/td&gt;      &lt;td&gt;The amount of time, in days, when using the Local provider after which a user will be marked as disabled and cannot log in.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Maximum Password Age&lt;/td&gt;      &lt;td&gt;The amount of time, in days, when using the Local provider after which the user must change their password.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Minimum Password Age&lt;/td&gt;      &lt;td&gt;The amount of time, in days, when using the Local provider for which a user cannot change their password.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Password History&lt;/td&gt;      &lt;td&gt;When using the Local provider, the number of unique new passwords that must be used when a user changes their password before an old password can be reused.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Password Grace Period&lt;/td&gt;      &lt;td&gt;During login, using the Local provider, display a password expiration reminder this many days before a user&#x27;s password will expire.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Token Lifetime&lt;/td&gt;      &lt;td&gt;The amount of time, in seconds, for which an API authentication token is valid for.  This also corresponds to the amount of time you can remain logged into the Safeguard Desktop Client application before being logged out.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Change Password Url&lt;/td&gt;      &lt;td&gt;Not used.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Inform User of Expired Password&lt;/td&gt;      &lt;td&gt;During login, using the Local provider, display a friendly error message if the user&#x27;s password is expired.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Maximum Notification Recipients&lt;/td&gt;      &lt;td&gt;Each set of approvers, reviewers, and emergency contacts can have up to this many recipients.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Expiration Warning Duration Days&lt;/td&gt;      &lt;td&gt;The number of days before an Access Request Policy is set to expire at which a PolicyAdmin will receive a reminder.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Default User Timezone&lt;/td&gt;      &lt;td&gt;Available time zones that can be assigned to users as their default time zone.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Max Platform Task Retries&lt;/td&gt;      &lt;td&gt;The number of retries that will be attempted on a platform task, such as Change Password.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Web Client Inactivity Timeout&lt;/td&gt;      &lt;td&gt;The amount of idle time, in minutes, after which a user will be automatically logged out of the Safeguard web site.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Use Fine Grained UserGroup Permissions&lt;/td&gt;      &lt;td&gt;Use fine grained UserGroup permissions, allowing more Admins to perform CRUD operations on UserGroups.  Set to false to revert to previous behavior.&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;      &lt;td&gt;Show Friendly Authentication Error Messages&lt;/td&gt;      &lt;td&gt;When set to true, users authenticating against Active Directory or LDAP will have friendly, specific error messages displayed when the login attempt fails. This includes individual messages for \&quot;Invalid password\&quot; or \&quot;Unknown username\&quot;, as well as other possibilities, depending on the provider, like \&quot;The specified account has been locked\&quot;. When set to false, only a generic error message of \&quot;Invalid username or bad password\&quot; will ever be displayed on the login page.&lt;/td&gt;    &lt;/tr&gt;  &lt;/table&gt;</remarks>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Settings")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SettingsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Setting>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult SettingsGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Setting>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"DefaultValue\" : \"DefaultValue\",\n  \"Options\" : [ {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  } ],\n  \"Category\" : \"Category\",\n  \"Value\" : \"Value\",\n  \"MinValue\" : 0,\n  \"MaxValue\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"DefaultValue\" : \"DefaultValue\",\n  \"Options\" : [ {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  } ],\n  \"Category\" : \"Category\",\n  \"Value\" : \"Value\",\n  \"MinValue\" : 0,\n  \"MaxValue\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Setting>>(exampleJson)
                        : default(List<Setting>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets an application setting
        /// </summary>
        /// <param name="id">Unique ID of Setting</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Setting not found</response>
        [HttpGet]
        [Route("/service/core/v4/Settings/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SettingsGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Setting), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult SettingsGetByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Setting));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"DefaultValue\" : \"DefaultValue\",\n  \"Options\" : [ {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  } ],\n  \"Category\" : \"Category\",\n  \"Value\" : \"Value\",\n  \"MinValue\" : 0,\n  \"MaxValue\" : 6,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Setting>(exampleJson)
                        : default(Setting);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a setting&#x27;s value
        /// </summary>
        /// <param name="id">Unique identifier of the Setting to update</param>
        /// <param name="body">Updated Setting</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have GlobalAdmin, OperationsAdmin, PolicyAdmin or AssetAdmin permission</response>
        /// <response code="404">Setting does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/Settings/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SettingsUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Setting), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, OperationsAdmin, PolicyAdmin or AssetAdmin permission")]
        public virtual IActionResult SettingsUpdateEntityAsync([FromRoute][Required]string id, [FromBody]Setting body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Setting));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"DefaultValue\" : \"DefaultValue\",\n  \"Options\" : [ {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Value\" : \"Value\"\n  } ],\n  \"Category\" : \"Category\",\n  \"Value\" : \"Value\",\n  \"MinValue\" : 0,\n  \"MaxValue\" : 6,\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Setting>(exampleJson)
                        : default(Setting);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
