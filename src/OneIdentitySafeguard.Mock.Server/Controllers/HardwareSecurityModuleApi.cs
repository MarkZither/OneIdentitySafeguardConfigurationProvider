/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class HardwareSecurityModuleApiController : ControllerBase
    { 
        /// <summary>
        /// Updates the appliances this client certificate is used by.
        /// </summary>
        /// <param name="thumbprint"></param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/HardwareSecurityModule/ClientCertificates/{thumbprint}/Appliances")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleAssignClientCertificateByThumbprintAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Appliance>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModuleAssignClientCertificateByThumbprintAsync([FromRoute][Required]string thumbprint, [FromBody]List<Appliance> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Appliance>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Appliance>>(exampleJson)
                        : default(List<Appliance>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a client certificate.
        /// </summary>
        /// <param name="thumbprint">The thumbprint of the certificate to delete.</param>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/HardwareSecurityModule/ClientCertificates/{thumbprint}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleDeleteClientCertificatesAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModuleDeleteClientCertificatesAsync([FromRoute][Required]string thumbprint)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Disables the hardware security module integration.
        /// </summary>
        /// <response code="202">Accepted</response>
        /// <response code="204">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/HardwareSecurityModule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleDeleteHardwareSecurityModuleAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModuleDeleteHardwareSecurityModuleAsync()
        { 
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a server certificate.
        /// </summary>
        /// <param name="thumbprint">The thumbprint of the certificate to delete.</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/HardwareSecurityModule/ServerCertificates/{thumbprint}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleDeleteServerCertificatesAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModuleDeleteServerCertificatesAsync([FromRoute][Required]string thumbprint)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets the appliances the specified hardware security module certificate is used by.
        /// </summary>
        /// <param name="thumbprint"></param>
        /// <param name="filter"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        /// <param name="count"></param>
        /// <param name="fields"></param>
        /// <param name="orderby"></param>
        /// <param name="q"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule/ClientCertificates/{thumbprint}/Appliances")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetAppliancesByThumbprintAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Appliance>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetAppliancesByThumbprintAsync([FromRoute][Required]string thumbprint, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Appliance>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n}, {\n  \"Id\" : \"Id\",\n  \"Ipv6Address\" : \"Ipv6Address\",\n  \"Name\" : \"Name\",\n  \"Ipv4Address\" : \"Ipv4Address\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Appliance>>(exampleJson)
                        : default(List<Appliance>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a hardware security module client certificate.
        /// </summary>
        /// <param name="thumbprint"></param>
        /// <param name="fields"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule/ClientCertificates/{thumbprint}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetClientCertificateByThumbprintAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SslCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetClientCertificateByThumbprintAsync([FromRoute][Required]string thumbprint, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SslCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"Appliances\" : [ {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SslCertificate>(exampleJson)
                        : default(SslCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the hardware security module client certificates.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        /// <param name="count"></param>
        /// <param name="fields"></param>
        /// <param name="orderby"></param>
        /// <param name="q"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule/ClientCertificates")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetClientCertificatesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SslCertificate>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetClientCertificatesAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SslCertificate>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"Appliances\" : [ {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}, {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"Appliances\" : [ {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SslCertificate>>(exampleJson)
                        : default(List<SslCertificate>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the hardware security module integration status.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetHardwareSecurityModuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(HardwareSecurityModuleStatus), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetHardwareSecurityModuleAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(HardwareSecurityModuleStatus));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Configuration\" : {\n    \"IniFile\" : \"IniFile\",\n    \"PartitionLabel\" : \"PartitionLabel\",\n    \"CryptoOfficerPassword\" : \"CryptoOfficerPassword\"\n  },\n  \"TransitionToErrorState\" : true,\n  \"MasterKeyLabel\" : \"MasterKeyLabel\",\n  \"HealthStatus\" : \"HealthStatus\",\n  \"Enabled\" : true,\n  \"LastAccessDate\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<HardwareSecurityModuleStatus>(exampleJson)
                        : default(HardwareSecurityModuleStatus);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Forces a health check, and gets the hardware security module integration status.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule/Status")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetHardwareSecurityModuleStatusAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(HardwareSecurityModuleStatus), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetHardwareSecurityModuleStatusAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(HardwareSecurityModuleStatus));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Configuration\" : {\n    \"IniFile\" : \"IniFile\",\n    \"PartitionLabel\" : \"PartitionLabel\",\n    \"CryptoOfficerPassword\" : \"CryptoOfficerPassword\"\n  },\n  \"TransitionToErrorState\" : true,\n  \"MasterKeyLabel\" : \"MasterKeyLabel\",\n  \"HealthStatus\" : \"HealthStatus\",\n  \"Enabled\" : true,\n  \"LastAccessDate\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<HardwareSecurityModuleStatus>(exampleJson)
                        : default(HardwareSecurityModuleStatus);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a server certificate.
        /// </summary>
        /// <param name="thumbprint">The thumbprint of the certificate.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule/ServerCertificates/{thumbprint}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetServerCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetServerCertificateAsync([FromRoute][Required]string thumbprint)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the server certificates.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="page"></param>
        /// <param name="limit"></param>
        /// <param name="count"></param>
        /// <param name="fields"></param>
        /// <param name="orderby"></param>
        /// <param name="q"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/HardwareSecurityModule/ServerCertificates")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModuleGetServerCertificatesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServerCertificate>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult HardwareSecurityModuleGetServerCertificatesAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServerCertificate>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}, {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ServerCertificate>>(exampleJson)
                        : default(List<ServerCertificate>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Adds a hardware security module client certificate.
        /// </summary>
        /// <param name="body">The client certificate to add.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/HardwareSecurityModule/ClientCertificates")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModulePostClientCertificatesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SslCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModulePostClientCertificatesAsync([FromBody]HardwareSecurityModuleClientCertificate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SslCertificate));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"Appliances\" : [ {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  }, {\n    \"Id\" : \"Id\",\n    \"Ipv6Address\" : \"Ipv6Address\",\n    \"Name\" : \"Name\",\n    \"Ipv4Address\" : \"Ipv4Address\"\n  } ],\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SslCertificate>(exampleJson)
                        : default(SslCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Enables the hardware security module integration for the cluster.
        /// </summary>
        /// <param name="body">The hardware security module configuration details.</param>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission.</response>
        [HttpPost]
        [Route("/service/core/v4/HardwareSecurityModule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModulePostHardwareSecurityModuleAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission.")]
        public virtual IActionResult HardwareSecurityModulePostHardwareSecurityModuleAsync([FromBody]HardwareSecurityModuleConfiguration body)
        { 
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a server certificate.
        /// </summary>
        /// <param name="body">The server certificate to add.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/HardwareSecurityModule/ServerCertificates")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModulePostServerCertificatesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModulePostServerCertificatesAsync([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the hardware security module configuration.
        /// </summary>
        /// <param name="body">The hardware security module configuration details.</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/HardwareSecurityModule")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("HardwareSecurityModulePutHardwareSecurityModuleAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(HardwareSecurityModuleStatus), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult HardwareSecurityModulePutHardwareSecurityModuleAsync([FromBody]HardwareSecurityModuleConfiguration body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(HardwareSecurityModuleStatus));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"Configuration\" : {\n    \"IniFile\" : \"IniFile\",\n    \"PartitionLabel\" : \"PartitionLabel\",\n    \"CryptoOfficerPassword\" : \"CryptoOfficerPassword\"\n  },\n  \"TransitionToErrorState\" : true,\n  \"MasterKeyLabel\" : \"MasterKeyLabel\",\n  \"HealthStatus\" : \"HealthStatus\",\n  \"Enabled\" : true,\n  \"LastAccessDate\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<HardwareSecurityModuleStatus>(exampleJson)
                        : default(HardwareSecurityModuleStatus);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
