/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class A2ARegistrationsApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new registration
        /// </summary>
        /// <param name="body">Registration to create</param>
        /// <response code="201">Created</response>
        /// <response code="400">60245 - Missing request body.</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/A2ARegistrations")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsCreateEntityAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(Registration), description: "Created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsCreateEntityAsync([FromBody]Registration body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Registration));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 1,\n  \"Description\" : \"Description\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserId\" : 6,\n  \"VisibleToCertificateUsers\" : false,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : false,\n  \"CertificateUserThumbPrint\" : \"CertificateUserThumbPrint\",\n  \"AppName\" : \"AppName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Registration>(exampleJson)
                        : default(Registration);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove an application registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/A2ARegistrations/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsDeleteAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsDeleteAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove the access request broker information for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="accountId">Unique identifier of the retrievable account that is associated with the registration</param>
        /// <response code="201">Created</response>
        /// <response code="204">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsDeleteRegistrationRetrievableAccountAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsDeleteRegistrationRetrievableAccountAsync([FromRoute][Required]int? id, [FromRoute][Required]int? accountId)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a list of registrations
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Registration>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication")]
        public virtual IActionResult A2ARegistrationsGetAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Registration>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 1,\n  \"Description\" : \"Description\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserId\" : 6,\n  \"VisibleToCertificateUsers\" : false,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : false,\n  \"CertificateUserThumbPrint\" : \"CertificateUserThumbPrint\",\n  \"AppName\" : \"AppName\"\n}, {\n  \"CreatedByUserId\" : 1,\n  \"Description\" : \"Description\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserId\" : 6,\n  \"VisibleToCertificateUsers\" : false,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : false,\n  \"CertificateUserThumbPrint\" : \"CertificateUserThumbPrint\",\n  \"AppName\" : \"AppName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Registration>>(exampleJson)
                        : default(List<Registration>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a registration
        /// </summary>
        /// <param name="id">Unique ID of Registration</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication</response>
        /// <response code="404">Registration not found</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Registration), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication")]
        public virtual IActionResult A2ARegistrationsGetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Registration));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 1,\n  \"Description\" : \"Description\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserId\" : 6,\n  \"VisibleToCertificateUsers\" : false,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : false,\n  \"CertificateUserThumbPrint\" : \"CertificateUserThumbPrint\",\n  \"AppName\" : \"AppName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Registration>(exampleJson)
                        : default(Registration);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the API key for the access request broker for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations/{id}/AccessRequestBroker/ApiKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetRegistrationAccessRequestBrokerApiKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult A2ARegistrationsGetRegistrationAccessRequestBrokerApiKeyAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the access request broker information for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations/{id}/AccessRequestBroker")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetRegistrationAccessRequestBrokerAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(RegistrationAccessRequestBroker), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult A2ARegistrationsGetRegistrationAccessRequestBrokerAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RegistrationAccessRequestBroker));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"Groups\" : [ {\n    \"Description\" : \"Description\",\n    \"DomainName\" : \"DomainName\",\n    \"GroupId\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"DomainName\" : \"DomainName\",\n    \"GroupId\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"Users\" : [ {\n    \"ProviderName\" : \"ProviderName\",\n    \"UserName\" : \"UserName\",\n    \"DomainName\" : \"DomainName\",\n    \"UserId\" : 0,\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"LastName\" : \"LastName\",\n    \"Disabled\" : 6,\n    \"DirectoryName\" : \"DirectoryName\"\n  }, {\n    \"ProviderName\" : \"ProviderName\",\n    \"UserName\" : \"UserName\",\n    \"DomainName\" : \"DomainName\",\n    \"UserId\" : 0,\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"LastName\" : \"LastName\",\n    \"Disabled\" : 6,\n    \"DirectoryName\" : \"DirectoryName\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<RegistrationAccessRequestBroker>(exampleJson)
                        : default(RegistrationAccessRequestBroker);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the API key for a retrievable account for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="accountId">Unique identifier of the retrievable account that is associated with the registration</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}/ApiKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetRegistrationRetrievableAccountApiKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication")]
        public virtual IActionResult A2ARegistrationsGetRegistrationRetrievableAccountApiKeyAsync([FromRoute][Required]int? id, [FromRoute][Required]int? accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a retrievable account for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="accountId">Unique identifier of the retrievable account that is associated with the registration</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetRegistrationRetrievableAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(RegistrationRetrievableAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication")]
        public virtual IActionResult A2ARegistrationsGetRegistrationRetrievableAccountAsync([FromRoute][Required]int? id, [FromRoute][Required]int? accountId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RegistrationRetrievableAccount));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 1,\n  \"AccountDescription\" : \"AccountDescription\",\n  \"AccountId\" : 0,\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"DomainName\" : \"DomainName\",\n  \"AssetDescription\" : \"AssetDescription\",\n  \"AccountDisabled\" : 5,\n  \"AccountType\" : \"Asset\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<RegistrationRetrievableAccount>(exampleJson)
                        : default(RegistrationRetrievableAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the retrievable accounts for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication</response>
        [HttpGet]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsGetRegistrationRetrievableAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<RegistrationRetrievableAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or certificate based and API key authentication")]
        public virtual IActionResult A2ARegistrationsGetRegistrationRetrievableAccountsAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<RegistrationRetrievableAccount>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 1,\n  \"AccountDescription\" : \"AccountDescription\",\n  \"AccountId\" : 0,\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"DomainName\" : \"DomainName\",\n  \"AssetDescription\" : \"AssetDescription\",\n  \"AccountDisabled\" : 5,\n  \"AccountType\" : \"Asset\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AssetPartitionId\" : 1,\n  \"AccountDescription\" : \"AccountDescription\",\n  \"AccountId\" : 0,\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"DomainName\" : \"DomainName\",\n  \"AssetDescription\" : \"AssetDescription\",\n  \"AccountDisabled\" : 5,\n  \"AccountType\" : \"Asset\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<RegistrationRetrievableAccount>>(exampleJson)
                        : default(List<RegistrationRetrievableAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add a retrievable account for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="body">Updated retrievable account</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - The entity&#x27;s key value does not match the resource URI.</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsPostRegistrationRetrievableAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(RegistrationRetrievableAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsPostRegistrationRetrievableAccountAsync([FromRoute][Required]int? id, [FromBody]RegistrationRetrievableAccount body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RegistrationRetrievableAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 1,\n  \"AccountDescription\" : \"AccountDescription\",\n  \"AccountId\" : 0,\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"DomainName\" : \"DomainName\",\n  \"AssetDescription\" : \"AssetDescription\",\n  \"AccountDisabled\" : 5,\n  \"AccountType\" : \"Asset\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<RegistrationRetrievableAccount>(exampleJson)
                        : default(RegistrationRetrievableAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a retrievable account for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="accountId">Unique identifier of the retrievable account that is associated with the registration</param>
        /// <param name="body">Updated retrievable account</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - The entity&#x27;s key value does not match the resource URI.</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsPutRegistrationRetrievableAccountAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(RegistrationRetrievableAccount), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - The entity&#x27;s key value does not match the resource URI.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsPutRegistrationRetrievableAccountAsync([FromRoute][Required]int? id, [FromRoute][Required]int? accountId, [FromBody]RegistrationRetrievableAccount body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RegistrationRetrievableAccount));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 1,\n  \"AccountDescription\" : \"AccountDescription\",\n  \"AccountId\" : 0,\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"DomainName\" : \"DomainName\",\n  \"AssetDescription\" : \"AssetDescription\",\n  \"AccountDisabled\" : 5,\n  \"AccountType\" : \"Asset\",\n  \"AssetName\" : \"AssetName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<RegistrationRetrievableAccount>(exampleJson)
                        : default(RegistrationRetrievableAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Regenerate the API key for the access request broker for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/A2ARegistrations/{id}/AccessRequestBroker/ApiKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsRegenerateRegistrationAccessRequestBrokerApiKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsRegenerateRegistrationAccessRequestBrokerApiKeyAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Regenerate the API key for a retrievable account for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="accountId">Unique identifier of the retrievable account that is associated with the registration</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/A2ARegistrations/{id}/RetrievableAccounts/{accountId}/ApiKey")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsRegenerateRegistrationRetrievableAccountApiKeyAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsRegenerateRegistrationRetrievableAccountApiKeyAsync([FromRoute][Required]int? id, [FromRoute][Required]int? accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove the access request broker information for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <response code="201">Created</response>
        /// <response code="204">Success</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/A2ARegistrations/{id}/AccessRequestBroker")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsRemoveRegistrationAccessRequestBrokerAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsRemoveRegistrationAccessRequestBrokerAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates an existing application registration
        /// </summary>
        /// <param name="id">Unique identifier of the Registration</param>
        /// <param name="body">Updated Registration</param>
        /// <response code="200">Success</response>
        /// <response code="400">60102 - The entity&#x27;s key value does not match the resource URI.</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Registration not found</response>
        [HttpPut]
        [Route("/service/core/v4/A2ARegistrations/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsUpdateEntityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(Registration), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - The entity&#x27;s key value does not match the resource URI.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsUpdateEntityAsync([FromRoute][Required]int? id, [FromBody]Registration body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Registration));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 1,\n  \"Description\" : \"Description\",\n  \"CertificateUser\" : \"CertificateUser\",\n  \"CertificateUserId\" : 6,\n  \"VisibleToCertificateUsers\" : false,\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"Disabled\" : false,\n  \"CertificateUserThumbPrint\" : \"CertificateUserThumbPrint\",\n  \"AppName\" : \"AppName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Registration>(exampleJson)
                        : default(Registration);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the access request broker information for the registration
        /// </summary>
        /// <param name="id">Unique identifier of the registration</param>
        /// <param name="body">Registration access request broker information</param>
        /// <response code="200">Success</response>
        /// <response code="201">Created</response>
        /// <response code="400">60245 - Missing request body.</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/A2ARegistrations/{id}/AccessRequestBroker")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("A2ARegistrationsUpdateRegistrationAccessRequestBrokerAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(RegistrationAccessRequestBroker), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60245 - Missing request body.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult A2ARegistrationsUpdateRegistrationAccessRequestBrokerAsync([FromRoute][Required]int? id, [FromBody]RegistrationAccessRequestBroker body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RegistrationAccessRequestBroker));

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ApiKey\" : \"ApiKey\",\n  \"IpRestrictions\" : [ \"IpRestrictions\", \"IpRestrictions\" ],\n  \"Groups\" : [ {\n    \"Description\" : \"Description\",\n    \"DomainName\" : \"DomainName\",\n    \"GroupId\" : 1,\n    \"Name\" : \"Name\"\n  }, {\n    \"Description\" : \"Description\",\n    \"DomainName\" : \"DomainName\",\n    \"GroupId\" : 1,\n    \"Name\" : \"Name\"\n  } ],\n  \"Users\" : [ {\n    \"ProviderName\" : \"ProviderName\",\n    \"UserName\" : \"UserName\",\n    \"DomainName\" : \"DomainName\",\n    \"UserId\" : 0,\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"LastName\" : \"LastName\",\n    \"Disabled\" : 6,\n    \"DirectoryName\" : \"DirectoryName\"\n  }, {\n    \"ProviderName\" : \"ProviderName\",\n    \"UserName\" : \"UserName\",\n    \"DomainName\" : \"DomainName\",\n    \"UserId\" : 0,\n    \"FirstName\" : \"FirstName\",\n    \"DisplayName\" : \"DisplayName\",\n    \"LastName\" : \"LastName\",\n    \"Disabled\" : 6,\n    \"DirectoryName\" : \"DirectoryName\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<RegistrationAccessRequestBroker>(exampleJson)
                        : default(RegistrationAccessRequestBroker);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
