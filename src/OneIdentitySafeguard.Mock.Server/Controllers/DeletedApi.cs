/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DeletedApiController : ControllerBase
    { 
        /// <summary>
        /// Gets a single deleted asset account entity
        /// </summary>
        /// <param name="id">Unique ID of an asset account</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Asset account does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/AssetAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetDeletedAssetAccountByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeletedAssetAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetDeletedAssetAccountByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeletedAssetAccount));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Disabled\" : true,\n  \"DeletedByUserId\" : 1,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DeletedAssetAccount>(exampleJson)
                        : default(DeletedAssetAccount);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of deleted asset accounts
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/AssetAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetDeletedAssetAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DeletedAssetAccount>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetDeletedAssetAccountsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DeletedAssetAccount>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Disabled\" : true,\n  \"DeletedByUserId\" : 1,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  }\n}, {\n  \"IsServiceAccount\" : true,\n  \"Description\" : \"Description\",\n  \"Platform\" : {\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PlatformType\" : \"Unknown\",\n    \"SupportsSessionManagement\" : true\n  },\n  \"DiscoveredProperties\" : {\n    \"AccountDiscoveryScheduleId\" : 9,\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupDistinguishedName\" : \"DiscoveredGroupDistinguishedName\",\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ]\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"DirectoryProperties\" : {\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\"\n  },\n  \"RequestProperties\" : {\n    \"AllowPasswordRequest\" : true,\n    \"AllowSshKeyRequest\" : true,\n    \"AllowSessionRequest\" : true\n  },\n  \"SharedServiceAccount\" : true,\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 5,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 5,\n    \"Name\" : \"Name\"\n  },\n  \"CreatedByUserId\" : 6,\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 2,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 7,\n    \"Name\" : \"Name\"\n  },\n  \"SshKeySyncGroup\" : {\n    \"Priority\" : 7,\n    \"Id\" : 4,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  },\n  \"Asset\" : {\n    \"AssetPartitionId\" : 6,\n    \"AssetPartitionName\" : \"AssetPartitionName\",\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Disabled\" : true,\n  \"DeletedByUserId\" : 1,\n  \"SyncGroup\" : {\n    \"Priority\" : 2,\n    \"Id\" : 3,\n    \"Disabled\" : true,\n    \"Name\" : \"Name\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DeletedAssetAccount>>(exampleJson)
                        : default(List<DeletedAssetAccount>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single deleted asset entity
        /// </summary>
        /// <param name="id">Unique ID of an Asset</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Asset does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/Assets/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetDeletedAssetByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeletedAsset), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetDeletedAssetByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeletedAsset));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AccountDiscoveryScheduleId\" : 9,\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"AssetPartitionId\" : 2,\n  \"AssetDiscoveryJobId\" : 7,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AllowSessionRequests\" : true,\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformType\" : \"Unknown\",\n  \"DeletedByUserId\" : 5\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DeletedAsset>(exampleJson)
                        : default(DeletedAsset);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of deleted assets
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/Assets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetDeletedAssetsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DeletedAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetDeletedAssetsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DeletedAsset>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountDiscoveryScheduleId\" : 9,\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"AssetPartitionId\" : 2,\n  \"AssetDiscoveryJobId\" : 7,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AllowSessionRequests\" : true,\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformType\" : \"Unknown\",\n  \"DeletedByUserId\" : 5\n}, {\n  \"AccountDiscoveryScheduleId\" : 9,\n  \"Description\" : \"Description\",\n  \"IsDirectory\" : true,\n  \"Platform\" : {\n    \"Description\" : \"Description\",\n    \"Architecture\" : \"Architecture\",\n    \"DeviceClass\" : \"Unknown\",\n    \"ConnectionProperties\" : {\n      \"SupportsSslCertificateVerification\" : true,\n      \"SupportsNamedPipeForServiceAccountConnection\" : true,\n      \"SupportsPasswordAuthentication\" : true,\n      \"SupportsSshKeyAuthentication\" : true,\n      \"SupportsServiceName\" : true,\n      \"SupportsAccessKeyAuthentication\" : true,\n      \"SupportsLocalhostPasswordAuthentication\" : true,\n      \"RequiresDistinguishedName\" : true,\n      \"SupportsInstance\" : true,\n      \"SupportsOraclePrivileges\" : true,\n      \"SupportsDirectorySync\" : true,\n      \"SupportsClientId\" : true,\n      \"DefaultPort\" : 6,\n      \"SupportsDirectoryPasswordAuthentication\" : true,\n      \"SupportsWorkstationId\" : true,\n      \"SupportsTimeout\" : true,\n      \"SupportsPrivilegedAccount\" : true,\n      \"SupportsDirectoryAssetDiscovery\" : true,\n      \"SupportsLdap\" : true,\n      \"SupportsPrivilegeElevationCommand\" : true,\n      \"SupportsSslEncryption\" : true,\n      \"SupportsStarlingConnectAuthentication\" : true,\n      \"SupportsAccountPasswordAuthentication\" : true,\n      \"SupportsSshTransport\" : true,\n      \"SupportsTopSecretInterval\" : true,\n      \"DefaultSslPort\" : 7,\n      \"SupportsSslThumbprint\" : true,\n      \"AllowCustomPort\" : true,\n      \"SupportsEnablePassword\" : true,\n      \"PrivilegedAccountName\" : \"PrivilegedAccountName\",\n      \"SupportsTacacsSecret\" : true\n    },\n    \"IsAcctNameCaseSensitive\" : true,\n    \"PasswordFeatureProperties\" : {\n      \"SupportsPasswordManagement\" : true,\n      \"SupportsSshKeyManagement\" : true,\n      \"RequireNetworkAddress\" : true,\n      \"SupportsDependentSystemTasks\" : true,\n      \"AllowRequireCurrentPassword\" : true,\n      \"SupportsSuspendRestoreAccount\" : true,\n      \"SupportsAccountDiscovery\" : true,\n      \"SupportsServiceDiscovery\" : true,\n      \"SupportsUsePasswordHash\" : true\n    },\n    \"CustomScriptProperties\" : {\n      \"Parameters\" : [ {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      }, {\n        \"DefaultValue\" : \"DefaultValue\",\n        \"Type\" : \"String\",\n        \"Description\" : \"Description\",\n        \"Name\" : \"Name\"\n      } ],\n      \"HasScript\" : true\n    },\n    \"Name\" : \"Name\",\n    \"Version\" : \"Version\",\n    \"SupportedOperations\" : [ \"Unknown\", \"Unknown\" ],\n    \"SessionFeatureProperties\" : {\n      \"DefaultRemoteDesktopSessionPort\" : 4,\n      \"DefaultTelnetSessionPort\" : 5,\n      \"SupportsSessionManagement\" : true,\n      \"DefaultSshSessionPort\" : 1\n    },\n    \"PlatformFamily\" : \"None\",\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 1,\n    \"PlatformType\" : \"Unknown\",\n    \"IsSystemOwned\" : true\n  },\n  \"ManagedNetworkName\" : \"ManagedNetworkName\",\n  \"LicenseClass\" : \"System\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 8,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"CreatedByUserId\" : 5,\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"ManagedNetworkId\" : 1,\n  \"PlatformId\" : 6,\n  \"Disabled\" : true,\n  \"AssetPartitionId\" : 2,\n  \"AssetDiscoveryJobId\" : 7,\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DirectoryAssetProperties\" : {\n    \"FailedSyncAttempts\" : 1,\n    \"LastDirectoryDeleteSyncTaskId\" : \"LastDirectoryDeleteSyncTaskId\",\n    \"LastDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DomainName\" : \"DomainName\",\n    \"LastFailureSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"ForestRootDomain\" : \"ForestRootDomain\",\n    \"DomainControllers\" : [ {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    }, {\n      \"ServerType\" : \"DomainController\",\n      \"IsWritable\" : true,\n      \"NetworkAddress\" : \"NetworkAddress\",\n      \"DomainName\" : \"DomainName\"\n    } ],\n    \"UsePasswordHash\" : true,\n    \"SchemaProperties\" : {\n      \"UserProperties\" : {\n        \"AltLoginNameAttribute\" : \"AltLoginNameAttribute\",\n        \"UserNameAttribute\" : \"UserNameAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"UserClassType\" : [ \"UserClassType\", \"UserClassType\" ],\n        \"PasswordAttribute\" : \"PasswordAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"ComputerProperties\" : {\n        \"ComputerClassType\" : [ \"ComputerClassType\", \"ComputerClassType\" ],\n        \"NetworkAddressAttribute\" : \"NetworkAddressAttribute\",\n        \"DescriptionAttribute\" : \"DescriptionAttribute\",\n        \"OperatingSystemAttribute\" : \"OperatingSystemAttribute\",\n        \"OperatingSystemVersionAttribute\" : \"OperatingSystemVersionAttribute\",\n        \"NameAttribute\" : \"NameAttribute\",\n        \"MemberOfAttribute\" : \"MemberOfAttribute\"\n      },\n      \"GroupProperties\" : {\n        \"MemberAttribute\" : \"MemberAttribute\",\n        \"GroupClassType\" : [ \"GroupClassType\", \"GroupClassType\" ],\n        \"NameAttribute\" : \"NameAttribute\"\n      }\n    },\n    \"Domains\" : [ {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    }, {\n      \"DomainName\" : \"DomainName\",\n      \"DomainUniqueId\" : \"DomainUniqueId\",\n      \"NetBiosName\" : \"NetBiosName\",\n      \"NamingContext\" : \"NamingContext\"\n    } ],\n    \"LastSuccessDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"DeleteSyncIntervalMinutes\" : 1586191969,\n    \"FailedDeleteSyncAttempts\" : 1,\n    \"LastSuccessSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"AllowSharedSearch\" : true,\n    \"LastFailureDeleteSyncDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"LastSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"NextSynchronizedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SynchronizationIntervalMinutes\" : 890262545,\n    \"LastDirectorySyncTaskId\" : \"LastDirectorySyncTaskId\"\n  },\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SessionAccessProperties\" : {\n    \"RemoteDesktopSessionPort\" : 21975,\n    \"AllowSessionRequests\" : true,\n    \"TelnetSessionPort\" : 20275,\n    \"SshSessionPort\" : 43935\n  },\n  \"AllowSessionRequests\" : true,\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 6,\n    \"EffectiveName\" : \"EffectiveName\",\n    \"EffectiveId\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 0,\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformType\" : \"Unknown\",\n  \"DeletedByUserId\" : 5\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DeletedAsset>>(exampleJson)
                        : default(List<DeletedAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a single deleted user entity
        /// </summary>
        /// <param name="id">Unique ID of a user</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">User does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/Users/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetDeletedUserByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeletedUser), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetDeletedUserByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeletedUser));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : true,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : true,\n  \"CreatedByUserId\" : 6,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : true,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : true,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : true,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"DirectoryRequireCertificateAuthentication\" : true,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"LastName\" : \"LastName\",\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DeletedByUserId\" : 1,\n  \"AllowPersonalAccounts\" : true,\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DeletedUser>(exampleJson)
                        : default(DeletedUser);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of deleted users
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/Users")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetDeletedUsersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DeletedUser>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetDeletedUsersAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DeletedUser>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : true,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : true,\n  \"CreatedByUserId\" : 6,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : true,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : true,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : true,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"DirectoryRequireCertificateAuthentication\" : true,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"LastName\" : \"LastName\",\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DeletedByUserId\" : 1,\n  \"AllowPersonalAccounts\" : true,\n  \"IsSystemOwned\" : true\n}, {\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : true,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : true,\n  \"CreatedByUserId\" : 6,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : true,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : true,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : true,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DeletedByUserDisplayName\" : \"DeletedByUserDisplayName\",\n  \"DirectoryRequireCertificateAuthentication\" : true,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"Id\" : 0,\n  \"LastName\" : \"LastName\",\n  \"DeletedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DeletedByUserId\" : 1,\n  \"AllowPersonalAccounts\" : true,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DeletedUser>>(exampleJson)
                        : default(List<DeletedUser>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the current purge settings
        /// </summary>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted/PurgeSettings")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetPurgeSettingsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PurgeSettings), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, AssetAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult DeletedGetPurgeSettingsAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PurgeSettings));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AutoPurgeAssetAccounts\" : true,\n  \"AutoPurgeAssets\" : true,\n  \"DeletedAssetRetentionInDays\" : 293,\n  \"DeletedAssetAccountRetentionInDays\" : 2200,\n  \"AutoPurgeUsers\" : true,\n  \"DeletedUserRetentionInDays\" : 535\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PurgeSettings>(exampleJson)
                        : default(PurgeSettings);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of delete types
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/Deleted")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedGetSubUrls")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DeletedEntityType>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult DeletedGetSubUrls()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DeletedEntityType>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ \"Assets\", \"Assets\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DeletedEntityType>>(exampleJson)
                        : default(List<DeletedEntityType>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Purge a single deleted asset account entity. It will no longer be recoverable.
        /// </summary>
        /// <param name="id">Unique ID of a account</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Deleted/AssetAccounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedPurgeDeletedAssetAccountAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult DeletedPurgeDeletedAssetAccountAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Purge a single deleted asset entity. It will no longer be recoverable.
        /// </summary>
        /// <param name="id">Unique ID of a asset</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Deleted/Assets/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedPurgeDeletedAssetAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult DeletedPurgeDeletedAssetAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Purge a single deleted user entity. It will no longer be recoverable.
        /// </summary>
        /// <param name="id">Unique ID of a user</param>
        /// <response code="200">Success</response>
        /// <response code="204">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have GlobalAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/Deleted/Users/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedPurgeDeletedUserAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin permission")]
        public virtual IActionResult DeletedPurgeDeletedUserAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Restore a single deleted asset account entity
        /// </summary>
        /// <param name="id">Unique ID of an asset account</param>
        /// <param name="body">Asset account to restore</param>
        /// <response code="200">Success</response>
        /// <response code="201">Success</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Asset account does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Deleted/AssetAccounts/{id}/Restore")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedRestoreDeletedAssetAccountAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(AssetAccount), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult DeletedRestoreDeletedAssetAccountAsync([FromRoute][Required]int? id, [FromBody]AssetAccount body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(AssetAccount));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Restore a single deleted asset entity
        /// </summary>
        /// <param name="id">Unique ID of an Asset</param>
        /// <param name="body">Asset to restore</param>
        /// <response code="200">Success</response>
        /// <response code="201">Success</response>
        /// <response code="403">Must have AssetAdmin permission</response>
        /// <response code="404">Asset does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Deleted/Assets/{id}/Restore")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedRestoreDeletedAssetAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(Asset), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin permission")]
        public virtual IActionResult DeletedRestoreDeletedAssetAsync([FromRoute][Required]int? id, [FromBody]Asset body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Asset));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Restore a single deleted user entity
        /// </summary>
        /// <param name="id">Unique ID of a user</param>
        /// <param name="body">User to restore</param>
        /// <response code="200">Success</response>
        /// <response code="201">Success</response>
        /// <response code="403">Must have GlobalAdmin permission</response>
        /// <response code="404">User does not exist</response>
        [HttpPost]
        [Route("/service/core/v4/Deleted/Users/{id}/Restore")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedRestoreDeletedUserAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(User), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin permission")]
        public virtual IActionResult DeletedRestoreDeletedUserAsync([FromRoute][Required]int? id, [FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(User));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the purge settings
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin or AssetAdmin permission</response>
        [HttpPut]
        [Route("/service/core/v4/Deleted/PurgeSettings")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeletedUpdatePurgeSettingsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PurgeSettings), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin or AssetAdmin permission")]
        public virtual IActionResult DeletedUpdatePurgeSettingsAsync([FromBody]PurgeSettings body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PurgeSettings));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AutoPurgeAssetAccounts\" : true,\n  \"AutoPurgeAssets\" : true,\n  \"DeletedAssetRetentionInDays\" : 293,\n  \"DeletedAssetAccountRetentionInDays\" : 2200,\n  \"AutoPurgeUsers\" : true,\n  \"DeletedUserRetentionInDays\" : 535\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PurgeSettings>(exampleJson)
                        : default(PurgeSettings);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
