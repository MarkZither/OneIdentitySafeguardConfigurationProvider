/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserGroupsApiController : ControllerBase
    { 
        /// <summary>
        /// Processes multiple new user groups
        /// </summary>
        /// <param name="body">New user groups to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin or PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups/BatchCreate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsCreateMultipleUserGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroupBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsCreateMultipleUserGroupsAsync([FromBody]List<UserGroup> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroupBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DirectoryGroupSyncProperties\" : {\n      \"LinkDirectoryAccounts\" : true,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderId\" : 1,\n      \"SecondaryAuthenticationProviderId\" : 5,\n      \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n      \"RequireCertificateAuthentication\" : true,\n      \"AllowPersonalAccounts\" : false\n    },\n    \"Id\" : 0,\n    \"IsReadOnly\" : true,\n    \"Members\" : [ {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    }, {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    } ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DirectoryGroupSyncProperties\" : {\n      \"LinkDirectoryAccounts\" : true,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderId\" : 1,\n      \"SecondaryAuthenticationProviderId\" : 5,\n      \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n      \"RequireCertificateAuthentication\" : true,\n      \"AllowPersonalAccounts\" : false\n    },\n    \"Id\" : 0,\n    \"IsReadOnly\" : true,\n    \"Members\" : [ {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    }, {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    } ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroupBatchResponse>>(exampleJson)
                        : default(List<UserGroupBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new group of users
        /// </summary>
        /// <param name="body">UserGroup to create</param>
        /// <response code="201">Created</response>
        /// <response code="202">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin or PolicyAdmin permission</response>
        /// <response code="404">User group not found</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsCreateUserGroupAsync")]
        [SwaggerResponse(statusCode: 201, type: typeof(UserGroup), description: "Created")]
        [SwaggerResponse(statusCode: 202, type: typeof(UserGroup), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsCreateUserGroupAsync([FromBody]UserGroup body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(UserGroup));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(UserGroup));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserGroup>(exampleJson)
                        : default(UserGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple user groups deletes
        /// </summary>
        /// <param name="body">user groups to process</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin or PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups/BatchDelete")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsDeleteMultipleUserGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroupBatchResult>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsDeleteMultipleUserGroupsAsync([FromBody]List<int?> body, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroupBatchResult>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Request\" : 6,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroupBatchResult>>(exampleJson)
                        : default(List<UserGroupBatchResult>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Removes an user group
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="forceDelete">Include &#x27;X-Force-Delete&#x27; HTTP header or this query string parameter set to true to force delete despite dependencies when given 50104  error</param>
        /// <response code="204">Success - No Content</response>
        /// <response code="403">Must have UserAdmin or PolicyAdmin permission</response>
        [HttpDelete]
        [Route("/service/core/v4/UserGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsDeleteUserGroupAsync")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsDeleteUserGroupAsync([FromRoute][Required]int? id, [FromQuery]bool? forceDelete)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Gets a user group
        /// </summary>
        /// <param name="id">Unique ID of UserGroup</param>
        /// <param name="fields">List of property names to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">User group not found</response>
        [HttpGet]
        [Route("/service/core/v4/UserGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsGetUserGroupByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserGroup), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult UserGroupsGetUserGroupByIdAsync([FromRoute][Required]int? id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserGroup));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserGroup>(exampleJson)
                        : default(UserGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the members of a user group
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">User group does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/UserGroups/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsGetUserGroupMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult UserGroupsGetUserGroupMembersAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the security roles the user group belongs to
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">User group does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/UserGroups/{id}/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsGetUserGroupRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroupRole>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult UserGroupsGetUserGroupRolesAsync([FromRoute][Required]int? id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroupRole>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroupRole>>(exampleJson)
                        : default(List<UserGroupRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of user groups
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/UserGroups")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsGetUserGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroup>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, PolicyAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult UserGroupsGetUserGroupsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroup>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}, {\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroup>>(exampleJson)
                        : default(List<UserGroup>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove members to an existing group
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Users to assign to the UserGroup</param>
        /// <response code="200">Success</response>
        /// <response code="202">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Updated members not found</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups/{id}/Members/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsModifyUserGroupMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 202, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UserGroupsModifyUserGroupMembersAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<User> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(List<User>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add/Remove roles a user group should be assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="operation">Operation to perform on the list</param>
        /// <param name="body">Role to assign the UserGroup to</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Updated roles not found</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups/{id}/Roles/{operation}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsModifyUserGroupRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroupRole>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UserGroupsModifyUserGroupRolesAsync([FromRoute][Required]int? id, [FromRoute][Required]ListOperation operation, [FromBody]List<UserGroupRole> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroupRole>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroupRole>>(exampleJson)
                        : default(List<UserGroupRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Sets an existing group&#x27;s membership
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="body">Users to assign to the UserGroup</param>
        /// <response code="200">Success</response>
        /// <response code="202">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin (fine-grain) or PolicyAdmin permission</response>
        /// <response code="404">Updated members not found</response>
        [HttpPut]
        [Route("/service/core/v4/UserGroups/{id}/Members")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsSetUserGroupMembersAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 202, type: typeof(List<User>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin (fine-grain) or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsSetUserGroupMembersAsync([FromRoute][Required]int? id, [FromBody]List<User> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(List<User>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n}, {\n  \"LinkedAccountsCount\" : 7,\n  \"Description\" : \"Description\",\n  \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n  \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n  \"PrimaryAuthenticationProvider\" : {\n    \"TypeReferenceName\" : \"Unknown\",\n    \"Id\" : 9,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"MobilePhone\" : \"MobilePhone\",\n  \"ChangePasswordAtNextLogin\" : false,\n  \"Name\" : \"Name\",\n  \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n  \"Locked\" : false,\n  \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n  \"CreatedByUserId\" : 4,\n  \"DisplayName\" : \"DisplayName\",\n  \"Base64PhotoData\" : \"Base64PhotoData\",\n  \"Disabled\" : false,\n  \"IsPartitionOwner\" : true,\n  \"WorkPhone\" : \"WorkPhone\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"PasswordNeverExpires\" : false,\n  \"FirstName\" : \"FirstName\",\n  \"IdentityProvider\" : {\n    \"Id\" : 2,\n    \"Name\" : \"Name\"\n  },\n  \"EmailAddress\" : \"EmailAddress\",\n  \"RequireCertificateAuthentication\" : false,\n  \"SecondaryAuthenticationProvider\" : {\n    \"Id\" : 3,\n    \"Identity\" : \"Identity\",\n    \"Name\" : \"Name\"\n  },\n  \"DirectoryRequireCertificateAuthentication\" : false,\n  \"TimeZoneId\" : \"TimeZoneId\",\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"CloudAssistantApproveEnabled\" : true,\n  \"Id\" : 7,\n  \"LastName\" : \"LastName\",\n  \"AllowPersonalAccounts\" : false,\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
                        : default(List<User>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Specifies which roles a user group should be assigned to
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="body">Role to assign the UserGroup to</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin permission</response>
        /// <response code="404">Updated roles not found</response>
        [HttpPut]
        [Route("/service/core/v4/UserGroups/{id}/Roles")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsSetUserGroupRolesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroupRole>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin permission")]
        public virtual IActionResult UserGroupsSetUserGroupRolesAsync([FromRoute][Required]int? id, [FromBody]List<UserGroupRole> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroupRole>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"UserCount\" : 1,\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n}, {\n  \"UserCount\" : 1,\n  \"Id\" : 0,\n  \"PolicyCount\" : 5,\n  \"AccountCount\" : 6,\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroupRole>>(exampleJson)
                        : default(List<UserGroupRole>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Directory Groups: If you ever change the primary or secondary authentication providers of a directory based User Group, those changes  will not be reflected on existing users within Safeguard.  A user that was added to Safeguard via a directory group will only  ever have their authentication providers set when the user object is first created in Safeguard.  Subsequent background  synchronizations and changes to the User Group won&#x27;t effect those existing user&#x27;s authentication provider settings.  If,  however, you do need to force the authentication providers to be updated on existing users, then you must call this method.  Local Groups:  Call this to simply synchronize a local group with its members to ensure AdminRoles on the members are correct.
        /// </summary>
        /// <param name="id">Unique ID of UserGroup</param>
        /// <response code="202">Success - group membership will be updated in the background</response>
        /// <response code="204">Success - if using x-await-result to wait until task is complete</response>
        /// <response code="403">Must have UserAdmin permission</response>
        /// <response code="404">User group not found</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups/{id}/SynchronizeAndUpdateProviders")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsSynchronizeAndUpdateProvidersAsync")]
        [SwaggerResponse(statusCode: 202, type: typeof(UserGroup), description: "Success - group membership will be updated in the background")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin permission")]
        public virtual IActionResult UserGroupsSynchronizeAndUpdateProvidersAsync([FromRoute][Required]int? id)
        { 
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(UserGroup));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserGroup>(exampleJson)
                        : default(UserGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Processes multiple user groups updates
        /// </summary>
        /// <param name="body">user groups to process</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin or PolicyAdmin permission</response>
        [HttpPost]
        [Route("/service/core/v4/UserGroups/BatchUpdate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsUpdateMultipleUserGroupsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserGroupBatchResponse>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsUpdateMultipleUserGroupsAsync([FromBody]List<UserGroup> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<UserGroupBatchResponse>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Response\" : {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DirectoryGroupSyncProperties\" : {\n      \"LinkDirectoryAccounts\" : true,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderId\" : 1,\n      \"SecondaryAuthenticationProviderId\" : 5,\n      \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n      \"RequireCertificateAuthentication\" : true,\n      \"AllowPersonalAccounts\" : false\n    },\n    \"Id\" : 0,\n    \"IsReadOnly\" : true,\n    \"Members\" : [ {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    }, {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    } ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n}, {\n  \"Response\" : {\n    \"CreatedByUserId\" : 6,\n    \"Description\" : \"Description\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"DirectoryGroupSyncProperties\" : {\n      \"LinkDirectoryAccounts\" : true,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderId\" : 1,\n      \"SecondaryAuthenticationProviderId\" : 5,\n      \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n      \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n      \"RequireCertificateAuthentication\" : true,\n      \"AllowPersonalAccounts\" : false\n    },\n    \"Id\" : 0,\n    \"IsReadOnly\" : true,\n    \"Members\" : [ {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    }, {\n      \"LinkedAccountsCount\" : 7,\n      \"Description\" : \"Description\",\n      \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n      \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n      \"PrimaryAuthenticationProvider\" : {\n        \"TypeReferenceName\" : \"Unknown\",\n        \"Id\" : 9,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"MobilePhone\" : \"MobilePhone\",\n      \"ChangePasswordAtNextLogin\" : false,\n      \"Name\" : \"Name\",\n      \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n      \"Locked\" : false,\n      \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n      \"CreatedByUserId\" : 4,\n      \"DisplayName\" : \"DisplayName\",\n      \"Base64PhotoData\" : \"Base64PhotoData\",\n      \"Disabled\" : false,\n      \"IsPartitionOwner\" : true,\n      \"WorkPhone\" : \"WorkPhone\",\n      \"DirectoryProperties\" : {\n        \"DirectoryId\" : 2,\n        \"DomainName\" : \"DomainName\",\n        \"DistinguishedName\" : \"DistinguishedName\",\n        \"ObjectSid\" : \"ObjectSid\",\n        \"ObjectGuid\" : \"ObjectGuid\",\n        \"NetbiosName\" : \"NetbiosName\",\n        \"DirectoryName\" : \"DirectoryName\"\n      },\n      \"PasswordNeverExpires\" : false,\n      \"FirstName\" : \"FirstName\",\n      \"IdentityProvider\" : {\n        \"Id\" : 2,\n        \"Name\" : \"Name\"\n      },\n      \"EmailAddress\" : \"EmailAddress\",\n      \"RequireCertificateAuthentication\" : false,\n      \"SecondaryAuthenticationProvider\" : {\n        \"Id\" : 3,\n        \"Identity\" : \"Identity\",\n        \"Name\" : \"Name\"\n      },\n      \"DirectoryRequireCertificateAuthentication\" : false,\n      \"TimeZoneId\" : \"TimeZoneId\",\n      \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n      \"CloudAssistantApproveEnabled\" : true,\n      \"Id\" : 7,\n      \"LastName\" : \"LastName\",\n      \"AllowPersonalAccounts\" : false,\n      \"IsSystemOwned\" : true\n    } ],\n    \"Name\" : \"Name\"\n  },\n  \"StatusCodeNumber\" : 0,\n  \"IsSuccess\" : true,\n  \"Error\" : {\n    \"Message\" : \"Message\",\n    \"Code\" : 6\n  },\n  \"StatusCode\" : \"Continue\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<UserGroupBatchResponse>>(exampleJson)
                        : default(List<UserGroupBatchResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing user group
        /// </summary>
        /// <param name="id">Unique identifier of the UserGroup</param>
        /// <param name="body">Updated UserGroup</param>
        /// <response code="200">Success - if using x-await-result to wait until task is complete</response>
        /// <response code="202">Success - group membership will be updated in the background</response>
        /// <response code="400">60102 - id value does not match the resource URI</response>
        /// <response code="403">Must have UserAdmin or PolicyAdmin permission</response>
        /// <response code="404">UserGroup does not exist</response>
        [HttpPut]
        [Route("/service/core/v4/UserGroups/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UserGroupsUpdateUserGroupAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserGroup), description: "Success - if using x-await-result to wait until task is complete")]
        [SwaggerResponse(statusCode: 202, type: typeof(UserGroup), description: "Success - group membership will be updated in the background")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60102 - id value does not match the resource URI")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin or PolicyAdmin permission")]
        public virtual IActionResult UserGroupsUpdateUserGroupAsync([FromRoute][Required]int? id, [FromBody]UserGroup body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserGroup));

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202, default(UserGroup));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"CreatedByUserId\" : 6,\n  \"Description\" : \"Description\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n  \"DirectoryGroupSyncProperties\" : {\n    \"LinkDirectoryAccounts\" : true,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderId\" : 1,\n    \"SecondaryAuthenticationProviderId\" : 5,\n    \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n    \"PrimaryAuthenticationProviderTypeReferenceName\" : \"Unknown\",\n    \"RequireCertificateAuthentication\" : true,\n    \"AllowPersonalAccounts\" : false\n  },\n  \"Id\" : 0,\n  \"IsReadOnly\" : true,\n  \"Members\" : [ {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  }, {\n    \"LinkedAccountsCount\" : 7,\n    \"Description\" : \"Description\",\n    \"TimeZoneIanaName\" : \"TimeZoneIanaName\",\n    \"LastLoginDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CloudAssistantRecipientId\" : \"CloudAssistantRecipientId\",\n    \"PrimaryAuthenticationProvider\" : {\n      \"TypeReferenceName\" : \"Unknown\",\n      \"Id\" : 9,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"MobilePhone\" : \"MobilePhone\",\n    \"ChangePasswordAtNextLogin\" : false,\n    \"Name\" : \"Name\",\n    \"TimeZoneDisplayName\" : \"TimeZoneDisplayName\",\n    \"Locked\" : false,\n    \"AdminRoles\" : [ \"GlobalAdmin\", \"GlobalAdmin\" ],\n    \"CreatedByUserId\" : 4,\n    \"DisplayName\" : \"DisplayName\",\n    \"Base64PhotoData\" : \"Base64PhotoData\",\n    \"Disabled\" : false,\n    \"IsPartitionOwner\" : true,\n    \"WorkPhone\" : \"WorkPhone\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"PasswordNeverExpires\" : false,\n    \"FirstName\" : \"FirstName\",\n    \"IdentityProvider\" : {\n      \"Id\" : 2,\n      \"Name\" : \"Name\"\n    },\n    \"EmailAddress\" : \"EmailAddress\",\n    \"RequireCertificateAuthentication\" : false,\n    \"SecondaryAuthenticationProvider\" : {\n      \"Id\" : 3,\n      \"Identity\" : \"Identity\",\n      \"Name\" : \"Name\"\n    },\n    \"DirectoryRequireCertificateAuthentication\" : false,\n    \"TimeZoneId\" : \"TimeZoneId\",\n    \"CreatedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"CreatedByUserDisplayName\" : \"CreatedByUserDisplayName\",\n    \"CloudAssistantApproveEnabled\" : true,\n    \"Id\" : 7,\n    \"LastName\" : \"LastName\",\n    \"AllowPersonalAccounts\" : false,\n    \"IsSystemOwned\" : true\n  } ],\n  \"Name\" : \"Name\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<UserGroup>(exampleJson)
                        : default(UserGroup);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
