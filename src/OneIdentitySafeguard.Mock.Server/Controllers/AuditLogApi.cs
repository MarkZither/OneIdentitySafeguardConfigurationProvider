/*
 * Safeguard Core API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using OneIdentitySafeguard.Mock.Server.Attributes;
using OneIdentitySafeguard.Mock.Server.Security;
using Microsoft.AspNetCore.Authorization;
using OneIdentitySafeguard.Mock.Server.Models;

namespace OneIdentitySafeguard.Mock.Server.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuditLogApiController : ControllerBase
    { 
        /// <summary>
        /// Gets a set of access request activity log entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="accountId">Get activity that occurred for a specific account (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Activities")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestActivitiesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestActivitiesAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]int? accountId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"OldState\" : \"New\",\n  \"AccessRequestType\" : \"Password\",\n  \"Action\" : \"AcknowledgeRequest\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"RequesterName\" : \"RequesterName\",\n  \"IsEmergency\" : true,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 7,\n  \"AssetPartitionId\" : 2,\n  \"Comment\" : \"Comment\",\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"BrokerId\" : 1,\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"ReasonCode\" : 9,\n  \"BrokerName\" : \"BrokerName\",\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"ReasonName\" : \"ReasonName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"OldState\" : \"New\",\n  \"AccessRequestType\" : \"Password\",\n  \"Action\" : \"AcknowledgeRequest\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"RequesterName\" : \"RequesterName\",\n  \"IsEmergency\" : true,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 7,\n  \"AssetPartitionId\" : 2,\n  \"Comment\" : \"Comment\",\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"BrokerId\" : 1,\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"ReasonCode\" : 9,\n  \"BrokerName\" : \"BrokerName\",\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"ReasonName\" : \"ReasonName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestActivityLog>>(exampleJson)
                        : default(List<AccessRequestActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets access request activity log entry with given ID
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="logId">The database ID of the activity log entry</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Activities/{requestId}/{logId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestActivitiesByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestActivitiesByIdAsync([FromRoute][Required]string requestId, [FromRoute][Required]string logId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"OldState\" : \"New\",\n  \"AccessRequestType\" : \"Password\",\n  \"Action\" : \"AcknowledgeRequest\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"RequesterName\" : \"RequesterName\",\n  \"IsEmergency\" : true,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 7,\n  \"AssetPartitionId\" : 2,\n  \"Comment\" : \"Comment\",\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"BrokerId\" : 1,\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"ReasonCode\" : 9,\n  \"BrokerName\" : \"BrokerName\",\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"ReasonName\" : \"ReasonName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestActivityLog>(exampleJson)
                        : default(AccessRequestActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets access request activity log entries for a request
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Activities/{requestId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestActivitiesByRequestIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestActivitiesByRequestIdAsync([FromRoute][Required]string requestId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"OldState\" : \"New\",\n  \"AccessRequestType\" : \"Password\",\n  \"Action\" : \"AcknowledgeRequest\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"RequesterName\" : \"RequesterName\",\n  \"IsEmergency\" : true,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 7,\n  \"AssetPartitionId\" : 2,\n  \"Comment\" : \"Comment\",\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"BrokerId\" : 1,\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"ReasonCode\" : 9,\n  \"BrokerName\" : \"BrokerName\",\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"ReasonName\" : \"ReasonName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"OldState\" : \"New\",\n  \"AccessRequestType\" : \"Password\",\n  \"Action\" : \"AcknowledgeRequest\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"RequesterName\" : \"RequesterName\",\n  \"IsEmergency\" : true,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 7,\n  \"AssetPartitionId\" : 2,\n  \"Comment\" : \"Comment\",\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"BrokerId\" : 1,\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"ReasonCode\" : 9,\n  \"BrokerName\" : \"BrokerName\",\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"ReasonName\" : \"ReasonName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestActivityLog>>(exampleJson)
                        : default(List<AccessRequestActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of access request session activity log entries
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="logId">The database ID of the activity log entry</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Activities/{requestId}/{logId}/SessionLog")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestActivitySessionLogAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestSessionActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestActivitySessionLogAsync([FromRoute][Required]string requestId, [FromRoute][Required]string logId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestSessionActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestSessionActivityLog>>(exampleJson)
                        : default(List<AccessRequestSessionActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets access request session activity log entry with given ID
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="sessionId">The unique session ID of a session in the access request</param>
        /// <param name="logId">The database ID of the activity log entry</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}/{logId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestSessionActivitiesByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestSessionActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestSessionActivitiesByIdAsync([FromRoute][Required]string requestId, [FromRoute][Required]int? sessionId, [FromRoute][Required]string logId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestSessionActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestSessionActivityLog>(exampleJson)
                        : default(AccessRequestSessionActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets access request session activity log entries for a request
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Sessions/{requestId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestSessionActivitiesByRequestIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestSessionActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestSessionActivitiesByRequestIdAsync([FromRoute][Required]string requestId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestSessionActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestSessionActivityLog>>(exampleJson)
                        : default(List<AccessRequestSessionActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets access request session activity log entries for a request
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="sessionId">The unique session ID of a session in the access request</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestSessionActivitiesBySessionIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestSessionActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestSessionActivitiesBySessionIdAsync([FromRoute][Required]string requestId, [FromRoute][Required]int? sessionId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestSessionActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestSessionActivityLog>(exampleJson)
                        : default(AccessRequestSessionActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of access request Session log entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="accountId">Get activity that occurred for a specific account (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Sessions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestSessionActivityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestSessionActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestSessionActivityAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]int? accountId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestSessionActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AssetPartitionId\" : 5,\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 1,\n  \"RequestId\" : \"RequestId\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"RequesterId\" : 6,\n  \"EventName\" : \"Unknown\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetName\" : \"AssetName\",\n  \"EventData\" : \"EventData\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserId\" : 0,\n  \"RequesterName\" : \"RequesterName\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"SessionId\" : 2,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestSessionActivityLog>>(exampleJson)
                        : default(List<AccessRequestSessionActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the perma-link to the SPS portal for the session datat
        /// </summary>
        /// <param name="requestId">The unique ID of the access request</param>
        /// <param name="sessionId">The unique session ID of a session in the access request</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}/AuditPortalLink")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestSessionAuditPortalLinkAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        public virtual IActionResult AuditLogGetAccessRequestSessionAuditPortalLinkAsync([FromRoute][Required]string requestId, [FromRoute][Required]int? sessionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieve the session playback data required to replay the session recording matching this session id.
        /// </summary>
        /// <param name="requestId">Unique identifier of the AccessRequest</param>
        /// <param name="sessionId">Unique ID of the session to replay</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Sessions/{requestId}/{sessionId}/Playback")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestSessionPlaybackAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SessionPlaybackData), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestSessionPlaybackAsync([FromRoute][Required]string requestId, [FromRoute][Required]int? sessionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SessionPlaybackData));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"archive_server_address\" : \"archive_server_address\",\n  \"password\" : \"password\",\n  \"download_url\" : \"download_url\",\n  \"session_recording\" : \"session_recording\",\n  \"active\" : true,\n  \"perma_link\" : \"perma_link\",\n  \"archive_share_name\" : \"archive_share_name\",\n  \"playback_url\" : \"playback_url\",\n  \"version\" : 0,\n  \"terminate_url\" : \"terminate_url\",\n  \"authorization_header\" : \"authorization_header\",\n  \"username\" : \"username\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SessionPlaybackData>(exampleJson)
                        : default(SessionPlaybackData);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of audit log access request types
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AuditLogAccessRequestType>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAccessRequestTypes()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AuditLogAccessRequestType>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ \"Requests\", \"Requests\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AuditLogAccessRequestType>>(exampleJson)
                        : default(List<AuditLogAccessRequestType>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AccessRequest log entries
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Requests")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessRequestLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestsAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessRequestLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountId\" : 6,\n  \"MaximumReleaseDurationMinutes\" : 1,\n  \"AllowCustomDuration\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequestDuration\" : 5,\n  \"EmergencyAccessAnytime\" : true,\n  \"ChangeSshKeyAfterRelease\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"RequiredAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"ApproverSets\" : [ {\n    \"Approvers\" : [ null, null ],\n    \"Id\" : 8,\n    \"RequiredApprovals\" : 9\n  }, {\n    \"Approvers\" : [ null, null ],\n    \"Id\" : 8,\n    \"RequiredApprovals\" : 9\n  } ],\n  \"WasCheckedOut\" : true,\n  \"PendingApprovalDurationBeforeEscalationMinutes\" : 9,\n  \"DefaultReleaseDurationMinutes\" : 4,\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"MaximumReleaseDurationDays\" : 7,\n  \"RequesterTimezone\" : \"RequesterTimezone\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"ReasonCode\" : 2,\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"BrokerName\" : \"BrokerName\",\n  \"ApplicationSessionProperties\" : {\n    \"ApplicationHostAssetName\" : \"ApplicationHostAssetName\",\n    \"ApplicationName\" : \"ApplicationName\",\n    \"ApplicationHostAssetNetworkAddress\" : \"ApplicationHostAssetNetworkAddress\",\n    \"ApplicationAlias\" : \"ApplicationAlias\",\n    \"ApplicationHostAssetId\" : 3,\n    \"ApplicationHostAccountId\" : 6,\n    \"ApplicationHostAccountName\" : \"ApplicationHostAccountName\"\n  },\n  \"RoleName\" : \"RoleName\",\n  \"RequestState\" : \"New\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"DefaultReleaseDurationDays\" : 3,\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"AllowSessionSshKeyRelease\" : true,\n  \"PolicyName\" : \"PolicyName\",\n  \"PendingApprovalDurationBeforeEscalationDays\" : 5,\n  \"EmergencyAccessSimultaneous\" : true,\n  \"MaximumReleaseDurationHours\" : 1,\n  \"Reviewers\" : [ {\n    \"IsGroup\" : true,\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"EmailAddress\" : \"EmailAddress\"\n  }, {\n    \"IsGroup\" : true,\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"EmailAddress\" : \"EmailAddress\"\n  } ],\n  \"PendingApprovalDurationBeforeEscalationHours\" : 9,\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\",\n  \"AccessRequestType\" : \"Password\",\n  \"RequiresReasonComment\" : true,\n  \"WasRevoked\" : true,\n  \"RequiredReviewers\" : 1,\n  \"EmergencyAccessEnabled\" : true,\n  \"PendingReviewDurationBeforeEscalationDays\" : 7,\n  \"RequiresApproval\" : true,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 1,\n  \"ApprovedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"MaximumSimultaneousReleases\" : 6,\n  \"RequiresReasonCode\" : true,\n  \"RequesterName\" : \"RequesterName\",\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"PolicyExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ChangePasswordAfterRelease\" : true,\n  \"RequestExpiresAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PendingReviewDurationBeforeEscalationHours\" : 1,\n  \"DefaultReleaseDurationHours\" : 2,\n  \"BrokerId\" : 6,\n  \"RequesterEmail\" : \"RequesterEmail\",\n  \"RequesterId\" : 0,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 9,\n  \"ReasonName\" : \"ReasonName\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"WasEvicted\" : true,\n  \"PendingReviewDurationBeforeEscalationMinutes\" : 4,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 7\n}, {\n  \"AccountId\" : 6,\n  \"MaximumReleaseDurationMinutes\" : 1,\n  \"AllowCustomDuration\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequestDuration\" : 5,\n  \"EmergencyAccessAnytime\" : true,\n  \"ChangeSshKeyAfterRelease\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"RequiredAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"ApproverSets\" : [ {\n    \"Approvers\" : [ null, null ],\n    \"Id\" : 8,\n    \"RequiredApprovals\" : 9\n  }, {\n    \"Approvers\" : [ null, null ],\n    \"Id\" : 8,\n    \"RequiredApprovals\" : 9\n  } ],\n  \"WasCheckedOut\" : true,\n  \"PendingApprovalDurationBeforeEscalationMinutes\" : 9,\n  \"DefaultReleaseDurationMinutes\" : 4,\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"MaximumReleaseDurationDays\" : 7,\n  \"RequesterTimezone\" : \"RequesterTimezone\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"ReasonCode\" : 2,\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"BrokerName\" : \"BrokerName\",\n  \"ApplicationSessionProperties\" : {\n    \"ApplicationHostAssetName\" : \"ApplicationHostAssetName\",\n    \"ApplicationName\" : \"ApplicationName\",\n    \"ApplicationHostAssetNetworkAddress\" : \"ApplicationHostAssetNetworkAddress\",\n    \"ApplicationAlias\" : \"ApplicationAlias\",\n    \"ApplicationHostAssetId\" : 3,\n    \"ApplicationHostAccountId\" : 6,\n    \"ApplicationHostAccountName\" : \"ApplicationHostAccountName\"\n  },\n  \"RoleName\" : \"RoleName\",\n  \"RequestState\" : \"New\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"DefaultReleaseDurationDays\" : 3,\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"AllowSessionSshKeyRelease\" : true,\n  \"PolicyName\" : \"PolicyName\",\n  \"PendingApprovalDurationBeforeEscalationDays\" : 5,\n  \"EmergencyAccessSimultaneous\" : true,\n  \"MaximumReleaseDurationHours\" : 1,\n  \"Reviewers\" : [ {\n    \"IsGroup\" : true,\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"EmailAddress\" : \"EmailAddress\"\n  }, {\n    \"IsGroup\" : true,\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"EmailAddress\" : \"EmailAddress\"\n  } ],\n  \"PendingApprovalDurationBeforeEscalationHours\" : 9,\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\",\n  \"AccessRequestType\" : \"Password\",\n  \"RequiresReasonComment\" : true,\n  \"WasRevoked\" : true,\n  \"RequiredReviewers\" : 1,\n  \"EmergencyAccessEnabled\" : true,\n  \"PendingReviewDurationBeforeEscalationDays\" : 7,\n  \"RequiresApproval\" : true,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 1,\n  \"ApprovedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"MaximumSimultaneousReleases\" : 6,\n  \"RequiresReasonCode\" : true,\n  \"RequesterName\" : \"RequesterName\",\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"PolicyExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ChangePasswordAfterRelease\" : true,\n  \"RequestExpiresAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PendingReviewDurationBeforeEscalationHours\" : 1,\n  \"DefaultReleaseDurationHours\" : 2,\n  \"BrokerId\" : 6,\n  \"RequesterEmail\" : \"RequesterEmail\",\n  \"RequesterId\" : 0,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 9,\n  \"ReasonName\" : \"ReasonName\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"WasEvicted\" : true,\n  \"PendingReviewDurationBeforeEscalationMinutes\" : 4,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 7\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessRequestLog>>(exampleJson)
                        : default(List<AccessRequestLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AccessRequest entries
        /// </summary>
        /// <param name="id">id of specify request. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/AccessRequests/Requests/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccessRequestsByLogIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccessRequestLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission or be an approver or reviewer")]
        public virtual IActionResult AuditLogGetAccessRequestsByLogIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccessRequestLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AccountId\" : 6,\n  \"MaximumReleaseDurationMinutes\" : 1,\n  \"AllowCustomDuration\" : true,\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"WasDenied\" : true,\n  \"RequestDuration\" : 5,\n  \"EmergencyAccessAnytime\" : true,\n  \"ChangeSshKeyAfterRelease\" : true,\n  \"RequesterUsername\" : \"RequesterUsername\",\n  \"RequiredAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TicketNumber\" : \"TicketNumber\",\n  \"AllowSraSessionLaunch\" : true,\n  \"ApproverSets\" : [ {\n    \"Approvers\" : [ null, null ],\n    \"Id\" : 8,\n    \"RequiredApprovals\" : 9\n  }, {\n    \"Approvers\" : [ null, null ],\n    \"Id\" : 8,\n    \"RequiredApprovals\" : 9\n  } ],\n  \"WasCheckedOut\" : true,\n  \"PendingApprovalDurationBeforeEscalationMinutes\" : 9,\n  \"DefaultReleaseDurationMinutes\" : 4,\n  \"RequestId\" : \"RequestId\",\n  \"ReasonComment\" : \"ReasonComment\",\n  \"WasExpired\" : true,\n  \"MaximumReleaseDurationDays\" : 7,\n  \"RequesterTimezone\" : \"RequesterTimezone\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"ReasonCode\" : 2,\n  \"AssetName\" : \"AssetName\",\n  \"OfflineWorkflow\" : true,\n  \"BrokerName\" : \"BrokerName\",\n  \"ApplicationSessionProperties\" : {\n    \"ApplicationHostAssetName\" : \"ApplicationHostAssetName\",\n    \"ApplicationName\" : \"ApplicationName\",\n    \"ApplicationHostAssetNetworkAddress\" : \"ApplicationHostAssetNetworkAddress\",\n    \"ApplicationAlias\" : \"ApplicationAlias\",\n    \"ApplicationHostAssetId\" : 3,\n    \"ApplicationHostAccountId\" : 6,\n    \"ApplicationHostAccountName\" : \"ApplicationHostAccountName\"\n  },\n  \"RoleName\" : \"RoleName\",\n  \"RequestState\" : \"New\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"DefaultReleaseDurationDays\" : 3,\n  \"SessionProperties\" : {\n    \"SessionModuleConnectionId\" : 1,\n    \"RemoteDesktopApplicationProperties\" : {\n      \"ApplicationDisplayName\" : \"ApplicationDisplayName\",\n      \"ApplicationAlias\" : \"ApplicationAlias\",\n      \"ApplicationHostAssetId\" : 2,\n      \"ApplicationHostAccountId\" : 7,\n      \"ApplicationHostAsset\" : {\n        \"AssetPartitionId\" : 6,\n        \"AssetPartitionName\" : \"AssetPartitionName\",\n        \"AssetType\" : \"NotSpecified\",\n        \"Description\" : \"Description\",\n        \"SshHostKey\" : {\n          \"Fingerprint\" : \"Fingerprint\",\n          \"SshHostKey\" : \"SshHostKey\",\n          \"FingerprintSha256\" : \"FingerprintSha256\"\n        },\n        \"NetworkAddress\" : \"NetworkAddress\",\n        \"Platform\" : {\n          \"DisplayName\" : \"DisplayName\",\n          \"Id\" : 5,\n          \"SupportsSessionManagement\" : true\n        },\n        \"DomainName\" : \"DomainName\",\n        \"SessionAccessProperties\" : {\n          \"RemoteDesktopSessionPort\" : 21975,\n          \"AllowSessionRequests\" : true,\n          \"TelnetSessionPort\" : 20275,\n          \"SshSessionPort\" : 43935\n        },\n        \"Id\" : 6,\n        \"Disabled\" : true,\n        \"Name\" : \"Name\"\n      }\n    },\n    \"SessionConnectionPolicyRef\" : \"SessionConnectionPolicyRef\"\n  },\n  \"AllowSessionSshKeyRelease\" : true,\n  \"PolicyName\" : \"PolicyName\",\n  \"PendingApprovalDurationBeforeEscalationDays\" : 5,\n  \"EmergencyAccessSimultaneous\" : true,\n  \"MaximumReleaseDurationHours\" : 1,\n  \"Reviewers\" : [ {\n    \"IsGroup\" : true,\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"EmailAddress\" : \"EmailAddress\"\n  }, {\n    \"IsGroup\" : true,\n    \"DisplayName\" : \"DisplayName\",\n    \"Id\" : 6,\n    \"EmailAddress\" : \"EmailAddress\"\n  } ],\n  \"PendingApprovalDurationBeforeEscalationHours\" : 9,\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\",\n  \"AccessRequestType\" : \"Password\",\n  \"RequiresReasonComment\" : true,\n  \"WasRevoked\" : true,\n  \"RequiredReviewers\" : 1,\n  \"EmergencyAccessEnabled\" : true,\n  \"PendingReviewDurationBeforeEscalationDays\" : 7,\n  \"RequiresApproval\" : true,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"AccountAssetId\" : 1,\n  \"ApprovedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"MaximumSimultaneousReleases\" : 6,\n  \"RequiresReasonCode\" : true,\n  \"RequesterName\" : \"RequesterName\",\n  \"WasCancelled\" : true,\n  \"IsEmergency\" : true,\n  \"PolicyExpirationDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ChangePasswordAfterRelease\" : true,\n  \"RequestExpiresAt\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PendingReviewDurationBeforeEscalationHours\" : 1,\n  \"DefaultReleaseDurationHours\" : 2,\n  \"BrokerId\" : 6,\n  \"RequesterEmail\" : \"RequesterEmail\",\n  \"RequesterId\" : 0,\n  \"HourlyRestrictionProperties\" : {\n    \"EnableHourlyRestrictions\" : false,\n    \"ThursdayValidHours\" : [ 6, 6 ],\n    \"WednesdayValidHours\" : [ 0, 0 ],\n    \"SaturdayValidHours\" : [ 1, 1 ],\n    \"TuesdayValidHours\" : [ 4, 4 ],\n    \"MondayValidHours\" : [ 3, 3 ],\n    \"FridayValidHours\" : [ 4, 4 ],\n    \"SundayValidHours\" : [ 4, 4 ]\n  },\n  \"RoleId\" : 9,\n  \"ReasonName\" : \"ReasonName\",\n  \"AllowSessionPasswordRelease\" : true,\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"WasEvicted\" : true,\n  \"PendingReviewDurationBeforeEscalationMinutes\" : 4,\n  \"AccountRequestType\" : \"None\",\n  \"PolicyId\" : 7\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccessRequestLog>(exampleJson)
                        : default(AccessRequestLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AccountDiscoveryLog entries
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Accounts/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccountDiscoveryLogByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountDiscoveryLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAccountDiscoveryLogByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AccountDiscoveryLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 5,\n  \"AccountDiscoveryScheduleId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"DiscoveredAccounts\" : [ {\n    \"Status\" : \"None\",\n    \"DomainName\" : \"DomainName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ],\n    \"Name\" : \"Name\"\n  }, {\n    \"Status\" : \"None\",\n    \"DomainName\" : \"DomainName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ],\n    \"Name\" : \"Name\"\n  } ],\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 1,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 2,\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AccountDiscoveryLog>(exampleJson)
                        : default(AccountDiscoveryLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AccountDiscoveryLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Accounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAccountDiscoveryLogsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccountDiscoveryLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAccountDiscoveryLogsAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccountDiscoveryLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ProfileId\" : 5,\n  \"AccountDiscoveryScheduleId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"DiscoveredAccounts\" : [ {\n    \"Status\" : \"None\",\n    \"DomainName\" : \"DomainName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ],\n    \"Name\" : \"Name\"\n  }, {\n    \"Status\" : \"None\",\n    \"DomainName\" : \"DomainName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ],\n    \"Name\" : \"Name\"\n  } ],\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 1,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 2,\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"ProfileId\" : 5,\n  \"AccountDiscoveryScheduleId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"DiscoveredAccounts\" : [ {\n    \"Status\" : \"None\",\n    \"DomainName\" : \"DomainName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ],\n    \"Name\" : \"Name\"\n  }, {\n    \"Status\" : \"None\",\n    \"DomainName\" : \"DomainName\",\n    \"DiscoveredUserId\" : \"DiscoveredUserId\",\n    \"DiscoveredGroups\" : [ {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    }, {\n      \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n      \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n    } ],\n    \"Name\" : \"Name\"\n  } ],\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 1,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 2,\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccountDiscoveryLog>>(exampleJson)
                        : default(List<AccountDiscoveryLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of ApplianceLog entries
        /// </summary>
        /// <param name="category">Get activity that occurred for either audit category Pangaea.Data.Cassandra.ApplianceLogCategory.Patch or Pangaea.Data.Cassandra.ApplianceLogCategory.Appliance  (Preferred over filter)</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Appliances")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetApplianceLogAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ApplianceLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetApplianceLogAsync([FromQuery]ApplianceLogCategory category, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ApplianceLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"UserId\" : 0,\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"LogId\" : \"LogId\",\n  \"EventData\" : \"EventData\"\n}, {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"UserId\" : 0,\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"LogId\" : \"LogId\",\n  \"EventData\" : \"EventData\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ApplianceLog>>(exampleJson)
                        : default(List<ApplianceLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets ApplianceLog entry by id
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="category">Get activity that occurred for either audit category Pangaea.Data.Cassandra.ApplianceLogCategory.Patch or Pangaea.Data.Cassandra.ApplianceLogCategory.Appliance  (Preferred over filter)</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Id was not in a correct format</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Appliance Log does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Appliances/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetApplianceLogByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApplianceLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Id was not in a correct format")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetApplianceLogByIdAsync([FromRoute][Required]string id, [FromQuery]ApplianceLogCategory category, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApplianceLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ApplianceName\" : \"ApplianceName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"UserId\" : 0,\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"LogId\" : \"LogId\",\n  \"EventData\" : \"EventData\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ApplianceLog>(exampleJson)
                        : default(ApplianceLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of ArchiveActivityLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Archives")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetArchiveActivityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ArchiveActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetArchiveActivityAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ArchiveActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"ArchiveType\" : \"UploadBackup\",\n  \"ArchiveServerId\" : 6,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"FileName\" : \"FileName\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"SourcePath\" : \"SourcePath\",\n  \"DestinationPath\" : \"DestinationPath\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"FileId\" : \"FileId\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"ArchiveType\" : \"UploadBackup\",\n  \"ArchiveServerId\" : 6,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"FileName\" : \"FileName\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"SourcePath\" : \"SourcePath\",\n  \"DestinationPath\" : \"DestinationPath\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"FileId\" : \"FileId\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ArchiveActivityLog>>(exampleJson)
                        : default(List<ArchiveActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific ArchiveActivityLog entry
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Archives/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetArchiveActivityByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArchiveActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetArchiveActivityByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArchiveActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ApplianceName\" : \"ApplianceName\",\n  \"ArchiveType\" : \"UploadBackup\",\n  \"ArchiveServerId\" : 6,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"FileName\" : \"FileName\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountHasSshKey\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"Port\" : 36944,\n    \"ServiceAccountAssetPlatformType\" : \"Unknown\",\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 1,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"TransferProtocolType\" : \"Smb\",\n    \"ServiceAccountAssetPlatformId\" : 7,\n    \"ServiceAccountAssetId\" : 2,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"SourcePath\" : \"SourcePath\",\n  \"DestinationPath\" : \"DestinationPath\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"FileId\" : \"FileId\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ArchiveActivityLog>(exampleJson)
                        : default(ArchiveActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AssetDiscoveryLog entries by id
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Assets/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAssetDiscoveryLogByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AssetDiscoveryLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAssetDiscoveryLogByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AssetDiscoveryLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 1,\n  \"AssetDiscoveryJobId\" : 6,\n  \"DiscoveredAssets\" : [ {\n    \"Description\" : \"Description\",\n    \"Platform\" : \"Platform\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 9,\n      \"Name\" : \"Name\"\n    },\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"RelativeId\" : \"RelativeId\",\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"PlatformId\" : 2,\n    \"TestConnectionMessage\" : \"TestConnectionMessage\",\n    \"RuleName\" : \"RuleName\",\n    \"OperatingSystemName\" : \"OperatingSystemName\",\n    \"Architecture\" : \"Architecture\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"TestConnectionState\" : \"Unknown\",\n    \"ComputerCategory\" : \"ComputerCategory\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"TestConnectionLogId\" : \"TestConnectionLogId\",\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Location\" : \"Location\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Platform\" : \"Platform\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 9,\n      \"Name\" : \"Name\"\n    },\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"RelativeId\" : \"RelativeId\",\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"PlatformId\" : 2,\n    \"TestConnectionMessage\" : \"TestConnectionMessage\",\n    \"RuleName\" : \"RuleName\",\n    \"OperatingSystemName\" : \"OperatingSystemName\",\n    \"Architecture\" : \"Architecture\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"TestConnectionState\" : \"Unknown\",\n    \"ComputerCategory\" : \"ComputerCategory\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"TestConnectionLogId\" : \"TestConnectionLogId\",\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Location\" : \"Location\"\n  } ],\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"NetworkDiscoveryProperties\" : {\n    \"ScanOptions\" : {\n      \"ScanTimeout\" : 2,\n      \"OsFingerPrint\" : false\n    },\n    \"ScanRules\" : [ {\n      \"StartIp\" : \"StartIp\",\n      \"EndIp\" : \"EndIp\",\n      \"ExcludeIps\" : [ \"ExcludeIps\", \"ExcludeIps\" ]\n    }, {\n      \"StartIp\" : \"StartIp\",\n      \"EndIp\" : \"EndIp\",\n      \"ExcludeIps\" : [ \"ExcludeIps\", \"ExcludeIps\" ]\n    } ]\n  },\n  \"DirectoryDiscoveryProperties\" : {\n    \"DirectoryId\" : 5,\n    \"DirectoryPlatformDisplayName\" : \"DirectoryPlatformDisplayName\",\n    \"DirectoryPlatformType\" : \"Unknown\",\n    \"DirectoryPlatformId\" : 5,\n    \"DirectoryNetworkAddress\" : \"DirectoryNetworkAddress\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"AssetDiscoveryType\" : \"Directory\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetId\" : 4,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AssetDiscoveryLog>(exampleJson)
                        : default(AssetDiscoveryLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AssetDiscoveryLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Assets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAssetDiscoveryLogsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AssetDiscoveryLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAssetDiscoveryLogsAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AssetDiscoveryLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 1,\n  \"AssetDiscoveryJobId\" : 6,\n  \"DiscoveredAssets\" : [ {\n    \"Description\" : \"Description\",\n    \"Platform\" : \"Platform\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 9,\n      \"Name\" : \"Name\"\n    },\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"RelativeId\" : \"RelativeId\",\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"PlatformId\" : 2,\n    \"TestConnectionMessage\" : \"TestConnectionMessage\",\n    \"RuleName\" : \"RuleName\",\n    \"OperatingSystemName\" : \"OperatingSystemName\",\n    \"Architecture\" : \"Architecture\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"TestConnectionState\" : \"Unknown\",\n    \"ComputerCategory\" : \"ComputerCategory\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"TestConnectionLogId\" : \"TestConnectionLogId\",\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Location\" : \"Location\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Platform\" : \"Platform\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 9,\n      \"Name\" : \"Name\"\n    },\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"RelativeId\" : \"RelativeId\",\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"PlatformId\" : 2,\n    \"TestConnectionMessage\" : \"TestConnectionMessage\",\n    \"RuleName\" : \"RuleName\",\n    \"OperatingSystemName\" : \"OperatingSystemName\",\n    \"Architecture\" : \"Architecture\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"TestConnectionState\" : \"Unknown\",\n    \"ComputerCategory\" : \"ComputerCategory\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"TestConnectionLogId\" : \"TestConnectionLogId\",\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Location\" : \"Location\"\n  } ],\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"NetworkDiscoveryProperties\" : {\n    \"ScanOptions\" : {\n      \"ScanTimeout\" : 2,\n      \"OsFingerPrint\" : false\n    },\n    \"ScanRules\" : [ {\n      \"StartIp\" : \"StartIp\",\n      \"EndIp\" : \"EndIp\",\n      \"ExcludeIps\" : [ \"ExcludeIps\", \"ExcludeIps\" ]\n    }, {\n      \"StartIp\" : \"StartIp\",\n      \"EndIp\" : \"EndIp\",\n      \"ExcludeIps\" : [ \"ExcludeIps\", \"ExcludeIps\" ]\n    } ]\n  },\n  \"DirectoryDiscoveryProperties\" : {\n    \"DirectoryId\" : 5,\n    \"DirectoryPlatformDisplayName\" : \"DirectoryPlatformDisplayName\",\n    \"DirectoryPlatformType\" : \"Unknown\",\n    \"DirectoryPlatformId\" : 5,\n    \"DirectoryNetworkAddress\" : \"DirectoryNetworkAddress\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"AssetDiscoveryType\" : \"Directory\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetId\" : 4,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"AssetPartitionId\" : 1,\n  \"AssetDiscoveryJobId\" : 6,\n  \"DiscoveredAssets\" : [ {\n    \"Description\" : \"Description\",\n    \"Platform\" : \"Platform\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 9,\n      \"Name\" : \"Name\"\n    },\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"RelativeId\" : \"RelativeId\",\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"PlatformId\" : 2,\n    \"TestConnectionMessage\" : \"TestConnectionMessage\",\n    \"RuleName\" : \"RuleName\",\n    \"OperatingSystemName\" : \"OperatingSystemName\",\n    \"Architecture\" : \"Architecture\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"TestConnectionState\" : \"Unknown\",\n    \"ComputerCategory\" : \"ComputerCategory\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"TestConnectionLogId\" : \"TestConnectionLogId\",\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Location\" : \"Location\"\n  }, {\n    \"Description\" : \"Description\",\n    \"Platform\" : \"Platform\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n    \"Name\" : \"Name\",\n    \"PasswordProfile\" : {\n      \"Id\" : 9,\n      \"Name\" : \"Name\"\n    },\n    \"NetworkAddress\" : \"NetworkAddress\",\n    \"RelativeId\" : \"RelativeId\",\n    \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"PlatformId\" : 2,\n    \"TestConnectionMessage\" : \"TestConnectionMessage\",\n    \"RuleName\" : \"RuleName\",\n    \"OperatingSystemName\" : \"OperatingSystemName\",\n    \"Architecture\" : \"Architecture\",\n    \"DirectoryProperties\" : {\n      \"DirectoryId\" : 2,\n      \"DomainName\" : \"DomainName\",\n      \"DistinguishedName\" : \"DistinguishedName\",\n      \"ObjectSid\" : \"ObjectSid\",\n      \"ObjectGuid\" : \"ObjectGuid\",\n      \"NetbiosName\" : \"NetbiosName\",\n      \"DirectoryName\" : \"DirectoryName\"\n    },\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"DomainName\" : \"DomainName\",\n    \"TestConnectionState\" : \"Unknown\",\n    \"ComputerCategory\" : \"ComputerCategory\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"TestConnectionLogId\" : \"TestConnectionLogId\",\n    \"PlatformDisplayName\" : \"PlatformDisplayName\",\n    \"SshKeyProfile\" : {\n      \"Id\" : 3,\n      \"Name\" : \"Name\"\n    },\n    \"Id\" : 7,\n    \"Location\" : \"Location\"\n  } ],\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"NetworkDiscoveryProperties\" : {\n    \"ScanOptions\" : {\n      \"ScanTimeout\" : 2,\n      \"OsFingerPrint\" : false\n    },\n    \"ScanRules\" : [ {\n      \"StartIp\" : \"StartIp\",\n      \"EndIp\" : \"EndIp\",\n      \"ExcludeIps\" : [ \"ExcludeIps\", \"ExcludeIps\" ]\n    }, {\n      \"StartIp\" : \"StartIp\",\n      \"EndIp\" : \"EndIp\",\n      \"ExcludeIps\" : [ \"ExcludeIps\", \"ExcludeIps\" ]\n    } ]\n  },\n  \"DirectoryDiscoveryProperties\" : {\n    \"DirectoryId\" : 5,\n    \"DirectoryPlatformDisplayName\" : \"DirectoryPlatformDisplayName\",\n    \"DirectoryPlatformType\" : \"Unknown\",\n    \"DirectoryPlatformId\" : 5,\n    \"DirectoryNetworkAddress\" : \"DirectoryNetworkAddress\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetDiscoveryJobName\" : \"AssetDiscoveryJobName\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"AssetDiscoveryType\" : \"Directory\",\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetId\" : 4,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AssetDiscoveryLog>>(exampleJson)
                        : default(List<AssetDiscoveryLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the data and audit log maintenance settings.
        /// </summary>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        /// <response code="503">The service is unavailable. Try again.</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Maintenance")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAuditLogMaintenanceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AuditLogMaintenance), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAuditLogMaintenanceAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AuditLogMaintenance));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "{\n  \"DayOfWeek\" : \"Sunday\",\n  \"StartHour\" : 1,\n  \"ArchiveServerId\" : 1,\n  \"LastAuditLogSync\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"NextScheduledMaintenance\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"LastScheduledRetentionFailure\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"TimeZoneDisplayName\" : \"(UTC) Coordinated Universal Time\",\n  \"LastScheduledRetentionSuccess\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DaysToRetainLogs\" : 1294386370,\n  \"PurgeArchiveAuditLogs\" : false,\n  \"LastScheduledMaintenance\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TimeZoneId\" : \"UTC\",\n  \"LastDataSync\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AuditLogMaintenance>(exampleJson)
                        : default(AuditLogMaintenance);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets current state of the audit log stream service.  The audit log stream service is the ability for the audit log data to be requested by and streamed to a linked SPS appliance.
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/StreamService")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAuditLogStreamServiceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AuditLogStreamService), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AuditLogGetAuditLogStreamServiceAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AuditLogStreamService));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Enabled\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AuditLogStreamService>(exampleJson)
                        : default(AuditLogStreamService);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of audit log types
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetAuditTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AuditLogType>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have GlobalAdmin, UserAdmin, HelpdeskAdmin, ApplianceAdmin, OperationsAdmin, PolicyAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetAuditTypes()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AuditLogType>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ \"Logins\", \"Logins\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AuditLogType>>(exampleJson)
                        : default(List<AuditLogType>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific LicenseHistoryLog entry
        /// </summary>
        /// <param name="licenseType">The database ID of the object that was changed</param>
        /// <param name="logId">The database ID of the log entry</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Licenses/{licenseType}/{logId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetByLicenseHistoryByLogIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(LicenseHistoryLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetByLicenseHistoryByLogIdAsync([FromRoute][Required]LicensableModule licenseType, [FromRoute][Required]string logId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LicenseHistoryLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Status\" : \"None\",\n  \"DaysRemaining\" : 6,\n  \"IsExpired\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"InstallByDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TrialDays\" : 1,\n  \"SecretsBrokerLicense\" : {\n    \"SecretsUsed\" : 7,\n    \"MaxSecrets\" : 4\n  },\n  \"Type\" : \"Unknown\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"IsEnterprise\" : true,\n  \"PasswordManagementLicense\" : {\n    \"MaxUsers\" : 5,\n    \"SystemsUsed\" : 2,\n    \"Version\" : 5,\n    \"MaxDesktops\" : 7,\n    \"Model\" : \"User\",\n    \"MaxSystems\" : 3,\n    \"DesktopsUsed\" : 9,\n    \"UsersUsed\" : 2\n  },\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"OperationType\" : \"Create\",\n  \"Expires\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Module\" : \"PasswordManagement\",\n  \"Key\" : \"Key\",\n  \"IsValid\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<LicenseHistoryLog>(exampleJson)
                        : default(LicenseHistoryLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of ObjectChangeLog entries for the passed objectType and objectId.
        /// </summary>
        /// <param name="objectType">The type of object that was changed</param>
        /// <param name="objectId">The database ID of the object that was changed</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/ObjectChanges/{objectType}/{objectId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetByObjectIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObjectChangeLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult AuditLogGetByObjectIdAsync([FromRoute][Required]ObjectType objectType, [FromRoute][Required]string objectId, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ObjectChangeLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n}, {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ObjectChangeLog>>(exampleJson)
                        : default(List<ObjectChangeLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific of ObjectChangeLog entry for the passed objectType and objectId and logId.
        /// </summary>
        /// <param name="objectType">The type of object that was changed</param>
        /// <param name="objectId">The database ID of the object that was changed</param>
        /// <param name="logId">The database ID of the log entry</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/ObjectChanges/{objectType}/{objectId}/{logId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetByObjectLogIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObjectChangeLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult AuditLogGetByObjectLogIdAsync([FromRoute][Required]ObjectType objectType, [FromRoute][Required]string objectId, [FromRoute][Required]string logId, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ObjectChangeLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ObjectChangeLog>(exampleJson)
                        : default(ObjectChangeLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of ObjectChangeLog entries for the passed objectType.
        /// </summary>
        /// <param name="objectType">The type of object that was changed</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/ObjectChanges/{objectType}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetByObjectTypeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObjectChangeLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult AuditLogGetByObjectTypeAsync([FromRoute][Required]ObjectType objectType, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ObjectChangeLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n}, {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ObjectChangeLog>>(exampleJson)
                        : default(List<ObjectChangeLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of directory sync activity logs
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/DirectorySync")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDirectorySyncActivityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DirectorySyncActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDirectorySyncActivityAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DirectorySyncActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AssetPartitionId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"PlatformId\" : 1,\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"AssetPartitionId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"PlatformId\" : 1,\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DirectorySyncActivityLog>>(exampleJson)
                        : default(List<DirectorySyncActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets directory sync activity log entry for a specific task and ID
        /// </summary>
        /// <param name="taskName">The type of task</param>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/DirectorySync/{taskName}/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDirectorySyncActivityByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(DirectorySyncActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDirectorySyncActivityByIdAsync([FromRoute][Required]TaskNames taskName, [FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DirectorySyncActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"PlatformId\" : 1,\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DirectorySyncActivityLog>(exampleJson)
                        : default(DirectorySyncActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets directory sync activity log entries for a specific task
        /// </summary>
        /// <param name="taskName">The type of task</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/DirectorySync/{taskName}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDirectorySyncActivityByNameAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(DirectorySyncActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have UserAdmin, AssetAdmin, PartitionAdmin, ApplicationAuditor, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDirectorySyncActivityByNameAsync([FromRoute][Required]TaskNames taskName, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DirectorySyncActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"AssetPartitionId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"UserId\" : 0,\n  \"PlatformId\" : 1,\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DirectorySyncActivityLog>(exampleJson)
                        : default(DirectorySyncActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets accounts discovered from a particular discovery task
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Accounts/{id}/DiscoveredAccounts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDiscoveredAccountsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DiscoveredAccountLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDiscoveredAccountsAsync([FromRoute][Required]string id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DiscoveredAccountLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Status\" : \"None\",\n  \"DomainName\" : \"DomainName\",\n  \"DiscoveredUserId\" : \"DiscoveredUserId\",\n  \"DiscoveredGroups\" : [ {\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"Name\" : \"Name\"\n}, {\n  \"Status\" : \"None\",\n  \"DomainName\" : \"DomainName\",\n  \"DiscoveredUserId\" : \"DiscoveredUserId\",\n  \"DiscoveredGroups\" : [ {\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  }, {\n    \"DiscoveredGroupId\" : \"DiscoveredGroupId\",\n    \"DiscoveredGroupName\" : \"DiscoveredGroupName\"\n  } ],\n  \"Name\" : \"Name\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DiscoveredAccountLog>>(exampleJson)
                        : default(List<DiscoveredAccountLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the discovered assets from a specific job log
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Assets/{id}/DiscoveredAssets")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDiscoveredAssetsByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DiscoveredAsset>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDiscoveredAssetsByIdAsync([FromRoute][Required]string id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DiscoveredAsset>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Description\" : \"Description\",\n  \"Platform\" : \"Platform\",\n  \"ObjectSid\" : \"ObjectSid\",\n  \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RelativeId\" : \"RelativeId\",\n  \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformId\" : 2,\n  \"TestConnectionMessage\" : \"TestConnectionMessage\",\n  \"RuleName\" : \"RuleName\",\n  \"OperatingSystemName\" : \"OperatingSystemName\",\n  \"Architecture\" : \"Architecture\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"TestConnectionState\" : \"Unknown\",\n  \"ComputerCategory\" : \"ComputerCategory\",\n  \"ObjectGuid\" : \"ObjectGuid\",\n  \"TestConnectionLogId\" : \"TestConnectionLogId\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Location\" : \"Location\"\n}, {\n  \"Description\" : \"Description\",\n  \"Platform\" : \"Platform\",\n  \"ObjectSid\" : \"ObjectSid\",\n  \"OperatingSystemVersion\" : \"OperatingSystemVersion\",\n  \"Name\" : \"Name\",\n  \"PasswordProfile\" : {\n    \"Id\" : 9,\n    \"Name\" : \"Name\"\n  },\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"RelativeId\" : \"RelativeId\",\n  \"DiscoveredDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformId\" : 2,\n  \"TestConnectionMessage\" : \"TestConnectionMessage\",\n  \"RuleName\" : \"RuleName\",\n  \"OperatingSystemName\" : \"OperatingSystemName\",\n  \"Architecture\" : \"Architecture\",\n  \"DirectoryProperties\" : {\n    \"DirectoryId\" : 2,\n    \"DomainName\" : \"DomainName\",\n    \"DistinguishedName\" : \"DistinguishedName\",\n    \"ObjectSid\" : \"ObjectSid\",\n    \"ObjectGuid\" : \"ObjectGuid\",\n    \"NetbiosName\" : \"NetbiosName\",\n    \"DirectoryName\" : \"DirectoryName\"\n  },\n  \"DistinguishedName\" : \"DistinguishedName\",\n  \"DomainName\" : \"DomainName\",\n  \"TestConnectionState\" : \"Unknown\",\n  \"ComputerCategory\" : \"ComputerCategory\",\n  \"ObjectGuid\" : \"ObjectGuid\",\n  \"TestConnectionLogId\" : \"TestConnectionLogId\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"SshKeyProfile\" : {\n    \"Id\" : 3,\n    \"Name\" : \"Name\"\n  },\n  \"Id\" : 7,\n  \"Location\" : \"Location\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DiscoveredAsset>>(exampleJson)
                        : default(List<DiscoveredAsset>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets Services discovered from a particular discovery task
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Discovery Task does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Services/{id}/DiscoveredServices")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDiscoveredServicesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<DiscoveredServiceLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDiscoveredServicesAsync([FromRoute][Required]string id, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<DiscoveredServiceLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccountAssetId\" : 9,\n  \"AccountId\" : 7,\n  \"ServiceName\" : \"ServiceName\",\n  \"ServiceType\" : \"Unknown\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"IsServiceEnabled\" : true,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"DiscoveredAccount\" : \"DiscoveredAccount\",\n  \"ServiceDisplayName\" : \"ServiceDisplayName\",\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AccountAssetId\" : 9,\n  \"AccountId\" : 7,\n  \"ServiceName\" : \"ServiceName\",\n  \"ServiceType\" : \"Unknown\",\n  \"AccountAssetName\" : \"AccountAssetName\",\n  \"IsServiceEnabled\" : true,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"DiscoveredAccount\" : \"DiscoveredAccount\",\n  \"ServiceDisplayName\" : \"ServiceDisplayName\",\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<DiscoveredServiceLog>>(exampleJson)
                        : default(List<DiscoveredServiceLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a list of audit log discovery types
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetDiscoveryTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AuditLogDiscoveryType>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetDiscoveryTypes()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AuditLogDiscoveryType>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ \"Accounts\", \"Accounts\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AuditLogDiscoveryType>>(exampleJson)
                        : default(List<AuditLogDiscoveryType>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of LicenseHistoryLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Licenses")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetLicenseHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LicenseHistoryLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetLicenseHistoryAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LicenseHistoryLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Status\" : \"None\",\n  \"DaysRemaining\" : 6,\n  \"IsExpired\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"InstallByDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TrialDays\" : 1,\n  \"SecretsBrokerLicense\" : {\n    \"SecretsUsed\" : 7,\n    \"MaxSecrets\" : 4\n  },\n  \"Type\" : \"Unknown\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"IsEnterprise\" : true,\n  \"PasswordManagementLicense\" : {\n    \"MaxUsers\" : 5,\n    \"SystemsUsed\" : 2,\n    \"Version\" : 5,\n    \"MaxDesktops\" : 7,\n    \"Model\" : \"User\",\n    \"MaxSystems\" : 3,\n    \"DesktopsUsed\" : 9,\n    \"UsersUsed\" : 2\n  },\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"OperationType\" : \"Create\",\n  \"Expires\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Module\" : \"PasswordManagement\",\n  \"Key\" : \"Key\",\n  \"IsValid\" : true\n}, {\n  \"Status\" : \"None\",\n  \"DaysRemaining\" : 6,\n  \"IsExpired\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"InstallByDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TrialDays\" : 1,\n  \"SecretsBrokerLicense\" : {\n    \"SecretsUsed\" : 7,\n    \"MaxSecrets\" : 4\n  },\n  \"Type\" : \"Unknown\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"IsEnterprise\" : true,\n  \"PasswordManagementLicense\" : {\n    \"MaxUsers\" : 5,\n    \"SystemsUsed\" : 2,\n    \"Version\" : 5,\n    \"MaxDesktops\" : 7,\n    \"Model\" : \"User\",\n    \"MaxSystems\" : 3,\n    \"DesktopsUsed\" : 9,\n    \"UsersUsed\" : 2\n  },\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"OperationType\" : \"Create\",\n  \"Expires\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Module\" : \"PasswordManagement\",\n  \"Key\" : \"Key\",\n  \"IsValid\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<LicenseHistoryLog>>(exampleJson)
                        : default(List<LicenseHistoryLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of LicenseHistoryLog entries
        /// </summary>
        /// <param name="licenseType">Product license to get history for</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Licenses/{licenseType}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetLicenseHistoryByTypeAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LicenseHistoryLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetLicenseHistoryByTypeAsync([FromRoute][Required]LicensableModule licenseType, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LicenseHistoryLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Status\" : \"None\",\n  \"DaysRemaining\" : 6,\n  \"IsExpired\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"InstallByDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TrialDays\" : 1,\n  \"SecretsBrokerLicense\" : {\n    \"SecretsUsed\" : 7,\n    \"MaxSecrets\" : 4\n  },\n  \"Type\" : \"Unknown\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"IsEnterprise\" : true,\n  \"PasswordManagementLicense\" : {\n    \"MaxUsers\" : 5,\n    \"SystemsUsed\" : 2,\n    \"Version\" : 5,\n    \"MaxDesktops\" : 7,\n    \"Model\" : \"User\",\n    \"MaxSystems\" : 3,\n    \"DesktopsUsed\" : 9,\n    \"UsersUsed\" : 2\n  },\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"OperationType\" : \"Create\",\n  \"Expires\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Module\" : \"PasswordManagement\",\n  \"Key\" : \"Key\",\n  \"IsValid\" : true\n}, {\n  \"Status\" : \"None\",\n  \"DaysRemaining\" : 6,\n  \"IsExpired\" : true,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"EventName\" : \"Unknown\",\n  \"InstallByDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TrialDays\" : 1,\n  \"SecretsBrokerLicense\" : {\n    \"SecretsUsed\" : 7,\n    \"MaxSecrets\" : 4\n  },\n  \"Type\" : \"Unknown\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"IsEnterprise\" : true,\n  \"PasswordManagementLicense\" : {\n    \"MaxUsers\" : 5,\n    \"SystemsUsed\" : 2,\n    \"Version\" : 5,\n    \"MaxDesktops\" : 7,\n    \"Model\" : \"User\",\n    \"MaxSystems\" : 3,\n    \"DesktopsUsed\" : 9,\n    \"UsersUsed\" : 2\n  },\n  \"Id\" : \"Id\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"OperationType\" : \"Create\",\n  \"Expires\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Module\" : \"PasswordManagement\",\n  \"Key\" : \"Key\",\n  \"IsValid\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<LicenseHistoryLog>>(exampleJson)
                        : default(List<LicenseHistoryLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of audit log login entries
        /// </summary>
        /// <param name="startDate">Log time range start. Default 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Log time range end (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have HelpdeskAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Logins")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetLoginHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LoginActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetLoginHistoryAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LoginActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"LoginTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SecondaryAuthenticationProviderId\" : 1,\n  \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n  \"EventName\" : \"Unknown\",\n  \"LoginDuration\" : {\n    \"TotalMilliseconds\" : 3.616076749251911,\n    \"Hours\" : 5,\n    \"Days\" : 5,\n    \"Seconds\" : 9,\n    \"Milliseconds\" : 2,\n    \"Minutes\" : 7\n  },\n  \"Reason\" : \"Reason\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n  \"ErrorType\" : \"NoError\",\n  \"UserId\" : 0,\n  \"PrimaryAuthenticationProviderId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"LogId\" : \"LogId\"\n}, {\n  \"LoginTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SecondaryAuthenticationProviderId\" : 1,\n  \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n  \"EventName\" : \"Unknown\",\n  \"LoginDuration\" : {\n    \"TotalMilliseconds\" : 3.616076749251911,\n    \"Hours\" : 5,\n    \"Days\" : 5,\n    \"Seconds\" : 9,\n    \"Milliseconds\" : 2,\n    \"Minutes\" : 7\n  },\n  \"Reason\" : \"Reason\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n  \"ErrorType\" : \"NoError\",\n  \"UserId\" : 0,\n  \"PrimaryAuthenticationProviderId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"LogId\" : \"LogId\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<LoginActivityLog>>(exampleJson)
                        : default(List<LoginActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of LoginActivityLog entries
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have HelpdeskAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">User Authentication Log not found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Logins/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetLoginHistoryByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(LoginActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have HelpdeskAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetLoginHistoryByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LoginActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"LoginTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SecondaryAuthenticationProviderId\" : 1,\n  \"SecondaryAuthenticationProviderName\" : \"SecondaryAuthenticationProviderName\",\n  \"EventName\" : \"Unknown\",\n  \"LoginDuration\" : {\n    \"TotalMilliseconds\" : 3.616076749251911,\n    \"Hours\" : 5,\n    \"Days\" : 5,\n    \"Seconds\" : 9,\n    \"Milliseconds\" : 2,\n    \"Minutes\" : 7\n  },\n  \"Reason\" : \"Reason\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"PrimaryAuthenticationProviderName\" : \"PrimaryAuthenticationProviderName\",\n  \"ErrorType\" : \"NoError\",\n  \"UserId\" : 0,\n  \"PrimaryAuthenticationProviderId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"LogId\" : \"LogId\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<LoginActivityLog>(exampleJson)
                        : default(LoginActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of ObjectChangeLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="accountId">Get activity that occurred for a specific account (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/ObjectChanges")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetObjectChangesAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObjectChangeLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ApiError), description: "Must be an authenticated user")]
        public virtual IActionResult AuditLogGetObjectChangesAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]int? accountId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ObjectChangeLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n}, {\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Message\" : \"Message\",\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"OldValue\" : \"OldValue\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"RelatedObjectId\" : \"RelatedObjectId\",\n  \"RelatedObjectName\" : \"RelatedObjectName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"ParentObjectName\" : \"ParentObjectName\",\n  \"AssetPartitionId\" : 6,\n  \"Changes\" : [ {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  }, {\n    \"Type\" : \"Type\",\n    \"OldValue\" : \"OldValue\",\n    \"DisplayName\" : \"DisplayName\",\n    \"NewValue\" : \"NewValue\"\n  } ],\n  \"ObjectId\" : \"ObjectId\",\n  \"EventName\" : \"Unknown\",\n  \"ObjectName\" : \"ObjectName\",\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"NewValue\" : \"NewValue\",\n  \"Id\" : \"Id\",\n  \"OperationType\" : \"Create\",\n  \"ParentObjectId\" : \"ParentObjectId\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ObjectChangeLog>>(exampleJson)
                        : default(List<ObjectChangeLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of PasswordActivityLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="accountId">Get activity that occurred for a specific account (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Passwords")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPasswordActivityAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PasswordActivityLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPasswordActivityAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]int? accountId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PasswordActivityLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PasswordActivityLog>>(exampleJson)
                        : default(List<PasswordActivityLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of PasswordActivityLog entries
        /// </summary>
        /// <param name="taskName">The type of task</param>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Passwords/{taskName}/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPasswordActivityByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PasswordActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPasswordActivityByIdAsync([FromRoute][Required]TaskNames taskName, [FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets password activity log entries for a specific task
        /// </summary>
        /// <param name="taskName">The type of task</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Passwords/{taskName}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPasswordActivityByNameAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PasswordActivityLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPasswordActivityByNameAsync([FromRoute][Required]TaskNames taskName, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PasswordActivityLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 9,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SyncGroupName\" : \"SyncGroupName\",\n  \"ProfileName\" : \"ProfileName\",\n  \"SshKeyFingerprint\" : \"SshKeyFingerprint\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 3,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 1,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 7,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"SshKeySyncGroupId\" : 2,\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"SshKeySyncGroupName\" : \"SshKeySyncGroupName\",\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"SyncGroupId\" : 5,\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 6,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordActivityLog>(exampleJson)
                        : default(PasswordActivityLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of PatchHistory entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">60264 - Invalid Date Range</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Patches")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPatchHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PatchHistory>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60264 - Invalid Date Range")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPatchHistoryAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PatchHistory>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"InstallationError\" : \"InstallationError\",\n  \"Metadata\" : {\n    \"PatchVersion\" : {\n      \"Major\" : 6,\n      \"ServicePack\" : 5,\n      \"Minor\" : 1,\n      \"HotfixLevel\" : 5\n    },\n    \"Description\" : \"Description\",\n    \"Released\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SupportLink\" : \"SupportLink\",\n    \"Title\" : \"Title\",\n    \"TargetOsLevel\" : 0,\n    \"LtsType\" : \"LtsType\",\n    \"TargetOsVersions\" : [ \"TargetOsVersions\", \"TargetOsVersions\" ],\n    \"PayloadSizeBytes\" : 2,\n    \"OsOnlyPatch\" : true,\n    \"Id\" : \"Id\"\n  },\n  \"OldVersion\" : \"OldVersion\",\n  \"Id\" : \"Id\",\n  \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Success\" : true\n}, {\n  \"InstallationError\" : \"InstallationError\",\n  \"Metadata\" : {\n    \"PatchVersion\" : {\n      \"Major\" : 6,\n      \"ServicePack\" : 5,\n      \"Minor\" : 1,\n      \"HotfixLevel\" : 5\n    },\n    \"Description\" : \"Description\",\n    \"Released\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SupportLink\" : \"SupportLink\",\n    \"Title\" : \"Title\",\n    \"TargetOsLevel\" : 0,\n    \"LtsType\" : \"LtsType\",\n    \"TargetOsVersions\" : [ \"TargetOsVersions\", \"TargetOsVersions\" ],\n    \"PayloadSizeBytes\" : 2,\n    \"OsOnlyPatch\" : true,\n    \"Id\" : \"Id\"\n  },\n  \"OldVersion\" : \"OldVersion\",\n  \"Id\" : \"Id\",\n  \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Success\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PatchHistory>>(exampleJson)
                        : default(List<PatchHistory>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific patch history entry.
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">60246 - id was not a valid Guid</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Patch History not found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Patches/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPatchHistoryByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PatchHistory), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60246 - id was not a valid Guid")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPatchHistoryByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PatchHistory));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"InstallationError\" : \"InstallationError\",\n  \"Metadata\" : {\n    \"PatchVersion\" : {\n      \"Major\" : 6,\n      \"ServicePack\" : 5,\n      \"Minor\" : 1,\n      \"HotfixLevel\" : 5\n    },\n    \"Description\" : \"Description\",\n    \"Released\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"SupportLink\" : \"SupportLink\",\n    \"Title\" : \"Title\",\n    \"TargetOsLevel\" : 0,\n    \"LtsType\" : \"LtsType\",\n    \"TargetOsVersions\" : [ \"TargetOsVersions\", \"TargetOsVersions\" ],\n    \"PayloadSizeBytes\" : 2,\n    \"OsOnlyPatch\" : true,\n    \"Id\" : \"Id\"\n  },\n  \"OldVersion\" : \"OldVersion\",\n  \"Id\" : \"Id\",\n  \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Success\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PatchHistory>(exampleJson)
                        : default(PatchHistory);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific base64 encoded script
        /// </summary>
        /// <param name="platformId">Unique ID of the platform</param>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/PlatformScripts/{platformId}/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPlatformScriptByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPlatformScriptByIdAsync([FromRoute][Required]int? platformId, [FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of platform script log entries
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/PlatformScripts")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPlatformScriptIndexAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PlatformScriptLog>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPlatformScriptIndexAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PlatformScriptLog>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformId\" : 0,\n  \"Id\" : \"Id\"\n}, {\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformId\" : 0,\n  \"Id\" : \"Id\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<PlatformScriptLog>>(exampleJson)
                        : default(List<PlatformScriptLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets platform script log entries for a specific platform
        /// </summary>
        /// <param name="platformId">Unique ID of the platform</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have PolicyAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/PlatformScripts/{platformId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetPlatformScriptLogByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlatformScriptLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have PolicyAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetPlatformScriptLogByIdAsync([FromRoute][Required]int? platformId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PlatformScriptLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"PlatformId\" : 0,\n  \"Id\" : \"Id\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PlatformScriptLog>(exampleJson)
                        : default(PlatformScriptLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a specific script in raw format
        /// </summary>
        /// <param name="platformId">Unique ID of the platform</param>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/PlatformScripts/{platformId}/{id}/Raw")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetRawPlatformScriptByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetRawPlatformScriptByIdAsync([FromRoute][Required]int? platformId, [FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a ServiceDiscoveryLog entry by id
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">ServiceDiscoveryLog does not exist</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Services/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetServiceDiscoveryLogByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServiceDiscoveryLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetServiceDiscoveryLogByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServiceDiscoveryLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 5,\n  \"AccountDiscoveryScheduleId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 1,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"DiscoveredServices\" : [ {\n    \"AccountAssetId\" : 9,\n    \"AccountId\" : 7,\n    \"ServiceName\" : \"ServiceName\",\n    \"ServiceType\" : \"Unknown\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"IsServiceEnabled\" : true,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"DiscoveredAccount\" : \"DiscoveredAccount\",\n    \"ServiceDisplayName\" : \"ServiceDisplayName\",\n    \"AccountName\" : \"AccountName\"\n  }, {\n    \"AccountAssetId\" : 9,\n    \"AccountId\" : 7,\n    \"ServiceName\" : \"ServiceName\",\n    \"ServiceType\" : \"Unknown\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"IsServiceEnabled\" : true,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"DiscoveredAccount\" : \"DiscoveredAccount\",\n    \"ServiceDisplayName\" : \"ServiceDisplayName\",\n    \"AccountName\" : \"AccountName\"\n  } ],\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 2,\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServiceDiscoveryLog>(exampleJson)
                        : default(ServiceDiscoveryLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of ServiceDiscoveryLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/Services")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetServiceDiscoveryLogsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServiceDiscoveryLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetServiceDiscoveryLogsAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServiceDiscoveryLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"ProfileId\" : 5,\n  \"AccountDiscoveryScheduleId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 1,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"DiscoveredServices\" : [ {\n    \"AccountAssetId\" : 9,\n    \"AccountId\" : 7,\n    \"ServiceName\" : \"ServiceName\",\n    \"ServiceType\" : \"Unknown\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"IsServiceEnabled\" : true,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"DiscoveredAccount\" : \"DiscoveredAccount\",\n    \"ServiceDisplayName\" : \"ServiceDisplayName\",\n    \"AccountName\" : \"AccountName\"\n  }, {\n    \"AccountAssetId\" : 9,\n    \"AccountId\" : 7,\n    \"ServiceName\" : \"ServiceName\",\n    \"ServiceType\" : \"Unknown\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"IsServiceEnabled\" : true,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"DiscoveredAccount\" : \"DiscoveredAccount\",\n    \"ServiceDisplayName\" : \"ServiceDisplayName\",\n    \"AccountName\" : \"AccountName\"\n  } ],\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 2,\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"ProfileId\" : 5,\n  \"AccountDiscoveryScheduleId\" : 5,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"InstallSshKeyFingerprint\" : \"InstallSshKeyFingerprint\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 1,\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"DiscoveredServices\" : [ {\n    \"AccountAssetId\" : 9,\n    \"AccountId\" : 7,\n    \"ServiceName\" : \"ServiceName\",\n    \"ServiceType\" : \"Unknown\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"IsServiceEnabled\" : true,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"DiscoveredAccount\" : \"DiscoveredAccount\",\n    \"ServiceDisplayName\" : \"ServiceDisplayName\",\n    \"AccountName\" : \"AccountName\"\n  }, {\n    \"AccountAssetId\" : 9,\n    \"AccountId\" : 7,\n    \"ServiceName\" : \"ServiceName\",\n    \"ServiceType\" : \"Unknown\",\n    \"AccountAssetName\" : \"AccountAssetName\",\n    \"IsServiceEnabled\" : true,\n    \"AccountDomainName\" : \"AccountDomainName\",\n    \"DiscoveredAccount\" : \"DiscoveredAccount\",\n    \"ServiceDisplayName\" : \"ServiceDisplayName\",\n    \"AccountName\" : \"AccountName\"\n  } ],\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 2,\n  \"AccountDiscoveryScheduleName\" : \"AccountDiscoveryScheduleName\",\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ServiceDiscoveryLog>>(exampleJson)
                        : default(List<ServiceDiscoveryLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the audit log signing certificate
        /// </summary>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Retention/SigningCertificate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetSigningCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetSigningCertificateAsync([FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets the audit log signing certificate history
        /// </summary>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], ()</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Retention/SigningCertificate/History")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetSigningCertificateHistoryAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ServerCertificateLog>), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin, OperationsAdmin, SystemAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetSigningCertificateHistoryAsync([FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ServerCertificateLog>));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"ReplacedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"InstalledDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}, {\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"ReplacedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"InstalledDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ServerCertificateLog>>(exampleJson)
                        : default(List<ServerCertificateLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of SshKeyDiscoveryLog entries
        /// </summary>
        /// <param name="id">Database Id of the log to retrieve</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        /// <response code="404">Not Found</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/SshKeys/{id}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetSshKeyDiscoveryLogByIdAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(SshKeyDiscoveryLog), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetSshKeyDiscoveryLogByIdAsync([FromRoute][Required]string id, [FromQuery]string fields)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SshKeyDiscoveryLog));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"ProfileId\" : 5,\n  \"AccountId\" : 1,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"DiscoveredSshKeys\" : [ {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  }, {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  } ],\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 2,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 5,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 7,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SshKeyDiscoveryLog>(exampleJson)
                        : default(SshKeyDiscoveryLog);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of SshKeyDiscoveryLog entries
        /// </summary>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over &#x27;filter&#x27;)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="accountId">Get activity that occurred for a specific account (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Discovery/SshKeys")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogGetSshKeyDiscoveryLogsAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SshKeyDiscoveryLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have AssetAdmin, PartitionAdmin, ApplicationAuditor or Auditor permission")]
        public virtual IActionResult AuditLogGetSshKeyDiscoveryLogsAsync([FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]int? accountId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SshKeyDiscoveryLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"ProfileId\" : 5,\n  \"AccountId\" : 1,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"DiscoveredSshKeys\" : [ {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  }, {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  } ],\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 2,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 5,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 7,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n}, {\n  \"ProfileId\" : 5,\n  \"AccountId\" : 1,\n  \"ApplianceName\" : \"ApplianceName\",\n  \"IsDirectory\" : true,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ProfileName\" : \"ProfileName\",\n  \"DiscoveredSshKeys\" : [ {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  }, {\n    \"Comment\" : \"Comment\",\n    \"Options\" : \"Options\",\n    \"Fingerprint\" : \"Fingerprint\",\n    \"FingerprintSha256\" : \"FingerprintSha256\",\n    \"KeyType\" : \"Unknown\",\n    \"PublicKey\" : \"PublicKey\",\n    \"KeyLength\" : 9\n  } ],\n  \"CustomScriptParameters\" : [ {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  }, {\n    \"Type\" : \"String\",\n    \"Value\" : \"Value\",\n    \"Name\" : \"Name\"\n  } ],\n  \"SshKeyProfileId\" : 2,\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"Name\" : \"Unknown\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"NetworkAddress\" : \"NetworkAddress\",\n  \"PlatformId\" : 6,\n  \"ApplianceId\" : \"ApplianceId\",\n  \"AssetPartitionId\" : 5,\n  \"SshKeyProfileName\" : \"SshKeyProfileName\",\n  \"Log\" : [ {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"Status\" : \"Unknown\",\n    \"Message\" : \"Message\",\n    \"Timestamp\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"ConnectionProperties\" : {\n    \"EffectiveServiceAccountName\" : \"EffectiveServiceAccountName\",\n    \"ServiceAccountSshKeyProfileId\" : 1,\n    \"ServiceAccountHasSshKey\" : true,\n    \"RegisteredConnectorId\" : 1,\n    \"ServiceAccountSshKeyProfileName\" : \"ServiceAccountSshKeyProfileName\",\n    \"UseNamedPipeForServiceAccountConnection\" : true,\n    \"Instance\" : \"Instance\",\n    \"PrivilegeElevationCommand\" : \"PrivilegeElevationCommand\",\n    \"Port\" : 48874,\n    \"ServiceAccountSshKey\" : {\n      \"Comment\" : \"Comment\",\n      \"Fingerprint\" : \"Fingerprint\",\n      \"PrivateKey\" : \"PrivateKey\",\n      \"FingerprintSha256\" : \"FingerprintSha256\",\n      \"KeyType\" : \"Unknown\",\n      \"PublicKey\" : \"PublicKey\",\n      \"Passphrase\" : \"Passphrase\",\n      \"KeyLength\" : 4884\n    },\n    \"ServiceAccountId\" : 6,\n    \"ServiceAccountAssetName\" : \"ServiceAccountAssetName\",\n    \"HasSecretKey\" : true,\n    \"TacacsSecret\" : \"TacacsSecret\",\n    \"ServiceAccountSecurityId\" : \"ServiceAccountSecurityId\",\n    \"CommandTimeout\" : 13584,\n    \"ServiceAccountNetbiosName\" : \"ServiceAccountNetbiosName\",\n    \"EnablePassword\" : \"EnablePassword\",\n    \"WorkstationId\" : \"WorkstationId\",\n    \"SslThumbprint\" : \"SslThumbprint\",\n    \"EnableHasPassword\" : true,\n    \"ClientId\" : 737,\n    \"ServiceAccountDistinguishedName\" : \"ServiceAccountDistinguishedName\",\n    \"ServiceAccountPassword\" : \"ServiceAccountPassword\",\n    \"ServiceAccountCredentialType\" : \"None\",\n    \"ServiceAccountUniqueObjectId\" : \"ServiceAccountUniqueObjectId\",\n    \"ServiceAccountHasPassword\" : true,\n    \"ServiceAccountDomainName\" : \"ServiceAccountDomainName\",\n    \"UseSslEncryption\" : true,\n    \"ServiceAccountProfileName\" : \"ServiceAccountProfileName\",\n    \"HasTacacsSecret\" : true,\n    \"UseTopSecretInterval\" : true,\n    \"ServiceAccountName\" : \"ServiceAccountName\",\n    \"VerifySslCertificate\" : true,\n    \"OraclePrivileges\" : \"OraclePrivileges\",\n    \"SecretKey\" : \"SecretKey\",\n    \"ServiceAccountAssetPlatformId\" : 4,\n    \"ServiceAccountProfileId\" : 1,\n    \"ServiceName\" : \"ServiceName\",\n    \"AccessKeyId\" : \"AccessKeyId\",\n    \"ServiceAccountAssetId\" : 1,\n    \"EffectiveServiceAccountDistinguishedName\" : \"EffectiveServiceAccountDistinguishedName\",\n    \"ServiceAccountAssetPlatformDisplayName\" : \"ServiceAccountAssetPlatformDisplayName\"\n  },\n  \"EventName\" : \"Unknown\",\n  \"AccountDistinguishedName\" : \"AccountDistinguishedName\",\n  \"AssetName\" : \"AssetName\",\n  \"PlatformDisplayName\" : \"PlatformDisplayName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"UserId\" : 7,\n  \"Id\" : \"Id\",\n  \"PlatformType\" : \"Unknown\",\n  \"AssetId\" : 0,\n  \"AccountName\" : \"AccountName\",\n  \"AccountNetBiosName\" : \"AccountNetBiosName\",\n  \"RequestStatus\" : {\n    \"EndTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"Message\" : \"Message\",\n    \"State\" : \"Unknown\",\n    \"PercentComplete\" : 2,\n    \"Cancellable\" : true,\n    \"StartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"QueuedDuration\" : \"QueuedDuration\",\n    \"RunningDuration\" : \"RunningDuration\",\n    \"AcceptanceDuration\" : \"AcceptanceDuration\",\n    \"AcceptedTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"TotalDuration\" : \"TotalDuration\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SshKeyDiscoveryLog>>(exampleJson)
                        : default(List<SshKeyDiscoveryLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reset the audit log signing certificate
        /// </summary>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpDelete]
        [Route("/service/core/v4/AuditLog/Retention/SigningCertificate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogResetSigningCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult AuditLogResetSigningCertificateAsync()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Schedule a data maintenance job to run now. Supports cancellation during archiving by force complete of the cluster lock.
        /// </summary>
        /// <param name="archiveOnly">If true, this is a test run and we will not purge audit logs after archive. Defaults to false.</param>
        /// <param name="syncAuditData">If true, sync the audit data after archive/purge completes. Defaults to false.</param>
        /// <response code="202">Accepted</response>
        /// <response code="204">NoContent - if archiving is not requested</response>
        /// <response code="400">60974 - Audit log maintenance must be configured with an archive server to run with the archive only option.</response>
        /// <response code="403">This action can only be performed on the primary appliance (not a replica)</response>
        /// <response code="404">Not Found</response>
        [HttpPost]
        [Route("/service/core/v4/AuditLog/Maintenance/RunNow")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogRunNowAsync")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "60974 - Audit log maintenance must be configured with an archive server to run with the archive only option.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "This action can only be performed on the primary appliance (not a replica)")]
        public virtual IActionResult AuditLogRunNowAsync([FromQuery]bool? archiveOnly, [FromQuery]bool? syncAuditData)
        { 
            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update the data and audit log maintenance settings.
        /// </summary>
        /// <param name="body">Settings to save</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">This action cannot be performed in the current appliance state.</response>
        /// <response code="404">Not Found</response>
        /// <response code="503">The service is unavailable. Try again.</response>
        [HttpPut]
        [Route("/service/core/v4/AuditLog/Maintenance")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogSaveAuditLogMaintenanceAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AuditLogMaintenance), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "This action cannot be performed in the current appliance state.")]
        public virtual IActionResult AuditLogSaveAuditLogMaintenanceAsync([FromBody]AuditLogMaintenance body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AuditLogMaintenance));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503);
            string exampleJson = null;
            exampleJson = "{\n  \"DayOfWeek\" : \"Sunday\",\n  \"StartHour\" : 1,\n  \"ArchiveServerId\" : 1,\n  \"LastAuditLogSync\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"NextScheduledMaintenance\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"LastScheduledRetentionFailure\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"ArchiveServerName\" : \"ArchiveServerName\",\n  \"TimeZoneDisplayName\" : \"(UTC) Coordinated Universal Time\",\n  \"LastScheduledRetentionSuccess\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"DaysToRetainLogs\" : 1294386370,\n  \"PurgeArchiveAuditLogs\" : false,\n  \"LastScheduledMaintenance\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"TimeZoneId\" : \"UTC\",\n  \"LastDataSync\" : \"2000-01-23T04:56:07.000+00:00\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AuditLogMaintenance>(exampleJson)
                        : default(AuditLogMaintenance);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the audit log signing certificate
        /// </summary>
        /// <param name="body">Settings to save</param>
        /// <response code="200">Success</response>
        /// <response code="403">Must have ApplianceAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/AuditLog/Retention/SigningCertificate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogSaveSigningCertificateAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(ServerCertificate), description: "Success")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin permission")]
        public virtual IActionResult AuditLogSaveSigningCertificateAsync([FromBody]ServerCertificate body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ServerCertificate));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Thumbprint\" : \"Thumbprint\",\n  \"Passphrase\" : \"Passphrase\",\n  \"DnsNames\" : [ \"DnsNames\", \"DnsNames\" ],\n  \"NotAfter\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"Subject\" : \"Subject\",\n  \"IpAddresses\" : [ \"IpAddresses\", \"IpAddresses\" ],\n  \"CertificateType\" : \"Unknown\",\n  \"IssuerCertificates\" : [ \"IssuerCertificates\", \"IssuerCertificates\" ],\n  \"SystemOwnedPrivateKey\" : true,\n  \"IsCertificateAuthority\" : true,\n  \"Base64CertificateData\" : \"Base64CertificateData\",\n  \"NotBefore\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"IssuedBy\" : \"IssuedBy\",\n  \"IsSystemOwned\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ServerCertificate>(exampleJson)
                        : default(ServerCertificate);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Gets a set of AuditSearchLog entries
        /// </summary>
        /// <param name="category">Get activity that occurred for a specific audit category (Preferred over filter)</param>
        /// <param name="startDate">Get activity that occurred after this date. Defaults to 1 day before endDate. (Preferred over filter)</param>
        /// <param name="endDate">Get activity that occurred before this date. Defaults to now. (Preferred over filter)</param>
        /// <param name="userId">Get activity that occurred for a specific user (Preferred over filter)</param>
        /// <param name="assetId">Get activity that occurred for a specific asset (Preferred over filter)</param>
        /// <param name="accountId">Get activity that occurred for a specific account (Preferred over filter)</param>
        /// <param name="filter">Filter results. Available operators: eq, ne, gt, ge, lt, le, and, or, not, contains, ieq, icontains, in [ {item1}, {item2}, etc], (). Use \\ to escape quotes in strings.</param>
        /// <param name="page">Which page (starting with 0) of data to return</param>
        /// <param name="limit">The size of a page of data</param>
        /// <param name="count">When specified, the method will return a single integer value representing the total number of items that match the given filter criteria. If specified, the fields and orderby parameter values are ignored.</param>
        /// <param name="fields">List of property names (comma-separated) to include in entity output. Prepend list with - to exclude from output.</param>
        /// <param name="orderby">List of property names (comma-separated) to sort entities by. Prepend properties with - for  descending.  WARNING - Not fully supported for audit log queries</param>
        /// <param name="q">Search all string fields for the specified value</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Must be an authenticated user.</response>
        /// <response code="403">Forbidden</response>
        [HttpGet]
        [Route("/service/core/v4/AuditLog/Search")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogSearchAuditLogAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AuditSearchLog>), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Forbidden")]
        public virtual IActionResult AuditLogSearchAuditLogAsync([FromQuery]AuditLogCategory category, [FromQuery]DateTime? startDate, [FromQuery]DateTime? endDate, [FromQuery]int? userId, [FromQuery]int? assetId, [FromQuery]int? accountId, [FromQuery]string filter, [FromQuery]int? page, [FromQuery]int? limit, [FromQuery]bool? count, [FromQuery]string fields, [FromQuery]string orderby, [FromQuery]string q)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AuditSearchLog>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Category\" : \"Unknown\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"LicenseType\" : \"PasswordManagement\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"ErrorType\" : \"NoError\",\n  \"RequesterName\" : \"RequesterName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 6,\n  \"AssetPartitionId\" : 2,\n  \"RequestId\" : \"RequestId\",\n  \"ObjectId\" : \"ObjectId\",\n  \"RequesterId\" : 1,\n  \"Data\" : \"Data\",\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"TaskName\" : \"Unknown\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n}, {\n  \"AccessRequestType\" : \"Password\",\n  \"ApplianceName\" : \"ApplianceName\",\n  \"Category\" : \"Unknown\",\n  \"AccountId\" : 5,\n  \"EventDisplayName\" : \"EventDisplayName\",\n  \"LogTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"SubmittedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"AccountDomainName\" : \"AccountDomainName\",\n  \"SessionSpsNodeIpAddress\" : \"SessionSpsNodeIpAddress\",\n  \"LicenseType\" : \"PasswordManagement\",\n  \"AssetPartitionName\" : \"AssetPartitionName\",\n  \"ObjectType\" : \"NotSpecified\",\n  \"ErrorType\" : \"NoError\",\n  \"RequesterName\" : \"RequesterName\",\n  \"ApplianceId\" : \"ApplianceId\",\n  \"SessionId\" : 6,\n  \"AssetPartitionId\" : 2,\n  \"RequestId\" : \"RequestId\",\n  \"ObjectId\" : \"ObjectId\",\n  \"RequesterId\" : 1,\n  \"Data\" : \"Data\",\n  \"EventName\" : \"Unknown\",\n  \"AssetName\" : \"AssetName\",\n  \"ObjectName\" : \"ObjectName\",\n  \"UserProperties\" : {\n    \"UserWasHelpdeskAdmin\" : true,\n    \"UserName\" : \"UserName\",\n    \"UserWasPartitionOwner\" : true,\n    \"DomainName\" : \"DomainName\",\n    \"UserWasSystemAuditor\" : true,\n    \"UserWasAuditor\" : true,\n    \"UserWasApplianceAdmin\" : true,\n    \"UserWasGlobalAdmin\" : true,\n    \"UserWasDirectoryAdmin\" : true,\n    \"UserWasOperationsAdmin\" : true,\n    \"UserWasApplicationAuditor\" : true,\n    \"ClientIpAddress\" : \"ClientIpAddress\",\n    \"UserWasAssetAdmin\" : true,\n    \"UserWasUserAdmin\" : true,\n    \"UserDisplayName\" : \"UserDisplayName\",\n    \"UserWasPolicyAdmin\" : true\n  },\n  \"AssetNetworkAddress\" : \"AssetNetworkAddress\",\n  \"TaskName\" : \"Unknown\",\n  \"UserId\" : 0,\n  \"Id\" : \"Id\",\n  \"RecordingProperties\" : {\n    \"HasRecording\" : true,\n    \"RecordingId\" : \"RecordingId\",\n    \"SpsApplianceId\" : 7,\n    \"SessionResult\" : \"SessionResult\",\n    \"IsLive\" : true,\n    \"DownloadUrl\" : \"DownloadUrl\"\n  },\n  \"AssetId\" : 5,\n  \"AccountName\" : \"AccountName\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AuditSearchLog>>(exampleJson)
                        : default(List<AuditSearchLog>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the audit log streaming service.
        /// </summary>
        /// <param name="body">Audit log streaming service</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="403">Must have ApplianceAdmin or PolicyAdmin permission</response>
        /// <response code="404">Not Found</response>
        [HttpPut]
        [Route("/service/core/v4/AuditLog/StreamService")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AuditLogUpdateAccessRequestBrokerAsync")]
        [SwaggerResponse(statusCode: 200, type: typeof(AuditLogStreamService), description: "Success")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Bad Request")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "Must have ApplianceAdmin or PolicyAdmin permission")]
        public virtual IActionResult AuditLogUpdateAccessRequestBrokerAsync([FromBody]AuditLogStreamService body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AuditLogStreamService));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"Enabled\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<AuditLogStreamService>(exampleJson)
                        : default(AuditLogStreamService);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
